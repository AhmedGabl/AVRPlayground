
EXTI0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00003ab0  00003b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000cc  008000cc  00003bb0  2**0
                  ALLOC
  3 .stab         00003420  00000000  00000000  00003bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f7e  00000000  00000000  00006fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000090ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000923d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b282  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c383  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d308  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__vector_1>
       8:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__vector_2>
       c:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 66 07 	jmp	0xecc	; 0xecc <__vector_10>
      2c:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <main>
      8a:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <TMR0_voidSetDelay_ms_usingCTC+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
     cac:	ec e5       	ldi	r30, 0x5C	; 92
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	89 ef       	ldi	r24, 0xF9	; 249
     cb2:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	cc 01       	movw	r24, r24
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	80 93 d6 00 	sts	0x00D6, r24
     cc2:	90 93 d7 00 	sts	0x00D7, r25
     cc6:	a0 93 d8 00 	sts	0x00D8, r26
     cca:	b0 93 d9 00 	sts	0x00D9, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle) && (0 <= copy_u8DutyCycle)) {
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	85 36       	cpi	r24, 0x65	; 101
     ce8:	d0 f4       	brcc	.+52     	; 0xd1e <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
     cea:	ec e5       	ldi	r30, 0x5C	; 92
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	48 2f       	mov	r20, r24
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	ca 01       	movw	r24, r20
     cf6:	9c 01       	movw	r18, r24
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	c9 01       	movw	r24, r18
     cfe:	96 95       	lsr	r25
     d00:	98 2f       	mov	r25, r24
     d02:	88 27       	eor	r24, r24
     d04:	97 95       	ror	r25
     d06:	87 95       	ror	r24
     d08:	82 1b       	sub	r24, r18
     d0a:	93 0b       	sbc	r25, r19
     d0c:	84 0f       	add	r24, r20
     d0e:	95 1f       	adc	r25, r21
     d10:	24 e6       	ldi	r18, 0x64	; 100
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	b9 01       	movw	r22, r18
     d16:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__udivmodhi4>
     d1a:	cb 01       	movw	r24, r22
     d1c:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
     d1e:	0f 90       	pop	r0
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
     d2e:	a3 e5       	ldi	r26, 0x53	; 83
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e3 e5       	ldi	r30, 0x53	; 83
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 64       	ori	r24, 0x40	; 64
     d3a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
     d3c:	a3 e5       	ldi	r26, 0x53	; 83
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e3 e5       	ldi	r30, 0x53	; 83
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	87 7f       	andi	r24, 0xF7	; 247
     d48:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
     d4a:	a3 e5       	ldi	r26, 0x53	; 83
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e3 e5       	ldi	r30, 0x53	; 83
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 7e       	andi	r24, 0xEF	; 239
     d56:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
     d58:	a3 e5       	ldi	r26, 0x53	; 83
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e3 e5       	ldi	r30, 0x53	; 83
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 62       	ori	r24, 0x20	; 32
     d64:	8c 93       	st	X, r24
#endif

#endif
}
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
     d74:	a3 e5       	ldi	r26, 0x53	; 83
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e3 e5       	ldi	r30, 0x53	; 83
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
     d82:	a3 e5       	ldi	r26, 0x53	; 83
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e3 e5       	ldi	r30, 0x53	; 83
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8b 7f       	andi	r24, 0xFB	; 251
     d9c:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
     dac:	a3 e5       	ldi	r26, 0x53	; 83
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e3 e5       	ldi	r30, 0x53	; 83
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     dba:	a3 e5       	ldi	r26, 0x53	; 83
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 e5       	ldi	r30, 0x53	; 83
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8d 7f       	andi	r24, 0xFD	; 253
     dc6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     dc8:	a3 e5       	ldi	r26, 0x53	; 83
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e3 e5       	ldi	r30, 0x53	; 83
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8b 7f       	andi	r24, 0xFB	; 251
     dd4:	8c 93       	st	X, r24
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <TMR0_voidSetCallBackOVF+0x6>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	31 f0       	breq	.+12     	; 0xdfe <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	90 93 cd 00 	sts	0x00CD, r25
     dfa:	80 93 cc 00 	sts	0x00CC, r24
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <TMR0_voidSetCallBackCTC+0x6>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	31 f0       	breq	.+12     	; 0xe2a <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	90 93 cf 00 	sts	0x00CF, r25
     e26:	80 93 ce 00 	sts	0x00CE, r24
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
     e5e:	80 91 d0 00 	lds	r24, 0x00D0
     e62:	90 91 d1 00 	lds	r25, 0x00D1
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	90 93 d1 00 	sts	0x00D1, r25
     e6c:	80 93 d0 00 	sts	0x00D0, r24

	if (TMR0_ovCount == local_u16ovCounter) {
     e70:	80 91 d0 00 	lds	r24, 0x00D0
     e74:	90 91 d1 00 	lds	r25, 0x00D1
     e78:	23 e0       	ldi	r18, 0x03	; 3
     e7a:	81 3d       	cpi	r24, 0xD1	; 209
     e7c:	92 07       	cpc	r25, r18
     e7e:	99 f4       	brne	.+38     	; 0xea6 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
     e80:	e2 e5       	ldi	r30, 0x52	; 82
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	81 e7       	ldi	r24, 0x71	; 113
     e86:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
     e88:	10 92 d1 00 	sts	0x00D1, r1
     e8c:	10 92 d0 00 	sts	0x00D0, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
     e90:	80 91 cc 00 	lds	r24, 0x00CC
     e94:	90 91 cd 00 	lds	r25, 0x00CD
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	29 f0       	breq	.+10     	; 0xea6 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
     e9c:	e0 91 cc 00 	lds	r30, 0x00CC
     ea0:	f0 91 cd 00 	lds	r31, 0x00CD
     ea4:	09 95       	icall
		}
	}
}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     ecc:	1f 92       	push	r1
     ece:	0f 92       	push	r0
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	0f 92       	push	r0
     ed4:	11 24       	eor	r1, r1
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
     ef6:	80 91 d2 00 	lds	r24, 0x00D2
     efa:	90 91 d3 00 	lds	r25, 0x00D3
     efe:	a0 91 d4 00 	lds	r26, 0x00D4
     f02:	b0 91 d5 00 	lds	r27, 0x00D5
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	a1 1d       	adc	r26, r1
     f0a:	b1 1d       	adc	r27, r1
     f0c:	80 93 d2 00 	sts	0x00D2, r24
     f10:	90 93 d3 00 	sts	0x00D3, r25
     f14:	a0 93 d4 00 	sts	0x00D4, r26
     f18:	b0 93 d5 00 	sts	0x00D5, r27

	if (private_ctcCounter == local_u32CTCCounter) {
     f1c:	20 91 d6 00 	lds	r18, 0x00D6
     f20:	30 91 d7 00 	lds	r19, 0x00D7
     f24:	40 91 d8 00 	lds	r20, 0x00D8
     f28:	50 91 d9 00 	lds	r21, 0x00D9
     f2c:	80 91 d2 00 	lds	r24, 0x00D2
     f30:	90 91 d3 00 	lds	r25, 0x00D3
     f34:	a0 91 d4 00 	lds	r26, 0x00D4
     f38:	b0 91 d5 00 	lds	r27, 0x00D5
     f3c:	28 17       	cp	r18, r24
     f3e:	39 07       	cpc	r19, r25
     f40:	4a 07       	cpc	r20, r26
     f42:	5b 07       	cpc	r21, r27
     f44:	99 f4       	brne	.+38     	; 0xf6c <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
     f46:	10 92 d2 00 	sts	0x00D2, r1
     f4a:	10 92 d3 00 	sts	0x00D3, r1
     f4e:	10 92 d4 00 	sts	0x00D4, r1
     f52:	10 92 d5 00 	sts	0x00D5, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
     f56:	80 91 ce 00 	lds	r24, 0x00CE
     f5a:	90 91 cf 00 	lds	r25, 0x00CF
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	29 f0       	breq	.+10     	; 0xf6c <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
     f62:	e0 91 ce 00 	lds	r30, 0x00CE
     f66:	f0 91 cf 00 	lds	r31, 0x00CF
     f6a:	09 95       	icall
		}
	}
}
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti

00000f92 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	0f 92       	push	r0
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
     f9e:	ec e5       	ldi	r30, 0x5C	; 92
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	80 83       	st	Z, r24
}
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <Port_Init+0x6>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <Port_Init+0x8>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <Port_Init+0xa>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
     fc0:	1a 82       	std	Y+2, r1	; 0x02
     fc2:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i < 32; i++) {
     fc4:	1a 82       	std	Y+2, r1	; 0x02
     fc6:	19 82       	std	Y+1, r1	; 0x01
     fc8:	72 c1       	rjmp	.+740    	; 0x12ae <Port_Init+0x300>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
     fca:	29 81       	ldd	r18, Y+1	; 0x01
     fcc:	3a 81       	ldd	r19, Y+2	; 0x02
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	28 0f       	add	r18, r24
     fd6:	39 1f       	adc	r19, r25
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	80 81       	ld	r24, Z
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3e 83       	std	Y+6, r19	; 0x06
     fea:	2d 83       	std	Y+5, r18	; 0x05
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <Port_Init+0x4a>
     ff6:	67 c0       	rjmp	.+206    	; 0x10c6 <Port_Init+0x118>
     ff8:	2d 81       	ldd	r18, Y+5	; 0x05
     ffa:	3e 81       	ldd	r19, Y+6	; 0x06
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	2c f4       	brge	.+10     	; 0x100c <Port_Init+0x5e>
    1002:	8d 81       	ldd	r24, Y+5	; 0x05
    1004:	9e 81       	ldd	r25, Y+6	; 0x06
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	71 f0       	breq	.+28     	; 0x1026 <Port_Init+0x78>
    100a:	4c c1       	rjmp	.+664    	; 0x12a4 <Port_Init+0x2f6>
    100c:	2d 81       	ldd	r18, Y+5	; 0x05
    100e:	3e 81       	ldd	r19, Y+6	; 0x06
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <Port_Init+0x6a>
    1016:	a7 c0       	rjmp	.+334    	; 0x1166 <Port_Init+0x1b8>
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <Port_Init+0x76>
    1022:	f1 c0       	rjmp	.+482    	; 0x1206 <Port_Init+0x258>
    1024:	3f c1       	rjmp	.+638    	; 0x12a4 <Port_Init+0x2f6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1026:	29 81       	ldd	r18, Y+1	; 0x01
    1028:	3a 81       	ldd	r19, Y+2	; 0x02
    102a:	c9 01       	movw	r24, r18
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	28 0f       	add	r18, r24
    1032:	39 1f       	adc	r19, r25
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	fc 01       	movw	r30, r24
    103a:	e2 0f       	add	r30, r18
    103c:	f3 1f       	adc	r31, r19
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	01 f5       	brne	.+64     	; 0x1084 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1044:	aa e3       	ldi	r26, 0x3A	; 58
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ea e3       	ldi	r30, 0x3A	; 58
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	29 81       	ldd	r18, Y+1	; 0x01
    1052:	3a 81       	ldd	r19, Y+2	; 0x02
    1054:	c9 01       	movw	r24, r18
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	28 0f       	add	r18, r24
    105c:	39 1f       	adc	r19, r25
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	fc 01       	movw	r30, r24
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	81 81       	ldd	r24, Z+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <Port_Init+0xcc>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <Port_Init+0xc8>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	10 c1       	rjmp	.+544    	; 0x12a4 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1084:	aa e3       	ldi	r26, 0x3A	; 58
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e3       	ldi	r30, 0x3A	; 58
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	29 81       	ldd	r18, Y+1	; 0x01
    1092:	3a 81       	ldd	r19, Y+2	; 0x02
    1094:	c9 01       	movw	r24, r18
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	28 0f       	add	r18, r24
    109c:	39 1f       	adc	r19, r25
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	fc 01       	movw	r30, r24
    10a4:	e2 0f       	add	r30, r18
    10a6:	f3 1f       	adc	r31, r19
    10a8:	81 81       	ldd	r24, Z+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <Port_Init+0x10c>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <Port_Init+0x108>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	ef c0       	rjmp	.+478    	; 0x12a4 <Port_Init+0x2f6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    10c6:	29 81       	ldd	r18, Y+1	; 0x01
    10c8:	3a 81       	ldd	r19, Y+2	; 0x02
    10ca:	c9 01       	movw	r24, r18
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	28 0f       	add	r18, r24
    10d2:	39 1f       	adc	r19, r25
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	fc 01       	movw	r30, r24
    10da:	e2 0f       	add	r30, r18
    10dc:	f3 1f       	adc	r31, r19
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	01 f5       	brne	.+64     	; 0x1124 <Port_Init+0x176>
				SET_BIT(DDRB, pin_cfg[i].pin);
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	29 81       	ldd	r18, Y+1	; 0x01
    10f2:	3a 81       	ldd	r19, Y+2	; 0x02
    10f4:	c9 01       	movw	r24, r18
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	28 0f       	add	r18, r24
    10fc:	39 1f       	adc	r19, r25
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	fc 01       	movw	r30, r24
    1104:	e2 0f       	add	r30, r18
    1106:	f3 1f       	adc	r31, r19
    1108:	81 81       	ldd	r24, Z+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <Port_Init+0x16c>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <Port_Init+0x168>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	c0 c0       	rjmp	.+384    	; 0x12a4 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1124:	a7 e3       	ldi	r26, 0x37	; 55
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e7 e3       	ldi	r30, 0x37	; 55
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	29 81       	ldd	r18, Y+1	; 0x01
    1132:	3a 81       	ldd	r19, Y+2	; 0x02
    1134:	c9 01       	movw	r24, r18
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	28 0f       	add	r18, r24
    113c:	39 1f       	adc	r19, r25
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	fc 01       	movw	r30, r24
    1144:	e2 0f       	add	r30, r18
    1146:	f3 1f       	adc	r31, r19
    1148:	81 81       	ldd	r24, Z+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <Port_Init+0x1ac>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <Port_Init+0x1a8>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	9f c0       	rjmp	.+318    	; 0x12a4 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1166:	29 81       	ldd	r18, Y+1	; 0x01
    1168:	3a 81       	ldd	r19, Y+2	; 0x02
    116a:	c9 01       	movw	r24, r18
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	28 0f       	add	r18, r24
    1172:	39 1f       	adc	r19, r25
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	fc 01       	movw	r30, r24
    117a:	e2 0f       	add	r30, r18
    117c:	f3 1f       	adc	r31, r19
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	01 f5       	brne	.+64     	; 0x11c4 <Port_Init+0x216>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1184:	a4 e3       	ldi	r26, 0x34	; 52
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e4 e3       	ldi	r30, 0x34	; 52
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	29 81       	ldd	r18, Y+1	; 0x01
    1192:	3a 81       	ldd	r19, Y+2	; 0x02
    1194:	c9 01       	movw	r24, r18
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	28 0f       	add	r18, r24
    119c:	39 1f       	adc	r19, r25
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	fc 01       	movw	r30, r24
    11a4:	e2 0f       	add	r30, r18
    11a6:	f3 1f       	adc	r31, r19
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <Port_Init+0x20c>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <Port_Init+0x208>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	70 c0       	rjmp	.+224    	; 0x12a4 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    11c4:	a4 e3       	ldi	r26, 0x34	; 52
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e4 e3       	ldi	r30, 0x34	; 52
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	29 81       	ldd	r18, Y+1	; 0x01
    11d2:	3a 81       	ldd	r19, Y+2	; 0x02
    11d4:	c9 01       	movw	r24, r18
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	28 0f       	add	r18, r24
    11dc:	39 1f       	adc	r19, r25
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	fc 01       	movw	r30, r24
    11e4:	e2 0f       	add	r30, r18
    11e6:	f3 1f       	adc	r31, r19
    11e8:	81 81       	ldd	r24, Z+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <Port_Init+0x24c>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <Port_Init+0x248>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	4f c0       	rjmp	.+158    	; 0x12a4 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1206:	29 81       	ldd	r18, Y+1	; 0x01
    1208:	3a 81       	ldd	r19, Y+2	; 0x02
    120a:	c9 01       	movw	r24, r18
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	28 0f       	add	r18, r24
    1212:	39 1f       	adc	r19, r25
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	fc 01       	movw	r30, r24
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	01 f5       	brne	.+64     	; 0x1264 <Port_Init+0x2b6>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1224:	a1 e3       	ldi	r26, 0x31	; 49
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e1 e3       	ldi	r30, 0x31	; 49
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	29 81       	ldd	r18, Y+1	; 0x01
    1232:	3a 81       	ldd	r19, Y+2	; 0x02
    1234:	c9 01       	movw	r24, r18
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	28 0f       	add	r18, r24
    123c:	39 1f       	adc	r19, r25
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	fc 01       	movw	r30, r24
    1244:	e2 0f       	add	r30, r18
    1246:	f3 1f       	adc	r31, r19
    1248:	81 81       	ldd	r24, Z+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <Port_Init+0x2ac>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <Port_Init+0x2a8>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	20 c0       	rjmp	.+64     	; 0x12a4 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1264:	a1 e3       	ldi	r26, 0x31	; 49
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e1 e3       	ldi	r30, 0x31	; 49
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	29 81       	ldd	r18, Y+1	; 0x01
    1272:	3a 81       	ldd	r19, Y+2	; 0x02
    1274:	c9 01       	movw	r24, r18
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	28 0f       	add	r18, r24
    127c:	39 1f       	adc	r19, r25
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	fc 01       	movw	r30, r24
    1284:	e2 0f       	add	r30, r18
    1286:	f3 1f       	adc	r31, r19
    1288:	81 81       	ldd	r24, Z+1	; 0x01
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <Port_Init+0x2ec>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <Port_Init+0x2e8>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i=0; i < 32; i++) {
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	80 32       	cpi	r24, 0x20	; 32
    12b4:	91 05       	cpc	r25, r1
    12b6:	0c f4       	brge	.+2      	; 0x12ba <Port_Init+0x30c>
    12b8:	88 ce       	rjmp	.-752    	; 0xfca <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    12ba:	26 96       	adiw	r28, 0x06	; 6
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    12d4:	af e5       	ldi	r26, 0x5F	; 95
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ef e5       	ldi	r30, 0x5F	; 95
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	80 68       	ori	r24, 0x80	; 128
    12e0:	8c 93       	st	X, r24
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <GI_voidDisable>:

void GI_voidDisable(void)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    12f0:	af e5       	ldi	r26, 0x5F	; 95
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ef e5       	ldi	r30, 0x5F	; 95
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 77       	andi	r24, 0x7F	; 127
    12fc:	8c 93       	st	X, r24
}
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	28 97       	sbiw	r28, 0x08	; 8
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	38 87       	std	Y+8, r19	; 0x08
    1324:	2f 83       	std	Y+7, r18	; 0x07
    1326:	8f 81       	ldd	r24, Y+7	; 0x07
    1328:	98 85       	ldd	r25, Y+8	; 0x08
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	09 f4       	brne	.+2      	; 0x1332 <EXTI_voidInit+0x2e>
    1330:	5a c0       	rjmp	.+180    	; 0x13e6 <EXTI_voidInit+0xe2>
    1332:	2f 81       	ldd	r18, Y+7	; 0x07
    1334:	38 85       	ldd	r19, Y+8	; 0x08
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <EXTI_voidInit+0x3a>
    133c:	a3 c0       	rjmp	.+326    	; 0x1484 <EXTI_voidInit+0x180>
    133e:	8f 81       	ldd	r24, Y+7	; 0x07
    1340:	98 85       	ldd	r25, Y+8	; 0x08
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	09 f0       	breq	.+2      	; 0x1348 <EXTI_voidInit+0x44>
    1346:	b3 c0       	rjmp	.+358    	; 0x14ae <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3e 83       	std	Y+6, r19	; 0x06
    1350:	2d 83       	std	Y+5, r18	; 0x05
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	39 f1       	breq	.+78     	; 0x13aa <EXTI_voidInit+0xa6>
    135c:	2d 81       	ldd	r18, Y+5	; 0x05
    135e:	3e 81       	ldd	r19, Y+6	; 0x06
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	99 f0       	breq	.+38     	; 0x138c <EXTI_voidInit+0x88>
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f1       	breq	.+90     	; 0x13c8 <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    136e:	a5 e5       	ldi	r26, 0x55	; 85
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e5       	ldi	r30, 0x55	; 85
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	81 60       	ori	r24, 0x01	; 1
    137a:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    137c:	a5 e5       	ldi	r26, 0x55	; 85
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e5       	ldi	r30, 0x55	; 85
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	82 60       	ori	r24, 0x02	; 2
    1388:	8c 93       	st	X, r24
    138a:	91 c0       	rjmp	.+290    	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    138c:	a5 e5       	ldi	r26, 0x55	; 85
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e5       	ldi	r30, 0x55	; 85
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8e 7f       	andi	r24, 0xFE	; 254
    1398:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    139a:	a5 e5       	ldi	r26, 0x55	; 85
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e5       	ldi	r30, 0x55	; 85
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	82 60       	ori	r24, 0x02	; 2
    13a6:	8c 93       	st	X, r24
    13a8:	82 c0       	rjmp	.+260    	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    13aa:	a5 e5       	ldi	r26, 0x55	; 85
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e5       	ldi	r30, 0x55	; 85
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	81 60       	ori	r24, 0x01	; 1
    13b6:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    13b8:	a5 e5       	ldi	r26, 0x55	; 85
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e5       	ldi	r30, 0x55	; 85
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8d 7f       	andi	r24, 0xFD	; 253
    13c4:	8c 93       	st	X, r24
    13c6:	73 c0       	rjmp	.+230    	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    13c8:	a5 e5       	ldi	r26, 0x55	; 85
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e5       	ldi	r30, 0x55	; 85
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    13d6:	a5 e5       	ldi	r26, 0x55	; 85
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e5       	ldi	r30, 0x55	; 85
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8d 7f       	andi	r24, 0xFD	; 253
    13e2:	8c 93       	st	X, r24
    13e4:	64 c0       	rjmp	.+200    	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3c 83       	std	Y+4, r19	; 0x04
    13ee:	2b 83       	std	Y+3, r18	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	39 f1       	breq	.+78     	; 0x1448 <EXTI_voidInit+0x144>
    13fa:	2b 81       	ldd	r18, Y+3	; 0x03
    13fc:	3c 81       	ldd	r19, Y+4	; 0x04
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	99 f0       	breq	.+38     	; 0x142a <EXTI_voidInit+0x126>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	69 f1       	breq	.+90     	; 0x1466 <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    140c:	a5 e5       	ldi	r26, 0x55	; 85
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e5       	ldi	r30, 0x55	; 85
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	84 60       	ori	r24, 0x04	; 4
    1418:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    141a:	a5 e5       	ldi	r26, 0x55	; 85
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e5       	ldi	r30, 0x55	; 85
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	88 60       	ori	r24, 0x08	; 8
    1426:	8c 93       	st	X, r24
    1428:	42 c0       	rjmp	.+132    	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    142a:	a5 e5       	ldi	r26, 0x55	; 85
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e5       	ldi	r30, 0x55	; 85
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8b 7f       	andi	r24, 0xFB	; 251
    1436:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    1438:	a5 e5       	ldi	r26, 0x55	; 85
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e5       	ldi	r30, 0x55	; 85
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	88 60       	ori	r24, 0x08	; 8
    1444:	8c 93       	st	X, r24
    1446:	33 c0       	rjmp	.+102    	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    1448:	a5 e5       	ldi	r26, 0x55	; 85
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e5       	ldi	r30, 0x55	; 85
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	84 60       	ori	r24, 0x04	; 4
    1454:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    1456:	a5 e5       	ldi	r26, 0x55	; 85
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e5       	ldi	r30, 0x55	; 85
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	87 7f       	andi	r24, 0xF7	; 247
    1462:	8c 93       	st	X, r24
    1464:	24 c0       	rjmp	.+72     	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    1466:	a5 e5       	ldi	r26, 0x55	; 85
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e5       	ldi	r30, 0x55	; 85
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8b 7f       	andi	r24, 0xFB	; 251
    1472:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    1474:	a5 e5       	ldi	r26, 0x55	; 85
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e5       	ldi	r30, 0x55	; 85
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	87 7f       	andi	r24, 0xF7	; 247
    1480:	8c 93       	st	X, r24
    1482:	15 c0       	rjmp	.+42     	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	91 05       	cpc	r25, r1
    148e:	41 f0       	breq	.+16     	; 0x14a0 <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    1490:	a4 e5       	ldi	r26, 0x54	; 84
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e4 e5       	ldi	r30, 0x54	; 84
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	80 64       	ori	r24, 0x40	; 64
    149c:	8c 93       	st	X, r24
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    14a0:	a4 e5       	ldi	r26, 0x54	; 84
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e4 e5       	ldi	r30, 0x54	; 84
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 7b       	andi	r24, 0xBF	; 191
    14ac:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    14ae:	28 96       	adiw	r28, 0x08	; 8
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <EXTI_voidEnable+0x6>
    14c6:	0f 92       	push	r0
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3b 83       	std	Y+3, r19	; 0x03
    14d6:	2a 83       	std	Y+2, r18	; 0x02
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	91 05       	cpc	r25, r1
    14e0:	89 f0       	breq	.+34     	; 0x1504 <EXTI_voidEnable+0x44>
    14e2:	2a 81       	ldd	r18, Y+2	; 0x02
    14e4:	3b 81       	ldd	r19, Y+3	; 0x03
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	a1 f0       	breq	.+40     	; 0x1514 <EXTI_voidEnable+0x54>
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	9b 81       	ldd	r25, Y+3	; 0x03
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	b9 f4       	brne	.+46     	; 0x1522 <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    14f4:	ab e5       	ldi	r26, 0x5B	; 91
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	eb e5       	ldi	r30, 0x5B	; 91
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	8c 93       	st	X, r24
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    1504:	ab e5       	ldi	r26, 0x5B	; 91
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e5       	ldi	r30, 0x5B	; 91
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 68       	ori	r24, 0x80	; 128
    1510:	8c 93       	st	X, r24
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    1514:	ab e5       	ldi	r26, 0x5B	; 91
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	eb e5       	ldi	r30, 0x5B	; 91
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 62       	ori	r24, 0x20	; 32
    1520:	8c 93       	st	X, r24
        break;
    }
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <EXTI_voidDisable+0x6>
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	3b 83       	std	Y+3, r19	; 0x03
    1544:	2a 83       	std	Y+2, r18	; 0x02
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	91 05       	cpc	r25, r1
    154e:	89 f0       	breq	.+34     	; 0x1572 <EXTI_voidDisable+0x44>
    1550:	2a 81       	ldd	r18, Y+2	; 0x02
    1552:	3b 81       	ldd	r19, Y+3	; 0x03
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	a1 f0       	breq	.+40     	; 0x1582 <EXTI_voidDisable+0x54>
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	b9 f4       	brne	.+46     	; 0x1590 <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    1562:	ab e5       	ldi	r26, 0x5B	; 91
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	eb e5       	ldi	r30, 0x5B	; 91
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8f 7b       	andi	r24, 0xBF	; 191
    156e:	8c 93       	st	X, r24
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    1572:	ab e5       	ldi	r26, 0x5B	; 91
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	eb e5       	ldi	r30, 0x5B	; 91
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	8f 77       	andi	r24, 0x7F	; 127
    157e:	8c 93       	st	X, r24
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    1582:	ab e5       	ldi	r26, 0x5B	; 91
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e5       	ldi	r30, 0x5B	; 91
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 7d       	andi	r24, 0xDF	; 223
    158e:	8c 93       	st	X, r24
        break;
    }
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <EXTRI_voidSetCallBackINT+0x6>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <EXTRI_voidSetCallBackINT+0x8>
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	7b 83       	std	Y+3, r23	; 0x03
    15ae:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	9b 81       	ldd	r25, Y+3	; 0x03
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	39 f1       	breq	.+78     	; 0x1606 <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	3d 83       	std	Y+5, r19	; 0x05
    15c0:	2c 83       	std	Y+4, r18	; 0x04
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	81 f0       	breq	.+32     	; 0x15ec <EXTRI_voidSetCallBackINT+0x50>
    15cc:	2c 81       	ldd	r18, Y+4	; 0x04
    15ce:	3d 81       	ldd	r19, Y+5	; 0x05
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	91 f0       	breq	.+36     	; 0x15fa <EXTRI_voidSetCallBackINT+0x5e>
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	a1 f4       	brne	.+40     	; 0x1606 <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	9b 81       	ldd	r25, Y+3	; 0x03
    15e2:	90 93 db 00 	sts	0x00DB, r25
    15e6:	80 93 da 00 	sts	0x00DA, r24
    15ea:	0d c0       	rjmp	.+26     	; 0x1606 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	90 93 dd 00 	sts	0x00DD, r25
    15f4:	80 93 dc 00 	sts	0x00DC, r24
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	90 93 df 00 	sts	0x00DF, r25
    1602:	80 93 de 00 	sts	0x00DE, r24
            break;
        default:
            break;
        }
    }
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    1616:	1f 92       	push	r1
    1618:	0f 92       	push	r0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	0f 92       	push	r0
    161e:	11 24       	eor	r1, r1
    1620:	2f 93       	push	r18
    1622:	3f 93       	push	r19
    1624:	4f 93       	push	r20
    1626:	5f 93       	push	r21
    1628:	6f 93       	push	r22
    162a:	7f 93       	push	r23
    162c:	8f 93       	push	r24
    162e:	9f 93       	push	r25
    1630:	af 93       	push	r26
    1632:	bf 93       	push	r27
    1634:	ef 93       	push	r30
    1636:	ff 93       	push	r31
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    1640:	80 91 da 00 	lds	r24, 0x00DA
    1644:	90 91 db 00 	lds	r25, 0x00DB
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	29 f0       	breq	.+10     	; 0x1656 <__vector_1+0x40>
        private_pCallBackINT0();
    164c:	e0 91 da 00 	lds	r30, 0x00DA
    1650:	f0 91 db 00 	lds	r31, 0x00DB
    1654:	09 95       	icall
    }
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	bf 91       	pop	r27
    1660:	af 91       	pop	r26
    1662:	9f 91       	pop	r25
    1664:	8f 91       	pop	r24
    1666:	7f 91       	pop	r23
    1668:	6f 91       	pop	r22
    166a:	5f 91       	pop	r21
    166c:	4f 91       	pop	r20
    166e:	3f 91       	pop	r19
    1670:	2f 91       	pop	r18
    1672:	0f 90       	pop	r0
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	0f 90       	pop	r0
    1678:	1f 90       	pop	r1
    167a:	18 95       	reti

0000167c <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    167c:	1f 92       	push	r1
    167e:	0f 92       	push	r0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	0f 92       	push	r0
    1684:	11 24       	eor	r1, r1
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	6f 93       	push	r22
    1690:	7f 93       	push	r23
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    16a6:	80 91 dc 00 	lds	r24, 0x00DC
    16aa:	90 91 dd 00 	lds	r25, 0x00DD
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	29 f0       	breq	.+10     	; 0x16bc <__vector_2+0x40>
        private_pCallBackINT1();
    16b2:	e0 91 dc 00 	lds	r30, 0x00DC
    16b6:	f0 91 dd 00 	lds	r31, 0x00DD
    16ba:	09 95       	icall
    }
}
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	ff 91       	pop	r31
    16c2:	ef 91       	pop	r30
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	7f 91       	pop	r23
    16ce:	6f 91       	pop	r22
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    16e2:	1f 92       	push	r1
    16e4:	0f 92       	push	r0
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	0f 92       	push	r0
    16ea:	11 24       	eor	r1, r1
    16ec:	2f 93       	push	r18
    16ee:	3f 93       	push	r19
    16f0:	4f 93       	push	r20
    16f2:	5f 93       	push	r21
    16f4:	6f 93       	push	r22
    16f6:	7f 93       	push	r23
    16f8:	8f 93       	push	r24
    16fa:	9f 93       	push	r25
    16fc:	af 93       	push	r26
    16fe:	bf 93       	push	r27
    1700:	ef 93       	push	r30
    1702:	ff 93       	push	r31
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    170c:	80 91 de 00 	lds	r24, 0x00DE
    1710:	90 91 df 00 	lds	r25, 0x00DF
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	29 f0       	breq	.+10     	; 0x1722 <__vector_3+0x40>
        private_pCallBackINT2();
    1718:	e0 91 de 00 	lds	r30, 0x00DE
    171c:	f0 91 df 00 	lds	r31, 0x00DF
    1720:	09 95       	icall
    }
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <Dio_WriteChannel+0x6>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <Dio_WriteChannel+0x8>
    1750:	0f 92       	push	r0
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	8a 83       	std	Y+2, r24	; 0x02
    1758:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	86 95       	lsr	r24
    175e:	86 95       	lsr	r24
    1760:	86 95       	lsr	r24
    1762:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3d 83       	std	Y+5, r19	; 0x05
    176c:	2c 83       	std	Y+4, r18	; 0x04
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <Dio_WriteChannel+0x32>
    1778:	43 c0       	rjmp	.+134    	; 0x1800 <Dio_WriteChannel+0xb8>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <Dio_WriteChannel+0x46>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	71 f0       	breq	.+28     	; 0x17a8 <Dio_WriteChannel+0x60>
    178c:	ce c0       	rjmp	.+412    	; 0x192a <Dio_WriteChannel+0x1e2>
    178e:	2c 81       	ldd	r18, Y+4	; 0x04
    1790:	3d 81       	ldd	r19, Y+5	; 0x05
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <Dio_WriteChannel+0x52>
    1798:	65 c0       	rjmp	.+202    	; 0x1864 <Dio_WriteChannel+0x11c>
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <Dio_WriteChannel+0x5e>
    17a4:	91 c0       	rjmp	.+290    	; 0x18c8 <Dio_WriteChannel+0x180>
    17a6:	c1 c0       	rjmp	.+386    	; 0x192a <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    17ae:	ab e3       	ldi	r26, 0x3B	; 59
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	eb e3       	ldi	r30, 0x3B	; 59
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <Dio_WriteChannel+0x84>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <Dio_WriteChannel+0x80>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	aa c0       	rjmp	.+340    	; 0x192a <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    17d6:	ab e3       	ldi	r26, 0x3B	; 59
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	eb e3       	ldi	r30, 0x3B	; 59
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <Dio_WriteChannel+0xac>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <Dio_WriteChannel+0xa8>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	95 c0       	rjmp	.+298    	; 0x192a <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	b9 f4       	brne	.+46     	; 0x1834 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    1806:	a8 e3       	ldi	r26, 0x38	; 56
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e8 e3       	ldi	r30, 0x38	; 56
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 01       	movw	r18, r24
    181a:	27 70       	andi	r18, 0x07	; 7
    181c:	30 70       	andi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <Dio_WriteChannel+0xe2>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <Dio_WriteChannel+0xde>
    182e:	84 2b       	or	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	7b c0       	rjmp	.+246    	; 0x192a <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    1834:	a8 e3       	ldi	r26, 0x38	; 56
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e8 e3       	ldi	r30, 0x38	; 56
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	88 2f       	mov	r24, r24
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9c 01       	movw	r18, r24
    1848:	27 70       	andi	r18, 0x07	; 7
    184a:	30 70       	andi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <Dio_WriteChannel+0x110>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <Dio_WriteChannel+0x10c>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	63 c0       	rjmp	.+198    	; 0x192a <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	b9 f4       	brne	.+46     	; 0x1898 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    186a:	a5 e3       	ldi	r26, 0x35	; 53
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e5 e3       	ldi	r30, 0x35	; 53
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	9c 01       	movw	r18, r24
    187e:	27 70       	andi	r18, 0x07	; 7
    1880:	30 70       	andi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <Dio_WriteChannel+0x146>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <Dio_WriteChannel+0x142>
    1892:	84 2b       	or	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	49 c0       	rjmp	.+146    	; 0x192a <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    1898:	a5 e3       	ldi	r26, 0x35	; 53
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e3       	ldi	r30, 0x35	; 53
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9c 01       	movw	r18, r24
    18ac:	27 70       	andi	r18, 0x07	; 7
    18ae:	30 70       	andi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <Dio_WriteChannel+0x174>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <Dio_WriteChannel+0x170>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	31 c0       	rjmp	.+98     	; 0x192a <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	b9 f4       	brne	.+46     	; 0x18fc <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    18ce:	a2 e3       	ldi	r26, 0x32	; 50
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e2 e3       	ldi	r30, 0x32	; 50
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9c 01       	movw	r18, r24
    18e2:	27 70       	andi	r18, 0x07	; 7
    18e4:	30 70       	andi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <Dio_WriteChannel+0x1aa>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <Dio_WriteChannel+0x1a6>
    18f6:	84 2b       	or	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	17 c0       	rjmp	.+46     	; 0x192a <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    18fc:	a2 e3       	ldi	r26, 0x32	; 50
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e2 e3       	ldi	r30, 0x32	; 50
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9c 01       	movw	r18, r24
    1910:	27 70       	andi	r18, 0x07	; 7
    1912:	30 70       	andi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <Dio_WriteChannel+0x1d8>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <Dio_WriteChannel+0x1d4>
    1924:	80 95       	com	r24
    1926:	84 23       	and	r24, r20
    1928:	8c 93       	st	X, r24
		}
		break;
	}
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <Dio_ReadChannel+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <Dio_ReadChannel+0x8>
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	86 95       	lsr	r24
    194e:	86 95       	lsr	r24
    1950:	86 95       	lsr	r24
    1952:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3d 83       	std	Y+5, r19	; 0x05
    195c:	2c 83       	std	Y+4, r18	; 0x04
    195e:	4c 81       	ldd	r20, Y+4	; 0x04
    1960:	5d 81       	ldd	r21, Y+5	; 0x05
    1962:	41 30       	cpi	r20, 0x01	; 1
    1964:	51 05       	cpc	r21, r1
    1966:	49 f1       	breq	.+82     	; 0x19ba <Dio_ReadChannel+0x80>
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	91 05       	cpc	r25, r1
    1970:	34 f4       	brge	.+12     	; 0x197e <Dio_ReadChannel+0x44>
    1972:	2c 81       	ldd	r18, Y+4	; 0x04
    1974:	3d 81       	ldd	r19, Y+5	; 0x05
    1976:	21 15       	cp	r18, r1
    1978:	31 05       	cpc	r19, r1
    197a:	69 f0       	breq	.+26     	; 0x1996 <Dio_ReadChannel+0x5c>
    197c:	59 c0       	rjmp	.+178    	; 0x1a30 <Dio_ReadChannel+0xf6>
    197e:	4c 81       	ldd	r20, Y+4	; 0x04
    1980:	5d 81       	ldd	r21, Y+5	; 0x05
    1982:	42 30       	cpi	r20, 0x02	; 2
    1984:	51 05       	cpc	r21, r1
    1986:	69 f1       	breq	.+90     	; 0x19e2 <Dio_ReadChannel+0xa8>
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	83 30       	cpi	r24, 0x03	; 3
    198e:	91 05       	cpc	r25, r1
    1990:	09 f4       	brne	.+2      	; 0x1994 <Dio_ReadChannel+0x5a>
    1992:	3b c0       	rjmp	.+118    	; 0x1a0a <Dio_ReadChannel+0xd0>
    1994:	4d c0       	rjmp	.+154    	; 0x1a30 <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    1996:	e9 e3       	ldi	r30, 0x39	; 57
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <Dio_ReadChannel+0x74>
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <Dio_ReadChannel+0x70>
    19b2:	ca 01       	movw	r24, r20
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	3b c0       	rjmp	.+118    	; 0x1a30 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    19ba:	e6 e3       	ldi	r30, 0x36	; 54
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	87 70       	andi	r24, 0x07	; 7
    19cc:	90 70       	andi	r25, 0x00	; 0
    19ce:	a9 01       	movw	r20, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <Dio_ReadChannel+0x9c>
    19d2:	55 95       	asr	r21
    19d4:	47 95       	ror	r20
    19d6:	8a 95       	dec	r24
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <Dio_ReadChannel+0x98>
    19da:	ca 01       	movw	r24, r20
    19dc:	81 70       	andi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	27 c0       	rjmp	.+78     	; 0x1a30 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    19e2:	e3 e3       	ldi	r30, 0x33	; 51
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	87 70       	andi	r24, 0x07	; 7
    19f4:	90 70       	andi	r25, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <Dio_ReadChannel+0xc4>
    19fa:	55 95       	asr	r21
    19fc:	47 95       	ror	r20
    19fe:	8a 95       	dec	r24
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <Dio_ReadChannel+0xc0>
    1a02:	ca 01       	movw	r24, r20
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	13 c0       	rjmp	.+38     	; 0x1a30 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    1a0a:	e0 e3       	ldi	r30, 0x30	; 48
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	88 2f       	mov	r24, r24
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	87 70       	andi	r24, 0x07	; 7
    1a1c:	90 70       	andi	r25, 0x00	; 0
    1a1e:	a9 01       	movw	r20, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <Dio_ReadChannel+0xec>
    1a22:	55 95       	asr	r21
    1a24:	47 95       	ror	r20
    1a26:	8a 95       	dec	r24
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <Dio_ReadChannel+0xe8>
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	81 70       	andi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <Dio_FlipChannel+0x6>
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <Dio_FlipChannel+0x8>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	86 95       	lsr	r24
    1a54:	86 95       	lsr	r24
    1a56:	86 95       	lsr	r24
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3c 83       	std	Y+4, r19	; 0x04
    1a5e:	2b 83       	std	Y+3, r18	; 0x03
    1a60:	4b 81       	ldd	r20, Y+3	; 0x03
    1a62:	5c 81       	ldd	r21, Y+4	; 0x04
    1a64:	41 30       	cpi	r20, 0x01	; 1
    1a66:	51 05       	cpc	r21, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <Dio_FlipChannel+0x2a>
    1a6a:	3c c0       	rjmp	.+120    	; 0x1ae4 <Dio_FlipChannel+0xa2>
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	91 05       	cpc	r25, r1
    1a74:	34 f4       	brge	.+12     	; 0x1a82 <Dio_FlipChannel+0x40>
    1a76:	2b 81       	ldd	r18, Y+3	; 0x03
    1a78:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7a:	21 15       	cp	r18, r1
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	71 f0       	breq	.+28     	; 0x1a9c <Dio_FlipChannel+0x5a>
    1a80:	ab c0       	rjmp	.+342    	; 0x1bd8 <Dio_FlipChannel+0x196>
    1a82:	4b 81       	ldd	r20, Y+3	; 0x03
    1a84:	5c 81       	ldd	r21, Y+4	; 0x04
    1a86:	42 30       	cpi	r20, 0x02	; 2
    1a88:	51 05       	cpc	r21, r1
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <Dio_FlipChannel+0x4c>
    1a8c:	54 c0       	rjmp	.+168    	; 0x1b36 <Dio_FlipChannel+0xf4>
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	83 30       	cpi	r24, 0x03	; 3
    1a94:	91 05       	cpc	r25, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <Dio_FlipChannel+0x58>
    1a98:	77 c0       	rjmp	.+238    	; 0x1b88 <Dio_FlipChannel+0x146>
    1a9a:	9e c0       	rjmp	.+316    	; 0x1bd8 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    1a9c:	ab e3       	ldi	r26, 0x3B	; 59
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	eb e3       	ldi	r30, 0x3B	; 59
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <Dio_FlipChannel+0x76>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	2a 95       	dec	r18
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <Dio_FlipChannel+0x72>
    1abc:	84 27       	eor	r24, r20
    1abe:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    1ac0:	eb e3       	ldi	r30, 0x3B	; 59
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <Dio_FlipChannel+0x96>
    1ad4:	55 95       	asr	r21
    1ad6:	47 95       	ror	r20
    1ad8:	8a 95       	dec	r24
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <Dio_FlipChannel+0x92>
    1adc:	ca 01       	movw	r24, r20
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	7a c0       	rjmp	.+244    	; 0x1bd8 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    1ae4:	a8 e3       	ldi	r26, 0x38	; 56
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e8 e3       	ldi	r30, 0x38	; 56
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9c 01       	movw	r18, r24
    1af8:	27 70       	andi	r18, 0x07	; 7
    1afa:	30 70       	andi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <Dio_FlipChannel+0xc4>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	2a 95       	dec	r18
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <Dio_FlipChannel+0xc0>
    1b0a:	84 27       	eor	r24, r20
    1b0c:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    1b0e:	e8 e3       	ldi	r30, 0x38	; 56
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	88 2f       	mov	r24, r24
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	87 70       	andi	r24, 0x07	; 7
    1b20:	90 70       	andi	r25, 0x00	; 0
    1b22:	a9 01       	movw	r20, r18
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <Dio_FlipChannel+0xe8>
    1b26:	55 95       	asr	r21
    1b28:	47 95       	ror	r20
    1b2a:	8a 95       	dec	r24
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <Dio_FlipChannel+0xe4>
    1b2e:	ca 01       	movw	r24, r20
    1b30:	81 70       	andi	r24, 0x01	; 1
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	51 c0       	rjmp	.+162    	; 0x1bd8 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    1b36:	a5 e3       	ldi	r26, 0x35	; 53
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e5 e3       	ldi	r30, 0x35	; 53
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 01       	movw	r18, r24
    1b4a:	27 70       	andi	r18, 0x07	; 7
    1b4c:	30 70       	andi	r19, 0x00	; 0
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <Dio_FlipChannel+0x116>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	2a 95       	dec	r18
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <Dio_FlipChannel+0x112>
    1b5c:	84 27       	eor	r24, r20
    1b5e:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    1b60:	e5 e3       	ldi	r30, 0x35	; 53
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	87 70       	andi	r24, 0x07	; 7
    1b72:	90 70       	andi	r25, 0x00	; 0
    1b74:	a9 01       	movw	r20, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <Dio_FlipChannel+0x13a>
    1b78:	55 95       	asr	r21
    1b7a:	47 95       	ror	r20
    1b7c:	8a 95       	dec	r24
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <Dio_FlipChannel+0x136>
    1b80:	ca 01       	movw	r24, r20
    1b82:	81 70       	andi	r24, 0x01	; 1
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	28 c0       	rjmp	.+80     	; 0x1bd8 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    1b88:	a2 e3       	ldi	r26, 0x32	; 50
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e2 e3       	ldi	r30, 0x32	; 50
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	88 2f       	mov	r24, r24
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9c 01       	movw	r18, r24
    1b9c:	27 70       	andi	r18, 0x07	; 7
    1b9e:	30 70       	andi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <Dio_FlipChannel+0x168>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	2a 95       	dec	r18
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <Dio_FlipChannel+0x164>
    1bae:	84 27       	eor	r24, r20
    1bb0:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    1bb2:	e2 e3       	ldi	r30, 0x32	; 50
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	87 70       	andi	r24, 0x07	; 7
    1bc4:	90 70       	andi	r25, 0x00	; 0
    1bc6:	a9 01       	movw	r20, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <Dio_FlipChannel+0x18c>
    1bca:	55 95       	asr	r21
    1bcc:	47 95       	ror	r20
    1bce:	8a 95       	dec	r24
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <Dio_FlipChannel+0x188>
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	81 70       	andi	r24, 0x01	; 1
    1bd6:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <Dio_WritePort+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <Dio_WritePort+0x8>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3c 83       	std	Y+4, r19	; 0x04
    1c00:	2b 83       	std	Y+3, r18	; 0x03
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	91 05       	cpc	r25, r1
    1c0a:	d1 f0       	breq	.+52     	; 0x1c40 <Dio_WritePort+0x58>
    1c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <Dio_WritePort+0x38>
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	61 f0       	breq	.+24     	; 0x1c36 <Dio_WritePort+0x4e>
    1c1e:	1e c0       	rjmp	.+60     	; 0x1c5c <Dio_WritePort+0x74>
    1c20:	2b 81       	ldd	r18, Y+3	; 0x03
    1c22:	3c 81       	ldd	r19, Y+4	; 0x04
    1c24:	22 30       	cpi	r18, 0x02	; 2
    1c26:	31 05       	cpc	r19, r1
    1c28:	81 f0       	breq	.+32     	; 0x1c4a <Dio_WritePort+0x62>
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	91 05       	cpc	r25, r1
    1c32:	81 f0       	breq	.+32     	; 0x1c54 <Dio_WritePort+0x6c>
    1c34:	13 c0       	rjmp	.+38     	; 0x1c5c <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    1c36:	eb e3       	ldi	r30, 0x3B	; 59
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	80 83       	st	Z, r24
    1c3e:	0e c0       	rjmp	.+28     	; 0x1c5c <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    1c40:	e8 e3       	ldi	r30, 0x38	; 56
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	80 83       	st	Z, r24
    1c48:	09 c0       	rjmp	.+18     	; 0x1c5c <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    1c4a:	e5 e3       	ldi	r30, 0x35	; 53
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	80 83       	st	Z, r24
    1c52:	04 c0       	rjmp	.+8      	; 0x1c5c <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    1c54:	e2 e3       	ldi	r30, 0x32	; 50
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	80 83       	st	Z, r24
		break;
	}
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <SevenSeg_SegEnable>:

#include "SEVEN_SEGMENT.h"
#include <avr/io.h>
#include <avr/delay.h>

void SevenSeg_SegEnable(SegNumber seg) {
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <SevenSeg_SegEnable+0x6>
    1c70:	0f 92       	push	r0
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	89 83       	std	Y+1, r24	; 0x01
	switch (seg) {
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3b 83       	std	Y+3, r19	; 0x03
    1c80:	2a 83       	std	Y+2, r18	; 0x02
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	91 05       	cpc	r25, r1
    1c8a:	b1 f0       	breq	.+44     	; 0x1cb8 <SevenSeg_SegEnable+0x4e>
    1c8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c90:	24 30       	cpi	r18, 0x04	; 4
    1c92:	31 05       	cpc	r19, r1
    1c94:	34 f4       	brge	.+12     	; 0x1ca2 <SevenSeg_SegEnable+0x38>
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	e9 f0       	breq	.+58     	; 0x1cda <SevenSeg_SegEnable+0x70>
    1ca0:	4e c0       	rjmp	.+156    	; 0x1d3e <SevenSeg_SegEnable+0xd4>
    1ca2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca6:	2d 30       	cpi	r18, 0x0D	; 13
    1ca8:	31 05       	cpc	r19, r1
    1caa:	41 f1       	breq	.+80     	; 0x1cfc <SevenSeg_SegEnable+0x92>
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	8e 30       	cpi	r24, 0x0E	; 14
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	a1 f1       	breq	.+104    	; 0x1d1e <SevenSeg_SegEnable+0xb4>
    1cb6:	43 c0       	rjmp	.+134    	; 0x1d3e <SevenSeg_SegEnable+0xd4>
	case SEG_1:
		Dio_WriteChannel(SEG_2, 1);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1cc0:	8d e0       	ldi	r24, 0x0D	; 13
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1cc8:	8e e0       	ldi	r24, 0x0E	; 14
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 0);
    1cd0:	83 e0       	ldi	r24, 0x03	; 3
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    1cd8:	32 c0       	rjmp	.+100    	; 0x1d3e <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_2:
		Dio_WriteChannel(SEG_1, 1);
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1ce2:	8d e0       	ldi	r24, 0x0D	; 13
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1cea:	8e e0       	ldi	r24, 0x0E	; 14
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_2, 0);
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    1cfa:	21 c0       	rjmp	.+66     	; 0x1d3e <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_3:
		Dio_WriteChannel(SEG_2, 1);
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	61 e0       	ldi	r22, 0x01	; 1
    1d00:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	61 e0       	ldi	r22, 0x01	; 1
    1d08:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1d0c:	8e e0       	ldi	r24, 0x0E	; 14
    1d0e:	61 e0       	ldi	r22, 0x01	; 1
    1d10:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 0);
    1d14:	8d e0       	ldi	r24, 0x0D	; 13
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    1d1c:	10 c0       	rjmp	.+32     	; 0x1d3e <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_4:
		Dio_WriteChannel(SEG_2, 1);
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1d26:	8d e0       	ldi	r24, 0x0D	; 13
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 0);
    1d36:	8e e0       	ldi	r24, 0x0E	; 14
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>

		break;

	}

}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <SevenSeg_Send>:
//
//void SevenSeg_SegDisable(SegNumber seg){
//	Dio_WriteChannel(seg,1);
//}

void SevenSeg_Send(u8 num1, u8 num2, u8 num3, u8 num4) {
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	ec 97       	sbiw	r28, 0x3c	; 60
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	89 af       	std	Y+57, r24	; 0x39
    1d60:	6a af       	std	Y+58, r22	; 0x3a
    1d62:	4b af       	std	Y+59, r20	; 0x3b
    1d64:	2c af       	std	Y+60, r18	; 0x3c

	SevenSeg_SegEnable(SEG_1);
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num1);
    1d6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d6e:	0e 94 9c 10 	call	0x2138	; 0x2138 <SevenSeg_SendOneSeg>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a8 ec       	ldi	r26, 0xC8	; 200
    1d78:	b2 e4       	ldi	r27, 0x42	; 66
    1d7a:	8d ab       	std	Y+53, r24	; 0x35
    1d7c:	9e ab       	std	Y+54, r25	; 0x36
    1d7e:	af ab       	std	Y+55, r26	; 0x37
    1d80:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	6d a9       	ldd	r22, Y+53	; 0x35
    1d84:	7e a9       	ldd	r23, Y+54	; 0x36
    1d86:	8f a9       	ldd	r24, Y+55	; 0x37
    1d88:	98 ad       	ldd	r25, Y+56	; 0x38
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	55 e4       	ldi	r21, 0x45	; 69
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	89 ab       	std	Y+49, r24	; 0x31
    1d9c:	9a ab       	std	Y+50, r25	; 0x32
    1d9e:	ab ab       	std	Y+51, r26	; 0x33
    1da0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da2:	69 a9       	ldd	r22, Y+49	; 0x31
    1da4:	7a a9       	ldd	r23, Y+50	; 0x32
    1da6:	8b a9       	ldd	r24, Y+51	; 0x33
    1da8:	9c a9       	ldd	r25, Y+52	; 0x34
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <SevenSeg_Send+0x7a>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	98 ab       	std	Y+48, r25	; 0x30
    1dc0:	8f a7       	std	Y+47, r24	; 0x2f
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <SevenSeg_Send+0xf8>
	else if (__tmp > 65535)
    1dc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dca:	9c a9       	ldd	r25, Y+52	; 0x34
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <SevenSeg_Send+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dde:	7e a9       	ldd	r23, Y+54	; 0x36
    1de0:	8f a9       	ldd	r24, Y+55	; 0x37
    1de2:	98 ad       	ldd	r25, Y+56	; 0x38
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	98 ab       	std	Y+48, r25	; 0x30
    1e02:	8f a7       	std	Y+47, r24	; 0x2f
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <SevenSeg_Send+0xda>
    1e06:	80 e9       	ldi	r24, 0x90	; 144
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	9e a7       	std	Y+46, r25	; 0x2e
    1e0c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e10:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <SevenSeg_Send+0xc8>
    1e16:	9e a7       	std	Y+46, r25	; 0x2e
    1e18:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	98 ab       	std	Y+48, r25	; 0x30
    1e22:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e26:	98 a9       	ldd	r25, Y+48	; 0x30
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <SevenSeg_Send+0xbc>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <SevenSeg_Send+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e30:	7a a9       	ldd	r23, Y+50	; 0x32
    1e32:	8b a9       	ldd	r24, Y+51	; 0x33
    1e34:	9c a9       	ldd	r25, Y+52	; 0x34
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	98 ab       	std	Y+48, r25	; 0x30
    1e40:	8f a7       	std	Y+47, r24	; 0x2f
    1e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e44:	98 a9       	ldd	r25, Y+48	; 0x30
    1e46:	9c a7       	std	Y+44, r25	; 0x2c
    1e48:	8b a7       	std	Y+43, r24	; 0x2b
    1e4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <SevenSeg_Send+0x104>
    1e52:	9c a7       	std	Y+44, r25	; 0x2c
    1e54:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_2);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num2);
    1e5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e5e:	0e 94 9c 10 	call	0x2138	; 0x2138 <SevenSeg_SendOneSeg>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a8 ec       	ldi	r26, 0xC8	; 200
    1e68:	b2 e4       	ldi	r27, 0x42	; 66
    1e6a:	8f a3       	std	Y+39, r24	; 0x27
    1e6c:	98 a7       	std	Y+40, r25	; 0x28
    1e6e:	a9 a7       	std	Y+41, r26	; 0x29
    1e70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6f a1       	ldd	r22, Y+39	; 0x27
    1e74:	78 a5       	ldd	r23, Y+40	; 0x28
    1e76:	89 a5       	ldd	r24, Y+41	; 0x29
    1e78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a e7       	ldi	r20, 0x7A	; 122
    1e80:	55 e4       	ldi	r21, 0x45	; 69
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8b a3       	std	Y+35, r24	; 0x23
    1e8c:	9c a3       	std	Y+36, r25	; 0x24
    1e8e:	ad a3       	std	Y+37, r26	; 0x25
    1e90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e92:	6b a1       	ldd	r22, Y+35	; 0x23
    1e94:	7c a1       	ldd	r23, Y+36	; 0x24
    1e96:	8d a1       	ldd	r24, Y+37	; 0x25
    1e98:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <SevenSeg_Send+0x16a>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9a a3       	std	Y+34, r25	; 0x22
    1eb0:	89 a3       	std	Y+33, r24	; 0x21
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <SevenSeg_Send+0x1e8>
	else if (__tmp > 65535)
    1eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eba:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <SevenSeg_Send+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ece:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9a a3       	std	Y+34, r25	; 0x22
    1ef2:	89 a3       	std	Y+33, r24	; 0x21
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <SevenSeg_Send+0x1ca>
    1ef6:	80 e9       	ldi	r24, 0x90	; 144
    1ef8:	91 e0       	ldi	r25, 0x01	; 1
    1efa:	98 a3       	std	Y+32, r25	; 0x20
    1efc:	8f 8f       	std	Y+31, r24	; 0x1f
    1efe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f00:	98 a1       	ldd	r25, Y+32	; 0x20
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <SevenSeg_Send+0x1b8>
    1f06:	98 a3       	std	Y+32, r25	; 0x20
    1f08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9a a3       	std	Y+34, r25	; 0x22
    1f12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	89 a1       	ldd	r24, Y+33	; 0x21
    1f16:	9a a1       	ldd	r25, Y+34	; 0x22
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <SevenSeg_Send+0x1ac>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <SevenSeg_Send+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f20:	7c a1       	ldd	r23, Y+36	; 0x24
    1f22:	8d a1       	ldd	r24, Y+37	; 0x25
    1f24:	9e a1       	ldd	r25, Y+38	; 0x26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	9e 8f       	std	Y+30, r25	; 0x1e
    1f38:	8d 8f       	std	Y+29, r24	; 0x1d
    1f3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <SevenSeg_Send+0x1f4>
    1f42:	9e 8f       	std	Y+30, r25	; 0x1e
    1f44:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_3);
    1f46:	8d e0       	ldi	r24, 0x0D	; 13
    1f48:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num3);
    1f4c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f4e:	0e 94 9c 10 	call	0x2138	; 0x2138 <SevenSeg_SendOneSeg>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a8 ec       	ldi	r26, 0xC8	; 200
    1f58:	b2 e4       	ldi	r27, 0x42	; 66
    1f5a:	89 8f       	std	Y+25, r24	; 0x19
    1f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a e7       	ldi	r20, 0x7A	; 122
    1f70:	55 e4       	ldi	r21, 0x45	; 69
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8d 8b       	std	Y+21, r24	; 0x15
    1f7c:	9e 8b       	std	Y+22, r25	; 0x16
    1f7e:	af 8b       	std	Y+23, r26	; 0x17
    1f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <SevenSeg_Send+0x25a>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <SevenSeg_Send+0x2d8>
	else if (__tmp > 65535)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	3f ef       	ldi	r19, 0xFF	; 255
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	57 e4       	ldi	r21, 0x47	; 71
    1fb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	4c f5       	brge	.+82     	; 0x200e <SevenSeg_Send+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <SevenSeg_Send+0x2ba>
    1fe6:	80 e9       	ldi	r24, 0x90	; 144
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <SevenSeg_Send+0x2a8>
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <SevenSeg_Send+0x29c>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <SevenSeg_Send+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	98 89       	ldd	r25, Y+16	; 0x10
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <SevenSeg_Send+0x2e4>
    2032:	98 8b       	std	Y+16, r25	; 0x10
    2034:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_4);
    2036:	8e e0       	ldi	r24, 0x0E	; 14
    2038:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num4);
    203c:	8c ad       	ldd	r24, Y+60	; 0x3c
    203e:	0e 94 9c 10 	call	0x2138	; 0x2138 <SevenSeg_SendOneSeg>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a8 ec       	ldi	r26, 0xC8	; 200
    2048:	b2 e4       	ldi	r27, 0x42	; 66
    204a:	8b 87       	std	Y+11, r24	; 0x0b
    204c:	9c 87       	std	Y+12, r25	; 0x0c
    204e:	ad 87       	std	Y+13, r26	; 0x0d
    2050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6b 85       	ldd	r22, Y+11	; 0x0b
    2054:	7c 85       	ldd	r23, Y+12	; 0x0c
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a e7       	ldi	r20, 0x7A	; 122
    2060:	55 e4       	ldi	r21, 0x45	; 69
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8f 83       	std	Y+7, r24	; 0x07
    206c:	98 87       	std	Y+8, r25	; 0x08
    206e:	a9 87       	std	Y+9, r26	; 0x09
    2070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <SevenSeg_Send+0x34a>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <SevenSeg_Send+0x3c8>
	else if (__tmp > 65535)
    2094:	6f 81       	ldd	r22, Y+7	; 0x07
    2096:	78 85       	ldd	r23, Y+8	; 0x08
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <SevenSeg_Send+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <SevenSeg_Send+0x3aa>
    20d6:	80 e9       	ldi	r24, 0x90	; 144
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <SevenSeg_Send+0x398>
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <SevenSeg_Send+0x38c>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <SevenSeg_Send+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <SevenSeg_Send+0x3d4>
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);

}
    2126:	ec 96       	adiw	r28, 0x3c	; 60
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <SevenSeg_SendOneSeg>:
void SevenSeg_SendOneSeg(u8 number) //SevenSeg_Type type ,
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	89 83       	std	Y+1, r24	; 0x01
//	SevenSeg_SegEnable(seg);
	Dio_WriteChannel(PB_0, GET_BIT(number, 0));
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	98 2f       	mov	r25, r24
    2148:	91 70       	andi	r25, 0x01	; 1
    214a:	88 e0       	ldi	r24, 0x08	; 8
    214c:	69 2f       	mov	r22, r25
    214e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(number, 1));
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	86 95       	lsr	r24
    2156:	98 2f       	mov	r25, r24
    2158:	91 70       	andi	r25, 0x01	; 1
    215a:	89 e0       	ldi	r24, 0x09	; 9
    215c:	69 2f       	mov	r22, r25
    215e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(number, 2));
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	86 95       	lsr	r24
    2166:	86 95       	lsr	r24
    2168:	98 2f       	mov	r25, r24
    216a:	91 70       	andi	r25, 0x01	; 1
    216c:	8a e0       	ldi	r24, 0x0A	; 10
    216e:	69 2f       	mov	r22, r25
    2170:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(number, 3));
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	86 95       	lsr	r24
    2178:	86 95       	lsr	r24
    217a:	86 95       	lsr	r24
    217c:	98 2f       	mov	r25, r24
    217e:	91 70       	andi	r25, 0x01	; 1
    2180:	8c e0       	ldi	r24, 0x0C	; 12
    2182:	69 2f       	mov	r22, r25
    2184:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
}
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <Lcd_SendCMD>:
 *      Author: AhmedAbogabl
 */

#include "LCD.h"

void Lcd_SendCMD(u8 cmd) {
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	c1 56       	subi	r28, 0x61	; 97
    219e:	d0 40       	sbci	r29, 0x00	; 0
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	fe 01       	movw	r30, r28
    21ac:	ef 59       	subi	r30, 0x9F	; 159
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 83       	st	Z, r24
	// Set RS to command mode
	Dio_WriteChannel(LCD_RS, STD_LOW);
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>

	// Send the high nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 4));
    21ba:	fe 01       	movw	r30, r28
    21bc:	ef 59       	subi	r30, 0x9F	; 159
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	82 95       	swap	r24
    21c4:	8f 70       	andi	r24, 0x0F	; 15
    21c6:	98 2f       	mov	r25, r24
    21c8:	91 70       	andi	r25, 0x01	; 1
    21ca:	88 e0       	ldi	r24, 0x08	; 8
    21cc:	69 2f       	mov	r22, r25
    21ce:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 5));
    21d2:	fe 01       	movw	r30, r28
    21d4:	ef 59       	subi	r30, 0x9F	; 159
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 81       	ld	r24, Z
    21da:	82 95       	swap	r24
    21dc:	86 95       	lsr	r24
    21de:	87 70       	andi	r24, 0x07	; 7
    21e0:	98 2f       	mov	r25, r24
    21e2:	91 70       	andi	r25, 0x01	; 1
    21e4:	89 e0       	ldi	r24, 0x09	; 9
    21e6:	69 2f       	mov	r22, r25
    21e8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 6));
    21ec:	fe 01       	movw	r30, r28
    21ee:	ef 59       	subi	r30, 0x9F	; 159
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 81       	ld	r24, Z
    21f4:	82 95       	swap	r24
    21f6:	86 95       	lsr	r24
    21f8:	86 95       	lsr	r24
    21fa:	83 70       	andi	r24, 0x03	; 3
    21fc:	98 2f       	mov	r25, r24
    21fe:	91 70       	andi	r25, 0x01	; 1
    2200:	8a e0       	ldi	r24, 0x0A	; 10
    2202:	69 2f       	mov	r22, r25
    2204:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 7));
    2208:	fe 01       	movw	r30, r28
    220a:	ef 59       	subi	r30, 0x9F	; 159
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	98 2f       	mov	r25, r24
    2212:	99 1f       	adc	r25, r25
    2214:	99 27       	eor	r25, r25
    2216:	99 1f       	adc	r25, r25
    2218:	8c e0       	ldi	r24, 0x0C	; 12
    221a:	69 2f       	mov	r22, r25
    221c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2220:	82 e0       	ldi	r24, 0x02	; 2
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    2228:	fe 01       	movw	r30, r28
    222a:	e3 5a       	subi	r30, 0xA3	; 163
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e8       	ldi	r26, 0x80	; 128
    2234:	bf e3       	ldi	r27, 0x3F	; 63
    2236:	80 83       	st	Z, r24
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	a2 83       	std	Z+2, r26	; 0x02
    223c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    223e:	8e 01       	movw	r16, r28
    2240:	07 5a       	subi	r16, 0xA7	; 167
    2242:	1f 4f       	sbci	r17, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	e3 5a       	subi	r30, 0xA3	; 163
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	2b ea       	ldi	r18, 0xAB	; 171
    2254:	3a ea       	ldi	r19, 0xAA	; 170
    2256:	4a ea       	ldi	r20, 0xAA	; 170
    2258:	50 e4       	ldi	r21, 0x40	; 64
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	f8 01       	movw	r30, r16
    2264:	80 83       	st	Z, r24
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	a2 83       	std	Z+2, r26	; 0x02
    226a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    226c:	fe 01       	movw	r30, r28
    226e:	e7 5a       	subi	r30, 0xA7	; 167
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	5f e3       	ldi	r21, 0x3F	; 63
    2282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2286:	88 23       	and	r24, r24
    2288:	34 f4       	brge	.+12     	; 0x2296 <Lcd_SendCMD+0x106>
		__ticks = 1;
    228a:	fe 01       	movw	r30, r28
    228c:	e8 5a       	subi	r30, 0xA8	; 168
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	80 83       	st	Z, r24
    2294:	e0 c0       	rjmp	.+448    	; 0x2456 <Lcd_SendCMD+0x2c6>
	else if (__tmp > 255)
    2296:	fe 01       	movw	r30, r28
    2298:	e7 5a       	subi	r30, 0xA7	; 167
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	60 81       	ld	r22, Z
    229e:	71 81       	ldd	r23, Z+1	; 0x01
    22a0:	82 81       	ldd	r24, Z+2	; 0x02
    22a2:	93 81       	ldd	r25, Z+3	; 0x03
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	53 e4       	ldi	r21, 0x43	; 67
    22ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	0c f0       	brlt	.+2      	; 0x22b6 <Lcd_SendCMD+0x126>
    22b4:	c0 c0       	rjmp	.+384    	; 0x2436 <Lcd_SendCMD+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    22b6:	fe 01       	movw	r30, r28
    22b8:	e3 5a       	subi	r30, 0xA3	; 163
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	60 81       	ld	r22, Z
    22be:	71 81       	ldd	r23, Z+1	; 0x01
    22c0:	82 81       	ldd	r24, Z+2	; 0x02
    22c2:	93 81       	ldd	r25, Z+3	; 0x03
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a e7       	ldi	r20, 0x7A	; 122
    22ca:	54 e4       	ldi	r21, 0x44	; 68
    22cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	fe 01       	movw	r30, r28
    22d6:	ec 5a       	subi	r30, 0xAC	; 172
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 83       	st	Z, r24
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	a2 83       	std	Z+2, r26	; 0x02
    22e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e2:	8e 01       	movw	r16, r28
    22e4:	00 5b       	subi	r16, 0xB0	; 176
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	fe 01       	movw	r30, r28
    22ea:	ec 5a       	subi	r30, 0xAC	; 172
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a e7       	ldi	r20, 0x7A	; 122
    22fc:	55 e4       	ldi	r21, 0x45	; 69
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	f8 01       	movw	r30, r16
    2308:	80 83       	st	Z, r24
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	a2 83       	std	Z+2, r26	; 0x02
    230e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2310:	fe 01       	movw	r30, r28
    2312:	e0 5b       	subi	r30, 0xB0	; 176
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	44 f4       	brge	.+16     	; 0x233e <Lcd_SendCMD+0x1ae>
		__ticks = 1;
    232e:	fe 01       	movw	r30, r28
    2330:	e2 5b       	subi	r30, 0xB2	; 178
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	64 c0       	rjmp	.+200    	; 0x2406 <Lcd_SendCMD+0x276>
	else if (__tmp > 65535)
    233e:	fe 01       	movw	r30, r28
    2340:	e0 5b       	subi	r30, 0xB0	; 176
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	0c f0       	brlt	.+2      	; 0x235e <Lcd_SendCMD+0x1ce>
    235c:	43 c0       	rjmp	.+134    	; 0x23e4 <Lcd_SendCMD+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235e:	fe 01       	movw	r30, r28
    2360:	ec 5a       	subi	r30, 0xAC	; 172
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8e 01       	movw	r16, r28
    237e:	02 5b       	subi	r16, 0xB2	; 178
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	f8 01       	movw	r30, r16
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
    2394:	1f c0       	rjmp	.+62     	; 0x23d4 <Lcd_SendCMD+0x244>
    2396:	fe 01       	movw	r30, r28
    2398:	e4 5b       	subi	r30, 0xB4	; 180
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 e9       	ldi	r24, 0x90	; 144
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	fe 01       	movw	r30, r28
    23a6:	e4 5b       	subi	r30, 0xB4	; 180
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <Lcd_SendCMD+0x21e>
    23b2:	fe 01       	movw	r30, r28
    23b4:	e4 5b       	subi	r30, 0xB4	; 180
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	de 01       	movw	r26, r28
    23be:	a2 5b       	subi	r26, 0xB2	; 178
    23c0:	bf 4f       	sbci	r27, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	e2 5b       	subi	r30, 0xB2	; 178
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	9c 93       	st	X, r25
    23d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	fe 01       	movw	r30, r28
    23d6:	e2 5b       	subi	r30, 0xB2	; 178
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	d1 f6       	brne	.-76     	; 0x2396 <Lcd_SendCMD+0x206>
    23e2:	4b c0       	rjmp	.+150    	; 0x247a <Lcd_SendCMD+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	8e 01       	movw	r16, r28
    23e6:	02 5b       	subi	r16, 0xB2	; 178
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	fe 01       	movw	r30, r28
    23ec:	e0 5b       	subi	r30, 0xB0	; 176
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	f8 01       	movw	r30, r16
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
    2406:	de 01       	movw	r26, r28
    2408:	a6 5b       	subi	r26, 0xB6	; 182
    240a:	bf 4f       	sbci	r27, 0xFF	; 255
    240c:	fe 01       	movw	r30, r28
    240e:	e2 5b       	subi	r30, 0xB2	; 178
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	11 96       	adiw	r26, 0x01	; 1
    2418:	9c 93       	st	X, r25
    241a:	8e 93       	st	-X, r24
    241c:	fe 01       	movw	r30, r28
    241e:	e6 5b       	subi	r30, 0xB6	; 182
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <Lcd_SendCMD+0x296>
    242a:	fe 01       	movw	r30, r28
    242c:	e6 5b       	subi	r30, 0xB6	; 182
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	80 83       	st	Z, r24
    2434:	22 c0       	rjmp	.+68     	; 0x247a <Lcd_SendCMD+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2436:	8e 01       	movw	r16, r28
    2438:	08 5a       	subi	r16, 0xA8	; 168
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	e7 5a       	subi	r30, 0xA7	; 167
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	f8 01       	movw	r30, r16
    2454:	80 83       	st	Z, r24
    2456:	de 01       	movw	r26, r28
    2458:	a7 5b       	subi	r26, 0xB7	; 183
    245a:	bf 4f       	sbci	r27, 0xFF	; 255
    245c:	fe 01       	movw	r30, r28
    245e:	e8 5a       	subi	r30, 0xA8	; 168
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2466:	fe 01       	movw	r30, r28
    2468:	e7 5b       	subi	r30, 0xB7	; 183
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	8a 95       	dec	r24
    2470:	f1 f7       	brne	.-4      	; 0x246e <Lcd_SendCMD+0x2de>
    2472:	fe 01       	movw	r30, r28
    2474:	e7 5b       	subi	r30, 0xB7	; 183
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    2482:	fe 01       	movw	r30, r28
    2484:	eb 5b       	subi	r30, 0xBB	; 187
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a0 e8       	ldi	r26, 0x80	; 128
    248e:	bf e3       	ldi	r27, 0x3F	; 63
    2490:	80 83       	st	Z, r24
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	a2 83       	std	Z+2, r26	; 0x02
    2496:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2498:	8e 01       	movw	r16, r28
    249a:	0f 5b       	subi	r16, 0xBF	; 191
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	fe 01       	movw	r30, r28
    24a0:	eb 5b       	subi	r30, 0xBB	; 187
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	2b ea       	ldi	r18, 0xAB	; 171
    24ae:	3a ea       	ldi	r19, 0xAA	; 170
    24b0:	4a ea       	ldi	r20, 0xAA	; 170
    24b2:	50 e4       	ldi	r21, 0x40	; 64
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	f8 01       	movw	r30, r16
    24be:	80 83       	st	Z, r24
    24c0:	91 83       	std	Z+1, r25	; 0x01
    24c2:	a2 83       	std	Z+2, r26	; 0x02
    24c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c6:	fe 01       	movw	r30, r28
    24c8:	ef 5b       	subi	r30, 0xBF	; 191
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	34 f4       	brge	.+12     	; 0x24f0 <Lcd_SendCMD+0x360>
		__ticks = 1;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	fe 01       	movw	r30, r28
    24e8:	e0 5c       	subi	r30, 0xC0	; 192
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 83       	st	Z, r24
    24ee:	9d c0       	rjmp	.+314    	; 0x262a <Lcd_SendCMD+0x49a>
	else if (__tmp > 255)
    24f0:	fe 01       	movw	r30, r28
    24f2:	ef 5b       	subi	r30, 0xBF	; 191
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	53 e4       	ldi	r21, 0x43	; 67
    2506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	0c f0       	brlt	.+2      	; 0x2510 <Lcd_SendCMD+0x380>
    250e:	7e c0       	rjmp	.+252    	; 0x260c <Lcd_SendCMD+0x47c>
	{
		_delay_ms(__us / 1000.0);
    2510:	fe 01       	movw	r30, r28
    2512:	eb 5b       	subi	r30, 0xBB	; 187
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a e7       	ldi	r20, 0x7A	; 122
    2524:	54 e4       	ldi	r21, 0x44	; 68
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8c af       	std	Y+60, r24	; 0x3c
    2530:	9d af       	std	Y+61, r25	; 0x3d
    2532:	ae af       	std	Y+62, r26	; 0x3e
    2534:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2536:	6c ad       	ldd	r22, Y+60	; 0x3c
    2538:	7d ad       	ldd	r23, Y+61	; 0x3d
    253a:	8e ad       	ldd	r24, Y+62	; 0x3e
    253c:	9f ad       	ldd	r25, Y+63	; 0x3f
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a e7       	ldi	r20, 0x7A	; 122
    2544:	55 e4       	ldi	r21, 0x45	; 69
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	88 af       	std	Y+56, r24	; 0x38
    2550:	99 af       	std	Y+57, r25	; 0x39
    2552:	aa af       	std	Y+58, r26	; 0x3a
    2554:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2556:	68 ad       	ldd	r22, Y+56	; 0x38
    2558:	79 ad       	ldd	r23, Y+57	; 0x39
    255a:	8a ad       	ldd	r24, Y+58	; 0x3a
    255c:	9b ad       	ldd	r25, Y+59	; 0x3b
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	2c f4       	brge	.+10     	; 0x2578 <Lcd_SendCMD+0x3e8>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9f ab       	std	Y+55, r25	; 0x37
    2574:	8e ab       	std	Y+54, r24	; 0x36
    2576:	3f c0       	rjmp	.+126    	; 0x25f6 <Lcd_SendCMD+0x466>
	else if (__tmp > 65535)
    2578:	68 ad       	ldd	r22, Y+56	; 0x38
    257a:	79 ad       	ldd	r23, Y+57	; 0x39
    257c:	8a ad       	ldd	r24, Y+58	; 0x3a
    257e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	4c f5       	brge	.+82     	; 0x25e2 <Lcd_SendCMD+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	6c ad       	ldd	r22, Y+60	; 0x3c
    2592:	7d ad       	ldd	r23, Y+61	; 0x3d
    2594:	8e ad       	ldd	r24, Y+62	; 0x3e
    2596:	9f ad       	ldd	r25, Y+63	; 0x3f
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9f ab       	std	Y+55, r25	; 0x37
    25b6:	8e ab       	std	Y+54, r24	; 0x36
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <Lcd_SendCMD+0x448>
    25ba:	80 e9       	ldi	r24, 0x90	; 144
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	9d ab       	std	Y+53, r25	; 0x35
    25c0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c2:	8c a9       	ldd	r24, Y+52	; 0x34
    25c4:	9d a9       	ldd	r25, Y+53	; 0x35
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <Lcd_SendCMD+0x436>
    25ca:	9d ab       	std	Y+53, r25	; 0x35
    25cc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	8e a9       	ldd	r24, Y+54	; 0x36
    25d0:	9f a9       	ldd	r25, Y+55	; 0x37
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9f ab       	std	Y+55, r25	; 0x37
    25d6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	8e a9       	ldd	r24, Y+54	; 0x36
    25da:	9f a9       	ldd	r25, Y+55	; 0x37
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <Lcd_SendCMD+0x42a>
    25e0:	2d c0       	rjmp	.+90     	; 0x263c <Lcd_SendCMD+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	68 ad       	ldd	r22, Y+56	; 0x38
    25e4:	79 ad       	ldd	r23, Y+57	; 0x39
    25e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    25e8:	9b ad       	ldd	r25, Y+59	; 0x3b
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9f ab       	std	Y+55, r25	; 0x37
    25f4:	8e ab       	std	Y+54, r24	; 0x36
    25f6:	8e a9       	ldd	r24, Y+54	; 0x36
    25f8:	9f a9       	ldd	r25, Y+55	; 0x37
    25fa:	9b ab       	std	Y+51, r25	; 0x33
    25fc:	8a ab       	std	Y+50, r24	; 0x32
    25fe:	8a a9       	ldd	r24, Y+50	; 0x32
    2600:	9b a9       	ldd	r25, Y+51	; 0x33
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <Lcd_SendCMD+0x472>
    2606:	9b ab       	std	Y+51, r25	; 0x33
    2608:	8a ab       	std	Y+50, r24	; 0x32
    260a:	18 c0       	rjmp	.+48     	; 0x263c <Lcd_SendCMD+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    260c:	fe 01       	movw	r30, r28
    260e:	ef 5b       	subi	r30, 0xBF	; 191
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	fe 01       	movw	r30, r28
    2624:	e0 5c       	subi	r30, 0xC0	; 192
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 83       	st	Z, r24
    262a:	fe 01       	movw	r30, r28
    262c:	e0 5c       	subi	r30, 0xC0	; 192
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2634:	89 a9       	ldd	r24, Y+49	; 0x31
    2636:	8a 95       	dec	r24
    2638:	f1 f7       	brne	.-4      	; 0x2636 <Lcd_SendCMD+0x4a6>
    263a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 0));
    263c:	fe 01       	movw	r30, r28
    263e:	ef 59       	subi	r30, 0x9F	; 159
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	98 2f       	mov	r25, r24
    2646:	91 70       	andi	r25, 0x01	; 1
    2648:	88 e0       	ldi	r24, 0x08	; 8
    264a:	69 2f       	mov	r22, r25
    264c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 1));
    2650:	fe 01       	movw	r30, r28
    2652:	ef 59       	subi	r30, 0x9F	; 159
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	86 95       	lsr	r24
    265a:	98 2f       	mov	r25, r24
    265c:	91 70       	andi	r25, 0x01	; 1
    265e:	89 e0       	ldi	r24, 0x09	; 9
    2660:	69 2f       	mov	r22, r25
    2662:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 2));
    2666:	fe 01       	movw	r30, r28
    2668:	ef 59       	subi	r30, 0x9F	; 159
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	86 95       	lsr	r24
    2670:	86 95       	lsr	r24
    2672:	98 2f       	mov	r25, r24
    2674:	91 70       	andi	r25, 0x01	; 1
    2676:	8a e0       	ldi	r24, 0x0A	; 10
    2678:	69 2f       	mov	r22, r25
    267a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 3));
    267e:	fe 01       	movw	r30, r28
    2680:	ef 59       	subi	r30, 0x9F	; 159
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	86 95       	lsr	r24
    2688:	86 95       	lsr	r24
    268a:	86 95       	lsr	r24
    268c:	98 2f       	mov	r25, r24
    268e:	91 70       	andi	r25, 0x01	; 1
    2690:	8c e0       	ldi	r24, 0x0C	; 12
    2692:	69 2f       	mov	r22, r25
    2694:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	61 e0       	ldi	r22, 0x01	; 1
    269c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a0 e8       	ldi	r26, 0x80	; 128
    26a6:	bf e3       	ldi	r27, 0x3F	; 63
    26a8:	8d a7       	std	Y+45, r24	; 0x2d
    26aa:	9e a7       	std	Y+46, r25	; 0x2e
    26ac:	af a7       	std	Y+47, r26	; 0x2f
    26ae:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26b0:	6d a5       	ldd	r22, Y+45	; 0x2d
    26b2:	7e a5       	ldd	r23, Y+46	; 0x2e
    26b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b6:	98 a9       	ldd	r25, Y+48	; 0x30
    26b8:	2b ea       	ldi	r18, 0xAB	; 171
    26ba:	3a ea       	ldi	r19, 0xAA	; 170
    26bc:	4a ea       	ldi	r20, 0xAA	; 170
    26be:	50 e4       	ldi	r21, 0x40	; 64
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	89 a7       	std	Y+41, r24	; 0x29
    26ca:	9a a7       	std	Y+42, r25	; 0x2a
    26cc:	ab a7       	std	Y+43, r26	; 0x2b
    26ce:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26d0:	69 a5       	ldd	r22, Y+41	; 0x29
    26d2:	7a a5       	ldd	r23, Y+42	; 0x2a
    26d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    26d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	1c f4       	brge	.+6      	; 0x26ee <Lcd_SendCMD+0x55e>
		__ticks = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	88 a7       	std	Y+40, r24	; 0x28
    26ec:	91 c0       	rjmp	.+290    	; 0x2810 <Lcd_SendCMD+0x680>
	else if (__tmp > 255)
    26ee:	69 a5       	ldd	r22, Y+41	; 0x29
    26f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    26f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4f e7       	ldi	r20, 0x7F	; 127
    26fc:	53 e4       	ldi	r21, 0x43	; 67
    26fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2702:	18 16       	cp	r1, r24
    2704:	0c f0       	brlt	.+2      	; 0x2708 <Lcd_SendCMD+0x578>
    2706:	7b c0       	rjmp	.+246    	; 0x27fe <Lcd_SendCMD+0x66e>
	{
		_delay_ms(__us / 1000.0);
    2708:	6d a5       	ldd	r22, Y+45	; 0x2d
    270a:	7e a5       	ldd	r23, Y+46	; 0x2e
    270c:	8f a5       	ldd	r24, Y+47	; 0x2f
    270e:	98 a9       	ldd	r25, Y+48	; 0x30
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a e7       	ldi	r20, 0x7A	; 122
    2716:	54 e4       	ldi	r21, 0x44	; 68
    2718:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8c a3       	std	Y+36, r24	; 0x24
    2722:	9d a3       	std	Y+37, r25	; 0x25
    2724:	ae a3       	std	Y+38, r26	; 0x26
    2726:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	6c a1       	ldd	r22, Y+36	; 0x24
    272a:	7d a1       	ldd	r23, Y+37	; 0x25
    272c:	8e a1       	ldd	r24, Y+38	; 0x26
    272e:	9f a1       	ldd	r25, Y+39	; 0x27
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a e7       	ldi	r20, 0x7A	; 122
    2736:	55 e4       	ldi	r21, 0x45	; 69
    2738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	88 a3       	std	Y+32, r24	; 0x20
    2742:	99 a3       	std	Y+33, r25	; 0x21
    2744:	aa a3       	std	Y+34, r26	; 0x22
    2746:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2748:	68 a1       	ldd	r22, Y+32	; 0x20
    274a:	79 a1       	ldd	r23, Y+33	; 0x21
    274c:	8a a1       	ldd	r24, Y+34	; 0x22
    274e:	9b a1       	ldd	r25, Y+35	; 0x23
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	2c f4       	brge	.+10     	; 0x276a <Lcd_SendCMD+0x5da>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9f 8f       	std	Y+31, r25	; 0x1f
    2766:	8e 8f       	std	Y+30, r24	; 0x1e
    2768:	3f c0       	rjmp	.+126    	; 0x27e8 <Lcd_SendCMD+0x658>
	else if (__tmp > 65535)
    276a:	68 a1       	ldd	r22, Y+32	; 0x20
    276c:	79 a1       	ldd	r23, Y+33	; 0x21
    276e:	8a a1       	ldd	r24, Y+34	; 0x22
    2770:	9b a1       	ldd	r25, Y+35	; 0x23
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	4c f5       	brge	.+82     	; 0x27d4 <Lcd_SendCMD+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	6c a1       	ldd	r22, Y+36	; 0x24
    2784:	7d a1       	ldd	r23, Y+37	; 0x25
    2786:	8e a1       	ldd	r24, Y+38	; 0x26
    2788:	9f a1       	ldd	r25, Y+39	; 0x27
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e2       	ldi	r20, 0x20	; 32
    2790:	51 e4       	ldi	r21, 0x41	; 65
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9f 8f       	std	Y+31, r25	; 0x1f
    27a8:	8e 8f       	std	Y+30, r24	; 0x1e
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <Lcd_SendCMD+0x63a>
    27ac:	80 e9       	ldi	r24, 0x90	; 144
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	9d 8f       	std	Y+29, r25	; 0x1d
    27b2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <Lcd_SendCMD+0x628>
    27bc:	9d 8f       	std	Y+29, r25	; 0x1d
    27be:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	9f 8f       	std	Y+31, r25	; 0x1f
    27c8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	69 f7       	brne	.-38     	; 0x27ac <Lcd_SendCMD+0x61c>
    27d2:	24 c0       	rjmp	.+72     	; 0x281c <Lcd_SendCMD+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	68 a1       	ldd	r22, Y+32	; 0x20
    27d6:	79 a1       	ldd	r23, Y+33	; 0x21
    27d8:	8a a1       	ldd	r24, Y+34	; 0x22
    27da:	9b a1       	ldd	r25, Y+35	; 0x23
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9f 8f       	std	Y+31, r25	; 0x1f
    27e6:	8e 8f       	std	Y+30, r24	; 0x1e
    27e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ec:	9b 8f       	std	Y+27, r25	; 0x1b
    27ee:	8a 8f       	std	Y+26, r24	; 0x1a
    27f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <Lcd_SendCMD+0x664>
    27f8:	9b 8f       	std	Y+27, r25	; 0x1b
    27fa:	8a 8f       	std	Y+26, r24	; 0x1a
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <Lcd_SendCMD+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27fe:	69 a5       	ldd	r22, Y+41	; 0x29
    2800:	7a a5       	ldd	r23, Y+42	; 0x2a
    2802:	8b a5       	ldd	r24, Y+43	; 0x2b
    2804:	9c a5       	ldd	r25, Y+44	; 0x2c
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	88 a7       	std	Y+40, r24	; 0x28
    2810:	88 a5       	ldd	r24, Y+40	; 0x28
    2812:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2814:	89 8d       	ldd	r24, Y+25	; 0x19
    2816:	8a 95       	dec	r24
    2818:	f1 f7       	brne	.-4      	; 0x2816 <Lcd_SendCMD+0x686>
    281a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 e8       	ldi	r26, 0x80	; 128
    282a:	bf e3       	ldi	r27, 0x3F	; 63
    282c:	8d 8b       	std	Y+21, r24	; 0x15
    282e:	9e 8b       	std	Y+22, r25	; 0x16
    2830:	af 8b       	std	Y+23, r26	; 0x17
    2832:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2834:	6d 89       	ldd	r22, Y+21	; 0x15
    2836:	7e 89       	ldd	r23, Y+22	; 0x16
    2838:	8f 89       	ldd	r24, Y+23	; 0x17
    283a:	98 8d       	ldd	r25, Y+24	; 0x18
    283c:	2b ea       	ldi	r18, 0xAB	; 171
    283e:	3a ea       	ldi	r19, 0xAA	; 170
    2840:	4a ea       	ldi	r20, 0xAA	; 170
    2842:	50 e4       	ldi	r21, 0x40	; 64
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	89 8b       	std	Y+17, r24	; 0x11
    284e:	9a 8b       	std	Y+18, r25	; 0x12
    2850:	ab 8b       	std	Y+19, r26	; 0x13
    2852:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2854:	69 89       	ldd	r22, Y+17	; 0x11
    2856:	7a 89       	ldd	r23, Y+18	; 0x12
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2868:	88 23       	and	r24, r24
    286a:	1c f4       	brge	.+6      	; 0x2872 <Lcd_SendCMD+0x6e2>
		__ticks = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	88 8b       	std	Y+16, r24	; 0x10
    2870:	91 c0       	rjmp	.+290    	; 0x2994 <Lcd_SendCMD+0x804>
	else if (__tmp > 255)
    2872:	69 89       	ldd	r22, Y+17	; 0x11
    2874:	7a 89       	ldd	r23, Y+18	; 0x12
    2876:	8b 89       	ldd	r24, Y+19	; 0x13
    2878:	9c 89       	ldd	r25, Y+20	; 0x14
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4f e7       	ldi	r20, 0x7F	; 127
    2880:	53 e4       	ldi	r21, 0x43	; 67
    2882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2886:	18 16       	cp	r1, r24
    2888:	0c f0       	brlt	.+2      	; 0x288c <Lcd_SendCMD+0x6fc>
    288a:	7b c0       	rjmp	.+246    	; 0x2982 <Lcd_SendCMD+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    288c:	6d 89       	ldd	r22, Y+21	; 0x15
    288e:	7e 89       	ldd	r23, Y+22	; 0x16
    2890:	8f 89       	ldd	r24, Y+23	; 0x17
    2892:	98 8d       	ldd	r25, Y+24	; 0x18
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4a e7       	ldi	r20, 0x7A	; 122
    289a:	54 e4       	ldi	r21, 0x44	; 68
    289c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	8c 87       	std	Y+12, r24	; 0x0c
    28a6:	9d 87       	std	Y+13, r25	; 0x0d
    28a8:	ae 87       	std	Y+14, r26	; 0x0e
    28aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    28ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    28b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    28b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a e7       	ldi	r20, 0x7A	; 122
    28ba:	55 e4       	ldi	r21, 0x45	; 69
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	88 87       	std	Y+8, r24	; 0x08
    28c6:	99 87       	std	Y+9, r25	; 0x09
    28c8:	aa 87       	std	Y+10, r26	; 0x0a
    28ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28cc:	68 85       	ldd	r22, Y+8	; 0x08
    28ce:	79 85       	ldd	r23, Y+9	; 0x09
    28d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	2c f4       	brge	.+10     	; 0x28ee <Lcd_SendCMD+0x75e>
		__ticks = 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9f 83       	std	Y+7, r25	; 0x07
    28ea:	8e 83       	std	Y+6, r24	; 0x06
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <Lcd_SendCMD+0x7dc>
	else if (__tmp > 65535)
    28ee:	68 85       	ldd	r22, Y+8	; 0x08
    28f0:	79 85       	ldd	r23, Y+9	; 0x09
    28f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	57 e4       	ldi	r21, 0x47	; 71
    28fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	4c f5       	brge	.+82     	; 0x2958 <Lcd_SendCMD+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	6c 85       	ldd	r22, Y+12	; 0x0c
    2908:	7d 85       	ldd	r23, Y+13	; 0x0d
    290a:	8e 85       	ldd	r24, Y+14	; 0x0e
    290c:	9f 85       	ldd	r25, Y+15	; 0x0f
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9f 83       	std	Y+7, r25	; 0x07
    292c:	8e 83       	std	Y+6, r24	; 0x06
    292e:	0f c0       	rjmp	.+30     	; 0x294e <Lcd_SendCMD+0x7be>
    2930:	80 e9       	ldi	r24, 0x90	; 144
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	9d 83       	std	Y+5, r25	; 0x05
    2936:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2938:	8c 81       	ldd	r24, Y+4	; 0x04
    293a:	9d 81       	ldd	r25, Y+5	; 0x05
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <Lcd_SendCMD+0x7ac>
    2940:	9d 83       	std	Y+5, r25	; 0x05
    2942:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	8e 81       	ldd	r24, Y+6	; 0x06
    2946:	9f 81       	ldd	r25, Y+7	; 0x07
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	9f 83       	std	Y+7, r25	; 0x07
    294c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	8e 81       	ldd	r24, Y+6	; 0x06
    2950:	9f 81       	ldd	r25, Y+7	; 0x07
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	69 f7       	brne	.-38     	; 0x2930 <Lcd_SendCMD+0x7a0>
    2956:	24 c0       	rjmp	.+72     	; 0x29a0 <Lcd_SendCMD+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	68 85       	ldd	r22, Y+8	; 0x08
    295a:	79 85       	ldd	r23, Y+9	; 0x09
    295c:	8a 85       	ldd	r24, Y+10	; 0x0a
    295e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9f 83       	std	Y+7, r25	; 0x07
    296a:	8e 83       	std	Y+6, r24	; 0x06
    296c:	8e 81       	ldd	r24, Y+6	; 0x06
    296e:	9f 81       	ldd	r25, Y+7	; 0x07
    2970:	9b 83       	std	Y+3, r25	; 0x03
    2972:	8a 83       	std	Y+2, r24	; 0x02
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	9b 81       	ldd	r25, Y+3	; 0x03
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <Lcd_SendCMD+0x7e8>
    297c:	9b 83       	std	Y+3, r25	; 0x03
    297e:	8a 83       	std	Y+2, r24	; 0x02
    2980:	0f c0       	rjmp	.+30     	; 0x29a0 <Lcd_SendCMD+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2982:	69 89       	ldd	r22, Y+17	; 0x11
    2984:	7a 89       	ldd	r23, Y+18	; 0x12
    2986:	8b 89       	ldd	r24, Y+19	; 0x13
    2988:	9c 89       	ldd	r25, Y+20	; 0x14
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	88 8b       	std	Y+16, r24	; 0x10
    2994:	88 89       	ldd	r24, Y+16	; 0x10
    2996:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	8a 95       	dec	r24
    299c:	f1 f7       	brne	.-4      	; 0x299a <Lcd_SendCMD+0x80a>
    299e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);  // Wait for the command to execute
}
    29a0:	cf 59       	subi	r28, 0x9F	; 159
    29a2:	df 4f       	sbci	r29, 0xFF	; 255
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	08 95       	ret

000029b8 <Lcd_SendData>:

void Lcd_SendData(u8 data) {
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	c1 56       	subi	r28, 0x61	; 97
    29c6:	d0 40       	sbci	r29, 0x00	; 0
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	fe 01       	movw	r30, r28
    29d4:	ef 59       	subi	r30, 0x9F	; 159
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 83       	st	Z, r24

	// Set RS to data mode
//	SET_BIT(PORTA, LCD_RS);
	Dio_WriteChannel(LCD_RS, STD_HIGH);
    29da:	83 e0       	ldi	r24, 0x03	; 3
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	// Send the high nibble

	Dio_WriteChannel(PB_0, GET_BIT(data, 4));
    29e2:	fe 01       	movw	r30, r28
    29e4:	ef 59       	subi	r30, 0x9F	; 159
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	82 95       	swap	r24
    29ec:	8f 70       	andi	r24, 0x0F	; 15
    29ee:	98 2f       	mov	r25, r24
    29f0:	91 70       	andi	r25, 0x01	; 1
    29f2:	88 e0       	ldi	r24, 0x08	; 8
    29f4:	69 2f       	mov	r22, r25
    29f6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 5));
    29fa:	fe 01       	movw	r30, r28
    29fc:	ef 59       	subi	r30, 0x9F	; 159
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	82 95       	swap	r24
    2a04:	86 95       	lsr	r24
    2a06:	87 70       	andi	r24, 0x07	; 7
    2a08:	98 2f       	mov	r25, r24
    2a0a:	91 70       	andi	r25, 0x01	; 1
    2a0c:	89 e0       	ldi	r24, 0x09	; 9
    2a0e:	69 2f       	mov	r22, r25
    2a10:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 6));
    2a14:	fe 01       	movw	r30, r28
    2a16:	ef 59       	subi	r30, 0x9F	; 159
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 81       	ld	r24, Z
    2a1c:	82 95       	swap	r24
    2a1e:	86 95       	lsr	r24
    2a20:	86 95       	lsr	r24
    2a22:	83 70       	andi	r24, 0x03	; 3
    2a24:	98 2f       	mov	r25, r24
    2a26:	91 70       	andi	r25, 0x01	; 1
    2a28:	8a e0       	ldi	r24, 0x0A	; 10
    2a2a:	69 2f       	mov	r22, r25
    2a2c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 7));
    2a30:	fe 01       	movw	r30, r28
    2a32:	ef 59       	subi	r30, 0x9F	; 159
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	98 2f       	mov	r25, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	99 27       	eor	r25, r25
    2a3e:	99 1f       	adc	r25, r25
    2a40:	8c e0       	ldi	r24, 0x0C	; 12
    2a42:	69 2f       	mov	r22, r25
    2a44:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	61 e0       	ldi	r22, 0x01	; 1
    2a4c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    2a50:	fe 01       	movw	r30, r28
    2a52:	e3 5a       	subi	r30, 0xA3	; 163
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	a0 e8       	ldi	r26, 0x80	; 128
    2a5c:	bf e3       	ldi	r27, 0x3F	; 63
    2a5e:	80 83       	st	Z, r24
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	a2 83       	std	Z+2, r26	; 0x02
    2a64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a66:	8e 01       	movw	r16, r28
    2a68:	07 5a       	subi	r16, 0xA7	; 167
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e3 5a       	subi	r30, 0xA3	; 163
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	2b ea       	ldi	r18, 0xAB	; 171
    2a7c:	3a ea       	ldi	r19, 0xAA	; 170
    2a7e:	4a ea       	ldi	r20, 0xAA	; 170
    2a80:	50 e4       	ldi	r21, 0x40	; 64
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	80 83       	st	Z, r24
    2a8e:	91 83       	std	Z+1, r25	; 0x01
    2a90:	a2 83       	std	Z+2, r26	; 0x02
    2a92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a94:	fe 01       	movw	r30, r28
    2a96:	e7 5a       	subi	r30, 0xA7	; 167
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	60 81       	ld	r22, Z
    2a9c:	71 81       	ldd	r23, Z+1	; 0x01
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	34 f4       	brge	.+12     	; 0x2abe <Lcd_SendData+0x106>
		__ticks = 1;
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e8 5a       	subi	r30, 0xA8	; 168
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	80 83       	st	Z, r24
    2abc:	e0 c0       	rjmp	.+448    	; 0x2c7e <Lcd_SendData+0x2c6>
	else if (__tmp > 255)
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e7 5a       	subi	r30, 0xA7	; 167
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	60 81       	ld	r22, Z
    2ac6:	71 81       	ldd	r23, Z+1	; 0x01
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	53 e4       	ldi	r21, 0x43	; 67
    2ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	0c f0       	brlt	.+2      	; 0x2ade <Lcd_SendData+0x126>
    2adc:	c0 c0       	rjmp	.+384    	; 0x2c5e <Lcd_SendData+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e3 5a       	subi	r30, 0xA3	; 163
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a e7       	ldi	r20, 0x7A	; 122
    2af2:	54 e4       	ldi	r21, 0x44	; 68
    2af4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	fe 01       	movw	r30, r28
    2afe:	ec 5a       	subi	r30, 0xAC	; 172
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	80 83       	st	Z, r24
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	a2 83       	std	Z+2, r26	; 0x02
    2b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	00 5b       	subi	r16, 0xB0	; 176
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	ec 5a       	subi	r30, 0xAC	; 172
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a e7       	ldi	r20, 0x7A	; 122
    2b24:	55 e4       	ldi	r21, 0x45	; 69
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	f8 01       	movw	r30, r16
    2b30:	80 83       	st	Z, r24
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	a2 83       	std	Z+2, r26	; 0x02
    2b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e0 5b       	subi	r30, 0xB0	; 176
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	60 81       	ld	r22, Z
    2b40:	71 81       	ldd	r23, Z+1	; 0x01
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	44 f4       	brge	.+16     	; 0x2b66 <Lcd_SendData+0x1ae>
		__ticks = 1;
    2b56:	fe 01       	movw	r30, r28
    2b58:	e2 5b       	subi	r30, 0xB2	; 178
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24
    2b64:	64 c0       	rjmp	.+200    	; 0x2c2e <Lcd_SendData+0x276>
	else if (__tmp > 65535)
    2b66:	fe 01       	movw	r30, r28
    2b68:	e0 5b       	subi	r30, 0xB0	; 176
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	4f e7       	ldi	r20, 0x7F	; 127
    2b7a:	57 e4       	ldi	r21, 0x47	; 71
    2b7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b80:	18 16       	cp	r1, r24
    2b82:	0c f0       	brlt	.+2      	; 0x2b86 <Lcd_SendData+0x1ce>
    2b84:	43 c0       	rjmp	.+134    	; 0x2c0c <Lcd_SendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	fe 01       	movw	r30, r28
    2b88:	ec 5a       	subi	r30, 0xAC	; 172
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	60 81       	ld	r22, Z
    2b8e:	71 81       	ldd	r23, Z+1	; 0x01
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	93 81       	ldd	r25, Z+3	; 0x03
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8e 01       	movw	r16, r28
    2ba6:	02 5b       	subi	r16, 0xB2	; 178
    2ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	1f c0       	rjmp	.+62     	; 0x2bfc <Lcd_SendData+0x244>
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e4 5b       	subi	r30, 0xB4	; 180
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 e9       	ldi	r24, 0x90	; 144
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e4 5b       	subi	r30, 0xB4	; 180
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	91 81       	ldd	r25, Z+1	; 0x01
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <Lcd_SendData+0x21e>
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e4 5b       	subi	r30, 0xB4	; 180
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be4:	de 01       	movw	r26, r28
    2be6:	a2 5b       	subi	r26, 0xB2	; 178
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	e2 5b       	subi	r30, 0xB2	; 178
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	11 96       	adiw	r26, 0x01	; 1
    2bf8:	9c 93       	st	X, r25
    2bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e2 5b       	subi	r30, 0xB2	; 178
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	91 81       	ldd	r25, Z+1	; 0x01
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	d1 f6       	brne	.-76     	; 0x2bbe <Lcd_SendData+0x206>
    2c0a:	4b c0       	rjmp	.+150    	; 0x2ca2 <Lcd_SendData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	8e 01       	movw	r16, r28
    2c0e:	02 5b       	subi	r16, 0xB2	; 178
    2c10:	1f 4f       	sbci	r17, 0xFF	; 255
    2c12:	fe 01       	movw	r30, r28
    2c14:	e0 5b       	subi	r30, 0xB0	; 176
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	f8 01       	movw	r30, r16
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	80 83       	st	Z, r24
    2c2e:	de 01       	movw	r26, r28
    2c30:	a6 5b       	subi	r26, 0xB6	; 182
    2c32:	bf 4f       	sbci	r27, 0xFF	; 255
    2c34:	fe 01       	movw	r30, r28
    2c36:	e2 5b       	subi	r30, 0xB2	; 178
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	11 96       	adiw	r26, 0x01	; 1
    2c40:	9c 93       	st	X, r25
    2c42:	8e 93       	st	-X, r24
    2c44:	fe 01       	movw	r30, r28
    2c46:	e6 5b       	subi	r30, 0xB6	; 182
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <Lcd_SendData+0x296>
    2c52:	fe 01       	movw	r30, r28
    2c54:	e6 5b       	subi	r30, 0xB6	; 182
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	91 83       	std	Z+1, r25	; 0x01
    2c5a:	80 83       	st	Z, r24
    2c5c:	22 c0       	rjmp	.+68     	; 0x2ca2 <Lcd_SendData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c5e:	8e 01       	movw	r16, r28
    2c60:	08 5a       	subi	r16, 0xA8	; 168
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	fe 01       	movw	r30, r28
    2c66:	e7 5a       	subi	r30, 0xA7	; 167
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	f8 01       	movw	r30, r16
    2c7c:	80 83       	st	Z, r24
    2c7e:	de 01       	movw	r26, r28
    2c80:	a7 5b       	subi	r26, 0xB7	; 183
    2c82:	bf 4f       	sbci	r27, 0xFF	; 255
    2c84:	fe 01       	movw	r30, r28
    2c86:	e8 5a       	subi	r30, 0xA8	; 168
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e7 5b       	subi	r30, 0xB7	; 183
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 81       	ld	r24, Z
    2c96:	8a 95       	dec	r24
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <Lcd_SendData+0x2de>
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e7 5b       	subi	r30, 0xB7	; 183
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    2caa:	fe 01       	movw	r30, r28
    2cac:	eb 5b       	subi	r30, 0xBB	; 187
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	a0 e8       	ldi	r26, 0x80	; 128
    2cb6:	bf e3       	ldi	r27, 0x3F	; 63
    2cb8:	80 83       	st	Z, r24
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	a2 83       	std	Z+2, r26	; 0x02
    2cbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cc0:	8e 01       	movw	r16, r28
    2cc2:	0f 5b       	subi	r16, 0xBF	; 191
    2cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	eb 5b       	subi	r30, 0xBB	; 187
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	60 81       	ld	r22, Z
    2cce:	71 81       	ldd	r23, Z+1	; 0x01
    2cd0:	82 81       	ldd	r24, Z+2	; 0x02
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	2b ea       	ldi	r18, 0xAB	; 171
    2cd6:	3a ea       	ldi	r19, 0xAA	; 170
    2cd8:	4a ea       	ldi	r20, 0xAA	; 170
    2cda:	50 e4       	ldi	r21, 0x40	; 64
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	80 83       	st	Z, r24
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	a2 83       	std	Z+2, r26	; 0x02
    2cec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cee:	fe 01       	movw	r30, r28
    2cf0:	ef 5b       	subi	r30, 0xBF	; 191
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	60 81       	ld	r22, Z
    2cf6:	71 81       	ldd	r23, Z+1	; 0x01
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	93 81       	ldd	r25, Z+3	; 0x03
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5f e3       	ldi	r21, 0x3F	; 63
    2d04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	34 f4       	brge	.+12     	; 0x2d18 <Lcd_SendData+0x360>
		__ticks = 1;
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e0 5c       	subi	r30, 0xC0	; 192
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 83       	st	Z, r24
    2d16:	9d c0       	rjmp	.+314    	; 0x2e52 <Lcd_SendData+0x49a>
	else if (__tmp > 255)
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ef 5b       	subi	r30, 0xBF	; 191
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	53 e4       	ldi	r21, 0x43	; 67
    2d2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <Lcd_SendData+0x380>
    2d36:	7e c0       	rjmp	.+252    	; 0x2e34 <Lcd_SendData+0x47c>
	{
		_delay_ms(__us / 1000.0);
    2d38:	fe 01       	movw	r30, r28
    2d3a:	eb 5b       	subi	r30, 0xBB	; 187
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a e7       	ldi	r20, 0x7A	; 122
    2d4c:	54 e4       	ldi	r21, 0x44	; 68
    2d4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8c af       	std	Y+60, r24	; 0x3c
    2d58:	9d af       	std	Y+61, r25	; 0x3d
    2d5a:	ae af       	std	Y+62, r26	; 0x3e
    2d5c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d60:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d62:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d64:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a e7       	ldi	r20, 0x7A	; 122
    2d6c:	55 e4       	ldi	r21, 0x45	; 69
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	88 af       	std	Y+56, r24	; 0x38
    2d78:	99 af       	std	Y+57, r25	; 0x39
    2d7a:	aa af       	std	Y+58, r26	; 0x3a
    2d7c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2d7e:	68 ad       	ldd	r22, Y+56	; 0x38
    2d80:	79 ad       	ldd	r23, Y+57	; 0x39
    2d82:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d84:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	5f e3       	ldi	r21, 0x3F	; 63
    2d8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d92:	88 23       	and	r24, r24
    2d94:	2c f4       	brge	.+10     	; 0x2da0 <Lcd_SendData+0x3e8>
		__ticks = 1;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	9f ab       	std	Y+55, r25	; 0x37
    2d9c:	8e ab       	std	Y+54, r24	; 0x36
    2d9e:	3f c0       	rjmp	.+126    	; 0x2e1e <Lcd_SendData+0x466>
	else if (__tmp > 65535)
    2da0:	68 ad       	ldd	r22, Y+56	; 0x38
    2da2:	79 ad       	ldd	r23, Y+57	; 0x39
    2da4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2da6:	9b ad       	ldd	r25, Y+59	; 0x3b
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	3f ef       	ldi	r19, 0xFF	; 255
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	57 e4       	ldi	r21, 0x47	; 71
    2db0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	4c f5       	brge	.+82     	; 0x2e0a <Lcd_SendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2dba:	7d ad       	ldd	r23, Y+61	; 0x3d
    2dbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	cd 01       	movw	r24, r26
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9f ab       	std	Y+55, r25	; 0x37
    2dde:	8e ab       	std	Y+54, r24	; 0x36
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <Lcd_SendData+0x448>
    2de2:	80 e9       	ldi	r24, 0x90	; 144
    2de4:	91 e0       	ldi	r25, 0x01	; 1
    2de6:	9d ab       	std	Y+53, r25	; 0x35
    2de8:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dea:	8c a9       	ldd	r24, Y+52	; 0x34
    2dec:	9d a9       	ldd	r25, Y+53	; 0x35
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <Lcd_SendData+0x436>
    2df2:	9d ab       	std	Y+53, r25	; 0x35
    2df4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df6:	8e a9       	ldd	r24, Y+54	; 0x36
    2df8:	9f a9       	ldd	r25, Y+55	; 0x37
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	9f ab       	std	Y+55, r25	; 0x37
    2dfe:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e00:	8e a9       	ldd	r24, Y+54	; 0x36
    2e02:	9f a9       	ldd	r25, Y+55	; 0x37
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	69 f7       	brne	.-38     	; 0x2de2 <Lcd_SendData+0x42a>
    2e08:	2d c0       	rjmp	.+90     	; 0x2e64 <Lcd_SendData+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0a:	68 ad       	ldd	r22, Y+56	; 0x38
    2e0c:	79 ad       	ldd	r23, Y+57	; 0x39
    2e0e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e10:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	9f ab       	std	Y+55, r25	; 0x37
    2e1c:	8e ab       	std	Y+54, r24	; 0x36
    2e1e:	8e a9       	ldd	r24, Y+54	; 0x36
    2e20:	9f a9       	ldd	r25, Y+55	; 0x37
    2e22:	9b ab       	std	Y+51, r25	; 0x33
    2e24:	8a ab       	std	Y+50, r24	; 0x32
    2e26:	8a a9       	ldd	r24, Y+50	; 0x32
    2e28:	9b a9       	ldd	r25, Y+51	; 0x33
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <Lcd_SendData+0x472>
    2e2e:	9b ab       	std	Y+51, r25	; 0x33
    2e30:	8a ab       	std	Y+50, r24	; 0x32
    2e32:	18 c0       	rjmp	.+48     	; 0x2e64 <Lcd_SendData+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e34:	fe 01       	movw	r30, r28
    2e36:	ef 5b       	subi	r30, 0xBF	; 191
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	60 81       	ld	r22, Z
    2e3c:	71 81       	ldd	r23, Z+1	; 0x01
    2e3e:	82 81       	ldd	r24, Z+2	; 0x02
    2e40:	93 81       	ldd	r25, Z+3	; 0x03
    2e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e0 5c       	subi	r30, 0xC0	; 192
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 83       	st	Z, r24
    2e52:	fe 01       	movw	r30, r28
    2e54:	e0 5c       	subi	r30, 0xC0	; 192
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 81       	ld	r24, Z
    2e5a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e5c:	89 a9       	ldd	r24, Y+49	; 0x31
    2e5e:	8a 95       	dec	r24
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <Lcd_SendData+0x4a6>
    2e62:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(data, 0));
    2e64:	fe 01       	movw	r30, r28
    2e66:	ef 59       	subi	r30, 0x9F	; 159
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 81       	ld	r24, Z
    2e6c:	98 2f       	mov	r25, r24
    2e6e:	91 70       	andi	r25, 0x01	; 1
    2e70:	88 e0       	ldi	r24, 0x08	; 8
    2e72:	69 2f       	mov	r22, r25
    2e74:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 1));
    2e78:	fe 01       	movw	r30, r28
    2e7a:	ef 59       	subi	r30, 0x9F	; 159
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	86 95       	lsr	r24
    2e82:	98 2f       	mov	r25, r24
    2e84:	91 70       	andi	r25, 0x01	; 1
    2e86:	89 e0       	ldi	r24, 0x09	; 9
    2e88:	69 2f       	mov	r22, r25
    2e8a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 2));
    2e8e:	fe 01       	movw	r30, r28
    2e90:	ef 59       	subi	r30, 0x9F	; 159
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 81       	ld	r24, Z
    2e96:	86 95       	lsr	r24
    2e98:	86 95       	lsr	r24
    2e9a:	98 2f       	mov	r25, r24
    2e9c:	91 70       	andi	r25, 0x01	; 1
    2e9e:	8a e0       	ldi	r24, 0x0A	; 10
    2ea0:	69 2f       	mov	r22, r25
    2ea2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 3));
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ef 59       	subi	r30, 0x9F	; 159
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	86 95       	lsr	r24
    2eb0:	86 95       	lsr	r24
    2eb2:	86 95       	lsr	r24
    2eb4:	98 2f       	mov	r25, r24
    2eb6:	91 70       	andi	r25, 0x01	; 1
    2eb8:	8c e0       	ldi	r24, 0x0C	; 12
    2eba:	69 2f       	mov	r22, r25
    2ebc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	61 e0       	ldi	r22, 0x01	; 1
    2ec4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	a0 e8       	ldi	r26, 0x80	; 128
    2ece:	bf e3       	ldi	r27, 0x3F	; 63
    2ed0:	8d a7       	std	Y+45, r24	; 0x2d
    2ed2:	9e a7       	std	Y+46, r25	; 0x2e
    2ed4:	af a7       	std	Y+47, r26	; 0x2f
    2ed6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ed8:	6d a5       	ldd	r22, Y+45	; 0x2d
    2eda:	7e a5       	ldd	r23, Y+46	; 0x2e
    2edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ede:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee0:	2b ea       	ldi	r18, 0xAB	; 171
    2ee2:	3a ea       	ldi	r19, 0xAA	; 170
    2ee4:	4a ea       	ldi	r20, 0xAA	; 170
    2ee6:	50 e4       	ldi	r21, 0x40	; 64
    2ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	89 a7       	std	Y+41, r24	; 0x29
    2ef2:	9a a7       	std	Y+42, r25	; 0x2a
    2ef4:	ab a7       	std	Y+43, r26	; 0x2b
    2ef6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ef8:	69 a5       	ldd	r22, Y+41	; 0x29
    2efa:	7a a5       	ldd	r23, Y+42	; 0x2a
    2efc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2efe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	40 e8       	ldi	r20, 0x80	; 128
    2f06:	5f e3       	ldi	r21, 0x3F	; 63
    2f08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f0c:	88 23       	and	r24, r24
    2f0e:	1c f4       	brge	.+6      	; 0x2f16 <Lcd_SendData+0x55e>
		__ticks = 1;
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	88 a7       	std	Y+40, r24	; 0x28
    2f14:	91 c0       	rjmp	.+290    	; 0x3038 <Lcd_SendData+0x680>
	else if (__tmp > 255)
    2f16:	69 a5       	ldd	r22, Y+41	; 0x29
    2f18:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	53 e4       	ldi	r21, 0x43	; 67
    2f26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	0c f0       	brlt	.+2      	; 0x2f30 <Lcd_SendData+0x578>
    2f2e:	7b c0       	rjmp	.+246    	; 0x3026 <Lcd_SendData+0x66e>
	{
		_delay_ms(__us / 1000.0);
    2f30:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f32:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f36:	98 a9       	ldd	r25, Y+48	; 0x30
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	4a e7       	ldi	r20, 0x7A	; 122
    2f3e:	54 e4       	ldi	r21, 0x44	; 68
    2f40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	8c a3       	std	Y+36, r24	; 0x24
    2f4a:	9d a3       	std	Y+37, r25	; 0x25
    2f4c:	ae a3       	std	Y+38, r26	; 0x26
    2f4e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f50:	6c a1       	ldd	r22, Y+36	; 0x24
    2f52:	7d a1       	ldd	r23, Y+37	; 0x25
    2f54:	8e a1       	ldd	r24, Y+38	; 0x26
    2f56:	9f a1       	ldd	r25, Y+39	; 0x27
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	4a e7       	ldi	r20, 0x7A	; 122
    2f5e:	55 e4       	ldi	r21, 0x45	; 69
    2f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	88 a3       	std	Y+32, r24	; 0x20
    2f6a:	99 a3       	std	Y+33, r25	; 0x21
    2f6c:	aa a3       	std	Y+34, r26	; 0x22
    2f6e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2f70:	68 a1       	ldd	r22, Y+32	; 0x20
    2f72:	79 a1       	ldd	r23, Y+33	; 0x21
    2f74:	8a a1       	ldd	r24, Y+34	; 0x22
    2f76:	9b a1       	ldd	r25, Y+35	; 0x23
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e8       	ldi	r20, 0x80	; 128
    2f7e:	5f e3       	ldi	r21, 0x3F	; 63
    2f80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f84:	88 23       	and	r24, r24
    2f86:	2c f4       	brge	.+10     	; 0x2f92 <Lcd_SendData+0x5da>
		__ticks = 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9f 8f       	std	Y+31, r25	; 0x1f
    2f8e:	8e 8f       	std	Y+30, r24	; 0x1e
    2f90:	3f c0       	rjmp	.+126    	; 0x3010 <Lcd_SendData+0x658>
	else if (__tmp > 65535)
    2f92:	68 a1       	ldd	r22, Y+32	; 0x20
    2f94:	79 a1       	ldd	r23, Y+33	; 0x21
    2f96:	8a a1       	ldd	r24, Y+34	; 0x22
    2f98:	9b a1       	ldd	r25, Y+35	; 0x23
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	4f e7       	ldi	r20, 0x7F	; 127
    2fa0:	57 e4       	ldi	r21, 0x47	; 71
    2fa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa6:	18 16       	cp	r1, r24
    2fa8:	4c f5       	brge	.+82     	; 0x2ffc <Lcd_SendData+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2faa:	6c a1       	ldd	r22, Y+36	; 0x24
    2fac:	7d a1       	ldd	r23, Y+37	; 0x25
    2fae:	8e a1       	ldd	r24, Y+38	; 0x26
    2fb0:	9f a1       	ldd	r25, Y+39	; 0x27
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e2       	ldi	r20, 0x20	; 32
    2fb8:	51 e4       	ldi	r21, 0x41	; 65
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd0:	8e 8f       	std	Y+30, r24	; 0x1e
    2fd2:	0f c0       	rjmp	.+30     	; 0x2ff2 <Lcd_SendData+0x63a>
    2fd4:	80 e9       	ldi	r24, 0x90	; 144
    2fd6:	91 e0       	ldi	r25, 0x01	; 1
    2fd8:	9d 8f       	std	Y+29, r25	; 0x1d
    2fda:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fdc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fde:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <Lcd_SendData+0x628>
    2fe4:	9d 8f       	std	Y+29, r25	; 0x1d
    2fe6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	9f 8f       	std	Y+31, r25	; 0x1f
    2ff0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ff4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	69 f7       	brne	.-38     	; 0x2fd4 <Lcd_SendData+0x61c>
    2ffa:	24 c0       	rjmp	.+72     	; 0x3044 <Lcd_SendData+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffc:	68 a1       	ldd	r22, Y+32	; 0x20
    2ffe:	79 a1       	ldd	r23, Y+33	; 0x21
    3000:	8a a1       	ldd	r24, Y+34	; 0x22
    3002:	9b a1       	ldd	r25, Y+35	; 0x23
    3004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	9f 8f       	std	Y+31, r25	; 0x1f
    300e:	8e 8f       	std	Y+30, r24	; 0x1e
    3010:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3012:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3014:	9b 8f       	std	Y+27, r25	; 0x1b
    3016:	8a 8f       	std	Y+26, r24	; 0x1a
    3018:	8a 8d       	ldd	r24, Y+26	; 0x1a
    301a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <Lcd_SendData+0x664>
    3020:	9b 8f       	std	Y+27, r25	; 0x1b
    3022:	8a 8f       	std	Y+26, r24	; 0x1a
    3024:	0f c0       	rjmp	.+30     	; 0x3044 <Lcd_SendData+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3026:	69 a5       	ldd	r22, Y+41	; 0x29
    3028:	7a a5       	ldd	r23, Y+42	; 0x2a
    302a:	8b a5       	ldd	r24, Y+43	; 0x2b
    302c:	9c a5       	ldd	r25, Y+44	; 0x2c
    302e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	88 a7       	std	Y+40, r24	; 0x28
    3038:	88 a5       	ldd	r24, Y+40	; 0x28
    303a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    303c:	89 8d       	ldd	r24, Y+25	; 0x19
    303e:	8a 95       	dec	r24
    3040:	f1 f7       	brne	.-4      	; 0x303e <Lcd_SendData+0x686>
    3042:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_WriteChannel>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	a0 e2       	ldi	r26, 0x20	; 32
    3052:	b1 e4       	ldi	r27, 0x41	; 65
    3054:	8d 8b       	std	Y+21, r24	; 0x15
    3056:	9e 8b       	std	Y+22, r25	; 0x16
    3058:	af 8b       	std	Y+23, r26	; 0x17
    305a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    305c:	6d 89       	ldd	r22, Y+21	; 0x15
    305e:	7e 89       	ldd	r23, Y+22	; 0x16
    3060:	8f 89       	ldd	r24, Y+23	; 0x17
    3062:	98 8d       	ldd	r25, Y+24	; 0x18
    3064:	2b ea       	ldi	r18, 0xAB	; 171
    3066:	3a ea       	ldi	r19, 0xAA	; 170
    3068:	4a ea       	ldi	r20, 0xAA	; 170
    306a:	50 e4       	ldi	r21, 0x40	; 64
    306c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	89 8b       	std	Y+17, r24	; 0x11
    3076:	9a 8b       	std	Y+18, r25	; 0x12
    3078:	ab 8b       	std	Y+19, r26	; 0x13
    307a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    307c:	69 89       	ldd	r22, Y+17	; 0x11
    307e:	7a 89       	ldd	r23, Y+18	; 0x12
    3080:	8b 89       	ldd	r24, Y+19	; 0x13
    3082:	9c 89       	ldd	r25, Y+20	; 0x14
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e8       	ldi	r20, 0x80	; 128
    308a:	5f e3       	ldi	r21, 0x3F	; 63
    308c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3090:	88 23       	and	r24, r24
    3092:	1c f4       	brge	.+6      	; 0x309a <Lcd_SendData+0x6e2>
		__ticks = 1;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	88 8b       	std	Y+16, r24	; 0x10
    3098:	91 c0       	rjmp	.+290    	; 0x31bc <Lcd_SendData+0x804>
	else if (__tmp > 255)
    309a:	69 89       	ldd	r22, Y+17	; 0x11
    309c:	7a 89       	ldd	r23, Y+18	; 0x12
    309e:	8b 89       	ldd	r24, Y+19	; 0x13
    30a0:	9c 89       	ldd	r25, Y+20	; 0x14
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	4f e7       	ldi	r20, 0x7F	; 127
    30a8:	53 e4       	ldi	r21, 0x43	; 67
    30aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ae:	18 16       	cp	r1, r24
    30b0:	0c f0       	brlt	.+2      	; 0x30b4 <Lcd_SendData+0x6fc>
    30b2:	7b c0       	rjmp	.+246    	; 0x31aa <Lcd_SendData+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    30b4:	6d 89       	ldd	r22, Y+21	; 0x15
    30b6:	7e 89       	ldd	r23, Y+22	; 0x16
    30b8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ba:	98 8d       	ldd	r25, Y+24	; 0x18
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	4a e7       	ldi	r20, 0x7A	; 122
    30c2:	54 e4       	ldi	r21, 0x44	; 68
    30c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	8c 87       	std	Y+12, r24	; 0x0c
    30ce:	9d 87       	std	Y+13, r25	; 0x0d
    30d0:	ae 87       	std	Y+14, r26	; 0x0e
    30d2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    30d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    30d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    30da:	9f 85       	ldd	r25, Y+15	; 0x0f
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4a e7       	ldi	r20, 0x7A	; 122
    30e2:	55 e4       	ldi	r21, 0x45	; 69
    30e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	88 87       	std	Y+8, r24	; 0x08
    30ee:	99 87       	std	Y+9, r25	; 0x09
    30f0:	aa 87       	std	Y+10, r26	; 0x0a
    30f2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30f4:	68 85       	ldd	r22, Y+8	; 0x08
    30f6:	79 85       	ldd	r23, Y+9	; 0x09
    30f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    30fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e8       	ldi	r20, 0x80	; 128
    3102:	5f e3       	ldi	r21, 0x3F	; 63
    3104:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3108:	88 23       	and	r24, r24
    310a:	2c f4       	brge	.+10     	; 0x3116 <Lcd_SendData+0x75e>
		__ticks = 1;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9f 83       	std	Y+7, r25	; 0x07
    3112:	8e 83       	std	Y+6, r24	; 0x06
    3114:	3f c0       	rjmp	.+126    	; 0x3194 <Lcd_SendData+0x7dc>
	else if (__tmp > 65535)
    3116:	68 85       	ldd	r22, Y+8	; 0x08
    3118:	79 85       	ldd	r23, Y+9	; 0x09
    311a:	8a 85       	ldd	r24, Y+10	; 0x0a
    311c:	9b 85       	ldd	r25, Y+11	; 0x0b
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	3f ef       	ldi	r19, 0xFF	; 255
    3122:	4f e7       	ldi	r20, 0x7F	; 127
    3124:	57 e4       	ldi	r21, 0x47	; 71
    3126:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    312a:	18 16       	cp	r1, r24
    312c:	4c f5       	brge	.+82     	; 0x3180 <Lcd_SendData+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3130:	7d 85       	ldd	r23, Y+13	; 0x0d
    3132:	8e 85       	ldd	r24, Y+14	; 0x0e
    3134:	9f 85       	ldd	r25, Y+15	; 0x0f
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e2       	ldi	r20, 0x20	; 32
    313c:	51 e4       	ldi	r21, 0x41	; 65
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	9f 83       	std	Y+7, r25	; 0x07
    3154:	8e 83       	std	Y+6, r24	; 0x06
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <Lcd_SendData+0x7be>
    3158:	80 e9       	ldi	r24, 0x90	; 144
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	9d 83       	std	Y+5, r25	; 0x05
    315e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3160:	8c 81       	ldd	r24, Y+4	; 0x04
    3162:	9d 81       	ldd	r25, Y+5	; 0x05
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <Lcd_SendData+0x7ac>
    3168:	9d 83       	std	Y+5, r25	; 0x05
    316a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316c:	8e 81       	ldd	r24, Y+6	; 0x06
    316e:	9f 81       	ldd	r25, Y+7	; 0x07
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	9f 83       	std	Y+7, r25	; 0x07
    3174:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3176:	8e 81       	ldd	r24, Y+6	; 0x06
    3178:	9f 81       	ldd	r25, Y+7	; 0x07
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	69 f7       	brne	.-38     	; 0x3158 <Lcd_SendData+0x7a0>
    317e:	24 c0       	rjmp	.+72     	; 0x31c8 <Lcd_SendData+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3180:	68 85       	ldd	r22, Y+8	; 0x08
    3182:	79 85       	ldd	r23, Y+9	; 0x09
    3184:	8a 85       	ldd	r24, Y+10	; 0x0a
    3186:	9b 85       	ldd	r25, Y+11	; 0x0b
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	9f 83       	std	Y+7, r25	; 0x07
    3192:	8e 83       	std	Y+6, r24	; 0x06
    3194:	8e 81       	ldd	r24, Y+6	; 0x06
    3196:	9f 81       	ldd	r25, Y+7	; 0x07
    3198:	9b 83       	std	Y+3, r25	; 0x03
    319a:	8a 83       	std	Y+2, r24	; 0x02
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	9b 81       	ldd	r25, Y+3	; 0x03
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <Lcd_SendData+0x7e8>
    31a4:	9b 83       	std	Y+3, r25	; 0x03
    31a6:	8a 83       	std	Y+2, r24	; 0x02
    31a8:	0f c0       	rjmp	.+30     	; 0x31c8 <Lcd_SendData+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31aa:	69 89       	ldd	r22, Y+17	; 0x11
    31ac:	7a 89       	ldd	r23, Y+18	; 0x12
    31ae:	8b 89       	ldd	r24, Y+19	; 0x13
    31b0:	9c 89       	ldd	r25, Y+20	; 0x14
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	88 8b       	std	Y+16, r24	; 0x10
    31bc:	88 89       	ldd	r24, Y+16	; 0x10
    31be:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	8a 95       	dec	r24
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <Lcd_SendData+0x80a>
    31c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);  // Wait for the data to be displayed
}
    31c8:	cf 59       	subi	r28, 0x9F	; 159
    31ca:	df 4f       	sbci	r29, 0xFF	; 255
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	1f 91       	pop	r17
    31dc:	0f 91       	pop	r16
    31de:	08 95       	ret

000031e0 <Lcd_GoTo>:

void Lcd_GoTo(u8 row,u8 col){
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <Lcd_GoTo+0x6>
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <Lcd_GoTo+0x8>
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	89 83       	std	Y+1, r24	; 0x01
    31ee:	6a 83       	std	Y+2, r22	; 0x02
	col--;
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	81 50       	subi	r24, 0x01	; 1
    31f4:	8a 83       	std	Y+2, r24	; 0x02
	switch (row){
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	3c 83       	std	Y+4, r19	; 0x04
    31fe:	2b 83       	std	Y+3, r18	; 0x03
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	9c 81       	ldd	r25, Y+4	; 0x04
    3204:	82 30       	cpi	r24, 0x02	; 2
    3206:	91 05       	cpc	r25, r1
    3208:	d9 f0       	breq	.+54     	; 0x3240 <Lcd_GoTo+0x60>
    320a:	2b 81       	ldd	r18, Y+3	; 0x03
    320c:	3c 81       	ldd	r19, Y+4	; 0x04
    320e:	23 30       	cpi	r18, 0x03	; 3
    3210:	31 05       	cpc	r19, r1
    3212:	34 f4       	brge	.+12     	; 0x3220 <Lcd_GoTo+0x40>
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	9c 81       	ldd	r25, Y+4	; 0x04
    3218:	81 30       	cpi	r24, 0x01	; 1
    321a:	91 05       	cpc	r25, r1
    321c:	61 f0       	breq	.+24     	; 0x3236 <Lcd_GoTo+0x56>
    321e:	1e c0       	rjmp	.+60     	; 0x325c <Lcd_GoTo+0x7c>
    3220:	2b 81       	ldd	r18, Y+3	; 0x03
    3222:	3c 81       	ldd	r19, Y+4	; 0x04
    3224:	23 30       	cpi	r18, 0x03	; 3
    3226:	31 05       	cpc	r19, r1
    3228:	81 f0       	breq	.+32     	; 0x324a <Lcd_GoTo+0x6a>
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	9c 81       	ldd	r25, Y+4	; 0x04
    322e:	84 30       	cpi	r24, 0x04	; 4
    3230:	91 05       	cpc	r25, r1
    3232:	81 f0       	breq	.+32     	; 0x3254 <Lcd_GoTo+0x74>
    3234:	13 c0       	rjmp	.+38     	; 0x325c <Lcd_GoTo+0x7c>
	        case ROW1:
	        	Lcd_SendCMD(0x80+col);
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	80 58       	subi	r24, 0x80	; 128
    323a:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
    323e:	0e c0       	rjmp	.+28     	; 0x325c <Lcd_GoTo+0x7c>
	        break;
	        case ROW2:
	        	Lcd_SendCMD(0xC0+col);
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	80 54       	subi	r24, 0x40	; 64
    3244:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
    3248:	09 c0       	rjmp	.+18     	; 0x325c <Lcd_GoTo+0x7c>
	        break;
	        case ROW3:
	        	Lcd_SendCMD(0x94+col);
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	8c 56       	subi	r24, 0x6C	; 108
    324e:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
    3252:	04 c0       	rjmp	.+8      	; 0x325c <Lcd_GoTo+0x7c>
	        break;
	        case ROW4:
	        	Lcd_SendCMD(0xD4+col);
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	8c 52       	subi	r24, 0x2C	; 44
    3258:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
	        break;
	        default:break;

	    }
}
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	cf 91       	pop	r28
    3266:	df 91       	pop	r29
    3268:	08 95       	ret

0000326a <Lcd_PutChar>:

void Lcd_PutChar (u8 character)
{
    326a:	df 93       	push	r29
    326c:	cf 93       	push	r28
    326e:	0f 92       	push	r0
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	89 83       	std	Y+1, r24	; 0x01
	Lcd_SendData(character);
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <Lcd_SendData>
}
    327c:	0f 90       	pop	r0
    327e:	cf 91       	pop	r28
    3280:	df 91       	pop	r29
    3282:	08 95       	ret

00003284 <Lcd_PutInt>:

void Lcd_PutInt(u32 Number)
{
    3284:	df 93       	push	r29
    3286:	cf 93       	push	r28
    3288:	00 d0       	rcall	.+0      	; 0x328a <Lcd_PutInt+0x6>
    328a:	00 d0       	rcall	.+0      	; 0x328c <Lcd_PutInt+0x8>
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
    3290:	69 83       	std	Y+1, r22	; 0x01
    3292:	7a 83       	std	Y+2, r23	; 0x02
    3294:	8b 83       	std	Y+3, r24	; 0x03
    3296:	9c 83       	std	Y+4, r25	; 0x04

	if(Number == 0 )
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	9a 81       	ldd	r25, Y+2	; 0x02
    329c:	ab 81       	ldd	r26, Y+3	; 0x03
    329e:	bc 81       	ldd	r27, Y+4	; 0x04
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	a1 05       	cpc	r26, r1
    32a4:	b1 05       	cpc	r27, r1
    32a6:	19 f1       	breq	.+70     	; 0x32ee <Lcd_PutInt+0x6a>
		return ;
	else
		Lcd_PutInt(Number/10);
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	9a 81       	ldd	r25, Y+2	; 0x02
    32ac:	ab 81       	ldd	r26, Y+3	; 0x03
    32ae:	bc 81       	ldd	r27, Y+4	; 0x04
    32b0:	2a e0       	ldi	r18, 0x0A	; 10
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodsi4>
    32c0:	da 01       	movw	r26, r20
    32c2:	c9 01       	movw	r24, r18
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 42 19 	call	0x3284	; 0x3284 <Lcd_PutInt>
	///if(Number<255)
	 Lcd_SendData((Number%10)+0x30);
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	ab 81       	ldd	r26, Y+3	; 0x03
    32d2:	bc 81       	ldd	r27, Y+4	; 0x04
    32d4:	2a e0       	ldi	r18, 0x0A	; 10
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e0       	ldi	r20, 0x00	; 0
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	bc 01       	movw	r22, r24
    32de:	cd 01       	movw	r24, r26
    32e0:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodsi4>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	80 5d       	subi	r24, 0xD0	; 208
    32ea:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <Lcd_SendData>
}
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <Lcd_Init>:

void Lcd_Init(void) {
    32fc:	0f 93       	push	r16
    32fe:	1f 93       	push	r17
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	c6 54       	subi	r28, 0x46	; 70
    330a:	d0 40       	sbci	r29, 0x00	; 0
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	fe 01       	movw	r30, r28
    3318:	ed 5b       	subi	r30, 0xBD	; 189
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	a8 e4       	ldi	r26, 0x48	; 72
    3322:	b2 e4       	ldi	r27, 0x42	; 66
    3324:	80 83       	st	Z, r24
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	a2 83       	std	Z+2, r26	; 0x02
    332a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332c:	8e 01       	movw	r16, r28
    332e:	01 5c       	subi	r16, 0xC1	; 193
    3330:	1f 4f       	sbci	r17, 0xFF	; 255
    3332:	fe 01       	movw	r30, r28
    3334:	ed 5b       	subi	r30, 0xBD	; 189
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	60 81       	ld	r22, Z
    333a:	71 81       	ldd	r23, Z+1	; 0x01
    333c:	82 81       	ldd	r24, Z+2	; 0x02
    333e:	93 81       	ldd	r25, Z+3	; 0x03
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	4a e7       	ldi	r20, 0x7A	; 122
    3346:	55 e4       	ldi	r21, 0x45	; 69
    3348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	f8 01       	movw	r30, r16
    3352:	80 83       	st	Z, r24
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	a2 83       	std	Z+2, r26	; 0x02
    3358:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    335a:	fe 01       	movw	r30, r28
    335c:	ff 96       	adiw	r30, 0x3f	; 63
    335e:	60 81       	ld	r22, Z
    3360:	71 81       	ldd	r23, Z+1	; 0x01
    3362:	82 81       	ldd	r24, Z+2	; 0x02
    3364:	93 81       	ldd	r25, Z+3	; 0x03
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e8       	ldi	r20, 0x80	; 128
    336c:	5f e3       	ldi	r21, 0x3F	; 63
    336e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3372:	88 23       	and	r24, r24
    3374:	2c f4       	brge	.+10     	; 0x3380 <Lcd_Init+0x84>
		__ticks = 1;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	9e af       	std	Y+62, r25	; 0x3e
    337c:	8d af       	std	Y+61, r24	; 0x3d
    337e:	46 c0       	rjmp	.+140    	; 0x340c <Lcd_Init+0x110>
	else if (__tmp > 65535)
    3380:	fe 01       	movw	r30, r28
    3382:	ff 96       	adiw	r30, 0x3f	; 63
    3384:	60 81       	ld	r22, Z
    3386:	71 81       	ldd	r23, Z+1	; 0x01
    3388:	82 81       	ldd	r24, Z+2	; 0x02
    338a:	93 81       	ldd	r25, Z+3	; 0x03
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	3f ef       	ldi	r19, 0xFF	; 255
    3390:	4f e7       	ldi	r20, 0x7F	; 127
    3392:	57 e4       	ldi	r21, 0x47	; 71
    3394:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3398:	18 16       	cp	r1, r24
    339a:	64 f5       	brge	.+88     	; 0x33f4 <Lcd_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339c:	fe 01       	movw	r30, r28
    339e:	ed 5b       	subi	r30, 0xBD	; 189
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e2       	ldi	r20, 0x20	; 32
    33b0:	51 e4       	ldi	r21, 0x41	; 65
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	bc 01       	movw	r22, r24
    33bc:	cd 01       	movw	r24, r26
    33be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	9e af       	std	Y+62, r25	; 0x3e
    33c8:	8d af       	std	Y+61, r24	; 0x3d
    33ca:	0f c0       	rjmp	.+30     	; 0x33ea <Lcd_Init+0xee>
    33cc:	80 e9       	ldi	r24, 0x90	; 144
    33ce:	91 e0       	ldi	r25, 0x01	; 1
    33d0:	9c af       	std	Y+60, r25	; 0x3c
    33d2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    33d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	f1 f7       	brne	.-4      	; 0x33d8 <Lcd_Init+0xdc>
    33dc:	9c af       	std	Y+60, r25	; 0x3c
    33de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    33e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	9e af       	std	Y+62, r25	; 0x3e
    33e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    33ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    33ee:	00 97       	sbiw	r24, 0x00	; 0
    33f0:	69 f7       	brne	.-38     	; 0x33cc <Lcd_Init+0xd0>
    33f2:	16 c0       	rjmp	.+44     	; 0x3420 <Lcd_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f4:	fe 01       	movw	r30, r28
    33f6:	ff 96       	adiw	r30, 0x3f	; 63
    33f8:	60 81       	ld	r22, Z
    33fa:	71 81       	ldd	r23, Z+1	; 0x01
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9e af       	std	Y+62, r25	; 0x3e
    340a:	8d af       	std	Y+61, r24	; 0x3d
    340c:	8d ad       	ldd	r24, Y+61	; 0x3d
    340e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3410:	9a af       	std	Y+58, r25	; 0x3a
    3412:	89 af       	std	Y+57, r24	; 0x39
    3414:	89 ad       	ldd	r24, Y+57	; 0x39
    3416:	9a ad       	ldd	r25, Y+58	; 0x3a
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <Lcd_Init+0x11c>
    341c:	9a af       	std	Y+58, r25	; 0x3a
    341e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	Lcd_SendCMD(HOME);
    3420:	82 e0       	ldi	r24, 0x02	; 2
    3422:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
	Lcd_SendCMD(FOUR_BIT);
    3426:	88 e2       	ldi	r24, 0x28	; 40
    3428:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	a0 e8       	ldi	r26, 0x80	; 128
    3432:	bf e3       	ldi	r27, 0x3F	; 63
    3434:	8d ab       	std	Y+53, r24	; 0x35
    3436:	9e ab       	std	Y+54, r25	; 0x36
    3438:	af ab       	std	Y+55, r26	; 0x37
    343a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343c:	6d a9       	ldd	r22, Y+53	; 0x35
    343e:	7e a9       	ldd	r23, Y+54	; 0x36
    3440:	8f a9       	ldd	r24, Y+55	; 0x37
    3442:	98 ad       	ldd	r25, Y+56	; 0x38
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	4a e7       	ldi	r20, 0x7A	; 122
    344a:	55 e4       	ldi	r21, 0x45	; 69
    344c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	89 ab       	std	Y+49, r24	; 0x31
    3456:	9a ab       	std	Y+50, r25	; 0x32
    3458:	ab ab       	std	Y+51, r26	; 0x33
    345a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    345c:	69 a9       	ldd	r22, Y+49	; 0x31
    345e:	7a a9       	ldd	r23, Y+50	; 0x32
    3460:	8b a9       	ldd	r24, Y+51	; 0x33
    3462:	9c a9       	ldd	r25, Y+52	; 0x34
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e8       	ldi	r20, 0x80	; 128
    346a:	5f e3       	ldi	r21, 0x3F	; 63
    346c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3470:	88 23       	and	r24, r24
    3472:	2c f4       	brge	.+10     	; 0x347e <Lcd_Init+0x182>
		__ticks = 1;
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	98 ab       	std	Y+48, r25	; 0x30
    347a:	8f a7       	std	Y+47, r24	; 0x2f
    347c:	3f c0       	rjmp	.+126    	; 0x34fc <Lcd_Init+0x200>
	else if (__tmp > 65535)
    347e:	69 a9       	ldd	r22, Y+49	; 0x31
    3480:	7a a9       	ldd	r23, Y+50	; 0x32
    3482:	8b a9       	ldd	r24, Y+51	; 0x33
    3484:	9c a9       	ldd	r25, Y+52	; 0x34
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	3f ef       	ldi	r19, 0xFF	; 255
    348a:	4f e7       	ldi	r20, 0x7F	; 127
    348c:	57 e4       	ldi	r21, 0x47	; 71
    348e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3492:	18 16       	cp	r1, r24
    3494:	4c f5       	brge	.+82     	; 0x34e8 <Lcd_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3496:	6d a9       	ldd	r22, Y+53	; 0x35
    3498:	7e a9       	ldd	r23, Y+54	; 0x36
    349a:	8f a9       	ldd	r24, Y+55	; 0x37
    349c:	98 ad       	ldd	r25, Y+56	; 0x38
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	40 e2       	ldi	r20, 0x20	; 32
    34a4:	51 e4       	ldi	r21, 0x41	; 65
    34a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	bc 01       	movw	r22, r24
    34b0:	cd 01       	movw	r24, r26
    34b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	98 ab       	std	Y+48, r25	; 0x30
    34bc:	8f a7       	std	Y+47, r24	; 0x2f
    34be:	0f c0       	rjmp	.+30     	; 0x34de <Lcd_Init+0x1e2>
    34c0:	80 e9       	ldi	r24, 0x90	; 144
    34c2:	91 e0       	ldi	r25, 0x01	; 1
    34c4:	9e a7       	std	Y+46, r25	; 0x2e
    34c6:	8d a7       	std	Y+45, r24	; 0x2d
    34c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    34ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <Lcd_Init+0x1d0>
    34d0:	9e a7       	std	Y+46, r25	; 0x2e
    34d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d6:	98 a9       	ldd	r25, Y+48	; 0x30
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	98 ab       	std	Y+48, r25	; 0x30
    34dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34de:	8f a5       	ldd	r24, Y+47	; 0x2f
    34e0:	98 a9       	ldd	r25, Y+48	; 0x30
    34e2:	00 97       	sbiw	r24, 0x00	; 0
    34e4:	69 f7       	brne	.-38     	; 0x34c0 <Lcd_Init+0x1c4>
    34e6:	14 c0       	rjmp	.+40     	; 0x3510 <Lcd_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e8:	69 a9       	ldd	r22, Y+49	; 0x31
    34ea:	7a a9       	ldd	r23, Y+50	; 0x32
    34ec:	8b a9       	ldd	r24, Y+51	; 0x33
    34ee:	9c a9       	ldd	r25, Y+52	; 0x34
    34f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	98 ab       	std	Y+48, r25	; 0x30
    34fa:	8f a7       	std	Y+47, r24	; 0x2f
    34fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    34fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3500:	9c a7       	std	Y+44, r25	; 0x2c
    3502:	8b a7       	std	Y+43, r24	; 0x2b
    3504:	8b a5       	ldd	r24, Y+43	; 0x2b
    3506:	9c a5       	ldd	r25, Y+44	; 0x2c
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <Lcd_Init+0x20c>
    350c:	9c a7       	std	Y+44, r25	; 0x2c
    350e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Lcd_SendCMD(CURSER_ON);
    3510:	8f e0       	ldi	r24, 0x0F	; 15
    3512:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a0 e8       	ldi	r26, 0x80	; 128
    351c:	bf e3       	ldi	r27, 0x3F	; 63
    351e:	8f a3       	std	Y+39, r24	; 0x27
    3520:	98 a7       	std	Y+40, r25	; 0x28
    3522:	a9 a7       	std	Y+41, r26	; 0x29
    3524:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3526:	6f a1       	ldd	r22, Y+39	; 0x27
    3528:	78 a5       	ldd	r23, Y+40	; 0x28
    352a:	89 a5       	ldd	r24, Y+41	; 0x29
    352c:	9a a5       	ldd	r25, Y+42	; 0x2a
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	4a e7       	ldi	r20, 0x7A	; 122
    3534:	55 e4       	ldi	r21, 0x45	; 69
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8b a3       	std	Y+35, r24	; 0x23
    3540:	9c a3       	std	Y+36, r25	; 0x24
    3542:	ad a3       	std	Y+37, r26	; 0x25
    3544:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3546:	6b a1       	ldd	r22, Y+35	; 0x23
    3548:	7c a1       	ldd	r23, Y+36	; 0x24
    354a:	8d a1       	ldd	r24, Y+37	; 0x25
    354c:	9e a1       	ldd	r25, Y+38	; 0x26
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e8       	ldi	r20, 0x80	; 128
    3554:	5f e3       	ldi	r21, 0x3F	; 63
    3556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    355a:	88 23       	and	r24, r24
    355c:	2c f4       	brge	.+10     	; 0x3568 <Lcd_Init+0x26c>
		__ticks = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9a a3       	std	Y+34, r25	; 0x22
    3564:	89 a3       	std	Y+33, r24	; 0x21
    3566:	3f c0       	rjmp	.+126    	; 0x35e6 <Lcd_Init+0x2ea>
	else if (__tmp > 65535)
    3568:	6b a1       	ldd	r22, Y+35	; 0x23
    356a:	7c a1       	ldd	r23, Y+36	; 0x24
    356c:	8d a1       	ldd	r24, Y+37	; 0x25
    356e:	9e a1       	ldd	r25, Y+38	; 0x26
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3f ef       	ldi	r19, 0xFF	; 255
    3574:	4f e7       	ldi	r20, 0x7F	; 127
    3576:	57 e4       	ldi	r21, 0x47	; 71
    3578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    357c:	18 16       	cp	r1, r24
    357e:	4c f5       	brge	.+82     	; 0x35d2 <Lcd_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	6f a1       	ldd	r22, Y+39	; 0x27
    3582:	78 a5       	ldd	r23, Y+40	; 0x28
    3584:	89 a5       	ldd	r24, Y+41	; 0x29
    3586:	9a a5       	ldd	r25, Y+42	; 0x2a
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e2       	ldi	r20, 0x20	; 32
    358e:	51 e4       	ldi	r21, 0x41	; 65
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	9a a3       	std	Y+34, r25	; 0x22
    35a6:	89 a3       	std	Y+33, r24	; 0x21
    35a8:	0f c0       	rjmp	.+30     	; 0x35c8 <Lcd_Init+0x2cc>
    35aa:	80 e9       	ldi	r24, 0x90	; 144
    35ac:	91 e0       	ldi	r25, 0x01	; 1
    35ae:	98 a3       	std	Y+32, r25	; 0x20
    35b0:	8f 8f       	std	Y+31, r24	; 0x1f
    35b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35b4:	98 a1       	ldd	r25, Y+32	; 0x20
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <Lcd_Init+0x2ba>
    35ba:	98 a3       	std	Y+32, r25	; 0x20
    35bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35be:	89 a1       	ldd	r24, Y+33	; 0x21
    35c0:	9a a1       	ldd	r25, Y+34	; 0x22
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	9a a3       	std	Y+34, r25	; 0x22
    35c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c8:	89 a1       	ldd	r24, Y+33	; 0x21
    35ca:	9a a1       	ldd	r25, Y+34	; 0x22
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	69 f7       	brne	.-38     	; 0x35aa <Lcd_Init+0x2ae>
    35d0:	14 c0       	rjmp	.+40     	; 0x35fa <Lcd_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d2:	6b a1       	ldd	r22, Y+35	; 0x23
    35d4:	7c a1       	ldd	r23, Y+36	; 0x24
    35d6:	8d a1       	ldd	r24, Y+37	; 0x25
    35d8:	9e a1       	ldd	r25, Y+38	; 0x26
    35da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	9a a3       	std	Y+34, r25	; 0x22
    35e4:	89 a3       	std	Y+33, r24	; 0x21
    35e6:	89 a1       	ldd	r24, Y+33	; 0x21
    35e8:	9a a1       	ldd	r25, Y+34	; 0x22
    35ea:	9e 8f       	std	Y+30, r25	; 0x1e
    35ec:	8d 8f       	std	Y+29, r24	; 0x1d
    35ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <Lcd_Init+0x2f6>
    35f6:	9e 8f       	std	Y+30, r25	; 0x1e
    35f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_SendCMD(CLEAR);
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
    3600:	80 e0       	ldi	r24, 0x00	; 0
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	a0 e8       	ldi	r26, 0x80	; 128
    3606:	bf e3       	ldi	r27, 0x3F	; 63
    3608:	89 8f       	std	Y+25, r24	; 0x19
    360a:	9a 8f       	std	Y+26, r25	; 0x1a
    360c:	ab 8f       	std	Y+27, r26	; 0x1b
    360e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3610:	69 8d       	ldd	r22, Y+25	; 0x19
    3612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	4a e7       	ldi	r20, 0x7A	; 122
    361e:	55 e4       	ldi	r21, 0x45	; 69
    3620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	8d 8b       	std	Y+21, r24	; 0x15
    362a:	9e 8b       	std	Y+22, r25	; 0x16
    362c:	af 8b       	std	Y+23, r26	; 0x17
    362e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3630:	6d 89       	ldd	r22, Y+21	; 0x15
    3632:	7e 89       	ldd	r23, Y+22	; 0x16
    3634:	8f 89       	ldd	r24, Y+23	; 0x17
    3636:	98 8d       	ldd	r25, Y+24	; 0x18
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e8       	ldi	r20, 0x80	; 128
    363e:	5f e3       	ldi	r21, 0x3F	; 63
    3640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3644:	88 23       	and	r24, r24
    3646:	2c f4       	brge	.+10     	; 0x3652 <Lcd_Init+0x356>
		__ticks = 1;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	9c 8b       	std	Y+20, r25	; 0x14
    364e:	8b 8b       	std	Y+19, r24	; 0x13
    3650:	3f c0       	rjmp	.+126    	; 0x36d0 <Lcd_Init+0x3d4>
	else if (__tmp > 65535)
    3652:	6d 89       	ldd	r22, Y+21	; 0x15
    3654:	7e 89       	ldd	r23, Y+22	; 0x16
    3656:	8f 89       	ldd	r24, Y+23	; 0x17
    3658:	98 8d       	ldd	r25, Y+24	; 0x18
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	3f ef       	ldi	r19, 0xFF	; 255
    365e:	4f e7       	ldi	r20, 0x7F	; 127
    3660:	57 e4       	ldi	r21, 0x47	; 71
    3662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3666:	18 16       	cp	r1, r24
    3668:	4c f5       	brge	.+82     	; 0x36bc <Lcd_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366a:	69 8d       	ldd	r22, Y+25	; 0x19
    366c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    366e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	40 e2       	ldi	r20, 0x20	; 32
    3678:	51 e4       	ldi	r21, 0x41	; 65
    367a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	bc 01       	movw	r22, r24
    3684:	cd 01       	movw	r24, r26
    3686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	9c 8b       	std	Y+20, r25	; 0x14
    3690:	8b 8b       	std	Y+19, r24	; 0x13
    3692:	0f c0       	rjmp	.+30     	; 0x36b2 <Lcd_Init+0x3b6>
    3694:	80 e9       	ldi	r24, 0x90	; 144
    3696:	91 e0       	ldi	r25, 0x01	; 1
    3698:	9a 8b       	std	Y+18, r25	; 0x12
    369a:	89 8b       	std	Y+17, r24	; 0x11
    369c:	89 89       	ldd	r24, Y+17	; 0x11
    369e:	9a 89       	ldd	r25, Y+18	; 0x12
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <Lcd_Init+0x3a4>
    36a4:	9a 8b       	std	Y+18, r25	; 0x12
    36a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a8:	8b 89       	ldd	r24, Y+19	; 0x13
    36aa:	9c 89       	ldd	r25, Y+20	; 0x14
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	9c 8b       	std	Y+20, r25	; 0x14
    36b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b2:	8b 89       	ldd	r24, Y+19	; 0x13
    36b4:	9c 89       	ldd	r25, Y+20	; 0x14
    36b6:	00 97       	sbiw	r24, 0x00	; 0
    36b8:	69 f7       	brne	.-38     	; 0x3694 <Lcd_Init+0x398>
    36ba:	14 c0       	rjmp	.+40     	; 0x36e4 <Lcd_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36bc:	6d 89       	ldd	r22, Y+21	; 0x15
    36be:	7e 89       	ldd	r23, Y+22	; 0x16
    36c0:	8f 89       	ldd	r24, Y+23	; 0x17
    36c2:	98 8d       	ldd	r25, Y+24	; 0x18
    36c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	9c 8b       	std	Y+20, r25	; 0x14
    36ce:	8b 8b       	std	Y+19, r24	; 0x13
    36d0:	8b 89       	ldd	r24, Y+19	; 0x13
    36d2:	9c 89       	ldd	r25, Y+20	; 0x14
    36d4:	98 8b       	std	Y+16, r25	; 0x10
    36d6:	8f 87       	std	Y+15, r24	; 0x0f
    36d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36da:	98 89       	ldd	r25, Y+16	; 0x10
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	f1 f7       	brne	.-4      	; 0x36dc <Lcd_Init+0x3e0>
    36e0:	98 8b       	std	Y+16, r25	; 0x10
    36e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_SendCMD(MODE);
    36e4:	86 e0       	ldi	r24, 0x06	; 6
    36e6:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	a0 e8       	ldi	r26, 0x80	; 128
    36f0:	bf e3       	ldi	r27, 0x3F	; 63
    36f2:	8b 87       	std	Y+11, r24	; 0x0b
    36f4:	9c 87       	std	Y+12, r25	; 0x0c
    36f6:	ad 87       	std	Y+13, r26	; 0x0d
    36f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3700:	9e 85       	ldd	r25, Y+14	; 0x0e
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	4a e7       	ldi	r20, 0x7A	; 122
    3708:	55 e4       	ldi	r21, 0x45	; 69
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	8f 83       	std	Y+7, r24	; 0x07
    3714:	98 87       	std	Y+8, r25	; 0x08
    3716:	a9 87       	std	Y+9, r26	; 0x09
    3718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    371a:	6f 81       	ldd	r22, Y+7	; 0x07
    371c:	78 85       	ldd	r23, Y+8	; 0x08
    371e:	89 85       	ldd	r24, Y+9	; 0x09
    3720:	9a 85       	ldd	r25, Y+10	; 0x0a
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5f e3       	ldi	r21, 0x3F	; 63
    372a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    372e:	88 23       	and	r24, r24
    3730:	2c f4       	brge	.+10     	; 0x373c <Lcd_Init+0x440>
		__ticks = 1;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	9e 83       	std	Y+6, r25	; 0x06
    3738:	8d 83       	std	Y+5, r24	; 0x05
    373a:	3f c0       	rjmp	.+126    	; 0x37ba <Lcd_Init+0x4be>
	else if (__tmp > 65535)
    373c:	6f 81       	ldd	r22, Y+7	; 0x07
    373e:	78 85       	ldd	r23, Y+8	; 0x08
    3740:	89 85       	ldd	r24, Y+9	; 0x09
    3742:	9a 85       	ldd	r25, Y+10	; 0x0a
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	3f ef       	ldi	r19, 0xFF	; 255
    3748:	4f e7       	ldi	r20, 0x7F	; 127
    374a:	57 e4       	ldi	r21, 0x47	; 71
    374c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3750:	18 16       	cp	r1, r24
    3752:	4c f5       	brge	.+82     	; 0x37a6 <Lcd_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	6b 85       	ldd	r22, Y+11	; 0x0b
    3756:	7c 85       	ldd	r23, Y+12	; 0x0c
    3758:	8d 85       	ldd	r24, Y+13	; 0x0d
    375a:	9e 85       	ldd	r25, Y+14	; 0x0e
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
    377c:	0f c0       	rjmp	.+30     	; 0x379c <Lcd_Init+0x4a0>
    377e:	80 e9       	ldi	r24, 0x90	; 144
    3780:	91 e0       	ldi	r25, 0x01	; 1
    3782:	9c 83       	std	Y+4, r25	; 0x04
    3784:	8b 83       	std	Y+3, r24	; 0x03
    3786:	8b 81       	ldd	r24, Y+3	; 0x03
    3788:	9c 81       	ldd	r25, Y+4	; 0x04
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <Lcd_Init+0x48e>
    378e:	9c 83       	std	Y+4, r25	; 0x04
    3790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	9e 81       	ldd	r25, Y+6	; 0x06
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	9e 83       	std	Y+6, r25	; 0x06
    379a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	8d 81       	ldd	r24, Y+5	; 0x05
    379e:	9e 81       	ldd	r25, Y+6	; 0x06
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	69 f7       	brne	.-38     	; 0x377e <Lcd_Init+0x482>
    37a4:	14 c0       	rjmp	.+40     	; 0x37ce <Lcd_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	6f 81       	ldd	r22, Y+7	; 0x07
    37a8:	78 85       	ldd	r23, Y+8	; 0x08
    37aa:	89 85       	ldd	r24, Y+9	; 0x09
    37ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	9e 83       	std	Y+6, r25	; 0x06
    37b8:	8d 83       	std	Y+5, r24	; 0x05
    37ba:	8d 81       	ldd	r24, Y+5	; 0x05
    37bc:	9e 81       	ldd	r25, Y+6	; 0x06
    37be:	9a 83       	std	Y+2, r25	; 0x02
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <Lcd_Init+0x4ca>
    37ca:	9a 83       	std	Y+2, r25	; 0x02
    37cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Lcd_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    37ce:	8c e0       	ldi	r24, 0x0C	; 12
    37d0:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
	Lcd_SendCMD(SET_DDRAM_ADDR);
    37d4:	80 e8       	ldi	r24, 0x80	; 128
    37d6:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
}
    37da:	ca 5b       	subi	r28, 0xBA	; 186
    37dc:	df 4f       	sbci	r29, 0xFF	; 255
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	08 95       	ret

000037f2 <Lcd_Clear>:
void Lcd_Clear(void){
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
Lcd_SendCMD(CLEAR);
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	0e 94 c8 10 	call	0x2190	; 0x2190 <Lcd_SendCMD>
}
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <Lcd_PutString>:


void Lcd_PutString (u8* str)
{
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	00 d0       	rcall	.+0      	; 0x380c <Lcd_PutString+0x6>
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	9a 83       	std	Y+2, r25	; 0x02
    3812:	89 83       	std	Y+1, r24	; 0x01
    3814:	0a c0       	rjmp	.+20     	; 0x382a <Lcd_PutString+0x24>
	 while (*str !='\0'){
		Lcd_PutChar(*str);
    3816:	e9 81       	ldd	r30, Y+1	; 0x01
    3818:	fa 81       	ldd	r31, Y+2	; 0x02
    381a:	80 81       	ld	r24, Z
    381c:	0e 94 35 19 	call	0x326a	; 0x326a <Lcd_PutChar>
		str++;
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	9a 81       	ldd	r25, Y+2	; 0x02
    3824:	01 96       	adiw	r24, 0x01	; 1
    3826:	9a 83       	std	Y+2, r25	; 0x02
    3828:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_PutString (u8* str)
{
	 while (*str !='\0'){
    382a:	e9 81       	ldd	r30, Y+1	; 0x01
    382c:	fa 81       	ldd	r31, Y+2	; 0x02
    382e:	80 81       	ld	r24, Z
    3830:	88 23       	and	r24, r24
    3832:	89 f7       	brne	.-30     	; 0x3816 <Lcd_PutString+0x10>
		Lcd_PutChar(*str);
		str++;
		}
}
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <lcd4_disply_char_at_X_Y>:

void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	00 d0       	rcall	.+0      	; 0x3844 <lcd4_disply_char_at_X_Y+0x6>
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	89 83       	std	Y+1, r24	; 0x01
    384c:	6a 83       	std	Y+2, r22	; 0x02
    384e:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoTo(row, col);
    3850:	8a 81       	ldd	r24, Y+2	; 0x02
    3852:	6b 81       	ldd	r22, Y+3	; 0x03
    3854:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <Lcd_GoTo>
	Lcd_SendData(data);
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <Lcd_SendData>
}
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	08 95       	ret

0000386a <Lcd_PutString_x_Y>:


void Lcd_PutString_x_Y(u8* data, u8 row, u8 col)
{
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	00 d0       	rcall	.+0      	; 0x3870 <Lcd_PutString_x_Y+0x6>
    3870:	00 d0       	rcall	.+0      	; 0x3872 <Lcd_PutString_x_Y+0x8>
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	9a 83       	std	Y+2, r25	; 0x02
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	6b 83       	std	Y+3, r22	; 0x03
    387c:	4c 83       	std	Y+4, r20	; 0x04
	Lcd_GoTo(row, col);
    387e:	8b 81       	ldd	r24, Y+3	; 0x03
    3880:	6c 81       	ldd	r22, Y+4	; 0x04
    3882:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <Lcd_GoTo>
	Lcd_PutString(data);
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	0e 94 03 1c 	call	0x3806	; 0x3806 <Lcd_PutString>
}
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	cf 91       	pop	r28
    3898:	df 91       	pop	r29
    389a:	08 95       	ret

0000389c <Action1>:

#define PWM_CHECK_BY_LED_INTENSITY_OR_MOTOR_SPEED main
//#define CHECK_DELAY_NORMAL_MODE main
//#define CHECK_DELAY_CTC_MODE main

void Action1(void) {
    389c:	df 93       	push	r29
    389e:	cf 93       	push	r28
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_5);
    38a4:	85 e0       	ldi	r24, 0x05	; 5
    38a6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Dio_FlipChannel>
}
    38aa:	cf 91       	pop	r28
    38ac:	df 91       	pop	r29
    38ae:	08 95       	ret

000038b0 <main>:

int PWM_CHECK_BY_LED_INTENSITY_OR_MOTOR_SPEED() {
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	2f 97       	sbiw	r28, 0x0f	; 15
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
	Port_Init(pin_cfg);
    38c4:	88 e6       	ldi	r24, 0x68	; 104
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 d7 07 	call	0xfae	; 0xfae <Port_Init>
//	GI_voidEnable();
	TMR0_voidInit();
    38cc:	0e 94 93 06 	call	0xd26	; 0xd26 <TMR0_voidInit>
	TMR0_voidStart();
    38d0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <TMR0_voidStart>
	u8 local_delay = 1;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	8f 87       	std	Y+15, r24	; 0x0f
	while (1) {
		local_delay++;
    38d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38da:	8f 5f       	subi	r24, 0xFF	; 255
    38dc:	8f 87       	std	Y+15, r24	; 0x0f
		if (local_delay == 100)
    38de:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e0:	84 36       	cpi	r24, 0x64	; 100
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <main+0x36>
			local_delay = 0;
    38e4:	1f 86       	std	Y+15, r1	; 0x0f
		TMR0_voidSetDutyCycleForPWM(local_delay);
    38e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TMR0_voidSetDutyCycleForPWM>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	a8 e4       	ldi	r26, 0x48	; 72
    38f2:	b2 e4       	ldi	r27, 0x42	; 66
    38f4:	8b 87       	std	Y+11, r24	; 0x0b
    38f6:	9c 87       	std	Y+12, r25	; 0x0c
    38f8:	ad 87       	std	Y+13, r26	; 0x0d
    38fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3900:	8d 85       	ldd	r24, Y+13	; 0x0d
    3902:	9e 85       	ldd	r25, Y+14	; 0x0e
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	4a e7       	ldi	r20, 0x7A	; 122
    390a:	55 e4       	ldi	r21, 0x45	; 69
    390c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	8f 83       	std	Y+7, r24	; 0x07
    3916:	98 87       	std	Y+8, r25	; 0x08
    3918:	a9 87       	std	Y+9, r26	; 0x09
    391a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    391c:	6f 81       	ldd	r22, Y+7	; 0x07
    391e:	78 85       	ldd	r23, Y+8	; 0x08
    3920:	89 85       	ldd	r24, Y+9	; 0x09
    3922:	9a 85       	ldd	r25, Y+10	; 0x0a
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	2c f4       	brge	.+10     	; 0x393e <main+0x8e>
		__ticks = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9e 83       	std	Y+6, r25	; 0x06
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	3f c0       	rjmp	.+126    	; 0x39bc <main+0x10c>
	else if (__tmp > 65535)
    393e:	6f 81       	ldd	r22, Y+7	; 0x07
    3940:	78 85       	ldd	r23, Y+8	; 0x08
    3942:	89 85       	ldd	r24, Y+9	; 0x09
    3944:	9a 85       	ldd	r25, Y+10	; 0x0a
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	3f ef       	ldi	r19, 0xFF	; 255
    394a:	4f e7       	ldi	r20, 0x7F	; 127
    394c:	57 e4       	ldi	r21, 0x47	; 71
    394e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3952:	18 16       	cp	r1, r24
    3954:	4c f5       	brge	.+82     	; 0x39a8 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	6b 85       	ldd	r22, Y+11	; 0x0b
    3958:	7c 85       	ldd	r23, Y+12	; 0x0c
    395a:	8d 85       	ldd	r24, Y+13	; 0x0d
    395c:	9e 85       	ldd	r25, Y+14	; 0x0e
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e2       	ldi	r20, 0x20	; 32
    3964:	51 e4       	ldi	r21, 0x41	; 65
    3966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	9e 83       	std	Y+6, r25	; 0x06
    397c:	8d 83       	std	Y+5, r24	; 0x05
    397e:	0f c0       	rjmp	.+30     	; 0x399e <main+0xee>
    3980:	80 e9       	ldi	r24, 0x90	; 144
    3982:	91 e0       	ldi	r25, 0x01	; 1
    3984:	9c 83       	std	Y+4, r25	; 0x04
    3986:	8b 83       	std	Y+3, r24	; 0x03
    3988:	8b 81       	ldd	r24, Y+3	; 0x03
    398a:	9c 81       	ldd	r25, Y+4	; 0x04
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <main+0xdc>
    3990:	9c 83       	std	Y+4, r25	; 0x04
    3992:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3994:	8d 81       	ldd	r24, Y+5	; 0x05
    3996:	9e 81       	ldd	r25, Y+6	; 0x06
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	9e 83       	std	Y+6, r25	; 0x06
    399c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	9e 81       	ldd	r25, Y+6	; 0x06
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f7       	brne	.-38     	; 0x3980 <main+0xd0>
    39a6:	98 cf       	rjmp	.-208    	; 0x38d8 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a8:	6f 81       	ldd	r22, Y+7	; 0x07
    39aa:	78 85       	ldd	r23, Y+8	; 0x08
    39ac:	89 85       	ldd	r24, Y+9	; 0x09
    39ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9e 83       	std	Y+6, r25	; 0x06
    39ba:	8d 83       	std	Y+5, r24	; 0x05
    39bc:	8d 81       	ldd	r24, Y+5	; 0x05
    39be:	9e 81       	ldd	r25, Y+6	; 0x06
    39c0:	9a 83       	std	Y+2, r25	; 0x02
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <main+0x118>
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
    39d0:	83 cf       	rjmp	.-250    	; 0x38d8 <main+0x28>

000039d2 <__udivmodhi4>:
    39d2:	aa 1b       	sub	r26, r26
    39d4:	bb 1b       	sub	r27, r27
    39d6:	51 e1       	ldi	r21, 0x11	; 17
    39d8:	07 c0       	rjmp	.+14     	; 0x39e8 <__udivmodhi4_ep>

000039da <__udivmodhi4_loop>:
    39da:	aa 1f       	adc	r26, r26
    39dc:	bb 1f       	adc	r27, r27
    39de:	a6 17       	cp	r26, r22
    39e0:	b7 07       	cpc	r27, r23
    39e2:	10 f0       	brcs	.+4      	; 0x39e8 <__udivmodhi4_ep>
    39e4:	a6 1b       	sub	r26, r22
    39e6:	b7 0b       	sbc	r27, r23

000039e8 <__udivmodhi4_ep>:
    39e8:	88 1f       	adc	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	5a 95       	dec	r21
    39ee:	a9 f7       	brne	.-22     	; 0x39da <__udivmodhi4_loop>
    39f0:	80 95       	com	r24
    39f2:	90 95       	com	r25
    39f4:	bc 01       	movw	r22, r24
    39f6:	cd 01       	movw	r24, r26
    39f8:	08 95       	ret

000039fa <__udivmodsi4>:
    39fa:	a1 e2       	ldi	r26, 0x21	; 33
    39fc:	1a 2e       	mov	r1, r26
    39fe:	aa 1b       	sub	r26, r26
    3a00:	bb 1b       	sub	r27, r27
    3a02:	fd 01       	movw	r30, r26
    3a04:	0d c0       	rjmp	.+26     	; 0x3a20 <__udivmodsi4_ep>

00003a06 <__udivmodsi4_loop>:
    3a06:	aa 1f       	adc	r26, r26
    3a08:	bb 1f       	adc	r27, r27
    3a0a:	ee 1f       	adc	r30, r30
    3a0c:	ff 1f       	adc	r31, r31
    3a0e:	a2 17       	cp	r26, r18
    3a10:	b3 07       	cpc	r27, r19
    3a12:	e4 07       	cpc	r30, r20
    3a14:	f5 07       	cpc	r31, r21
    3a16:	20 f0       	brcs	.+8      	; 0x3a20 <__udivmodsi4_ep>
    3a18:	a2 1b       	sub	r26, r18
    3a1a:	b3 0b       	sbc	r27, r19
    3a1c:	e4 0b       	sbc	r30, r20
    3a1e:	f5 0b       	sbc	r31, r21

00003a20 <__udivmodsi4_ep>:
    3a20:	66 1f       	adc	r22, r22
    3a22:	77 1f       	adc	r23, r23
    3a24:	88 1f       	adc	r24, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	1a 94       	dec	r1
    3a2a:	69 f7       	brne	.-38     	; 0x3a06 <__udivmodsi4_loop>
    3a2c:	60 95       	com	r22
    3a2e:	70 95       	com	r23
    3a30:	80 95       	com	r24
    3a32:	90 95       	com	r25
    3a34:	9b 01       	movw	r18, r22
    3a36:	ac 01       	movw	r20, r24
    3a38:	bd 01       	movw	r22, r26
    3a3a:	cf 01       	movw	r24, r30
    3a3c:	08 95       	ret

00003a3e <__prologue_saves__>:
    3a3e:	2f 92       	push	r2
    3a40:	3f 92       	push	r3
    3a42:	4f 92       	push	r4
    3a44:	5f 92       	push	r5
    3a46:	6f 92       	push	r6
    3a48:	7f 92       	push	r7
    3a4a:	8f 92       	push	r8
    3a4c:	9f 92       	push	r9
    3a4e:	af 92       	push	r10
    3a50:	bf 92       	push	r11
    3a52:	cf 92       	push	r12
    3a54:	df 92       	push	r13
    3a56:	ef 92       	push	r14
    3a58:	ff 92       	push	r15
    3a5a:	0f 93       	push	r16
    3a5c:	1f 93       	push	r17
    3a5e:	cf 93       	push	r28
    3a60:	df 93       	push	r29
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	ca 1b       	sub	r28, r26
    3a68:	db 0b       	sbc	r29, r27
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	09 94       	ijmp

00003a76 <__epilogue_restores__>:
    3a76:	2a 88       	ldd	r2, Y+18	; 0x12
    3a78:	39 88       	ldd	r3, Y+17	; 0x11
    3a7a:	48 88       	ldd	r4, Y+16	; 0x10
    3a7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a80:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a82:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a84:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a86:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a88:	b9 84       	ldd	r11, Y+9	; 0x09
    3a8a:	c8 84       	ldd	r12, Y+8	; 0x08
    3a8c:	df 80       	ldd	r13, Y+7	; 0x07
    3a8e:	ee 80       	ldd	r14, Y+6	; 0x06
    3a90:	fd 80       	ldd	r15, Y+5	; 0x05
    3a92:	0c 81       	ldd	r16, Y+4	; 0x04
    3a94:	1b 81       	ldd	r17, Y+3	; 0x03
    3a96:	aa 81       	ldd	r26, Y+2	; 0x02
    3a98:	b9 81       	ldd	r27, Y+1	; 0x01
    3a9a:	ce 0f       	add	r28, r30
    3a9c:	d1 1d       	adc	r29, r1
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	f8 94       	cli
    3aa2:	de bf       	out	0x3e, r29	; 62
    3aa4:	0f be       	out	0x3f, r0	; 63
    3aa6:	cd bf       	out	0x3d, r28	; 61
    3aa8:	ed 01       	movw	r28, r26
    3aaa:	08 95       	ret

00003aac <_exit>:
    3aac:	f8 94       	cli

00003aae <__stop_program>:
    3aae:	ff cf       	rjmp	.-2      	; 0x3aae <__stop_program>
