
I2C_TWI_EEPROM_RW_TESET.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00800060  000044ae  00004542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001f0  008001f0  000046d2  2**0
                  ALLOC
  3 .stab         00004a10  00000000  00000000  000046d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c28  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000bd0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  0000beec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  0000c11a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000ea23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  0001005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  000113dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  000115dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  000118e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000122c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__vector_1>
       8:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__vector_2>
       c:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__vector_3>
      10:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_4>
      14:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_10>
      2c:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_11>
      30:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 31       	cpi	r26, 0x15	; 21
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 21 	call	0x430a	; 0x430a <main>
      8a:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 22 	jmp	0x443c	; 0x443c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 22 	jmp	0x448c	; 0x448c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 22 	jmp	0x448c	; 0x448c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1e 22 	jmp	0x443c	; 0x443c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 26 22 	jmp	0x444c	; 0x444c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e7       	ldi	r22, 0x7F	; 127
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 46 22 	jmp	0x448c	; 0x448c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 46 22 	jmp	0x448c	; 0x448c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 46 22 	jmp	0x448c	; 0x448c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 46 22 	jmp	0x448c	; 0x448c <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 46 22 	jmp	0x448c	; 0x448c <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 2e 22 	jmp	0x445c	; 0x445c <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 4a 22 	jmp	0x4494	; 0x4494 <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 26 22 	jmp	0x444c	; 0x444c <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e9 57       	subi	r30, 0x79	; 121
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <TWI_voidInitMaster>:
#include "../includes/TWI_registers.h"
#include "../../../utils/STD_TYPES.h"
#include "../../../utils/BIT_MATH.h"

// Initialize I2C Master with provided address
void TWI_voidInitMaster(u8 Copy_u8Add) {
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
    if ((128 > Copy_u8Add) && (0 < Copy_u8Add)) {
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 23       	and	r24, r24
     efe:	44 f0       	brlt	.+16     	; 0xf10 <TWI_voidInitMaster+0x22>
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	88 23       	and	r24, r24
     f04:	29 f0       	breq	.+10     	; 0xf10 <TWI_voidInitMaster+0x22>
        TWAR = (Copy_u8Add << 1);
     f06:	e2 e2       	ldi	r30, 0x22	; 34
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	88 0f       	add	r24, r24
     f0e:	80 83       	st	Z, r24
    }
        // Set frequency > 400kHz, set prescaler
        TWBR = 12;
     f10:	e0 e2       	ldi	r30, 0x20	; 32
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	8c e0       	ldi	r24, 0x0C	; 12
     f16:	80 83       	st	Z, r24
        CLR_BIT(TWSR, TWPS0);
     f18:	a1 e2       	ldi	r26, 0x21	; 33
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e1 e2       	ldi	r30, 0x21	; 33
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8e 7f       	andi	r24, 0xFE	; 254
     f24:	8c 93       	st	X, r24
        CLR_BIT(TWSR, TWPS1);
     f26:	a1 e2       	ldi	r26, 0x21	; 33
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e1 e2       	ldi	r30, 0x21	; 33
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8d 7f       	andi	r24, 0xFD	; 253
     f32:	8c 93       	st	X, r24

        // Enable ACKs for I2C response and generate internal status code
   //     SET_BIT(TWCR, TWEA);
        // Enable I2C
        SET_BIT(TWCR, TWEN);
     f34:	a6 e5       	ldi	r26, 0x56	; 86
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e6 e5       	ldi	r30, 0x56	; 86
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	84 60       	ori	r24, 0x04	; 4
     f40:	8c 93       	st	X, r24
}
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <TWI_voidSendStartCondition>:

// Send Start Condition
void TWI_voidSendStartCondition(void) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
    // Start condition
    SET_BIT(TWCR, TWSTA);
     f52:	a6 e5       	ldi	r26, 0x56	; 86
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 62       	ori	r24, 0x20	; 32
     f5e:	8c 93       	st	X, r24
    // Clear flag
    SET_BIT(TWCR, TWINT);
     f60:	a6 e5       	ldi	r26, 0x56	; 86
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e6 e5       	ldi	r30, 0x56	; 86
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 68       	ori	r24, 0x80	; 128
     f6c:	8c 93       	st	X, r24
    // Busy wait for the flag
    while (0 == GET_BIT(TWCR, TWINT));
     f6e:	e6 e5       	ldi	r30, 0x56	; 86
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 23       	and	r24, r24
     f76:	dc f7       	brge	.-10     	; 0xf6e <TWI_voidSendStartCondition+0x24>
    // Check for ACK == Start Condition ACK
    while (TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
     f78:	e1 e2       	ldi	r30, 0x21	; 33
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	88 7f       	andi	r24, 0xF8	; 248
     f84:	90 70       	andi	r25, 0x00	; 0
     f86:	88 30       	cpi	r24, 0x08	; 8
     f88:	91 05       	cpc	r25, r1
     f8a:	b1 f7       	brne	.-20     	; 0xf78 <TWI_voidSendStartCondition+0x2e>
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <TWI_voidSendRepStartCondition>:

// Send Repeated Start Condition
void TWI_voidSendRepStartCondition(void) {
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
    // Start condition
    SET_BIT(TWCR, TWSTA);
     f9a:	a6 e5       	ldi	r26, 0x56	; 86
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e6 e5       	ldi	r30, 0x56	; 86
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	8c 93       	st	X, r24
    // Clear flag
    SET_BIT(TWCR, TWINT);
     fa8:	a6 e5       	ldi	r26, 0x56	; 86
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e6 e5       	ldi	r30, 0x56	; 86
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 68       	ori	r24, 0x80	; 128
     fb4:	8c 93       	st	X, r24
    // Busy wait for the flag
    while (0 == GET_BIT(TWCR, TWINT));
     fb6:	e6 e5       	ldi	r30, 0x56	; 86
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 23       	and	r24, r24
     fbe:	dc f7       	brge	.-10     	; 0xfb6 <TWI_voidSendRepStartCondition+0x24>
    // Check for ACK == Repeated Start Condition ACK
    while (TWI_STATUS_VALUE != TWI_REPEATED_START_CONDITION_ACK);
     fc0:	e1 e2       	ldi	r30, 0x21	; 33
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	88 7f       	andi	r24, 0xF8	; 248
     fcc:	90 70       	andi	r25, 0x00	; 0
     fce:	80 31       	cpi	r24, 0x10	; 16
     fd0:	91 05       	cpc	r25, r1
     fd2:	b1 f7       	brne	.-20     	; 0xfc0 <TWI_voidSendRepStartCondition+0x2e>
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <TWI_voidSendStopCondition>:

// Send Stop Condition
void TWI_voidSendStopCondition(void) {
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
    // Request stop condition
    SET_BIT(TWCR, TWSTO);
     fe2:	a6 e5       	ldi	r26, 0x56	; 86
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e6 e5       	ldi	r30, 0x56	; 86
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 61       	ori	r24, 0x10	; 16
     fee:	8c 93       	st	X, r24
    // Clear flag to start the current job
    SET_BIT(TWCR, TWINT);
     ff0:	a6 e5       	ldi	r26, 0x56	; 86
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e6 e5       	ldi	r30, 0x56	; 86
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 68       	ori	r24, 0x80	; 128
     ffc:	8c 93       	st	X, r24
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <TWI_voidSendSlaveAddWithWrite>:

// Send Slave Address with Write Operation
void TWI_voidSendSlaveAddWithWrite(u8 Copy_u8Add) {
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
    if (128 > Copy_u8Add) {
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	88 23       	and	r24, r24
    1014:	4c f1       	brlt	.+82     	; 0x1068 <TWI_voidSendSlaveAddWithWrite+0x64>
        TWDR = Copy_u8Add << 1;
    1016:	e3 e2       	ldi	r30, 0x23	; 35
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	88 0f       	add	r24, r24
    101e:	80 83       	st	Z, r24
        // Select write operation
        CLR_BIT(TWDR, 0);
    1020:	a3 e2       	ldi	r26, 0x23	; 35
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e3 e2       	ldi	r30, 0x23	; 35
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24

        // Clear start condition
        CLR_BIT(TWCR, TWSTA);
    102e:	a6 e5       	ldi	r26, 0x56	; 86
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e6 e5       	ldi	r30, 0x56	; 86
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8f 7d       	andi	r24, 0xDF	; 223
    103a:	8c 93       	st	X, r24
        // Clear flag
        SET_BIT(TWCR, TWINT);
    103c:	a6 e5       	ldi	r26, 0x56	; 86
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e6 e5       	ldi	r30, 0x56	; 86
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	80 68       	ori	r24, 0x80	; 128
    1048:	8c 93       	st	X, r24
        // Busy wait for the flag
        while (0 == GET_BIT(TWCR, TWINT));
    104a:	e6 e5       	ldi	r30, 0x56	; 86
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	88 23       	and	r24, r24
    1052:	dc f7       	brge	.-10     	; 0x104a <TWI_voidSendSlaveAddWithWrite+0x46>
        // Check for ACK == Slave Address Write ACK
        while (TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
    1054:	e1 e2       	ldi	r30, 0x21	; 33
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	88 7f       	andi	r24, 0xF8	; 248
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	88 31       	cpi	r24, 0x18	; 24
    1064:	91 05       	cpc	r25, r1
    1066:	b1 f7       	brne	.-20     	; 0x1054 <TWI_voidSendSlaveAddWithWrite+0x50>
    }
}
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <TWI_voidSendSlaveAddWithRead>:

// Send Slave Address with Read Operation
void TWI_voidSendSlaveAddWithRead(u8 Copy_u8Add) {
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	0f 92       	push	r0
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	89 83       	std	Y+1, r24	; 0x01
    if (128 > Copy_u8Add) {
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	88 23       	and	r24, r24
    1080:	4c f1       	brlt	.+82     	; 0x10d4 <TWI_voidSendSlaveAddWithRead+0x64>
        TWDR = Copy_u8Add << 1;
    1082:	e3 e2       	ldi	r30, 0x23	; 35
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	88 0f       	add	r24, r24
    108a:	80 83       	st	Z, r24
        // Select read operation
        SET_BIT(TWDR, 0);
    108c:	a3 e2       	ldi	r26, 0x23	; 35
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e3 e2       	ldi	r30, 0x23	; 35
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	8c 93       	st	X, r24

        // Clear start condition
        CLR_BIT(TWCR, TWSTA);
    109a:	a6 e5       	ldi	r26, 0x56	; 86
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e6 e5       	ldi	r30, 0x56	; 86
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 7d       	andi	r24, 0xDF	; 223
    10a6:	8c 93       	st	X, r24
        // Clear flag
        SET_BIT(TWCR, TWINT);
    10a8:	a6 e5       	ldi	r26, 0x56	; 86
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e6 e5       	ldi	r30, 0x56	; 86
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 68       	ori	r24, 0x80	; 128
    10b4:	8c 93       	st	X, r24
        // Busy wait for the flag
        while (0 == GET_BIT(TWCR, TWINT));
    10b6:	e6 e5       	ldi	r30, 0x56	; 86
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 23       	and	r24, r24
    10be:	dc f7       	brge	.-10     	; 0x10b6 <TWI_voidSendSlaveAddWithRead+0x46>
        // Check for ACK == Slave Address Read ACK
        while (TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    10c0:	e1 e2       	ldi	r30, 0x21	; 33
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	88 7f       	andi	r24, 0xF8	; 248
    10cc:	90 70       	andi	r25, 0x00	; 0
    10ce:	80 34       	cpi	r24, 0x40	; 64
    10d0:	91 05       	cpc	r25, r1
    10d2:	b1 f7       	brne	.-20     	; 0x10c0 <TWI_voidSendSlaveAddWithRead+0x50>
    }
}
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <TWI_voidWriteMasterDataByte>:

// Write Data Byte by Master
void TWI_voidWriteMasterDataByte(u8 Copy_u8TxData) {
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
    TWDR = Copy_u8TxData;
    10e8:	e3 e2       	ldi	r30, 0x23	; 35
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	80 83       	st	Z, r24

    // Set interrupt flag
    SET_BIT(TWCR, TWINT);
    10f0:	a6 e5       	ldi	r26, 0x56	; 86
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e6 e5       	ldi	r30, 0x56	; 86
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	80 68       	ori	r24, 0x80	; 128
    10fc:	8c 93       	st	X, r24
    // Busy wait for the flag
    while (0 == GET_BIT(TWCR, TWINT));
    10fe:	e6 e5       	ldi	r30, 0x56	; 86
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	88 23       	and	r24, r24
    1106:	dc f7       	brge	.-10     	; 0x10fe <TWI_voidWriteMasterDataByte+0x22>
    // Check for ACK == Master Data Transmit ACK
    while (TWI_STATUS_VALUE != TWI_MASTER_DATA_TRANSMIT_ACK);
    1108:	e1 e2       	ldi	r30, 0x21	; 33
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	88 7f       	andi	r24, 0xF8	; 248
    1114:	90 70       	andi	r25, 0x00	; 0
    1116:	88 32       	cpi	r24, 0x28	; 40
    1118:	91 05       	cpc	r25, r1
    111a:	b1 f7       	brne	.-20     	; 0x1108 <TWI_voidWriteMasterDataByte+0x2c>
}
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <TWI_voidReadMasterDataByte_With_ACK>:

// Read Data Byte by Master with ACK
void TWI_voidReadMasterDataByte_With_ACK(u8* Copy_pu8RxData) {
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <TWI_voidReadMasterDataByte_With_ACK+0x6>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8RxData != NULL) {
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	19 f1       	breq	.+70     	; 0x1180 <TWI_voidReadMasterDataByte_With_ACK+0x5c>
        // Set interrupt flag
        SET_BIT(TWCR, TWINT);
    113a:	a6 e5       	ldi	r26, 0x56	; 86
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e6 e5       	ldi	r30, 0x56	; 86
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 68       	ori	r24, 0x80	; 128
    1146:	8c 93       	st	X, r24
        SET_BIT(TWCR, TWEA);  // Set NACK
    1148:	a6 e5       	ldi	r26, 0x56	; 86
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e6 e5       	ldi	r30, 0x56	; 86
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 64       	ori	r24, 0x40	; 64
    1154:	8c 93       	st	X, r24

        // Busy wait for the flag
        while (0 == GET_BIT(TWCR, TWINT));
    1156:	e6 e5       	ldi	r30, 0x56	; 86
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	88 23       	and	r24, r24
    115e:	dc f7       	brge	.-10     	; 0x1156 <TWI_voidReadMasterDataByte_With_ACK+0x32>
        // Check for ACK == Master Data Receive ACK
        while (TWI_STATUS_VALUE != TWI_MASTER_DATA_RECIEVE_ACK);
    1160:	e1 e2       	ldi	r30, 0x21	; 33
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	88 7f       	andi	r24, 0xF8	; 248
    116c:	90 70       	andi	r25, 0x00	; 0
    116e:	80 35       	cpi	r24, 0x50	; 80
    1170:	91 05       	cpc	r25, r1
    1172:	b1 f7       	brne	.-20     	; 0x1160 <TWI_voidReadMasterDataByte_With_ACK+0x3c>

        *Copy_pu8RxData = TWDR;
    1174:	e3 e2       	ldi	r30, 0x23	; 35
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	e9 81       	ldd	r30, Y+1	; 0x01
    117c:	fa 81       	ldd	r31, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    }
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <TWI_voidReadMasterDataByte_With_NACK>:

// Read Data Byte by Master with NACK
void TWI_voidReadMasterDataByte_With_NACK(u8* Copy_pu8RxData) {
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <TWI_voidReadMasterDataByte_With_NACK+0x6>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8RxData != NULL) {
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	19 f1       	breq	.+70     	; 0x11e6 <TWI_voidReadMasterDataByte_With_NACK+0x5c>
        // Set interrupt flag
        SET_BIT(TWCR, TWINT);
    11a0:	a6 e5       	ldi	r26, 0x56	; 86
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e6 e5       	ldi	r30, 0x56	; 86
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	80 68       	ori	r24, 0x80	; 128
    11ac:	8c 93       	st	X, r24
       //
        CLR_BIT(TWCR, TWEA);  // Set NACK
    11ae:	a6 e5       	ldi	r26, 0x56	; 86
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e6 e5       	ldi	r30, 0x56	; 86
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8f 7b       	andi	r24, 0xBF	; 191
    11ba:	8c 93       	st	X, r24
        // Busy wait for the flag
        while (0 == GET_BIT(TWCR, TWINT));
    11bc:	e6 e5       	ldi	r30, 0x56	; 86
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 23       	and	r24, r24
    11c4:	dc f7       	brge	.-10     	; 0x11bc <TWI_voidReadMasterDataByte_With_NACK+0x32>
        // Check for NACK == Master Data Receive NACK
        while (TWI_STATUS_VALUE != TWI_MASTER_DATA_RECIEVE_NACK);
    11c6:	e1 e2       	ldi	r30, 0x21	; 33
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	88 7f       	andi	r24, 0xF8	; 248
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	88 35       	cpi	r24, 0x58	; 88
    11d6:	91 05       	cpc	r25, r1
    11d8:	b1 f7       	brne	.-20     	; 0x11c6 <TWI_voidReadMasterDataByte_With_NACK+0x3c>

        *Copy_pu8RxData = TWDR;
    11da:	e3 e2       	ldi	r30, 0x23	; 35
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	e9 81       	ldd	r30, Y+1	; 0x01
    11e2:	fa 81       	ldd	r31, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    }
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <TMR2_voidSetDelay_ms_usingCTC+0x6>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
    11fe:	e3 e4       	ldi	r30, 0x43	; 67
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	89 ef       	ldi	r24, 0xF9	; 249
    1204:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	cc 01       	movw	r24, r24
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	80 93 fa 01 	sts	0x01FA, r24
    1214:	90 93 fb 01 	sts	0x01FB, r25
    1218:	a0 93 fc 01 	sts	0x01FC, r26
    121c:	b0 93 fd 01 	sts	0x01FD, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
#if TMR2_MODE == TMR2_FAST_PWM_MODE

	if ((100 >= copy_u8DutyCycle)) {
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	85 36       	cpi	r24, 0x65	; 101
    123a:	e0 f4       	brcc	.+56     	; 0x1274 <TMR2_voidSetDutyCycleForPWM+0x4a>
		OCR2 = 0;
		else
		OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;

#elif TMR2_PWM_MODE == TMR2_INVERTING
		copy_u8DutyCycle = 100 - copy_u8DutyCycle;
    123c:	94 e6       	ldi	r25, 0x64	; 100
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	29 2f       	mov	r18, r25
    1242:	28 1b       	sub	r18, r24
    1244:	82 2f       	mov	r24, r18
    1246:	89 83       	std	Y+1, r24	; 0x01
		if (copy_u8DutyCycle == 0)
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	88 23       	and	r24, r24
    124c:	21 f4       	brne	.+8      	; 0x1256 <TMR2_voidSetDutyCycleForPWM+0x2c>
			OCR2 = 0;
    124e:	e3 e4       	ldi	r30, 0x43	; 67
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	10 82       	st	Z, r1
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <TMR2_voidSetDutyCycleForPWM+0x4a>
		else
			OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;
    1256:	e3 e4       	ldi	r30, 0x43	; 67
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	98 2f       	mov	r25, r24
    1262:	88 27       	eor	r24, r24
    1264:	24 e6       	ldi	r18, 0x64	; 100
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	b9 01       	movw	r22, r18
    126a:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__udivmodhi4>
    126e:	cb 01       	movw	r24, r22
    1270:	81 50       	subi	r24, 0x01	; 1
    1272:	80 83       	st	Z, r24
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);

#elif TMR2_MODE == TMR2_FAST_PWM_MODE
	// Select Fast PWM mode
	SET_BIT(TCCR2, WGM20);
    1284:	a5 e4       	ldi	r26, 0x45	; 69
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e5 e4       	ldi	r30, 0x45	; 69
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
    1292:	a5 e4       	ldi	r26, 0x45	; 69
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e4       	ldi	r30, 0x45	; 69
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 60       	ori	r24, 0x08	; 8
    129e:	8c 93       	st	X, r24

#if TMR2_PWM_MODE == TMR2_INVERTING
	SET_BIT(TCCR2, COM20);
    12a0:	a5 e4       	ldi	r26, 0x45	; 69
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e5 e4       	ldi	r30, 0x45	; 69
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 61       	ori	r24, 0x10	; 16
    12ac:	8c 93       	st	X, r24
	SET_BIT(TCCR2, COM21);
    12ae:	a5 e4       	ldi	r26, 0x45	; 69
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e5 e4       	ldi	r30, 0x45	; 69
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 62       	ori	r24, 0x20	; 32
    12ba:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    12ca:	a5 e4       	ldi	r26, 0x45	; 69
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e4       	ldi	r30, 0x45	; 69
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    12d8:	a5 e4       	ldi	r26, 0x45	; 69
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e4       	ldi	r30, 0x45	; 69
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	82 60       	ori	r24, 0x02	; 2
    12e4:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    12e6:	a5 e4       	ldi	r26, 0x45	; 69
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e5 e4       	ldi	r30, 0x45	; 69
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8b 7f       	andi	r24, 0xFB	; 251
    12f2:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    1302:	a5 e4       	ldi	r26, 0x45	; 69
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e4       	ldi	r30, 0x45	; 69
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8e 7f       	andi	r24, 0xFE	; 254
    130e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    1310:	a5 e4       	ldi	r26, 0x45	; 69
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e4       	ldi	r30, 0x45	; 69
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8d 7f       	andi	r24, 0xFD	; 253
    131c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    131e:	a5 e4       	ldi	r26, 0x45	; 69
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e4       	ldi	r30, 0x45	; 69
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	8b 7f       	andi	r24, 0xFB	; 251
    132a:	8c 93       	st	X, r24
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <TMR2_voidSetCallBackOVF+0x6>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	90 93 f1 01 	sts	0x01F1, r25
    1350:	80 93 f0 01 	sts	0x01F0, r24
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <TMR2_voidSetCallBackCTC+0x6>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	31 f0       	breq	.+12     	; 0x1380 <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	9a 81       	ldd	r25, Y+2	; 0x02
    1378:	90 93 f3 01 	sts	0x01F3, r25
    137c:	80 93 f2 01 	sts	0x01F2, r24
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    13b4:	80 91 f4 01 	lds	r24, 0x01F4
    13b8:	90 91 f5 01 	lds	r25, 0x01F5
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	90 93 f5 01 	sts	0x01F5, r25
    13c2:	80 93 f4 01 	sts	0x01F4, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    13c6:	80 91 f4 01 	lds	r24, 0x01F4
    13ca:	90 91 f5 01 	lds	r25, 0x01F5
    13ce:	23 e0       	ldi	r18, 0x03	; 3
    13d0:	81 3d       	cpi	r24, 0xD1	; 209
    13d2:	92 07       	cpc	r25, r18
    13d4:	99 f4       	brne	.+38     	; 0x13fc <__vector_5+0x72>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    13d6:	e4 e4       	ldi	r30, 0x44	; 68
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	81 e7       	ldi	r24, 0x71	; 113
    13dc:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    13de:	10 92 f5 01 	sts	0x01F5, r1
    13e2:	10 92 f4 01 	sts	0x01F4, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    13e6:	80 91 f0 01 	lds	r24, 0x01F0
    13ea:	90 91 f1 01 	lds	r25, 0x01F1
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	29 f0       	breq	.+10     	; 0x13fc <__vector_5+0x72>
			TMR2_privatePtrToCAllBackOVF();
    13f2:	e0 91 f0 01 	lds	r30, 0x01F0
    13f6:	f0 91 f1 01 	lds	r31, 0x01F1
    13fa:	09 95       	icall
		}
	}
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    144c:	80 91 f6 01 	lds	r24, 0x01F6
    1450:	90 91 f7 01 	lds	r25, 0x01F7
    1454:	a0 91 f8 01 	lds	r26, 0x01F8
    1458:	b0 91 f9 01 	lds	r27, 0x01F9
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	a1 1d       	adc	r26, r1
    1460:	b1 1d       	adc	r27, r1
    1462:	80 93 f6 01 	sts	0x01F6, r24
    1466:	90 93 f7 01 	sts	0x01F7, r25
    146a:	a0 93 f8 01 	sts	0x01F8, r26
    146e:	b0 93 f9 01 	sts	0x01F9, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1472:	20 91 fa 01 	lds	r18, 0x01FA
    1476:	30 91 fb 01 	lds	r19, 0x01FB
    147a:	40 91 fc 01 	lds	r20, 0x01FC
    147e:	50 91 fd 01 	lds	r21, 0x01FD
    1482:	80 91 f6 01 	lds	r24, 0x01F6
    1486:	90 91 f7 01 	lds	r25, 0x01F7
    148a:	a0 91 f8 01 	lds	r26, 0x01F8
    148e:	b0 91 f9 01 	lds	r27, 0x01F9
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	4a 07       	cpc	r20, r26
    1498:	5b 07       	cpc	r21, r27
    149a:	99 f4       	brne	.+38     	; 0x14c2 <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    149c:	10 92 f6 01 	sts	0x01F6, r1
    14a0:	10 92 f7 01 	sts	0x01F7, r1
    14a4:	10 92 f8 01 	sts	0x01F8, r1
    14a8:	10 92 f9 01 	sts	0x01F9, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    14ac:	80 91 f2 01 	lds	r24, 0x01F2
    14b0:	90 91 f3 01 	lds	r25, 0x01F3
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    14b8:	e0 91 f2 01 	lds	r30, 0x01F2
    14bc:	f0 91 f3 01 	lds	r31, 0x01F3
    14c0:	09 95       	icall
		}
	}
}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    14f4:	e3 e4       	ldi	r30, 0x43	; 67
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	80 83       	st	Z, r24
}
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    1516:	06 e4       	ldi	r16, 0x46	; 70
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	9c 01       	movw	r18, r24
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	80 e9       	ldi	r24, 0x90	; 144
    1526:	90 ed       	ldi	r25, 0xD0	; 208
    1528:	a3 e0       	ldi	r26, 0x03	; 3
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <__udivmodsi4>
    1534:	da 01       	movw	r26, r20
    1536:	c9 01       	movw	r24, r18
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f8 01       	movw	r30, r16
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    1558:	00 d0       	rcall	.+0      	; 0x155a <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	69 83       	std	Y+1, r22	; 0x01
    1560:	7a 83       	std	Y+2, r23	; 0x02
    1562:	8b 83       	std	Y+3, r24	; 0x03
    1564:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    1566:	69 81       	ldd	r22, Y+1	; 0x01
    1568:	7a 81       	ldd	r23, Y+2	; 0x02
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	48 ec       	ldi	r20, 0xC8	; 200
    1574:	52 e4       	ldi	r21, 0x42	; 66
    1576:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    157a:	18 16       	cp	r1, r24
    157c:	0c f4       	brge	.+2      	; 0x1580 <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    157e:	48 c0       	rjmp	.+144    	; 0x1610 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    1580:	69 81       	ldd	r22, Y+1	; 0x01
    1582:	7a 81       	ldd	r23, Y+2	; 0x02
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1594:	88 23       	and	r24, r24
    1596:	29 f4       	brne	.+10     	; 0x15a2 <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    1598:	ea e4       	ldi	r30, 0x4A	; 74
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	11 82       	std	Z+1, r1	; 0x01
    159e:	10 82       	st	Z, r1
    15a0:	37 c0       	rjmp	.+110    	; 0x1610 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    15a2:	0a e4       	ldi	r16, 0x4A	; 74
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	e6 e4       	ldi	r30, 0x46	; 70
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	cc 01       	movw	r24, r24
    15b2:	a0 e0       	ldi	r26, 0x00	; 0
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	bc 01       	movw	r22, r24
    15b8:	cd 01       	movw	r24, r26
    15ba:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	29 81       	ldd	r18, Y+1	; 0x01
    15c8:	3a 81       	ldd	r19, Y+2	; 0x02
    15ca:	4b 81       	ldd	r20, Y+3	; 0x03
    15cc:	5c 81       	ldd	r21, Y+4	; 0x04
    15ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	48 ec       	ldi	r20, 0xC8	; 200
    15e0:	52 e4       	ldi	r21, 0x42	; 66
    15e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	f8 01       	movw	r30, r16
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <TMR1_voidInit>:


void TMR1_voidInit(void) {
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    162a:	af e4       	ldi	r26, 0x4F	; 79
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ef e4       	ldi	r30, 0x4F	; 79
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8e 7f       	andi	r24, 0xFE	; 254
    1636:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    1638:	af e4       	ldi	r26, 0x4F	; 79
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	ef e4       	ldi	r30, 0x4F	; 79
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	82 60       	ori	r24, 0x02	; 2
    1644:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1646:	ae e4       	ldi	r26, 0x4E	; 78
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ee e4       	ldi	r30, 0x4E	; 78
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 60       	ori	r24, 0x08	; 8
    1652:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1654:	ae e4       	ldi	r26, 0x4E	; 78
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ee e4       	ldi	r30, 0x4E	; 78
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	80 61       	ori	r24, 0x10	; 16
    1660:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    1662:	af e4       	ldi	r26, 0x4F	; 79
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ef e4       	ldi	r30, 0x4F	; 79
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8f 7b       	andi	r24, 0xBF	; 191
    166e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1670:	af e4       	ldi	r26, 0x4F	; 79
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ef e4       	ldi	r30, 0x4F	; 79
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	80 68       	ori	r24, 0x80	; 128
    167c:	8c 93       	st	X, r24
#elif TMR1_PWM_MODE == TMR1_INVERTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
	TMR1_voidSetFrequencyMode14FastPWM(50);
    167e:	82 e3       	ldi	r24, 0x32	; 50
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 82 0a 	call	0x1504	; 0x1504 <TMR1_voidSetFrequencyMode14FastPWM>

#endif
}
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <TMR1_voidSetCompareMatchValueA+0x6>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    169a:	ea e4       	ldi	r30, 0x4A	; 74
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    16b8:	ae e4       	ldi	r26, 0x4E	; 78
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ee e4       	ldi	r30, 0x4E	; 78
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	81 60       	ori	r24, 0x01	; 1
    16c4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    16c6:	ae e4       	ldi	r26, 0x4E	; 78
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ee e4       	ldi	r30, 0x4E	; 78
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	82 60       	ori	r24, 0x02	; 2
    16d2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    16d4:	ae e4       	ldi	r26, 0x4E	; 78
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ee e4       	ldi	r30, 0x4E	; 78
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	8b 7f       	andi	r24, 0xFB	; 251
    16e0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    16f0:	ae e4       	ldi	r26, 0x4E	; 78
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ee e4       	ldi	r30, 0x4E	; 78
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8e 7f       	andi	r24, 0xFE	; 254
    16fc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    16fe:	ae e4       	ldi	r26, 0x4E	; 78
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ee e4       	ldi	r30, 0x4E	; 78
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	8d 7f       	andi	r24, 0xFD	; 253
    170a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    170c:	ae e4       	ldi	r26, 0x4E	; 78
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ee e4       	ldi	r30, 0x4E	; 78
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8b 7f       	andi	r24, 0xFB	; 251
    1718:	8c 93       	st	X, r24
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    172e:	ec e5       	ldi	r30, 0x5C	; 92
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	89 ef       	ldi	r24, 0xF9	; 249
    1734:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	cc 01       	movw	r24, r24
    173c:	a0 e0       	ldi	r26, 0x00	; 0
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	80 93 08 02 	sts	0x0208, r24
    1744:	90 93 09 02 	sts	0x0209, r25
    1748:	a0 93 0a 02 	sts	0x020A, r26
    174c:	b0 93 0b 02 	sts	0x020B, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	85 36       	cpi	r24, 0x65	; 101
    176a:	d0 f4       	brcc	.+52     	; 0x17a0 <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    176c:	ec e5       	ldi	r30, 0x5C	; 92
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	48 2f       	mov	r20, r24
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	ca 01       	movw	r24, r20
    1778:	9c 01       	movw	r18, r24
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	c9 01       	movw	r24, r18
    1780:	96 95       	lsr	r25
    1782:	98 2f       	mov	r25, r24
    1784:	88 27       	eor	r24, r24
    1786:	97 95       	ror	r25
    1788:	87 95       	ror	r24
    178a:	82 1b       	sub	r24, r18
    178c:	93 0b       	sbc	r25, r19
    178e:	84 0f       	add	r24, r20
    1790:	95 1f       	adc	r25, r21
    1792:	24 e6       	ldi	r18, 0x64	; 100
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	b9 01       	movw	r22, r18
    1798:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__udivmodhi4>
    179c:	cb 01       	movw	r24, r22
    179e:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    17b0:	a3 e5       	ldi	r26, 0x53	; 83
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e3 e5       	ldi	r30, 0x53	; 83
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 64       	ori	r24, 0x40	; 64
    17bc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    17be:	a3 e5       	ldi	r26, 0x53	; 83
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e3 e5       	ldi	r30, 0x53	; 83
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    17cc:	a3 e5       	ldi	r26, 0x53	; 83
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e3 e5       	ldi	r30, 0x53	; 83
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8f 7e       	andi	r24, 0xEF	; 239
    17d8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    17da:	a3 e5       	ldi	r26, 0x53	; 83
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 e5       	ldi	r30, 0x53	; 83
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 62       	ori	r24, 0x20	; 32
    17e6:	8c 93       	st	X, r24
#endif

#endif
}
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    17f6:	a3 e5       	ldi	r26, 0x53	; 83
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e3 e5       	ldi	r30, 0x53	; 83
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1804:	a3 e5       	ldi	r26, 0x53	; 83
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e3 e5       	ldi	r30, 0x53	; 83
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	82 60       	ori	r24, 0x02	; 2
    1810:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1812:	a3 e5       	ldi	r26, 0x53	; 83
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e3 e5       	ldi	r30, 0x53	; 83
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8b 7f       	andi	r24, 0xFB	; 251
    181e:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    182e:	a3 e5       	ldi	r26, 0x53	; 83
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e3 e5       	ldi	r30, 0x53	; 83
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	8e 7f       	andi	r24, 0xFE	; 254
    183a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    183c:	a3 e5       	ldi	r26, 0x53	; 83
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e3 e5       	ldi	r30, 0x53	; 83
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8d 7f       	andi	r24, 0xFD	; 253
    1848:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    184a:	a3 e5       	ldi	r26, 0x53	; 83
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e3 e5       	ldi	r30, 0x53	; 83
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8b 7f       	andi	r24, 0xFB	; 251
    1856:	8c 93       	st	X, r24
}
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <TMR0_voidSetCallBackOVF+0x6>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	31 f0       	breq	.+12     	; 0x1880 <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	90 93 ff 01 	sts	0x01FF, r25
    187c:	80 93 fe 01 	sts	0x01FE, r24
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <TMR0_voidSetCallBackCTC+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	31 f0       	breq	.+12     	; 0x18ac <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	90 93 01 02 	sts	0x0201, r25
    18a8:	80 93 00 02 	sts	0x0200, r24
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    18e0:	80 91 02 02 	lds	r24, 0x0202
    18e4:	90 91 03 02 	lds	r25, 0x0203
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	90 93 03 02 	sts	0x0203, r25
    18ee:	80 93 02 02 	sts	0x0202, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    18f2:	80 91 02 02 	lds	r24, 0x0202
    18f6:	90 91 03 02 	lds	r25, 0x0203
    18fa:	23 e0       	ldi	r18, 0x03	; 3
    18fc:	81 3d       	cpi	r24, 0xD1	; 209
    18fe:	92 07       	cpc	r25, r18
    1900:	99 f4       	brne	.+38     	; 0x1928 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    1902:	e2 e5       	ldi	r30, 0x52	; 82
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	81 e7       	ldi	r24, 0x71	; 113
    1908:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    190a:	10 92 03 02 	sts	0x0203, r1
    190e:	10 92 02 02 	sts	0x0202, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    1912:	80 91 fe 01 	lds	r24, 0x01FE
    1916:	90 91 ff 01 	lds	r25, 0x01FF
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	29 f0       	breq	.+10     	; 0x1928 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    191e:	e0 91 fe 01 	lds	r30, 0x01FE
    1922:	f0 91 ff 01 	lds	r31, 0x01FF
    1926:	09 95       	icall
		}
	}
}
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1978:	80 91 04 02 	lds	r24, 0x0204
    197c:	90 91 05 02 	lds	r25, 0x0205
    1980:	a0 91 06 02 	lds	r26, 0x0206
    1984:	b0 91 07 02 	lds	r27, 0x0207
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	a1 1d       	adc	r26, r1
    198c:	b1 1d       	adc	r27, r1
    198e:	80 93 04 02 	sts	0x0204, r24
    1992:	90 93 05 02 	sts	0x0205, r25
    1996:	a0 93 06 02 	sts	0x0206, r26
    199a:	b0 93 07 02 	sts	0x0207, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    199e:	20 91 08 02 	lds	r18, 0x0208
    19a2:	30 91 09 02 	lds	r19, 0x0209
    19a6:	40 91 0a 02 	lds	r20, 0x020A
    19aa:	50 91 0b 02 	lds	r21, 0x020B
    19ae:	80 91 04 02 	lds	r24, 0x0204
    19b2:	90 91 05 02 	lds	r25, 0x0205
    19b6:	a0 91 06 02 	lds	r26, 0x0206
    19ba:	b0 91 07 02 	lds	r27, 0x0207
    19be:	28 17       	cp	r18, r24
    19c0:	39 07       	cpc	r19, r25
    19c2:	4a 07       	cpc	r20, r26
    19c4:	5b 07       	cpc	r21, r27
    19c6:	99 f4       	brne	.+38     	; 0x19ee <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    19c8:	10 92 04 02 	sts	0x0204, r1
    19cc:	10 92 05 02 	sts	0x0205, r1
    19d0:	10 92 06 02 	sts	0x0206, r1
    19d4:	10 92 07 02 	sts	0x0207, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    19d8:	80 91 00 02 	lds	r24, 0x0200
    19dc:	90 91 01 02 	lds	r25, 0x0201
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	29 f0       	breq	.+10     	; 0x19ee <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    19e4:	e0 91 00 02 	lds	r30, 0x0200
    19e8:	f0 91 01 02 	lds	r31, 0x0201
    19ec:	09 95       	icall
		}
	}
}
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	ff 91       	pop	r31
    19f4:	ef 91       	pop	r30
    19f6:	bf 91       	pop	r27
    19f8:	af 91       	pop	r26
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	7f 91       	pop	r23
    1a00:	6f 91       	pop	r22
    1a02:	5f 91       	pop	r21
    1a04:	4f 91       	pop	r20
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 90       	pop	r0
    1a10:	1f 90       	pop	r1
    1a12:	18 95       	reti

00001a14 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    1a20:	ec e5       	ldi	r30, 0x5C	; 92
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	80 83       	st	Z, r24
}
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <SPI_voidInit>:
#include "../includes/SPI_config.h"

static void (*private_pCallBackSPI)(u8) = NULL;


void SPI_voidInit(void){
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPI->SPCR,SPR0);
	CLR_BIT(SPI->SPCR,SPR1);
	CLR_BIT(SPI->SPSR,SPI2X);
	//select slave
	#elif SPI_MODE == SPI_SLAVE
	CLR_BIT(SPI->SPCR,MSTR);
    1a38:	ad e2       	ldi	r26, 0x2D	; 45
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ed e2       	ldi	r30, 0x2D	; 45
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8f 7e       	andi	r24, 0xEF	; 239
    1a44:	8c 93       	st	X, r24
	#endif

	//select LSB
	SET_BIT(SPI->SPCR,DORD);
    1a46:	ad e2       	ldi	r26, 0x2D	; 45
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ed e2       	ldi	r30, 0x2D	; 45
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 62       	ori	r24, 0x20	; 32
    1a52:	8c 93       	st	X, r24

	//select clk polarity falling  select rising sample

	SET_BIT(SPI->SPCR,CPOL);//polarity
    1a54:	ad e2       	ldi	r26, 0x2D	; 45
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ed e2       	ldi	r30, 0x2D	; 45
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 60       	ori	r24, 0x08	; 8
    1a60:	8c 93       	st	X, r24
	SET_BIT(SPI->SPCR,CPHA);//phase
    1a62:	ad e2       	ldi	r26, 0x2D	; 45
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	ed e2       	ldi	r30, 0x2D	; 45
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	84 60       	ori	r24, 0x04	; 4
    1a6e:	8c 93       	st	X, r24


	//enable
	SET_BIT(SPI->SPCR,SPE);
    1a70:	ad e2       	ldi	r26, 0x2D	; 45
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	ed e2       	ldi	r30, 0x2D	; 45
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	80 64       	ori	r24, 0x40	; 64
    1a7c:	8c 93       	st	X, r24
}
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <SPI_voidTransieve>:


void SPI_voidTransieve(u8 copy_u8TXdata , u8* copy_pu8_RXdata){
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <SPI_voidTransieve+0x6>
    1a8a:	0f 92       	push	r0
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	7b 83       	std	Y+3, r23	; 0x03
    1a94:	6a 83       	std	Y+2, r22	; 0x02

	if(copy_pu8_RXdata != NULL){
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	e1 f0       	breq	.+56     	; 0x1ad6 <SPI_voidTransieve+0x52>
		while(1 == GET_BIT(SPI->SPSR,WCOL));
    1a9e:	ed e2       	ldi	r30, 0x2D	; 45
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	81 81       	ldd	r24, Z+1	; 0x01
    1aa4:	82 95       	swap	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	83 70       	andi	r24, 0x03	; 3
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	81 70       	andi	r24, 0x01	; 1
    1ab2:	90 70       	andi	r25, 0x00	; 0
    1ab4:	88 23       	and	r24, r24
    1ab6:	99 f7       	brne	.-26     	; 0x1a9e <SPI_voidTransieve+0x1a>
		SPI->SPDR = copy_u8TXdata;
    1ab8:	ed e2       	ldi	r30, 0x2D	; 45
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	82 83       	std	Z+2, r24	; 0x02
		//Budy wait
		while(0 == GET_BIT(SPI->SPSR,SPIF));
    1ac0:	ed e2       	ldi	r30, 0x2D	; 45
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	81 81       	ldd	r24, Z+1	; 0x01
    1ac6:	88 23       	and	r24, r24
    1ac8:	dc f7       	brge	.-10     	; 0x1ac0 <SPI_voidTransieve+0x3c>
	* copy_pu8_RXdata =  SPI->SPDR;
    1aca:	ed e2       	ldi	r30, 0x2D	; 45
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad4:	80 83       	st	Z, r24
	}
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <SPI_voidTransmitAsynchronous>:


void SPI_voidTransmitAsynchronous(u8 copy_u8TxData, void(*ptrToFun)(u8 copy_u8RxData)){
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <SPI_voidTransmitAsynchronous+0x6>
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	7b 83       	std	Y+3, r23	; 0x03
    1af2:	6a 83       	std	Y+2, r22	; 0x02
	if(ptrToFun != NULL)
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	f1 f0       	breq	.+60     	; 0x1b38 <SPI_voidTransmitAsynchronous+0x56>
	{
		//Enable SPI Interrrupt
		SET_BIT(SPI->SPCR,SPIE);
    1afc:	ad e2       	ldi	r26, 0x2D	; 45
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	ed e2       	ldi	r30, 0x2D	; 45
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	80 68       	ori	r24, 0x80	; 128
    1b08:	8c 93       	st	X, r24
			//set call back
		private_pCallBackSPI = ptrToFun ;
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	90 93 0d 02 	sts	0x020D, r25
    1b12:	80 93 0c 02 	sts	0x020C, r24
		//check collision
		while(1 == GET_BIT(SPI->SPSR,WCOL));
    1b16:	ed e2       	ldi	r30, 0x2D	; 45
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	81 81       	ldd	r24, Z+1	; 0x01
    1b1c:	82 95       	swap	r24
    1b1e:	86 95       	lsr	r24
    1b20:	86 95       	lsr	r24
    1b22:	83 70       	andi	r24, 0x03	; 3
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	81 70       	andi	r24, 0x01	; 1
    1b2a:	90 70       	andi	r25, 0x00	; 0
    1b2c:	88 23       	and	r24, r24
    1b2e:	99 f7       	brne	.-26     	; 0x1b16 <SPI_voidTransmitAsynchronous+0x34>
				SPI->SPDR = copy_u8TxData;
    1b30:	ed e2       	ldi	r30, 0x2D	; 45
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	82 83       	std	Z+2, r24	; 0x02
	}
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <__vector_12>:


// ISR for timer0 output compare match
void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	2f 93       	push	r18
    1b50:	3f 93       	push	r19
    1b52:	4f 93       	push	r20
    1b54:	5f 93       	push	r21
    1b56:	6f 93       	push	r22
    1b58:	7f 93       	push	r23
    1b5a:	8f 93       	push	r24
    1b5c:	9f 93       	push	r25
    1b5e:	af 93       	push	r26
    1b60:	bf 93       	push	r27
    1b62:	ef 93       	push	r30
    1b64:	ff 93       	push	r31
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	if (private_pCallBackSPI != NULL) {
    1b6e:	80 91 0c 02 	lds	r24, 0x020C
    1b72:	90 91 0d 02 	lds	r25, 0x020D
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	49 f0       	breq	.+18     	; 0x1b8c <__vector_12+0x48>
		private_pCallBackSPI(SPI->SPDR);
    1b7a:	e0 91 0c 02 	lds	r30, 0x020C
    1b7e:	f0 91 0d 02 	lds	r31, 0x020D
    1b82:	ad e2       	ldi	r26, 0x2D	; 45
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	12 96       	adiw	r26, 0x02	; 2
    1b88:	8c 91       	ld	r24, X
    1b8a:	09 95       	icall
	}
}
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	ff 91       	pop	r31
    1b92:	ef 91       	pop	r30
    1b94:	bf 91       	pop	r27
    1b96:	af 91       	pop	r26
    1b98:	9f 91       	pop	r25
    1b9a:	8f 91       	pop	r24
    1b9c:	7f 91       	pop	r23
    1b9e:	6f 91       	pop	r22
    1ba0:	5f 91       	pop	r21
    1ba2:	4f 91       	pop	r20
    1ba4:	3f 91       	pop	r19
    1ba6:	2f 91       	pop	r18
    1ba8:	0f 90       	pop	r0
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	0f 90       	pop	r0
    1bae:	1f 90       	pop	r1
    1bb0:	18 95       	reti

00001bb2 <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <Port_Init+0x6>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <Port_Init+0x8>
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <Port_Init+0xa>
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    1bc4:	1a 82       	std	Y+2, r1	; 0x02
    1bc6:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i < 32; i++) {
    1bc8:	1a 82       	std	Y+2, r1	; 0x02
    1bca:	19 82       	std	Y+1, r1	; 0x01
    1bcc:	72 c1       	rjmp	.+740    	; 0x1eb2 <Port_Init+0x300>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    1bce:	29 81       	ldd	r18, Y+1	; 0x01
    1bd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1bd2:	c9 01       	movw	r24, r18
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	28 0f       	add	r18, r24
    1bda:	39 1f       	adc	r19, r25
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	fc 01       	movw	r30, r24
    1be2:	e2 0f       	add	r30, r18
    1be4:	f3 1f       	adc	r31, r19
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3e 83       	std	Y+6, r19	; 0x06
    1bee:	2d 83       	std	Y+5, r18	; 0x05
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <Port_Init+0x4a>
    1bfa:	67 c0       	rjmp	.+206    	; 0x1cca <Port_Init+0x118>
    1bfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <Port_Init+0x5e>
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	71 f0       	breq	.+28     	; 0x1c2a <Port_Init+0x78>
    1c0e:	4c c1       	rjmp	.+664    	; 0x1ea8 <Port_Init+0x2f6>
    1c10:	2d 81       	ldd	r18, Y+5	; 0x05
    1c12:	3e 81       	ldd	r19, Y+6	; 0x06
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	31 05       	cpc	r19, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <Port_Init+0x6a>
    1c1a:	a7 c0       	rjmp	.+334    	; 0x1d6a <Port_Init+0x1b8>
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	91 05       	cpc	r25, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <Port_Init+0x76>
    1c26:	f1 c0       	rjmp	.+482    	; 0x1e0a <Port_Init+0x258>
    1c28:	3f c1       	rjmp	.+638    	; 0x1ea8 <Port_Init+0x2f6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1c2a:	29 81       	ldd	r18, Y+1	; 0x01
    1c2c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c2e:	c9 01       	movw	r24, r18
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	28 0f       	add	r18, r24
    1c36:	39 1f       	adc	r19, r25
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e2 0f       	add	r30, r18
    1c40:	f3 1f       	adc	r31, r19
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	01 f5       	brne	.+64     	; 0x1c88 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1c48:	aa e3       	ldi	r26, 0x3A	; 58
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ea e3       	ldi	r30, 0x3A	; 58
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	29 81       	ldd	r18, Y+1	; 0x01
    1c56:	3a 81       	ldd	r19, Y+2	; 0x02
    1c58:	c9 01       	movw	r24, r18
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	28 0f       	add	r18, r24
    1c60:	39 1f       	adc	r19, r25
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	fc 01       	movw	r30, r24
    1c68:	e2 0f       	add	r30, r18
    1c6a:	f3 1f       	adc	r31, r19
    1c6c:	81 81       	ldd	r24, Z+1	; 0x01
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <Port_Init+0xcc>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <Port_Init+0xc8>
    1c82:	84 2b       	or	r24, r20
    1c84:	8c 93       	st	X, r24
    1c86:	10 c1       	rjmp	.+544    	; 0x1ea8 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1c88:	aa e3       	ldi	r26, 0x3A	; 58
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	ea e3       	ldi	r30, 0x3A	; 58
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	29 81       	ldd	r18, Y+1	; 0x01
    1c96:	3a 81       	ldd	r19, Y+2	; 0x02
    1c98:	c9 01       	movw	r24, r18
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	28 0f       	add	r18, r24
    1ca0:	39 1f       	adc	r19, r25
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	e2 0f       	add	r30, r18
    1caa:	f3 1f       	adc	r31, r19
    1cac:	81 81       	ldd	r24, Z+1	; 0x01
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 2e       	mov	r0, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <Port_Init+0x10c>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	0a 94       	dec	r0
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <Port_Init+0x108>
    1cc2:	80 95       	com	r24
    1cc4:	84 23       	and	r24, r20
    1cc6:	8c 93       	st	X, r24
    1cc8:	ef c0       	rjmp	.+478    	; 0x1ea8 <Port_Init+0x2f6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1cca:	29 81       	ldd	r18, Y+1	; 0x01
    1ccc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cce:	c9 01       	movw	r24, r18
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	28 0f       	add	r18, r24
    1cd6:	39 1f       	adc	r19, r25
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e2 0f       	add	r30, r18
    1ce0:	f3 1f       	adc	r31, r19
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	01 f5       	brne	.+64     	; 0x1d28 <Port_Init+0x176>
				SET_BIT(DDRB, pin_cfg[i].pin);
    1ce8:	a7 e3       	ldi	r26, 0x37	; 55
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e7 e3       	ldi	r30, 0x37	; 55
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	48 2f       	mov	r20, r24
    1cf4:	29 81       	ldd	r18, Y+1	; 0x01
    1cf6:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf8:	c9 01       	movw	r24, r18
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	28 0f       	add	r18, r24
    1d00:	39 1f       	adc	r19, r25
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	fc 01       	movw	r30, r24
    1d08:	e2 0f       	add	r30, r18
    1d0a:	f3 1f       	adc	r31, r19
    1d0c:	81 81       	ldd	r24, Z+1	; 0x01
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <Port_Init+0x16c>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <Port_Init+0x168>
    1d22:	84 2b       	or	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	c0 c0       	rjmp	.+384    	; 0x1ea8 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1d28:	a7 e3       	ldi	r26, 0x37	; 55
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e7 e3       	ldi	r30, 0x37	; 55
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	48 2f       	mov	r20, r24
    1d34:	29 81       	ldd	r18, Y+1	; 0x01
    1d36:	3a 81       	ldd	r19, Y+2	; 0x02
    1d38:	c9 01       	movw	r24, r18
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	28 0f       	add	r18, r24
    1d40:	39 1f       	adc	r19, r25
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	81 81       	ldd	r24, Z+1	; 0x01
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <Port_Init+0x1ac>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <Port_Init+0x1a8>
    1d62:	80 95       	com	r24
    1d64:	84 23       	and	r24, r20
    1d66:	8c 93       	st	X, r24
    1d68:	9f c0       	rjmp	.+318    	; 0x1ea8 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1d6a:	29 81       	ldd	r18, Y+1	; 0x01
    1d6c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d6e:	c9 01       	movw	r24, r18
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	28 0f       	add	r18, r24
    1d76:	39 1f       	adc	r19, r25
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	e2 0f       	add	r30, r18
    1d80:	f3 1f       	adc	r31, r19
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	01 f5       	brne	.+64     	; 0x1dc8 <Port_Init+0x216>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1d88:	a4 e3       	ldi	r26, 0x34	; 52
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e4 e3       	ldi	r30, 0x34	; 52
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	29 81       	ldd	r18, Y+1	; 0x01
    1d96:	3a 81       	ldd	r19, Y+2	; 0x02
    1d98:	c9 01       	movw	r24, r18
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	28 0f       	add	r18, r24
    1da0:	39 1f       	adc	r19, r25
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	fc 01       	movw	r30, r24
    1da8:	e2 0f       	add	r30, r18
    1daa:	f3 1f       	adc	r31, r19
    1dac:	81 81       	ldd	r24, Z+1	; 0x01
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 2e       	mov	r0, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <Port_Init+0x20c>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	0a 94       	dec	r0
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <Port_Init+0x208>
    1dc2:	84 2b       	or	r24, r20
    1dc4:	8c 93       	st	X, r24
    1dc6:	70 c0       	rjmp	.+224    	; 0x1ea8 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1dc8:	a4 e3       	ldi	r26, 0x34	; 52
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e4 e3       	ldi	r30, 0x34	; 52
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	29 81       	ldd	r18, Y+1	; 0x01
    1dd6:	3a 81       	ldd	r19, Y+2	; 0x02
    1dd8:	c9 01       	movw	r24, r18
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	28 0f       	add	r18, r24
    1de0:	39 1f       	adc	r19, r25
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	fc 01       	movw	r30, r24
    1de8:	e2 0f       	add	r30, r18
    1dea:	f3 1f       	adc	r31, r19
    1dec:	81 81       	ldd	r24, Z+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <Port_Init+0x24c>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <Port_Init+0x248>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	4f c0       	rjmp	.+158    	; 0x1ea8 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1e0a:	29 81       	ldd	r18, Y+1	; 0x01
    1e0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e0e:	c9 01       	movw	r24, r18
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	28 0f       	add	r18, r24
    1e16:	39 1f       	adc	r19, r25
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	01 f5       	brne	.+64     	; 0x1e68 <Port_Init+0x2b6>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1e28:	a1 e3       	ldi	r26, 0x31	; 49
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e1 e3       	ldi	r30, 0x31	; 49
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	29 81       	ldd	r18, Y+1	; 0x01
    1e36:	3a 81       	ldd	r19, Y+2	; 0x02
    1e38:	c9 01       	movw	r24, r18
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	28 0f       	add	r18, r24
    1e40:	39 1f       	adc	r19, r25
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	fc 01       	movw	r30, r24
    1e48:	e2 0f       	add	r30, r18
    1e4a:	f3 1f       	adc	r31, r19
    1e4c:	81 81       	ldd	r24, Z+1	; 0x01
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <Port_Init+0x2ac>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <Port_Init+0x2a8>
    1e62:	84 2b       	or	r24, r20
    1e64:	8c 93       	st	X, r24
    1e66:	20 c0       	rjmp	.+64     	; 0x1ea8 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1e68:	a1 e3       	ldi	r26, 0x31	; 49
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e1 e3       	ldi	r30, 0x31	; 49
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	29 81       	ldd	r18, Y+1	; 0x01
    1e76:	3a 81       	ldd	r19, Y+2	; 0x02
    1e78:	c9 01       	movw	r24, r18
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	28 0f       	add	r18, r24
    1e80:	39 1f       	adc	r19, r25
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	fc 01       	movw	r30, r24
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	81 81       	ldd	r24, Z+1	; 0x01
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <Port_Init+0x2ec>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <Port_Init+0x2e8>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i=0; i < 32; i++) {
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	80 32       	cpi	r24, 0x20	; 32
    1eb8:	91 05       	cpc	r25, r1
    1eba:	0c f4       	brge	.+2      	; 0x1ebe <Port_Init+0x30c>
    1ebc:	88 ce       	rjmp	.-752    	; 0x1bce <Port_Init+0x1c>

         default:
          	break;
	}
	}
}
    1ebe:	26 96       	adiw	r28, 0x06	; 6
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <GI_voidEnable>:
#include "../../utils/BIT_MATH.h" // Include bit manipulation macros
#include "../../utils/STD_TYPES.h"  // Include standard data types

// Function to enable global interrupts
void GI_voidEnable(void)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, GLE); // Set the Global Interrupt Enable (GIE) bit in the Status Register (SREG)
    1ed8:	af e5       	ldi	r26, 0x5F	; 95
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	ef e5       	ldi	r30, 0x5F	; 95
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	80 68       	ori	r24, 0x80	; 128
    1ee4:	8c 93       	st	X, r24
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <GI_voidDisable>:

// Function to disable global interrupts
void GI_voidDisable(void)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, GLE); // Clear the Global Interrupt Enable (GIE) bit in the Status Register (SREG)
    1ef4:	af e5       	ldi	r26, 0x5F	; 95
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	ef e5       	ldi	r30, 0x5F	; 95
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 77       	andi	r24, 0x7F	; 127
    1f00:	8c 93       	st	X, r24
}
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	28 97       	sbiw	r28, 0x08	; 8
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	38 87       	std	Y+8, r19	; 0x08
    1f28:	2f 83       	std	Y+7, r18	; 0x07
    1f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2c:	98 85       	ldd	r25, Y+8	; 0x08
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	91 05       	cpc	r25, r1
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <EXTI_voidInit+0x2e>
    1f34:	5a c0       	rjmp	.+180    	; 0x1fea <EXTI_voidInit+0xe2>
    1f36:	2f 81       	ldd	r18, Y+7	; 0x07
    1f38:	38 85       	ldd	r19, Y+8	; 0x08
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <EXTI_voidInit+0x3a>
    1f40:	a3 c0       	rjmp	.+326    	; 0x2088 <EXTI_voidInit+0x180>
    1f42:	8f 81       	ldd	r24, Y+7	; 0x07
    1f44:	98 85       	ldd	r25, Y+8	; 0x08
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <EXTI_voidInit+0x44>
    1f4a:	b3 c0       	rjmp	.+358    	; 0x20b2 <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	3e 83       	std	Y+6, r19	; 0x06
    1f54:	2d 83       	std	Y+5, r18	; 0x05
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	39 f1       	breq	.+78     	; 0x1fae <EXTI_voidInit+0xa6>
    1f60:	2d 81       	ldd	r18, Y+5	; 0x05
    1f62:	3e 81       	ldd	r19, Y+6	; 0x06
    1f64:	22 30       	cpi	r18, 0x02	; 2
    1f66:	31 05       	cpc	r19, r1
    1f68:	99 f0       	breq	.+38     	; 0x1f90 <EXTI_voidInit+0x88>
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f1       	breq	.+90     	; 0x1fcc <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    1f72:	a5 e5       	ldi	r26, 0x55	; 85
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e5 e5       	ldi	r30, 0x55	; 85
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	81 60       	ori	r24, 0x01	; 1
    1f7e:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1f80:	a5 e5       	ldi	r26, 0x55	; 85
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e5 e5       	ldi	r30, 0x55	; 85
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	82 60       	ori	r24, 0x02	; 2
    1f8c:	8c 93       	st	X, r24
    1f8e:	91 c0       	rjmp	.+290    	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    1f90:	a5 e5       	ldi	r26, 0x55	; 85
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e5 e5       	ldi	r30, 0x55	; 85
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	8e 7f       	andi	r24, 0xFE	; 254
    1f9c:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1f9e:	a5 e5       	ldi	r26, 0x55	; 85
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e5 e5       	ldi	r30, 0x55	; 85
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	82 60       	ori	r24, 0x02	; 2
    1faa:	8c 93       	st	X, r24
    1fac:	82 c0       	rjmp	.+260    	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    1fae:	a5 e5       	ldi	r26, 0x55	; 85
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e5       	ldi	r30, 0x55	; 85
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	81 60       	ori	r24, 0x01	; 1
    1fba:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    1fbc:	a5 e5       	ldi	r26, 0x55	; 85
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e5 e5       	ldi	r30, 0x55	; 85
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8d 7f       	andi	r24, 0xFD	; 253
    1fc8:	8c 93       	st	X, r24
    1fca:	73 c0       	rjmp	.+230    	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    1fcc:	a5 e5       	ldi	r26, 0x55	; 85
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e5       	ldi	r30, 0x55	; 85
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8e 7f       	andi	r24, 0xFE	; 254
    1fd8:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    1fda:	a5 e5       	ldi	r26, 0x55	; 85
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e5 e5       	ldi	r30, 0x55	; 85
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8d 7f       	andi	r24, 0xFD	; 253
    1fe6:	8c 93       	st	X, r24
    1fe8:	64 c0       	rjmp	.+200    	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	3c 83       	std	Y+4, r19	; 0x04
    1ff2:	2b 83       	std	Y+3, r18	; 0x03
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	39 f1       	breq	.+78     	; 0x204c <EXTI_voidInit+0x144>
    1ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    2000:	3c 81       	ldd	r19, Y+4	; 0x04
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	99 f0       	breq	.+38     	; 0x202e <EXTI_voidInit+0x126>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	69 f1       	breq	.+90     	; 0x206a <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    2010:	a5 e5       	ldi	r26, 0x55	; 85
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e5 e5       	ldi	r30, 0x55	; 85
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	84 60       	ori	r24, 0x04	; 4
    201c:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    201e:	a5 e5       	ldi	r26, 0x55	; 85
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e5 e5       	ldi	r30, 0x55	; 85
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	88 60       	ori	r24, 0x08	; 8
    202a:	8c 93       	st	X, r24
    202c:	42 c0       	rjmp	.+132    	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    202e:	a5 e5       	ldi	r26, 0x55	; 85
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e5 e5       	ldi	r30, 0x55	; 85
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8b 7f       	andi	r24, 0xFB	; 251
    203a:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    203c:	a5 e5       	ldi	r26, 0x55	; 85
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e5 e5       	ldi	r30, 0x55	; 85
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	88 60       	ori	r24, 0x08	; 8
    2048:	8c 93       	st	X, r24
    204a:	33 c0       	rjmp	.+102    	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    204c:	a5 e5       	ldi	r26, 0x55	; 85
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e5 e5       	ldi	r30, 0x55	; 85
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	84 60       	ori	r24, 0x04	; 4
    2058:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    205a:	a5 e5       	ldi	r26, 0x55	; 85
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e5 e5       	ldi	r30, 0x55	; 85
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	87 7f       	andi	r24, 0xF7	; 247
    2066:	8c 93       	st	X, r24
    2068:	24 c0       	rjmp	.+72     	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    206a:	a5 e5       	ldi	r26, 0x55	; 85
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e5 e5       	ldi	r30, 0x55	; 85
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8b 7f       	andi	r24, 0xFB	; 251
    2076:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    2078:	a5 e5       	ldi	r26, 0x55	; 85
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e5 e5       	ldi	r30, 0x55	; 85
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	87 7f       	andi	r24, 0xF7	; 247
    2084:	8c 93       	st	X, r24
    2086:	15 c0       	rjmp	.+42     	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	91 05       	cpc	r25, r1
    2092:	41 f0       	breq	.+16     	; 0x20a4 <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    2094:	a4 e5       	ldi	r26, 0x54	; 84
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e4 e5       	ldi	r30, 0x54	; 84
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	80 64       	ori	r24, 0x40	; 64
    20a0:	8c 93       	st	X, r24
    20a2:	07 c0       	rjmp	.+14     	; 0x20b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    20a4:	a4 e5       	ldi	r26, 0x54	; 84
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e4 e5       	ldi	r30, 0x54	; 84
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8f 7b       	andi	r24, 0xBF	; 191
    20b0:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    20b2:	28 96       	adiw	r28, 0x08	; 8
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <EXTI_voidEnable+0x6>
    20ca:	0f 92       	push	r0
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	3b 83       	std	Y+3, r19	; 0x03
    20da:	2a 83       	std	Y+2, r18	; 0x02
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	91 05       	cpc	r25, r1
    20e4:	89 f0       	breq	.+34     	; 0x2108 <EXTI_voidEnable+0x44>
    20e6:	2a 81       	ldd	r18, Y+2	; 0x02
    20e8:	3b 81       	ldd	r19, Y+3	; 0x03
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	a1 f0       	breq	.+40     	; 0x2118 <EXTI_voidEnable+0x54>
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	9b 81       	ldd	r25, Y+3	; 0x03
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	b9 f4       	brne	.+46     	; 0x2126 <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    20f8:	ab e5       	ldi	r26, 0x5B	; 91
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	eb e5       	ldi	r30, 0x5B	; 91
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	80 64       	ori	r24, 0x40	; 64
    2104:	8c 93       	st	X, r24
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    2108:	ab e5       	ldi	r26, 0x5B	; 91
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	eb e5       	ldi	r30, 0x5B	; 91
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 68       	ori	r24, 0x80	; 128
    2114:	8c 93       	st	X, r24
    2116:	07 c0       	rjmp	.+14     	; 0x2126 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    2118:	ab e5       	ldi	r26, 0x5B	; 91
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	eb e5       	ldi	r30, 0x5B	; 91
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	80 62       	ori	r24, 0x20	; 32
    2124:	8c 93       	st	X, r24
        break;
    }
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <EXTI_voidDisable+0x6>
    2138:	0f 92       	push	r0
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	3b 83       	std	Y+3, r19	; 0x03
    2148:	2a 83       	std	Y+2, r18	; 0x02
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	91 05       	cpc	r25, r1
    2152:	89 f0       	breq	.+34     	; 0x2176 <EXTI_voidDisable+0x44>
    2154:	2a 81       	ldd	r18, Y+2	; 0x02
    2156:	3b 81       	ldd	r19, Y+3	; 0x03
    2158:	22 30       	cpi	r18, 0x02	; 2
    215a:	31 05       	cpc	r19, r1
    215c:	a1 f0       	breq	.+40     	; 0x2186 <EXTI_voidDisable+0x54>
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	b9 f4       	brne	.+46     	; 0x2194 <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    2166:	ab e5       	ldi	r26, 0x5B	; 91
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	eb e5       	ldi	r30, 0x5B	; 91
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	8f 7b       	andi	r24, 0xBF	; 191
    2172:	8c 93       	st	X, r24
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    2176:	ab e5       	ldi	r26, 0x5B	; 91
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	eb e5       	ldi	r30, 0x5B	; 91
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	8f 77       	andi	r24, 0x7F	; 127
    2182:	8c 93       	st	X, r24
    2184:	07 c0       	rjmp	.+14     	; 0x2194 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    2186:	ab e5       	ldi	r26, 0x5B	; 91
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	eb e5       	ldi	r30, 0x5B	; 91
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	8f 7d       	andi	r24, 0xDF	; 223
    2192:	8c 93       	st	X, r24
        break;
    }
}
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <EXTRI_voidSetCallBackINT+0x6>
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <EXTRI_voidSetCallBackINT+0x8>
    21a8:	0f 92       	push	r0
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	7b 83       	std	Y+3, r23	; 0x03
    21b2:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	39 f1       	breq	.+78     	; 0x220a <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3d 83       	std	Y+5, r19	; 0x05
    21c4:	2c 83       	std	Y+4, r18	; 0x04
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	81 f0       	breq	.+32     	; 0x21f0 <EXTRI_voidSetCallBackINT+0x50>
    21d0:	2c 81       	ldd	r18, Y+4	; 0x04
    21d2:	3d 81       	ldd	r19, Y+5	; 0x05
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	91 f0       	breq	.+36     	; 0x21fe <EXTRI_voidSetCallBackINT+0x5e>
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	9d 81       	ldd	r25, Y+5	; 0x05
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	a1 f4       	brne	.+40     	; 0x220a <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	9b 81       	ldd	r25, Y+3	; 0x03
    21e6:	90 93 0f 02 	sts	0x020F, r25
    21ea:	80 93 0e 02 	sts	0x020E, r24
    21ee:	0d c0       	rjmp	.+26     	; 0x220a <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	90 93 11 02 	sts	0x0211, r25
    21f8:	80 93 10 02 	sts	0x0210, r24
    21fc:	06 c0       	rjmp	.+12     	; 0x220a <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	9b 81       	ldd	r25, Y+3	; 0x03
    2202:	90 93 13 02 	sts	0x0213, r25
    2206:	80 93 12 02 	sts	0x0212, r24
            break;
        default:
            break;
        }
    }
}
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    221a:	1f 92       	push	r1
    221c:	0f 92       	push	r0
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	0f 92       	push	r0
    2222:	11 24       	eor	r1, r1
    2224:	2f 93       	push	r18
    2226:	3f 93       	push	r19
    2228:	4f 93       	push	r20
    222a:	5f 93       	push	r21
    222c:	6f 93       	push	r22
    222e:	7f 93       	push	r23
    2230:	8f 93       	push	r24
    2232:	9f 93       	push	r25
    2234:	af 93       	push	r26
    2236:	bf 93       	push	r27
    2238:	ef 93       	push	r30
    223a:	ff 93       	push	r31
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    2244:	80 91 0e 02 	lds	r24, 0x020E
    2248:	90 91 0f 02 	lds	r25, 0x020F
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	29 f0       	breq	.+10     	; 0x225a <__vector_1+0x40>
        private_pCallBackINT0();
    2250:	e0 91 0e 02 	lds	r30, 0x020E
    2254:	f0 91 0f 02 	lds	r31, 0x020F
    2258:	09 95       	icall
    }
}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	ff 91       	pop	r31
    2260:	ef 91       	pop	r30
    2262:	bf 91       	pop	r27
    2264:	af 91       	pop	r26
    2266:	9f 91       	pop	r25
    2268:	8f 91       	pop	r24
    226a:	7f 91       	pop	r23
    226c:	6f 91       	pop	r22
    226e:	5f 91       	pop	r21
    2270:	4f 91       	pop	r20
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	0f 90       	pop	r0
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	0f 90       	pop	r0
    227c:	1f 90       	pop	r1
    227e:	18 95       	reti

00002280 <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    2280:	1f 92       	push	r1
    2282:	0f 92       	push	r0
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	0f 92       	push	r0
    2288:	11 24       	eor	r1, r1
    228a:	2f 93       	push	r18
    228c:	3f 93       	push	r19
    228e:	4f 93       	push	r20
    2290:	5f 93       	push	r21
    2292:	6f 93       	push	r22
    2294:	7f 93       	push	r23
    2296:	8f 93       	push	r24
    2298:	9f 93       	push	r25
    229a:	af 93       	push	r26
    229c:	bf 93       	push	r27
    229e:	ef 93       	push	r30
    22a0:	ff 93       	push	r31
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    22aa:	80 91 10 02 	lds	r24, 0x0210
    22ae:	90 91 11 02 	lds	r25, 0x0211
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <__vector_2+0x40>
        private_pCallBackINT1();
    22b6:	e0 91 10 02 	lds	r30, 0x0210
    22ba:	f0 91 11 02 	lds	r31, 0x0211
    22be:	09 95       	icall
    }
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	ff 91       	pop	r31
    22c6:	ef 91       	pop	r30
    22c8:	bf 91       	pop	r27
    22ca:	af 91       	pop	r26
    22cc:	9f 91       	pop	r25
    22ce:	8f 91       	pop	r24
    22d0:	7f 91       	pop	r23
    22d2:	6f 91       	pop	r22
    22d4:	5f 91       	pop	r21
    22d6:	4f 91       	pop	r20
    22d8:	3f 91       	pop	r19
    22da:	2f 91       	pop	r18
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	0f 90       	pop	r0
    22e2:	1f 90       	pop	r1
    22e4:	18 95       	reti

000022e6 <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    22e6:	1f 92       	push	r1
    22e8:	0f 92       	push	r0
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	0f 92       	push	r0
    22ee:	11 24       	eor	r1, r1
    22f0:	2f 93       	push	r18
    22f2:	3f 93       	push	r19
    22f4:	4f 93       	push	r20
    22f6:	5f 93       	push	r21
    22f8:	6f 93       	push	r22
    22fa:	7f 93       	push	r23
    22fc:	8f 93       	push	r24
    22fe:	9f 93       	push	r25
    2300:	af 93       	push	r26
    2302:	bf 93       	push	r27
    2304:	ef 93       	push	r30
    2306:	ff 93       	push	r31
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    2310:	80 91 12 02 	lds	r24, 0x0212
    2314:	90 91 13 02 	lds	r25, 0x0213
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	29 f0       	breq	.+10     	; 0x2326 <__vector_3+0x40>
        private_pCallBackINT2();
    231c:	e0 91 12 02 	lds	r30, 0x0212
    2320:	f0 91 13 02 	lds	r31, 0x0213
    2324:	09 95       	icall
    }
}
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	ff 91       	pop	r31
    232c:	ef 91       	pop	r30
    232e:	bf 91       	pop	r27
    2330:	af 91       	pop	r26
    2332:	9f 91       	pop	r25
    2334:	8f 91       	pop	r24
    2336:	7f 91       	pop	r23
    2338:	6f 91       	pop	r22
    233a:	5f 91       	pop	r21
    233c:	4f 91       	pop	r20
    233e:	3f 91       	pop	r19
    2340:	2f 91       	pop	r18
    2342:	0f 90       	pop	r0
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	0f 90       	pop	r0
    2348:	1f 90       	pop	r1
    234a:	18 95       	reti

0000234c <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <Dio_WriteChannel+0x6>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <Dio_WriteChannel+0x8>
    2354:	0f 92       	push	r0
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	8a 83       	std	Y+2, r24	; 0x02
    235c:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	86 95       	lsr	r24
    2362:	86 95       	lsr	r24
    2364:	86 95       	lsr	r24
    2366:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	3d 83       	std	Y+5, r19	; 0x05
    2370:	2c 83       	std	Y+4, r18	; 0x04
    2372:	8c 81       	ldd	r24, Y+4	; 0x04
    2374:	9d 81       	ldd	r25, Y+5	; 0x05
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	91 05       	cpc	r25, r1
    237a:	09 f4       	brne	.+2      	; 0x237e <Dio_WriteChannel+0x32>
    237c:	43 c0       	rjmp	.+134    	; 0x2404 <Dio_WriteChannel+0xb8>
    237e:	2c 81       	ldd	r18, Y+4	; 0x04
    2380:	3d 81       	ldd	r19, Y+5	; 0x05
    2382:	22 30       	cpi	r18, 0x02	; 2
    2384:	31 05       	cpc	r19, r1
    2386:	2c f4       	brge	.+10     	; 0x2392 <Dio_WriteChannel+0x46>
    2388:	8c 81       	ldd	r24, Y+4	; 0x04
    238a:	9d 81       	ldd	r25, Y+5	; 0x05
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	71 f0       	breq	.+28     	; 0x23ac <Dio_WriteChannel+0x60>
    2390:	ce c0       	rjmp	.+412    	; 0x252e <Dio_WriteChannel+0x1e2>
    2392:	2c 81       	ldd	r18, Y+4	; 0x04
    2394:	3d 81       	ldd	r19, Y+5	; 0x05
    2396:	22 30       	cpi	r18, 0x02	; 2
    2398:	31 05       	cpc	r19, r1
    239a:	09 f4       	brne	.+2      	; 0x239e <Dio_WriteChannel+0x52>
    239c:	65 c0       	rjmp	.+202    	; 0x2468 <Dio_WriteChannel+0x11c>
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	9d 81       	ldd	r25, Y+5	; 0x05
    23a2:	83 30       	cpi	r24, 0x03	; 3
    23a4:	91 05       	cpc	r25, r1
    23a6:	09 f4       	brne	.+2      	; 0x23aa <Dio_WriteChannel+0x5e>
    23a8:	91 c0       	rjmp	.+290    	; 0x24cc <Dio_WriteChannel+0x180>
    23aa:	c1 c0       	rjmp	.+386    	; 0x252e <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	a1 f4       	brne	.+40     	; 0x23da <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    23b2:	ab e3       	ldi	r26, 0x3B	; 59
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	eb e3       	ldi	r30, 0x3B	; 59
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	48 2f       	mov	r20, r24
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	02 2e       	mov	r0, r18
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <Dio_WriteChannel+0x84>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	0a 94       	dec	r0
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <Dio_WriteChannel+0x80>
    23d4:	84 2b       	or	r24, r20
    23d6:	8c 93       	st	X, r24
    23d8:	aa c0       	rjmp	.+340    	; 0x252e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    23da:	ab e3       	ldi	r26, 0x3B	; 59
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	eb e3       	ldi	r30, 0x3B	; 59
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	48 2f       	mov	r20, r24
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	02 2e       	mov	r0, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <Dio_WriteChannel+0xac>
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <Dio_WriteChannel+0xa8>
    23fc:	80 95       	com	r24
    23fe:	84 23       	and	r24, r20
    2400:	8c 93       	st	X, r24
    2402:	95 c0       	rjmp	.+298    	; 0x252e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	b9 f4       	brne	.+46     	; 0x2438 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    240a:	a8 e3       	ldi	r26, 0x38	; 56
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 e3       	ldi	r30, 0x38	; 56
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	48 2f       	mov	r20, r24
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9c 01       	movw	r18, r24
    241e:	27 70       	andi	r18, 0x07	; 7
    2420:	30 70       	andi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 2e       	mov	r0, r18
    2428:	02 c0       	rjmp	.+4      	; 0x242e <Dio_WriteChannel+0xe2>
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <Dio_WriteChannel+0xde>
    2432:	84 2b       	or	r24, r20
    2434:	8c 93       	st	X, r24
    2436:	7b c0       	rjmp	.+246    	; 0x252e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    2438:	a8 e3       	ldi	r26, 0x38	; 56
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e8 e3       	ldi	r30, 0x38	; 56
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	48 2f       	mov	r20, r24
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9c 01       	movw	r18, r24
    244c:	27 70       	andi	r18, 0x07	; 7
    244e:	30 70       	andi	r19, 0x00	; 0
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	02 2e       	mov	r0, r18
    2456:	02 c0       	rjmp	.+4      	; 0x245c <Dio_WriteChannel+0x110>
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	0a 94       	dec	r0
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <Dio_WriteChannel+0x10c>
    2460:	80 95       	com	r24
    2462:	84 23       	and	r24, r20
    2464:	8c 93       	st	X, r24
    2466:	63 c0       	rjmp	.+198    	; 0x252e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	b9 f4       	brne	.+46     	; 0x249c <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    246e:	a5 e3       	ldi	r26, 0x35	; 53
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e5 e3       	ldi	r30, 0x35	; 53
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	48 2f       	mov	r20, r24
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9c 01       	movw	r18, r24
    2482:	27 70       	andi	r18, 0x07	; 7
    2484:	30 70       	andi	r19, 0x00	; 0
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	02 2e       	mov	r0, r18
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <Dio_WriteChannel+0x146>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	0a 94       	dec	r0
    2494:	e2 f7       	brpl	.-8      	; 0x248e <Dio_WriteChannel+0x142>
    2496:	84 2b       	or	r24, r20
    2498:	8c 93       	st	X, r24
    249a:	49 c0       	rjmp	.+146    	; 0x252e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    249c:	a5 e3       	ldi	r26, 0x35	; 53
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e5 e3       	ldi	r30, 0x35	; 53
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	48 2f       	mov	r20, r24
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9c 01       	movw	r18, r24
    24b0:	27 70       	andi	r18, 0x07	; 7
    24b2:	30 70       	andi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 2e       	mov	r0, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <Dio_WriteChannel+0x174>
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <Dio_WriteChannel+0x170>
    24c4:	80 95       	com	r24
    24c6:	84 23       	and	r24, r20
    24c8:	8c 93       	st	X, r24
    24ca:	31 c0       	rjmp	.+98     	; 0x252e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	b9 f4       	brne	.+46     	; 0x2500 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    24d2:	a2 e3       	ldi	r26, 0x32	; 50
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e2 e3       	ldi	r30, 0x32	; 50
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	48 2f       	mov	r20, r24
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9c 01       	movw	r18, r24
    24e6:	27 70       	andi	r18, 0x07	; 7
    24e8:	30 70       	andi	r19, 0x00	; 0
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	02 2e       	mov	r0, r18
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <Dio_WriteChannel+0x1aa>
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0a 94       	dec	r0
    24f8:	e2 f7       	brpl	.-8      	; 0x24f2 <Dio_WriteChannel+0x1a6>
    24fa:	84 2b       	or	r24, r20
    24fc:	8c 93       	st	X, r24
    24fe:	17 c0       	rjmp	.+46     	; 0x252e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    2500:	a2 e3       	ldi	r26, 0x32	; 50
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e2 e3       	ldi	r30, 0x32	; 50
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	48 2f       	mov	r20, r24
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9c 01       	movw	r18, r24
    2514:	27 70       	andi	r18, 0x07	; 7
    2516:	30 70       	andi	r19, 0x00	; 0
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	02 2e       	mov	r0, r18
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <Dio_WriteChannel+0x1d8>
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	0a 94       	dec	r0
    2526:	e2 f7       	brpl	.-8      	; 0x2520 <Dio_WriteChannel+0x1d4>
    2528:	80 95       	com	r24
    252a:	84 23       	and	r24, r20
    252c:	8c 93       	st	X, r24
		}
		break;
	}
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <Dio_ReadChannel+0x6>
    2544:	00 d0       	rcall	.+0      	; 0x2546 <Dio_ReadChannel+0x8>
    2546:	0f 92       	push	r0
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	86 95       	lsr	r24
    2552:	86 95       	lsr	r24
    2554:	86 95       	lsr	r24
    2556:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	3d 83       	std	Y+5, r19	; 0x05
    2560:	2c 83       	std	Y+4, r18	; 0x04
    2562:	4c 81       	ldd	r20, Y+4	; 0x04
    2564:	5d 81       	ldd	r21, Y+5	; 0x05
    2566:	41 30       	cpi	r20, 0x01	; 1
    2568:	51 05       	cpc	r21, r1
    256a:	49 f1       	breq	.+82     	; 0x25be <Dio_ReadChannel+0x80>
    256c:	8c 81       	ldd	r24, Y+4	; 0x04
    256e:	9d 81       	ldd	r25, Y+5	; 0x05
    2570:	82 30       	cpi	r24, 0x02	; 2
    2572:	91 05       	cpc	r25, r1
    2574:	34 f4       	brge	.+12     	; 0x2582 <Dio_ReadChannel+0x44>
    2576:	2c 81       	ldd	r18, Y+4	; 0x04
    2578:	3d 81       	ldd	r19, Y+5	; 0x05
    257a:	21 15       	cp	r18, r1
    257c:	31 05       	cpc	r19, r1
    257e:	69 f0       	breq	.+26     	; 0x259a <Dio_ReadChannel+0x5c>
    2580:	59 c0       	rjmp	.+178    	; 0x2634 <Dio_ReadChannel+0xf6>
    2582:	4c 81       	ldd	r20, Y+4	; 0x04
    2584:	5d 81       	ldd	r21, Y+5	; 0x05
    2586:	42 30       	cpi	r20, 0x02	; 2
    2588:	51 05       	cpc	r21, r1
    258a:	69 f1       	breq	.+90     	; 0x25e6 <Dio_ReadChannel+0xa8>
    258c:	8c 81       	ldd	r24, Y+4	; 0x04
    258e:	9d 81       	ldd	r25, Y+5	; 0x05
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	91 05       	cpc	r25, r1
    2594:	09 f4       	brne	.+2      	; 0x2598 <Dio_ReadChannel+0x5a>
    2596:	3b c0       	rjmp	.+118    	; 0x260e <Dio_ReadChannel+0xd0>
    2598:	4d c0       	rjmp	.+154    	; 0x2634 <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    259a:	e9 e3       	ldi	r30, 0x39	; 57
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	a9 01       	movw	r20, r18
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <Dio_ReadChannel+0x74>
    25ae:	55 95       	asr	r21
    25b0:	47 95       	ror	r20
    25b2:	8a 95       	dec	r24
    25b4:	e2 f7       	brpl	.-8      	; 0x25ae <Dio_ReadChannel+0x70>
    25b6:	ca 01       	movw	r24, r20
    25b8:	81 70       	andi	r24, 0x01	; 1
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	3b c0       	rjmp	.+118    	; 0x2634 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    25be:	e6 e3       	ldi	r30, 0x36	; 54
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	87 70       	andi	r24, 0x07	; 7
    25d0:	90 70       	andi	r25, 0x00	; 0
    25d2:	a9 01       	movw	r20, r18
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <Dio_ReadChannel+0x9c>
    25d6:	55 95       	asr	r21
    25d8:	47 95       	ror	r20
    25da:	8a 95       	dec	r24
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <Dio_ReadChannel+0x98>
    25de:	ca 01       	movw	r24, r20
    25e0:	81 70       	andi	r24, 0x01	; 1
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	27 c0       	rjmp	.+78     	; 0x2634 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    25e6:	e3 e3       	ldi	r30, 0x33	; 51
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	88 2f       	mov	r24, r24
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	87 70       	andi	r24, 0x07	; 7
    25f8:	90 70       	andi	r25, 0x00	; 0
    25fa:	a9 01       	movw	r20, r18
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <Dio_ReadChannel+0xc4>
    25fe:	55 95       	asr	r21
    2600:	47 95       	ror	r20
    2602:	8a 95       	dec	r24
    2604:	e2 f7       	brpl	.-8      	; 0x25fe <Dio_ReadChannel+0xc0>
    2606:	ca 01       	movw	r24, r20
    2608:	81 70       	andi	r24, 0x01	; 1
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	13 c0       	rjmp	.+38     	; 0x2634 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    260e:	e0 e3       	ldi	r30, 0x30	; 48
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	87 70       	andi	r24, 0x07	; 7
    2620:	90 70       	andi	r25, 0x00	; 0
    2622:	a9 01       	movw	r20, r18
    2624:	02 c0       	rjmp	.+4      	; 0x262a <Dio_ReadChannel+0xec>
    2626:	55 95       	asr	r21
    2628:	47 95       	ror	r20
    262a:	8a 95       	dec	r24
    262c:	e2 f7       	brpl	.-8      	; 0x2626 <Dio_ReadChannel+0xe8>
    262e:	ca 01       	movw	r24, r20
    2630:	81 70       	andi	r24, 0x01	; 1
    2632:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <Dio_FlipChannel+0x6>
    264c:	00 d0       	rcall	.+0      	; 0x264e <Dio_FlipChannel+0x8>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	86 95       	lsr	r24
    2658:	86 95       	lsr	r24
    265a:	86 95       	lsr	r24
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	3c 83       	std	Y+4, r19	; 0x04
    2662:	2b 83       	std	Y+3, r18	; 0x03
    2664:	4b 81       	ldd	r20, Y+3	; 0x03
    2666:	5c 81       	ldd	r21, Y+4	; 0x04
    2668:	41 30       	cpi	r20, 0x01	; 1
    266a:	51 05       	cpc	r21, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <Dio_FlipChannel+0x2a>
    266e:	3c c0       	rjmp	.+120    	; 0x26e8 <Dio_FlipChannel+0xa2>
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	82 30       	cpi	r24, 0x02	; 2
    2676:	91 05       	cpc	r25, r1
    2678:	34 f4       	brge	.+12     	; 0x2686 <Dio_FlipChannel+0x40>
    267a:	2b 81       	ldd	r18, Y+3	; 0x03
    267c:	3c 81       	ldd	r19, Y+4	; 0x04
    267e:	21 15       	cp	r18, r1
    2680:	31 05       	cpc	r19, r1
    2682:	71 f0       	breq	.+28     	; 0x26a0 <Dio_FlipChannel+0x5a>
    2684:	ab c0       	rjmp	.+342    	; 0x27dc <Dio_FlipChannel+0x196>
    2686:	4b 81       	ldd	r20, Y+3	; 0x03
    2688:	5c 81       	ldd	r21, Y+4	; 0x04
    268a:	42 30       	cpi	r20, 0x02	; 2
    268c:	51 05       	cpc	r21, r1
    268e:	09 f4       	brne	.+2      	; 0x2692 <Dio_FlipChannel+0x4c>
    2690:	54 c0       	rjmp	.+168    	; 0x273a <Dio_FlipChannel+0xf4>
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	83 30       	cpi	r24, 0x03	; 3
    2698:	91 05       	cpc	r25, r1
    269a:	09 f4       	brne	.+2      	; 0x269e <Dio_FlipChannel+0x58>
    269c:	77 c0       	rjmp	.+238    	; 0x278c <Dio_FlipChannel+0x146>
    269e:	9e c0       	rjmp	.+316    	; 0x27dc <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    26a0:	ab e3       	ldi	r26, 0x3B	; 59
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	eb e3       	ldi	r30, 0x3B	; 59
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	48 2f       	mov	r20, r24
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <Dio_FlipChannel+0x76>
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	2a 95       	dec	r18
    26be:	e2 f7       	brpl	.-8      	; 0x26b8 <Dio_FlipChannel+0x72>
    26c0:	84 27       	eor	r24, r20
    26c2:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    26c4:	eb e3       	ldi	r30, 0x3B	; 59
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a9 01       	movw	r20, r18
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <Dio_FlipChannel+0x96>
    26d8:	55 95       	asr	r21
    26da:	47 95       	ror	r20
    26dc:	8a 95       	dec	r24
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <Dio_FlipChannel+0x92>
    26e0:	ca 01       	movw	r24, r20
    26e2:	81 70       	andi	r24, 0x01	; 1
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	7a c0       	rjmp	.+244    	; 0x27dc <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    26e8:	a8 e3       	ldi	r26, 0x38	; 56
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e8 e3       	ldi	r30, 0x38	; 56
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	48 2f       	mov	r20, r24
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	88 2f       	mov	r24, r24
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9c 01       	movw	r18, r24
    26fc:	27 70       	andi	r18, 0x07	; 7
    26fe:	30 70       	andi	r19, 0x00	; 0
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	02 c0       	rjmp	.+4      	; 0x270a <Dio_FlipChannel+0xc4>
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	2a 95       	dec	r18
    270c:	e2 f7       	brpl	.-8      	; 0x2706 <Dio_FlipChannel+0xc0>
    270e:	84 27       	eor	r24, r20
    2710:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    2712:	e8 e3       	ldi	r30, 0x38	; 56
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	87 70       	andi	r24, 0x07	; 7
    2724:	90 70       	andi	r25, 0x00	; 0
    2726:	a9 01       	movw	r20, r18
    2728:	02 c0       	rjmp	.+4      	; 0x272e <Dio_FlipChannel+0xe8>
    272a:	55 95       	asr	r21
    272c:	47 95       	ror	r20
    272e:	8a 95       	dec	r24
    2730:	e2 f7       	brpl	.-8      	; 0x272a <Dio_FlipChannel+0xe4>
    2732:	ca 01       	movw	r24, r20
    2734:	81 70       	andi	r24, 0x01	; 1
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	51 c0       	rjmp	.+162    	; 0x27dc <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    273a:	a5 e3       	ldi	r26, 0x35	; 53
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e5 e3       	ldi	r30, 0x35	; 53
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	48 2f       	mov	r20, r24
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	88 2f       	mov	r24, r24
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9c 01       	movw	r18, r24
    274e:	27 70       	andi	r18, 0x07	; 7
    2750:	30 70       	andi	r19, 0x00	; 0
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	02 c0       	rjmp	.+4      	; 0x275c <Dio_FlipChannel+0x116>
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	2a 95       	dec	r18
    275e:	e2 f7       	brpl	.-8      	; 0x2758 <Dio_FlipChannel+0x112>
    2760:	84 27       	eor	r24, r20
    2762:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    2764:	e5 e3       	ldi	r30, 0x35	; 53
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	88 2f       	mov	r24, r24
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	87 70       	andi	r24, 0x07	; 7
    2776:	90 70       	andi	r25, 0x00	; 0
    2778:	a9 01       	movw	r20, r18
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <Dio_FlipChannel+0x13a>
    277c:	55 95       	asr	r21
    277e:	47 95       	ror	r20
    2780:	8a 95       	dec	r24
    2782:	e2 f7       	brpl	.-8      	; 0x277c <Dio_FlipChannel+0x136>
    2784:	ca 01       	movw	r24, r20
    2786:	81 70       	andi	r24, 0x01	; 1
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	28 c0       	rjmp	.+80     	; 0x27dc <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    278c:	a2 e3       	ldi	r26, 0x32	; 50
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e2 e3       	ldi	r30, 0x32	; 50
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	48 2f       	mov	r20, r24
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9c 01       	movw	r18, r24
    27a0:	27 70       	andi	r18, 0x07	; 7
    27a2:	30 70       	andi	r19, 0x00	; 0
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <Dio_FlipChannel+0x168>
    27aa:	88 0f       	add	r24, r24
    27ac:	99 1f       	adc	r25, r25
    27ae:	2a 95       	dec	r18
    27b0:	e2 f7       	brpl	.-8      	; 0x27aa <Dio_FlipChannel+0x164>
    27b2:	84 27       	eor	r24, r20
    27b4:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    27b6:	e2 e3       	ldi	r30, 0x32	; 50
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	87 70       	andi	r24, 0x07	; 7
    27c8:	90 70       	andi	r25, 0x00	; 0
    27ca:	a9 01       	movw	r20, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <Dio_FlipChannel+0x18c>
    27ce:	55 95       	asr	r21
    27d0:	47 95       	ror	r20
    27d2:	8a 95       	dec	r24
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <Dio_FlipChannel+0x188>
    27d6:	ca 01       	movw	r24, r20
    27d8:	81 70       	andi	r24, 0x01	; 1
    27da:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <Dio_WritePort+0x6>
    27f2:	00 d0       	rcall	.+0      	; 0x27f4 <Dio_WritePort+0x8>
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	3c 83       	std	Y+4, r19	; 0x04
    2804:	2b 83       	std	Y+3, r18	; 0x03
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	81 30       	cpi	r24, 0x01	; 1
    280c:	91 05       	cpc	r25, r1
    280e:	d1 f0       	breq	.+52     	; 0x2844 <Dio_WritePort+0x58>
    2810:	2b 81       	ldd	r18, Y+3	; 0x03
    2812:	3c 81       	ldd	r19, Y+4	; 0x04
    2814:	22 30       	cpi	r18, 0x02	; 2
    2816:	31 05       	cpc	r19, r1
    2818:	2c f4       	brge	.+10     	; 0x2824 <Dio_WritePort+0x38>
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	9c 81       	ldd	r25, Y+4	; 0x04
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	61 f0       	breq	.+24     	; 0x283a <Dio_WritePort+0x4e>
    2822:	1e c0       	rjmp	.+60     	; 0x2860 <Dio_WritePort+0x74>
    2824:	2b 81       	ldd	r18, Y+3	; 0x03
    2826:	3c 81       	ldd	r19, Y+4	; 0x04
    2828:	22 30       	cpi	r18, 0x02	; 2
    282a:	31 05       	cpc	r19, r1
    282c:	81 f0       	breq	.+32     	; 0x284e <Dio_WritePort+0x62>
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	9c 81       	ldd	r25, Y+4	; 0x04
    2832:	83 30       	cpi	r24, 0x03	; 3
    2834:	91 05       	cpc	r25, r1
    2836:	81 f0       	breq	.+32     	; 0x2858 <Dio_WritePort+0x6c>
    2838:	13 c0       	rjmp	.+38     	; 0x2860 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    283a:	eb e3       	ldi	r30, 0x3B	; 59
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	80 83       	st	Z, r24
    2842:	0e c0       	rjmp	.+28     	; 0x2860 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    2844:	e8 e3       	ldi	r30, 0x38	; 56
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	80 83       	st	Z, r24
    284c:	09 c0       	rjmp	.+18     	; 0x2860 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    284e:	e5 e3       	ldi	r30, 0x35	; 53
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	80 83       	st	Z, r24
    2856:	04 c0       	rjmp	.+8      	; 0x2860 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    2858:	e2 e3       	ldi	r30, 0x32	; 50
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	80 83       	st	Z, r24
		break;
	}
}
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <SevenSeg_SegEnable>:
#include "SEVEN_SEGMENT.h"
#include <avr/io.h>
#include <util/delay.h> // Utilize _delay_ms from the util library

// Function to enable a specific seven-segment display segment
void SevenSeg_SegEnable(SegNumber seg) {
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	00 d0       	rcall	.+0      	; 0x2874 <SevenSeg_SegEnable+0x6>
    2874:	0f 92       	push	r0
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	89 83       	std	Y+1, r24	; 0x01
    // Disable all segments
    Dio_WriteChannel(SEG_1, 1);
    287c:	83 e0       	ldi	r24, 0x03	; 3
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(SEG_2, 1);
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(SEG_3, 1);
    288c:	8d e0       	ldi	r24, 0x0D	; 13
    288e:	61 e0       	ldi	r22, 0x01	; 1
    2890:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(SEG_4, 1);
    2894:	8e e0       	ldi	r24, 0x0E	; 14
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>

    // Enable the specified segment
    switch (seg) {
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	3b 83       	std	Y+3, r19	; 0x03
    28a4:	2a 83       	std	Y+2, r18	; 0x02
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	9b 81       	ldd	r25, Y+3	; 0x03
    28aa:	83 30       	cpi	r24, 0x03	; 3
    28ac:	91 05       	cpc	r25, r1
    28ae:	b1 f0       	breq	.+44     	; 0x28dc <SevenSeg_SegEnable+0x6e>
    28b0:	2a 81       	ldd	r18, Y+2	; 0x02
    28b2:	3b 81       	ldd	r19, Y+3	; 0x03
    28b4:	24 30       	cpi	r18, 0x04	; 4
    28b6:	31 05       	cpc	r19, r1
    28b8:	34 f4       	brge	.+12     	; 0x28c6 <SevenSeg_SegEnable+0x58>
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	91 05       	cpc	r25, r1
    28c2:	89 f0       	breq	.+34     	; 0x28e6 <SevenSeg_SegEnable+0x78>
    28c4:	1e c0       	rjmp	.+60     	; 0x2902 <SevenSeg_SegEnable+0x94>
    28c6:	2a 81       	ldd	r18, Y+2	; 0x02
    28c8:	3b 81       	ldd	r19, Y+3	; 0x03
    28ca:	2d 30       	cpi	r18, 0x0D	; 13
    28cc:	31 05       	cpc	r19, r1
    28ce:	81 f0       	breq	.+32     	; 0x28f0 <SevenSeg_SegEnable+0x82>
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	9b 81       	ldd	r25, Y+3	; 0x03
    28d4:	8e 30       	cpi	r24, 0x0E	; 14
    28d6:	91 05       	cpc	r25, r1
    28d8:	81 f0       	breq	.+32     	; 0x28fa <SevenSeg_SegEnable+0x8c>
    28da:	13 c0       	rjmp	.+38     	; 0x2902 <SevenSeg_SegEnable+0x94>
        case SEG_1:
            Dio_WriteChannel(SEG_1, 0);
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    28e4:	0e c0       	rjmp	.+28     	; 0x2902 <SevenSeg_SegEnable+0x94>
            break;
        case SEG_2:
            Dio_WriteChannel(SEG_2, 0);
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    28ee:	09 c0       	rjmp	.+18     	; 0x2902 <SevenSeg_SegEnable+0x94>
            break;
        case SEG_3:
            Dio_WriteChannel(SEG_3, 0);
    28f0:	8d e0       	ldi	r24, 0x0D	; 13
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <SevenSeg_SegEnable+0x94>
            break;
        case SEG_4:
            Dio_WriteChannel(SEG_4, 0);
    28fa:	8e e0       	ldi	r24, 0x0E	; 14
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
            break;
    }
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <SevenSeg_Send>:

// Function to send four numbers to the four seven-segment displays
void SevenSeg_Send(u8 num1, u8 num2, u8 num3, u8 num4) {
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	ec 97       	sbiw	r28, 0x3c	; 60
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	89 af       	std	Y+57, r24	; 0x39
    2924:	6a af       	std	Y+58, r22	; 0x3a
    2926:	4b af       	std	Y+59, r20	; 0x3b
    2928:	2c af       	std	Y+60, r18	; 0x3c
    SevenSeg_SegEnable(SEG_1);
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	0e 94 37 14 	call	0x286e	; 0x286e <SevenSeg_SegEnable>
    SevenSeg_SendOneSeg(num1);
    2930:	89 ad       	ldd	r24, Y+57	; 0x39
    2932:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <SevenSeg_SendOneSeg>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a8 ec       	ldi	r26, 0xC8	; 200
    293c:	b2 e4       	ldi	r27, 0x42	; 66
    293e:	8d ab       	std	Y+53, r24	; 0x35
    2940:	9e ab       	std	Y+54, r25	; 0x36
    2942:	af ab       	std	Y+55, r26	; 0x37
    2944:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6d a9       	ldd	r22, Y+53	; 0x35
    2948:	7e a9       	ldd	r23, Y+54	; 0x36
    294a:	8f a9       	ldd	r24, Y+55	; 0x37
    294c:	98 ad       	ldd	r25, Y+56	; 0x38
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4a e7       	ldi	r20, 0x7A	; 122
    2954:	55 e4       	ldi	r21, 0x45	; 69
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	89 ab       	std	Y+49, r24	; 0x31
    2960:	9a ab       	std	Y+50, r25	; 0x32
    2962:	ab ab       	std	Y+51, r26	; 0x33
    2964:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2966:	69 a9       	ldd	r22, Y+49	; 0x31
    2968:	7a a9       	ldd	r23, Y+50	; 0x32
    296a:	8b a9       	ldd	r24, Y+51	; 0x33
    296c:	9c a9       	ldd	r25, Y+52	; 0x34
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	2c f4       	brge	.+10     	; 0x2988 <SevenSeg_Send+0x7a>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	98 ab       	std	Y+48, r25	; 0x30
    2984:	8f a7       	std	Y+47, r24	; 0x2f
    2986:	3f c0       	rjmp	.+126    	; 0x2a06 <SevenSeg_Send+0xf8>
	else if (__tmp > 65535)
    2988:	69 a9       	ldd	r22, Y+49	; 0x31
    298a:	7a a9       	ldd	r23, Y+50	; 0x32
    298c:	8b a9       	ldd	r24, Y+51	; 0x33
    298e:	9c a9       	ldd	r25, Y+52	; 0x34
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	3f ef       	ldi	r19, 0xFF	; 255
    2994:	4f e7       	ldi	r20, 0x7F	; 127
    2996:	57 e4       	ldi	r21, 0x47	; 71
    2998:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    299c:	18 16       	cp	r1, r24
    299e:	4c f5       	brge	.+82     	; 0x29f2 <SevenSeg_Send+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a0:	6d a9       	ldd	r22, Y+53	; 0x35
    29a2:	7e a9       	ldd	r23, Y+54	; 0x36
    29a4:	8f a9       	ldd	r24, Y+55	; 0x37
    29a6:	98 ad       	ldd	r25, Y+56	; 0x38
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e2       	ldi	r20, 0x20	; 32
    29ae:	51 e4       	ldi	r21, 0x41	; 65
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	98 ab       	std	Y+48, r25	; 0x30
    29c6:	8f a7       	std	Y+47, r24	; 0x2f
    29c8:	0f c0       	rjmp	.+30     	; 0x29e8 <SevenSeg_Send+0xda>
    29ca:	80 e9       	ldi	r24, 0x90	; 144
    29cc:	91 e0       	ldi	r25, 0x01	; 1
    29ce:	9e a7       	std	Y+46, r25	; 0x2e
    29d0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    29d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <SevenSeg_Send+0xc8>
    29da:	9e a7       	std	Y+46, r25	; 0x2e
    29dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29de:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e0:	98 a9       	ldd	r25, Y+48	; 0x30
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	98 ab       	std	Y+48, r25	; 0x30
    29e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ea:	98 a9       	ldd	r25, Y+48	; 0x30
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	69 f7       	brne	.-38     	; 0x29ca <SevenSeg_Send+0xbc>
    29f0:	14 c0       	rjmp	.+40     	; 0x2a1a <SevenSeg_Send+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f2:	69 a9       	ldd	r22, Y+49	; 0x31
    29f4:	7a a9       	ldd	r23, Y+50	; 0x32
    29f6:	8b a9       	ldd	r24, Y+51	; 0x33
    29f8:	9c a9       	ldd	r25, Y+52	; 0x34
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	98 ab       	std	Y+48, r25	; 0x30
    2a04:	8f a7       	std	Y+47, r24	; 0x2f
    2a06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a08:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0a:	9c a7       	std	Y+44, r25	; 0x2c
    2a0c:	8b a7       	std	Y+43, r24	; 0x2b
    2a0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a10:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <SevenSeg_Send+0x104>
    2a16:	9c a7       	std	Y+44, r25	; 0x2c
    2a18:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(100);

    SevenSeg_SegEnable(SEG_2);
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	0e 94 37 14 	call	0x286e	; 0x286e <SevenSeg_SegEnable>
    SevenSeg_SendOneSeg(num2);
    2a20:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a22:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <SevenSeg_SendOneSeg>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a8 ec       	ldi	r26, 0xC8	; 200
    2a2c:	b2 e4       	ldi	r27, 0x42	; 66
    2a2e:	8f a3       	std	Y+39, r24	; 0x27
    2a30:	98 a7       	std	Y+40, r25	; 0x28
    2a32:	a9 a7       	std	Y+41, r26	; 0x29
    2a34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	6f a1       	ldd	r22, Y+39	; 0x27
    2a38:	78 a5       	ldd	r23, Y+40	; 0x28
    2a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a e7       	ldi	r20, 0x7A	; 122
    2a44:	55 e4       	ldi	r21, 0x45	; 69
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8b a3       	std	Y+35, r24	; 0x23
    2a50:	9c a3       	std	Y+36, r25	; 0x24
    2a52:	ad a3       	std	Y+37, r26	; 0x25
    2a54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a56:	6b a1       	ldd	r22, Y+35	; 0x23
    2a58:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <SevenSeg_Send+0x16a>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9a a3       	std	Y+34, r25	; 0x22
    2a74:	89 a3       	std	Y+33, r24	; 0x21
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <SevenSeg_Send+0x1e8>
	else if (__tmp > 65535)
    2a78:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <SevenSeg_Send+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	6f a1       	ldd	r22, Y+39	; 0x27
    2a92:	78 a5       	ldd	r23, Y+40	; 0x28
    2a94:	89 a5       	ldd	r24, Y+41	; 0x29
    2a96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9a a3       	std	Y+34, r25	; 0x22
    2ab6:	89 a3       	std	Y+33, r24	; 0x21
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <SevenSeg_Send+0x1ca>
    2aba:	80 e9       	ldi	r24, 0x90	; 144
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	98 a3       	std	Y+32, r25	; 0x20
    2ac0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <SevenSeg_Send+0x1b8>
    2aca:	98 a3       	std	Y+32, r25	; 0x20
    2acc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	9a a3       	std	Y+34, r25	; 0x22
    2ad6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ada:	9a a1       	ldd	r25, Y+34	; 0x22
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <SevenSeg_Send+0x1ac>
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <SevenSeg_Send+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9a a3       	std	Y+34, r25	; 0x22
    2af4:	89 a3       	std	Y+33, r24	; 0x21
    2af6:	89 a1       	ldd	r24, Y+33	; 0x21
    2af8:	9a a1       	ldd	r25, Y+34	; 0x22
    2afa:	9e 8f       	std	Y+30, r25	; 0x1e
    2afc:	8d 8f       	std	Y+29, r24	; 0x1d
    2afe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <SevenSeg_Send+0x1f4>
    2b06:	9e 8f       	std	Y+30, r25	; 0x1e
    2b08:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(100);

    SevenSeg_SegEnable(SEG_3);
    2b0a:	8d e0       	ldi	r24, 0x0D	; 13
    2b0c:	0e 94 37 14 	call	0x286e	; 0x286e <SevenSeg_SegEnable>
    SevenSeg_SendOneSeg(num3);
    2b10:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b12:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <SevenSeg_SendOneSeg>
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	a8 ec       	ldi	r26, 0xC8	; 200
    2b1c:	b2 e4       	ldi	r27, 0x42	; 66
    2b1e:	89 8f       	std	Y+25, r24	; 0x19
    2b20:	9a 8f       	std	Y+26, r25	; 0x1a
    2b22:	ab 8f       	std	Y+27, r26	; 0x1b
    2b24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b26:	69 8d       	ldd	r22, Y+25	; 0x19
    2b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a e7       	ldi	r20, 0x7A	; 122
    2b34:	55 e4       	ldi	r21, 0x45	; 69
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8d 8b       	std	Y+21, r24	; 0x15
    2b40:	9e 8b       	std	Y+22, r25	; 0x16
    2b42:	af 8b       	std	Y+23, r26	; 0x17
    2b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b46:	6d 89       	ldd	r22, Y+21	; 0x15
    2b48:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	5f e3       	ldi	r21, 0x3F	; 63
    2b56:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b5a:	88 23       	and	r24, r24
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <SevenSeg_Send+0x25a>
		__ticks = 1;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9c 8b       	std	Y+20, r25	; 0x14
    2b64:	8b 8b       	std	Y+19, r24	; 0x13
    2b66:	3f c0       	rjmp	.+126    	; 0x2be6 <SevenSeg_Send+0x2d8>
	else if (__tmp > 65535)
    2b68:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	3f ef       	ldi	r19, 0xFF	; 255
    2b74:	4f e7       	ldi	r20, 0x7F	; 127
    2b76:	57 e4       	ldi	r21, 0x47	; 71
    2b78:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b7c:	18 16       	cp	r1, r24
    2b7e:	4c f5       	brge	.+82     	; 0x2bd2 <SevenSeg_Send+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b80:	69 8d       	ldd	r22, Y+25	; 0x19
    2b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e2       	ldi	r20, 0x20	; 32
    2b8e:	51 e4       	ldi	r21, 0x41	; 65
    2b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	9c 8b       	std	Y+20, r25	; 0x14
    2ba6:	8b 8b       	std	Y+19, r24	; 0x13
    2ba8:	0f c0       	rjmp	.+30     	; 0x2bc8 <SevenSeg_Send+0x2ba>
    2baa:	80 e9       	ldi	r24, 0x90	; 144
    2bac:	91 e0       	ldi	r25, 0x01	; 1
    2bae:	9a 8b       	std	Y+18, r25	; 0x12
    2bb0:	89 8b       	std	Y+17, r24	; 0x11
    2bb2:	89 89       	ldd	r24, Y+17	; 0x11
    2bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <SevenSeg_Send+0x2a8>
    2bba:	9a 8b       	std	Y+18, r25	; 0x12
    2bbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	9c 8b       	std	Y+20, r25	; 0x14
    2bc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bca:	9c 89       	ldd	r25, Y+20	; 0x14
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	69 f7       	brne	.-38     	; 0x2baa <SevenSeg_Send+0x29c>
    2bd0:	14 c0       	rjmp	.+40     	; 0x2bfa <SevenSeg_Send+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9c 8b       	std	Y+20, r25	; 0x14
    2be4:	8b 8b       	std	Y+19, r24	; 0x13
    2be6:	8b 89       	ldd	r24, Y+19	; 0x13
    2be8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bea:	98 8b       	std	Y+16, r25	; 0x10
    2bec:	8f 87       	std	Y+15, r24	; 0x0f
    2bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf0:	98 89       	ldd	r25, Y+16	; 0x10
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <SevenSeg_Send+0x2e4>
    2bf6:	98 8b       	std	Y+16, r25	; 0x10
    2bf8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(100);

    SevenSeg_SegEnable(SEG_4);
    2bfa:	8e e0       	ldi	r24, 0x0E	; 14
    2bfc:	0e 94 37 14 	call	0x286e	; 0x286e <SevenSeg_SegEnable>
    SevenSeg_SendOneSeg(num4);
    2c00:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c02:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <SevenSeg_SendOneSeg>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	a8 ec       	ldi	r26, 0xC8	; 200
    2c0c:	b2 e4       	ldi	r27, 0x42	; 66
    2c0e:	8b 87       	std	Y+11, r24	; 0x0b
    2c10:	9c 87       	std	Y+12, r25	; 0x0c
    2c12:	ad 87       	std	Y+13, r26	; 0x0d
    2c14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	4a e7       	ldi	r20, 0x7A	; 122
    2c24:	55 e4       	ldi	r21, 0x45	; 69
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	8f 83       	std	Y+7, r24	; 0x07
    2c30:	98 87       	std	Y+8, r25	; 0x08
    2c32:	a9 87       	std	Y+9, r26	; 0x09
    2c34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e8       	ldi	r20, 0x80	; 128
    2c44:	5f e3       	ldi	r21, 0x3F	; 63
    2c46:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	2c f4       	brge	.+10     	; 0x2c58 <SevenSeg_Send+0x34a>
		__ticks = 1;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	8d 83       	std	Y+5, r24	; 0x05
    2c56:	3f c0       	rjmp	.+126    	; 0x2cd6 <SevenSeg_Send+0x3c8>
	else if (__tmp > 65535)
    2c58:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5a:	78 85       	ldd	r23, Y+8	; 0x08
    2c5c:	89 85       	ldd	r24, Y+9	; 0x09
    2c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	3f ef       	ldi	r19, 0xFF	; 255
    2c64:	4f e7       	ldi	r20, 0x7F	; 127
    2c66:	57 e4       	ldi	r21, 0x47	; 71
    2c68:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c6c:	18 16       	cp	r1, r24
    2c6e:	4c f5       	brge	.+82     	; 0x2cc2 <SevenSeg_Send+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e2       	ldi	r20, 0x20	; 32
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	0f c0       	rjmp	.+30     	; 0x2cb8 <SevenSeg_Send+0x3aa>
    2c9a:	80 e9       	ldi	r24, 0x90	; 144
    2c9c:	91 e0       	ldi	r25, 0x01	; 1
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <SevenSeg_Send+0x398>
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	9e 83       	std	Y+6, r25	; 0x06
    2cb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	69 f7       	brne	.-38     	; 0x2c9a <SevenSeg_Send+0x38c>
    2cc0:	14 c0       	rjmp	.+40     	; 0x2cea <SevenSeg_Send+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	9a 83       	std	Y+2, r25	; 0x02
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <SevenSeg_Send+0x3d4>
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
}
    2cea:	ec 96       	adiw	r28, 0x3c	; 60
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <SevenSeg_SendOneSeg>:

// Function to send a single number to the current seven-segment display
void SevenSeg_SendOneSeg(u8 number) {
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	0f 92       	push	r0
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	89 83       	std	Y+1, r24	; 0x01
    Dio_WriteChannel(PB_0, GET_BIT(number, 0));
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	98 2f       	mov	r25, r24
    2d0c:	91 70       	andi	r25, 0x01	; 1
    2d0e:	88 e0       	ldi	r24, 0x08	; 8
    2d10:	69 2f       	mov	r22, r25
    2d12:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(PB_1, GET_BIT(number, 1));
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	86 95       	lsr	r24
    2d1a:	98 2f       	mov	r25, r24
    2d1c:	91 70       	andi	r25, 0x01	; 1
    2d1e:	89 e0       	ldi	r24, 0x09	; 9
    2d20:	69 2f       	mov	r22, r25
    2d22:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(PB_2, GET_BIT(number, 2));
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	86 95       	lsr	r24
    2d2a:	86 95       	lsr	r24
    2d2c:	98 2f       	mov	r25, r24
    2d2e:	91 70       	andi	r25, 0x01	; 1
    2d30:	8a e0       	ldi	r24, 0x0A	; 10
    2d32:	69 2f       	mov	r22, r25
    2d34:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(PB_4, GET_BIT(number, 3));
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	86 95       	lsr	r24
    2d3c:	86 95       	lsr	r24
    2d3e:	86 95       	lsr	r24
    2d40:	98 2f       	mov	r25, r24
    2d42:	91 70       	andi	r25, 0x01	; 1
    2d44:	8c e0       	ldi	r24, 0x0C	; 12
    2d46:	69 2f       	mov	r22, r25
    2d48:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
}
    2d4c:	0f 90       	pop	r0
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <LCD_SendData>:
#include "avr/delay.h"

static u8 current_pos = 0;


void LCD_SendData(u8 data) {
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	e9 97       	sbiw	r28, 0x39	; 57
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	89 af       	std	Y+57, r24	; 0x39
    Dio_WriteChannel(RS, STD_HIGH);
    2d6a:	83 e0       	ldi	r24, 0x03	; 3
    2d6c:	61 e0       	ldi	r22, 0x01	; 1
    2d6e:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>

    // Send data through D4-D7 pins
    Dio_WriteChannel(D4, GET_BIT(data, 4));
    2d72:	89 ad       	ldd	r24, Y+57	; 0x39
    2d74:	82 95       	swap	r24
    2d76:	8f 70       	andi	r24, 0x0F	; 15
    2d78:	98 2f       	mov	r25, r24
    2d7a:	91 70       	andi	r25, 0x01	; 1
    2d7c:	88 e0       	ldi	r24, 0x08	; 8
    2d7e:	69 2f       	mov	r22, r25
    2d80:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(data, 5));
    2d84:	89 ad       	ldd	r24, Y+57	; 0x39
    2d86:	82 95       	swap	r24
    2d88:	86 95       	lsr	r24
    2d8a:	87 70       	andi	r24, 0x07	; 7
    2d8c:	98 2f       	mov	r25, r24
    2d8e:	91 70       	andi	r25, 0x01	; 1
    2d90:	89 e0       	ldi	r24, 0x09	; 9
    2d92:	69 2f       	mov	r22, r25
    2d94:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(data, 6));
    2d98:	89 ad       	ldd	r24, Y+57	; 0x39
    2d9a:	82 95       	swap	r24
    2d9c:	86 95       	lsr	r24
    2d9e:	86 95       	lsr	r24
    2da0:	83 70       	andi	r24, 0x03	; 3
    2da2:	98 2f       	mov	r25, r24
    2da4:	91 70       	andi	r25, 0x01	; 1
    2da6:	8a e0       	ldi	r24, 0x0A	; 10
    2da8:	69 2f       	mov	r22, r25
    2daa:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(data, 7));
    2dae:	89 ad       	ldd	r24, Y+57	; 0x39
    2db0:	98 2f       	mov	r25, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	99 27       	eor	r25, r25
    2db6:	99 1f       	adc	r25, r25
    2db8:	8c e0       	ldi	r24, 0x0C	; 12
    2dba:	69 2f       	mov	r22, r25
    2dbc:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	a0 e8       	ldi	r26, 0x80	; 128
    2dce:	bf e3       	ldi	r27, 0x3F	; 63
    2dd0:	8d ab       	std	Y+53, r24	; 0x35
    2dd2:	9e ab       	std	Y+54, r25	; 0x36
    2dd4:	af ab       	std	Y+55, r26	; 0x37
    2dd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dda:	7e a9       	ldd	r23, Y+54	; 0x36
    2ddc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dde:	98 ad       	ldd	r25, Y+56	; 0x38
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a e7       	ldi	r20, 0x7A	; 122
    2de6:	55 e4       	ldi	r21, 0x45	; 69
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	89 ab       	std	Y+49, r24	; 0x31
    2df2:	9a ab       	std	Y+50, r25	; 0x32
    2df4:	ab ab       	std	Y+51, r26	; 0x33
    2df6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2df8:	69 a9       	ldd	r22, Y+49	; 0x31
    2dfa:	7a a9       	ldd	r23, Y+50	; 0x32
    2dfc:	8b a9       	ldd	r24, Y+51	; 0x33
    2dfe:	9c a9       	ldd	r25, Y+52	; 0x34
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e8       	ldi	r20, 0x80	; 128
    2e06:	5f e3       	ldi	r21, 0x3F	; 63
    2e08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e0c:	88 23       	and	r24, r24
    2e0e:	2c f4       	brge	.+10     	; 0x2e1a <LCD_SendData+0xc6>
		__ticks = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	98 ab       	std	Y+48, r25	; 0x30
    2e16:	8f a7       	std	Y+47, r24	; 0x2f
    2e18:	3f c0       	rjmp	.+126    	; 0x2e98 <LCD_SendData+0x144>
	else if (__tmp > 65535)
    2e1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e20:	9c a9       	ldd	r25, Y+52	; 0x34
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	57 e4       	ldi	r21, 0x47	; 71
    2e2a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	4c f5       	brge	.+82     	; 0x2e84 <LCD_SendData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e32:	6d a9       	ldd	r22, Y+53	; 0x35
    2e34:	7e a9       	ldd	r23, Y+54	; 0x36
    2e36:	8f a9       	ldd	r24, Y+55	; 0x37
    2e38:	98 ad       	ldd	r25, Y+56	; 0x38
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	51 e4       	ldi	r21, 0x41	; 65
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	98 ab       	std	Y+48, r25	; 0x30
    2e58:	8f a7       	std	Y+47, r24	; 0x2f
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <LCD_SendData+0x126>
    2e5c:	80 e9       	ldi	r24, 0x90	; 144
    2e5e:	91 e0       	ldi	r25, 0x01	; 1
    2e60:	9e a7       	std	Y+46, r25	; 0x2e
    2e62:	8d a7       	std	Y+45, r24	; 0x2d
    2e64:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e66:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <LCD_SendData+0x114>
    2e6c:	9e a7       	std	Y+46, r25	; 0x2e
    2e6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e72:	98 a9       	ldd	r25, Y+48	; 0x30
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	98 ab       	std	Y+48, r25	; 0x30
    2e78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	69 f7       	brne	.-38     	; 0x2e5c <LCD_SendData+0x108>
    2e82:	14 c0       	rjmp	.+40     	; 0x2eac <LCD_SendData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e84:	69 a9       	ldd	r22, Y+49	; 0x31
    2e86:	7a a9       	ldd	r23, Y+50	; 0x32
    2e88:	8b a9       	ldd	r24, Y+51	; 0x33
    2e8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	98 ab       	std	Y+48, r25	; 0x30
    2e96:	8f a7       	std	Y+47, r24	; 0x2f
    2e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e9c:	9c a7       	std	Y+44, r25	; 0x2c
    2e9e:	8b a7       	std	Y+43, r24	; 0x2b
    2ea0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ea2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <LCD_SendData+0x150>
    2ea8:	9c a7       	std	Y+44, r25	; 0x2c
    2eaa:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    2eac:	82 e0       	ldi	r24, 0x02	; 2
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	a0 e8       	ldi	r26, 0x80	; 128
    2eba:	bf e3       	ldi	r27, 0x3F	; 63
    2ebc:	8f a3       	std	Y+39, r24	; 0x27
    2ebe:	98 a7       	std	Y+40, r25	; 0x28
    2ec0:	a9 a7       	std	Y+41, r26	; 0x29
    2ec2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ec6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ec8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4a e7       	ldi	r20, 0x7A	; 122
    2ed2:	55 e4       	ldi	r21, 0x45	; 69
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8b a3       	std	Y+35, r24	; 0x23
    2ede:	9c a3       	std	Y+36, r25	; 0x24
    2ee0:	ad a3       	std	Y+37, r26	; 0x25
    2ee2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    2eea:	9e a1       	ldd	r25, Y+38	; 0x26
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ef8:	88 23       	and	r24, r24
    2efa:	2c f4       	brge	.+10     	; 0x2f06 <LCD_SendData+0x1b2>
		__ticks = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9a a3       	std	Y+34, r25	; 0x22
    2f02:	89 a3       	std	Y+33, r24	; 0x21
    2f04:	3f c0       	rjmp	.+126    	; 0x2f84 <LCD_SendData+0x230>
	else if (__tmp > 65535)
    2f06:	6b a1       	ldd	r22, Y+35	; 0x23
    2f08:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	3f ef       	ldi	r19, 0xFF	; 255
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	57 e4       	ldi	r21, 0x47	; 71
    2f16:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	4c f5       	brge	.+82     	; 0x2f70 <LCD_SendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f20:	78 a5       	ldd	r23, Y+40	; 0x28
    2f22:	89 a5       	ldd	r24, Y+41	; 0x29
    2f24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
    2f2c:	51 e4       	ldi	r21, 0x41	; 65
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9a a3       	std	Y+34, r25	; 0x22
    2f44:	89 a3       	std	Y+33, r24	; 0x21
    2f46:	0f c0       	rjmp	.+30     	; 0x2f66 <LCD_SendData+0x212>
    2f48:	80 e9       	ldi	r24, 0x90	; 144
    2f4a:	91 e0       	ldi	r25, 0x01	; 1
    2f4c:	98 a3       	std	Y+32, r25	; 0x20
    2f4e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f52:	98 a1       	ldd	r25, Y+32	; 0x20
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <LCD_SendData+0x200>
    2f58:	98 a3       	std	Y+32, r25	; 0x20
    2f5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	9a a3       	std	Y+34, r25	; 0x22
    2f64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f66:	89 a1       	ldd	r24, Y+33	; 0x21
    2f68:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	69 f7       	brne	.-38     	; 0x2f48 <LCD_SendData+0x1f4>
    2f6e:	14 c0       	rjmp	.+40     	; 0x2f98 <LCD_SendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f70:	6b a1       	ldd	r22, Y+35	; 0x23
    2f72:	7c a1       	ldd	r23, Y+36	; 0x24
    2f74:	8d a1       	ldd	r24, Y+37	; 0x25
    2f76:	9e a1       	ldd	r25, Y+38	; 0x26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9a a3       	std	Y+34, r25	; 0x22
    2f82:	89 a3       	std	Y+33, r24	; 0x21
    2f84:	89 a1       	ldd	r24, Y+33	; 0x21
    2f86:	9a a1       	ldd	r25, Y+34	; 0x22
    2f88:	9e 8f       	std	Y+30, r25	; 0x1e
    2f8a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <LCD_SendData+0x23c>
    2f94:	9e 8f       	std	Y+30, r25	; 0x1e
    2f96:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    // Send the lower 4 bits
    Dio_WriteChannel(D4, GET_BIT(data, 0));
    2f98:	89 ad       	ldd	r24, Y+57	; 0x39
    2f9a:	98 2f       	mov	r25, r24
    2f9c:	91 70       	andi	r25, 0x01	; 1
    2f9e:	88 e0       	ldi	r24, 0x08	; 8
    2fa0:	69 2f       	mov	r22, r25
    2fa2:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(data, 1));
    2fa6:	89 ad       	ldd	r24, Y+57	; 0x39
    2fa8:	86 95       	lsr	r24
    2faa:	98 2f       	mov	r25, r24
    2fac:	91 70       	andi	r25, 0x01	; 1
    2fae:	89 e0       	ldi	r24, 0x09	; 9
    2fb0:	69 2f       	mov	r22, r25
    2fb2:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(data, 2));
    2fb6:	89 ad       	ldd	r24, Y+57	; 0x39
    2fb8:	86 95       	lsr	r24
    2fba:	86 95       	lsr	r24
    2fbc:	98 2f       	mov	r25, r24
    2fbe:	91 70       	andi	r25, 0x01	; 1
    2fc0:	8a e0       	ldi	r24, 0x0A	; 10
    2fc2:	69 2f       	mov	r22, r25
    2fc4:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(data, 3));
    2fc8:	89 ad       	ldd	r24, Y+57	; 0x39
    2fca:	86 95       	lsr	r24
    2fcc:	86 95       	lsr	r24
    2fce:	86 95       	lsr	r24
    2fd0:	98 2f       	mov	r25, r24
    2fd2:	91 70       	andi	r25, 0x01	; 1
    2fd4:	8c e0       	ldi	r24, 0x0C	; 12
    2fd6:	69 2f       	mov	r22, r25
    2fd8:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	61 e0       	ldi	r22, 0x01	; 1
    2fe0:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	a0 e8       	ldi	r26, 0x80	; 128
    2fea:	bf e3       	ldi	r27, 0x3F	; 63
    2fec:	89 8f       	std	Y+25, r24	; 0x19
    2fee:	9a 8f       	std	Y+26, r25	; 0x1a
    2ff0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	4a e7       	ldi	r20, 0x7A	; 122
    3002:	55 e4       	ldi	r21, 0x45	; 69
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	8d 8b       	std	Y+21, r24	; 0x15
    300e:	9e 8b       	std	Y+22, r25	; 0x16
    3010:	af 8b       	std	Y+23, r26	; 0x17
    3012:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3014:	6d 89       	ldd	r22, Y+21	; 0x15
    3016:	7e 89       	ldd	r23, Y+22	; 0x16
    3018:	8f 89       	ldd	r24, Y+23	; 0x17
    301a:	98 8d       	ldd	r25, Y+24	; 0x18
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3028:	88 23       	and	r24, r24
    302a:	2c f4       	brge	.+10     	; 0x3036 <LCD_SendData+0x2e2>
		__ticks = 1;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9c 8b       	std	Y+20, r25	; 0x14
    3032:	8b 8b       	std	Y+19, r24	; 0x13
    3034:	3f c0       	rjmp	.+126    	; 0x30b4 <LCD_SendData+0x360>
	else if (__tmp > 65535)
    3036:	6d 89       	ldd	r22, Y+21	; 0x15
    3038:	7e 89       	ldd	r23, Y+22	; 0x16
    303a:	8f 89       	ldd	r24, Y+23	; 0x17
    303c:	98 8d       	ldd	r25, Y+24	; 0x18
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	3f ef       	ldi	r19, 0xFF	; 255
    3042:	4f e7       	ldi	r20, 0x7F	; 127
    3044:	57 e4       	ldi	r21, 0x47	; 71
    3046:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    304a:	18 16       	cp	r1, r24
    304c:	4c f5       	brge	.+82     	; 0x30a0 <LCD_SendData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304e:	69 8d       	ldd	r22, Y+25	; 0x19
    3050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e2       	ldi	r20, 0x20	; 32
    305c:	51 e4       	ldi	r21, 0x41	; 65
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9c 8b       	std	Y+20, r25	; 0x14
    3074:	8b 8b       	std	Y+19, r24	; 0x13
    3076:	0f c0       	rjmp	.+30     	; 0x3096 <LCD_SendData+0x342>
    3078:	80 e9       	ldi	r24, 0x90	; 144
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	9a 8b       	std	Y+18, r25	; 0x12
    307e:	89 8b       	std	Y+17, r24	; 0x11
    3080:	89 89       	ldd	r24, Y+17	; 0x11
    3082:	9a 89       	ldd	r25, Y+18	; 0x12
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <LCD_SendData+0x330>
    3088:	9a 8b       	std	Y+18, r25	; 0x12
    308a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308c:	8b 89       	ldd	r24, Y+19	; 0x13
    308e:	9c 89       	ldd	r25, Y+20	; 0x14
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	9c 8b       	std	Y+20, r25	; 0x14
    3094:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3096:	8b 89       	ldd	r24, Y+19	; 0x13
    3098:	9c 89       	ldd	r25, Y+20	; 0x14
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	69 f7       	brne	.-38     	; 0x3078 <LCD_SendData+0x324>
    309e:	14 c0       	rjmp	.+40     	; 0x30c8 <LCD_SendData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a0:	6d 89       	ldd	r22, Y+21	; 0x15
    30a2:	7e 89       	ldd	r23, Y+22	; 0x16
    30a4:	8f 89       	ldd	r24, Y+23	; 0x17
    30a6:	98 8d       	ldd	r25, Y+24	; 0x18
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9c 8b       	std	Y+20, r25	; 0x14
    30b2:	8b 8b       	std	Y+19, r24	; 0x13
    30b4:	8b 89       	ldd	r24, Y+19	; 0x13
    30b6:	9c 89       	ldd	r25, Y+20	; 0x14
    30b8:	98 8b       	std	Y+16, r25	; 0x10
    30ba:	8f 87       	std	Y+15, r24	; 0x0f
    30bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    30be:	98 89       	ldd	r25, Y+16	; 0x10
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <LCD_SendData+0x36c>
    30c4:	98 8b       	std	Y+16, r25	; 0x10
    30c6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    30c8:	82 e0       	ldi	r24, 0x02	; 2
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 e8       	ldi	r26, 0x80	; 128
    30d6:	bf e3       	ldi	r27, 0x3F	; 63
    30d8:	8b 87       	std	Y+11, r24	; 0x0b
    30da:	9c 87       	std	Y+12, r25	; 0x0c
    30dc:	ad 87       	std	Y+13, r26	; 0x0d
    30de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a e7       	ldi	r20, 0x7A	; 122
    30ee:	55 e4       	ldi	r21, 0x45	; 69
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8f 83       	std	Y+7, r24	; 0x07
    30fa:	98 87       	std	Y+8, r25	; 0x08
    30fc:	a9 87       	std	Y+9, r26	; 0x09
    30fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	2c f4       	brge	.+10     	; 0x3122 <LCD_SendData+0x3ce>
		__ticks = 1;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9e 83       	std	Y+6, r25	; 0x06
    311e:	8d 83       	std	Y+5, r24	; 0x05
    3120:	3f c0       	rjmp	.+126    	; 0x31a0 <LCD_SendData+0x44c>
	else if (__tmp > 65535)
    3122:	6f 81       	ldd	r22, Y+7	; 0x07
    3124:	78 85       	ldd	r23, Y+8	; 0x08
    3126:	89 85       	ldd	r24, Y+9	; 0x09
    3128:	9a 85       	ldd	r25, Y+10	; 0x0a
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	4c f5       	brge	.+82     	; 0x318c <LCD_SendData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313a:	6b 85       	ldd	r22, Y+11	; 0x0b
    313c:	7c 85       	ldd	r23, Y+12	; 0x0c
    313e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3140:	9e 85       	ldd	r25, Y+14	; 0x0e
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <LCD_SendData+0x42e>
    3164:	80 e9       	ldi	r24, 0x90	; 144
    3166:	91 e0       	ldi	r25, 0x01	; 1
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <LCD_SendData+0x41c>
    3174:	9c 83       	std	Y+4, r25	; 0x04
    3176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	8d 81       	ldd	r24, Y+5	; 0x05
    317a:	9e 81       	ldd	r25, Y+6	; 0x06
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	69 f7       	brne	.-38     	; 0x3164 <LCD_SendData+0x410>
    318a:	14 c0       	rjmp	.+40     	; 0x31b4 <LCD_SendData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	6f 81       	ldd	r22, Y+7	; 0x07
    318e:	78 85       	ldd	r23, Y+8	; 0x08
    3190:	89 85       	ldd	r24, Y+9	; 0x09
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	9a 81       	ldd	r25, Y+2	; 0x02
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <LCD_SendData+0x458>
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    31b4:	e9 96       	adiw	r28, 0x39	; 57
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	f8 94       	cli
    31ba:	de bf       	out	0x3e, r29	; 62
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	cd bf       	out	0x3d, r28	; 61
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <LCD_SendCMD>:

void LCD_SendCMD(u8 command) {
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	e9 97       	sbiw	r28, 0x39	; 57
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	89 af       	std	Y+57, r24	; 0x39
    Dio_WriteChannel(RS, STD_LOW);
    31dc:	83 e0       	ldi	r24, 0x03	; 3
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>

    // Send command through D4-D7 pins
    Dio_WriteChannel(D4, GET_BIT(command, 4));
    31e4:	89 ad       	ldd	r24, Y+57	; 0x39
    31e6:	82 95       	swap	r24
    31e8:	8f 70       	andi	r24, 0x0F	; 15
    31ea:	98 2f       	mov	r25, r24
    31ec:	91 70       	andi	r25, 0x01	; 1
    31ee:	88 e0       	ldi	r24, 0x08	; 8
    31f0:	69 2f       	mov	r22, r25
    31f2:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(command, 5));
    31f6:	89 ad       	ldd	r24, Y+57	; 0x39
    31f8:	82 95       	swap	r24
    31fa:	86 95       	lsr	r24
    31fc:	87 70       	andi	r24, 0x07	; 7
    31fe:	98 2f       	mov	r25, r24
    3200:	91 70       	andi	r25, 0x01	; 1
    3202:	89 e0       	ldi	r24, 0x09	; 9
    3204:	69 2f       	mov	r22, r25
    3206:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(command, 6));
    320a:	89 ad       	ldd	r24, Y+57	; 0x39
    320c:	82 95       	swap	r24
    320e:	86 95       	lsr	r24
    3210:	86 95       	lsr	r24
    3212:	83 70       	andi	r24, 0x03	; 3
    3214:	98 2f       	mov	r25, r24
    3216:	91 70       	andi	r25, 0x01	; 1
    3218:	8a e0       	ldi	r24, 0x0A	; 10
    321a:	69 2f       	mov	r22, r25
    321c:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(command, 7));
    3220:	89 ad       	ldd	r24, Y+57	; 0x39
    3222:	98 2f       	mov	r25, r24
    3224:	99 1f       	adc	r25, r25
    3226:	99 27       	eor	r25, r25
    3228:	99 1f       	adc	r25, r25
    322a:	8c e0       	ldi	r24, 0x0C	; 12
    322c:	69 2f       	mov	r22, r25
    322e:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    3232:	82 e0       	ldi	r24, 0x02	; 2
    3234:	61 e0       	ldi	r22, 0x01	; 1
    3236:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a0 e8       	ldi	r26, 0x80	; 128
    3240:	bf e3       	ldi	r27, 0x3F	; 63
    3242:	8d ab       	std	Y+53, r24	; 0x35
    3244:	9e ab       	std	Y+54, r25	; 0x36
    3246:	af ab       	std	Y+55, r26	; 0x37
    3248:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324a:	6d a9       	ldd	r22, Y+53	; 0x35
    324c:	7e a9       	ldd	r23, Y+54	; 0x36
    324e:	8f a9       	ldd	r24, Y+55	; 0x37
    3250:	98 ad       	ldd	r25, Y+56	; 0x38
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	4a e7       	ldi	r20, 0x7A	; 122
    3258:	55 e4       	ldi	r21, 0x45	; 69
    325a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	89 ab       	std	Y+49, r24	; 0x31
    3264:	9a ab       	std	Y+50, r25	; 0x32
    3266:	ab ab       	std	Y+51, r26	; 0x33
    3268:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    326a:	69 a9       	ldd	r22, Y+49	; 0x31
    326c:	7a a9       	ldd	r23, Y+50	; 0x32
    326e:	8b a9       	ldd	r24, Y+51	; 0x33
    3270:	9c a9       	ldd	r25, Y+52	; 0x34
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e8       	ldi	r20, 0x80	; 128
    3278:	5f e3       	ldi	r21, 0x3F	; 63
    327a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    327e:	88 23       	and	r24, r24
    3280:	2c f4       	brge	.+10     	; 0x328c <LCD_SendCMD+0xc6>
		__ticks = 1;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	98 ab       	std	Y+48, r25	; 0x30
    3288:	8f a7       	std	Y+47, r24	; 0x2f
    328a:	3f c0       	rjmp	.+126    	; 0x330a <LCD_SendCMD+0x144>
	else if (__tmp > 65535)
    328c:	69 a9       	ldd	r22, Y+49	; 0x31
    328e:	7a a9       	ldd	r23, Y+50	; 0x32
    3290:	8b a9       	ldd	r24, Y+51	; 0x33
    3292:	9c a9       	ldd	r25, Y+52	; 0x34
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	3f ef       	ldi	r19, 0xFF	; 255
    3298:	4f e7       	ldi	r20, 0x7F	; 127
    329a:	57 e4       	ldi	r21, 0x47	; 71
    329c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    32a0:	18 16       	cp	r1, r24
    32a2:	4c f5       	brge	.+82     	; 0x32f6 <LCD_SendCMD+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a4:	6d a9       	ldd	r22, Y+53	; 0x35
    32a6:	7e a9       	ldd	r23, Y+54	; 0x36
    32a8:	8f a9       	ldd	r24, Y+55	; 0x37
    32aa:	98 ad       	ldd	r25, Y+56	; 0x38
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e2       	ldi	r20, 0x20	; 32
    32b2:	51 e4       	ldi	r21, 0x41	; 65
    32b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	98 ab       	std	Y+48, r25	; 0x30
    32ca:	8f a7       	std	Y+47, r24	; 0x2f
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <LCD_SendCMD+0x126>
    32ce:	80 e9       	ldi	r24, 0x90	; 144
    32d0:	91 e0       	ldi	r25, 0x01	; 1
    32d2:	9e a7       	std	Y+46, r25	; 0x2e
    32d4:	8d a7       	std	Y+45, r24	; 0x2d
    32d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    32d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <LCD_SendCMD+0x114>
    32de:	9e a7       	std	Y+46, r25	; 0x2e
    32e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e4:	98 a9       	ldd	r25, Y+48	; 0x30
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	98 ab       	std	Y+48, r25	; 0x30
    32ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ee:	98 a9       	ldd	r25, Y+48	; 0x30
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	69 f7       	brne	.-38     	; 0x32ce <LCD_SendCMD+0x108>
    32f4:	14 c0       	rjmp	.+40     	; 0x331e <LCD_SendCMD+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f6:	69 a9       	ldd	r22, Y+49	; 0x31
    32f8:	7a a9       	ldd	r23, Y+50	; 0x32
    32fa:	8b a9       	ldd	r24, Y+51	; 0x33
    32fc:	9c a9       	ldd	r25, Y+52	; 0x34
    32fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	98 ab       	std	Y+48, r25	; 0x30
    3308:	8f a7       	std	Y+47, r24	; 0x2f
    330a:	8f a5       	ldd	r24, Y+47	; 0x2f
    330c:	98 a9       	ldd	r25, Y+48	; 0x30
    330e:	9c a7       	std	Y+44, r25	; 0x2c
    3310:	8b a7       	std	Y+43, r24	; 0x2b
    3312:	8b a5       	ldd	r24, Y+43	; 0x2b
    3314:	9c a5       	ldd	r25, Y+44	; 0x2c
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <LCD_SendCMD+0x150>
    331a:	9c a7       	std	Y+44, r25	; 0x2c
    331c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    331e:	82 e0       	ldi	r24, 0x02	; 2
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	a0 e8       	ldi	r26, 0x80	; 128
    332c:	bf e3       	ldi	r27, 0x3F	; 63
    332e:	8f a3       	std	Y+39, r24	; 0x27
    3330:	98 a7       	std	Y+40, r25	; 0x28
    3332:	a9 a7       	std	Y+41, r26	; 0x29
    3334:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3336:	6f a1       	ldd	r22, Y+39	; 0x27
    3338:	78 a5       	ldd	r23, Y+40	; 0x28
    333a:	89 a5       	ldd	r24, Y+41	; 0x29
    333c:	9a a5       	ldd	r25, Y+42	; 0x2a
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	4a e7       	ldi	r20, 0x7A	; 122
    3344:	55 e4       	ldi	r21, 0x45	; 69
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	8b a3       	std	Y+35, r24	; 0x23
    3350:	9c a3       	std	Y+36, r25	; 0x24
    3352:	ad a3       	std	Y+37, r26	; 0x25
    3354:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3356:	6b a1       	ldd	r22, Y+35	; 0x23
    3358:	7c a1       	ldd	r23, Y+36	; 0x24
    335a:	8d a1       	ldd	r24, Y+37	; 0x25
    335c:	9e a1       	ldd	r25, Y+38	; 0x26
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e8       	ldi	r20, 0x80	; 128
    3364:	5f e3       	ldi	r21, 0x3F	; 63
    3366:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    336a:	88 23       	and	r24, r24
    336c:	2c f4       	brge	.+10     	; 0x3378 <LCD_SendCMD+0x1b2>
		__ticks = 1;
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	9a a3       	std	Y+34, r25	; 0x22
    3374:	89 a3       	std	Y+33, r24	; 0x21
    3376:	3f c0       	rjmp	.+126    	; 0x33f6 <LCD_SendCMD+0x230>
	else if (__tmp > 65535)
    3378:	6b a1       	ldd	r22, Y+35	; 0x23
    337a:	7c a1       	ldd	r23, Y+36	; 0x24
    337c:	8d a1       	ldd	r24, Y+37	; 0x25
    337e:	9e a1       	ldd	r25, Y+38	; 0x26
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	3f ef       	ldi	r19, 0xFF	; 255
    3384:	4f e7       	ldi	r20, 0x7F	; 127
    3386:	57 e4       	ldi	r21, 0x47	; 71
    3388:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    338c:	18 16       	cp	r1, r24
    338e:	4c f5       	brge	.+82     	; 0x33e2 <LCD_SendCMD+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3390:	6f a1       	ldd	r22, Y+39	; 0x27
    3392:	78 a5       	ldd	r23, Y+40	; 0x28
    3394:	89 a5       	ldd	r24, Y+41	; 0x29
    3396:	9a a5       	ldd	r25, Y+42	; 0x2a
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	40 e2       	ldi	r20, 0x20	; 32
    339e:	51 e4       	ldi	r21, 0x41	; 65
    33a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	bc 01       	movw	r22, r24
    33aa:	cd 01       	movw	r24, r26
    33ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	9a a3       	std	Y+34, r25	; 0x22
    33b6:	89 a3       	std	Y+33, r24	; 0x21
    33b8:	0f c0       	rjmp	.+30     	; 0x33d8 <LCD_SendCMD+0x212>
    33ba:	80 e9       	ldi	r24, 0x90	; 144
    33bc:	91 e0       	ldi	r25, 0x01	; 1
    33be:	98 a3       	std	Y+32, r25	; 0x20
    33c0:	8f 8f       	std	Y+31, r24	; 0x1f
    33c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c4:	98 a1       	ldd	r25, Y+32	; 0x20
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <LCD_SendCMD+0x200>
    33ca:	98 a3       	std	Y+32, r25	; 0x20
    33cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ce:	89 a1       	ldd	r24, Y+33	; 0x21
    33d0:	9a a1       	ldd	r25, Y+34	; 0x22
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	9a a3       	std	Y+34, r25	; 0x22
    33d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d8:	89 a1       	ldd	r24, Y+33	; 0x21
    33da:	9a a1       	ldd	r25, Y+34	; 0x22
    33dc:	00 97       	sbiw	r24, 0x00	; 0
    33de:	69 f7       	brne	.-38     	; 0x33ba <LCD_SendCMD+0x1f4>
    33e0:	14 c0       	rjmp	.+40     	; 0x340a <LCD_SendCMD+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e2:	6b a1       	ldd	r22, Y+35	; 0x23
    33e4:	7c a1       	ldd	r23, Y+36	; 0x24
    33e6:	8d a1       	ldd	r24, Y+37	; 0x25
    33e8:	9e a1       	ldd	r25, Y+38	; 0x26
    33ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	9a a3       	std	Y+34, r25	; 0x22
    33f4:	89 a3       	std	Y+33, r24	; 0x21
    33f6:	89 a1       	ldd	r24, Y+33	; 0x21
    33f8:	9a a1       	ldd	r25, Y+34	; 0x22
    33fa:	9e 8f       	std	Y+30, r25	; 0x1e
    33fc:	8d 8f       	std	Y+29, r24	; 0x1d
    33fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3400:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	f1 f7       	brne	.-4      	; 0x3402 <LCD_SendCMD+0x23c>
    3406:	9e 8f       	std	Y+30, r25	; 0x1e
    3408:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    // Send the lower 4 bits of the command
    Dio_WriteChannel(D4, GET_BIT(command, 0));
    340a:	89 ad       	ldd	r24, Y+57	; 0x39
    340c:	98 2f       	mov	r25, r24
    340e:	91 70       	andi	r25, 0x01	; 1
    3410:	88 e0       	ldi	r24, 0x08	; 8
    3412:	69 2f       	mov	r22, r25
    3414:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(command, 1));
    3418:	89 ad       	ldd	r24, Y+57	; 0x39
    341a:	86 95       	lsr	r24
    341c:	98 2f       	mov	r25, r24
    341e:	91 70       	andi	r25, 0x01	; 1
    3420:	89 e0       	ldi	r24, 0x09	; 9
    3422:	69 2f       	mov	r22, r25
    3424:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(command, 2));
    3428:	89 ad       	ldd	r24, Y+57	; 0x39
    342a:	86 95       	lsr	r24
    342c:	86 95       	lsr	r24
    342e:	98 2f       	mov	r25, r24
    3430:	91 70       	andi	r25, 0x01	; 1
    3432:	8a e0       	ldi	r24, 0x0A	; 10
    3434:	69 2f       	mov	r22, r25
    3436:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(command, 3));
    343a:	89 ad       	ldd	r24, Y+57	; 0x39
    343c:	86 95       	lsr	r24
    343e:	86 95       	lsr	r24
    3440:	86 95       	lsr	r24
    3442:	98 2f       	mov	r25, r24
    3444:	91 70       	andi	r25, 0x01	; 1
    3446:	8c e0       	ldi	r24, 0x0C	; 12
    3448:	69 2f       	mov	r22, r25
    344a:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    344e:	82 e0       	ldi	r24, 0x02	; 2
    3450:	61 e0       	ldi	r22, 0x01	; 1
    3452:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	a0 e8       	ldi	r26, 0x80	; 128
    345c:	bf e3       	ldi	r27, 0x3F	; 63
    345e:	89 8f       	std	Y+25, r24	; 0x19
    3460:	9a 8f       	std	Y+26, r25	; 0x1a
    3462:	ab 8f       	std	Y+27, r26	; 0x1b
    3464:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3466:	69 8d       	ldd	r22, Y+25	; 0x19
    3468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    346a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    346c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	4a e7       	ldi	r20, 0x7A	; 122
    3474:	55 e4       	ldi	r21, 0x45	; 69
    3476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	8d 8b       	std	Y+21, r24	; 0x15
    3480:	9e 8b       	std	Y+22, r25	; 0x16
    3482:	af 8b       	std	Y+23, r26	; 0x17
    3484:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3486:	6d 89       	ldd	r22, Y+21	; 0x15
    3488:	7e 89       	ldd	r23, Y+22	; 0x16
    348a:	8f 89       	ldd	r24, Y+23	; 0x17
    348c:	98 8d       	ldd	r25, Y+24	; 0x18
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	40 e8       	ldi	r20, 0x80	; 128
    3494:	5f e3       	ldi	r21, 0x3F	; 63
    3496:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    349a:	88 23       	and	r24, r24
    349c:	2c f4       	brge	.+10     	; 0x34a8 <LCD_SendCMD+0x2e2>
		__ticks = 1;
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9c 8b       	std	Y+20, r25	; 0x14
    34a4:	8b 8b       	std	Y+19, r24	; 0x13
    34a6:	3f c0       	rjmp	.+126    	; 0x3526 <LCD_SendCMD+0x360>
	else if (__tmp > 65535)
    34a8:	6d 89       	ldd	r22, Y+21	; 0x15
    34aa:	7e 89       	ldd	r23, Y+22	; 0x16
    34ac:	8f 89       	ldd	r24, Y+23	; 0x17
    34ae:	98 8d       	ldd	r25, Y+24	; 0x18
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	3f ef       	ldi	r19, 0xFF	; 255
    34b4:	4f e7       	ldi	r20, 0x7F	; 127
    34b6:	57 e4       	ldi	r21, 0x47	; 71
    34b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    34bc:	18 16       	cp	r1, r24
    34be:	4c f5       	brge	.+82     	; 0x3512 <LCD_SendCMD+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c0:	69 8d       	ldd	r22, Y+25	; 0x19
    34c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e2       	ldi	r20, 0x20	; 32
    34ce:	51 e4       	ldi	r21, 0x41	; 65
    34d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	9c 8b       	std	Y+20, r25	; 0x14
    34e6:	8b 8b       	std	Y+19, r24	; 0x13
    34e8:	0f c0       	rjmp	.+30     	; 0x3508 <LCD_SendCMD+0x342>
    34ea:	80 e9       	ldi	r24, 0x90	; 144
    34ec:	91 e0       	ldi	r25, 0x01	; 1
    34ee:	9a 8b       	std	Y+18, r25	; 0x12
    34f0:	89 8b       	std	Y+17, r24	; 0x11
    34f2:	89 89       	ldd	r24, Y+17	; 0x11
    34f4:	9a 89       	ldd	r25, Y+18	; 0x12
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <LCD_SendCMD+0x330>
    34fa:	9a 8b       	std	Y+18, r25	; 0x12
    34fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3500:	9c 89       	ldd	r25, Y+20	; 0x14
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	9c 8b       	std	Y+20, r25	; 0x14
    3506:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3508:	8b 89       	ldd	r24, Y+19	; 0x13
    350a:	9c 89       	ldd	r25, Y+20	; 0x14
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	69 f7       	brne	.-38     	; 0x34ea <LCD_SendCMD+0x324>
    3510:	14 c0       	rjmp	.+40     	; 0x353a <LCD_SendCMD+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3512:	6d 89       	ldd	r22, Y+21	; 0x15
    3514:	7e 89       	ldd	r23, Y+22	; 0x16
    3516:	8f 89       	ldd	r24, Y+23	; 0x17
    3518:	98 8d       	ldd	r25, Y+24	; 0x18
    351a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	9c 8b       	std	Y+20, r25	; 0x14
    3524:	8b 8b       	std	Y+19, r24	; 0x13
    3526:	8b 89       	ldd	r24, Y+19	; 0x13
    3528:	9c 89       	ldd	r25, Y+20	; 0x14
    352a:	98 8b       	std	Y+16, r25	; 0x10
    352c:	8f 87       	std	Y+15, r24	; 0x0f
    352e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3530:	98 89       	ldd	r25, Y+16	; 0x10
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <LCD_SendCMD+0x36c>
    3536:	98 8b       	std	Y+16, r25	; 0x10
    3538:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    353a:	82 e0       	ldi	r24, 0x02	; 2
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	0e 94 a6 11 	call	0x234c	; 0x234c <Dio_WriteChannel>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	a0 e8       	ldi	r26, 0x80	; 128
    3548:	bf e3       	ldi	r27, 0x3F	; 63
    354a:	8b 87       	std	Y+11, r24	; 0x0b
    354c:	9c 87       	std	Y+12, r25	; 0x0c
    354e:	ad 87       	std	Y+13, r26	; 0x0d
    3550:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3552:	6b 85       	ldd	r22, Y+11	; 0x0b
    3554:	7c 85       	ldd	r23, Y+12	; 0x0c
    3556:	8d 85       	ldd	r24, Y+13	; 0x0d
    3558:	9e 85       	ldd	r25, Y+14	; 0x0e
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	4a e7       	ldi	r20, 0x7A	; 122
    3560:	55 e4       	ldi	r21, 0x45	; 69
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8f 83       	std	Y+7, r24	; 0x07
    356c:	98 87       	std	Y+8, r25	; 0x08
    356e:	a9 87       	std	Y+9, r26	; 0x09
    3570:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3572:	6f 81       	ldd	r22, Y+7	; 0x07
    3574:	78 85       	ldd	r23, Y+8	; 0x08
    3576:	89 85       	ldd	r24, Y+9	; 0x09
    3578:	9a 85       	ldd	r25, Y+10	; 0x0a
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e8       	ldi	r20, 0x80	; 128
    3580:	5f e3       	ldi	r21, 0x3F	; 63
    3582:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3586:	88 23       	and	r24, r24
    3588:	2c f4       	brge	.+10     	; 0x3594 <LCD_SendCMD+0x3ce>
		__ticks = 1;
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	8d 83       	std	Y+5, r24	; 0x05
    3592:	3f c0       	rjmp	.+126    	; 0x3612 <LCD_SendCMD+0x44c>
	else if (__tmp > 65535)
    3594:	6f 81       	ldd	r22, Y+7	; 0x07
    3596:	78 85       	ldd	r23, Y+8	; 0x08
    3598:	89 85       	ldd	r24, Y+9	; 0x09
    359a:	9a 85       	ldd	r25, Y+10	; 0x0a
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	3f ef       	ldi	r19, 0xFF	; 255
    35a0:	4f e7       	ldi	r20, 0x7F	; 127
    35a2:	57 e4       	ldi	r21, 0x47	; 71
    35a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35a8:	18 16       	cp	r1, r24
    35aa:	4c f5       	brge	.+82     	; 0x35fe <LCD_SendCMD+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    35b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	40 e2       	ldi	r20, 0x20	; 32
    35ba:	51 e4       	ldi	r21, 0x41	; 65
    35bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	bc 01       	movw	r22, r24
    35c6:	cd 01       	movw	r24, r26
    35c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	9e 83       	std	Y+6, r25	; 0x06
    35d2:	8d 83       	std	Y+5, r24	; 0x05
    35d4:	0f c0       	rjmp	.+30     	; 0x35f4 <LCD_SendCMD+0x42e>
    35d6:	80 e9       	ldi	r24, 0x90	; 144
    35d8:	91 e0       	ldi	r25, 0x01	; 1
    35da:	9c 83       	std	Y+4, r25	; 0x04
    35dc:	8b 83       	std	Y+3, r24	; 0x03
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	9c 81       	ldd	r25, Y+4	; 0x04
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <LCD_SendCMD+0x41c>
    35e6:	9c 83       	std	Y+4, r25	; 0x04
    35e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	9e 83       	std	Y+6, r25	; 0x06
    35f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f4:	8d 81       	ldd	r24, Y+5	; 0x05
    35f6:	9e 81       	ldd	r25, Y+6	; 0x06
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	69 f7       	brne	.-38     	; 0x35d6 <LCD_SendCMD+0x410>
    35fc:	14 c0       	rjmp	.+40     	; 0x3626 <LCD_SendCMD+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3600:	78 85       	ldd	r23, Y+8	; 0x08
    3602:	89 85       	ldd	r24, Y+9	; 0x09
    3604:	9a 85       	ldd	r25, Y+10	; 0x0a
    3606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	9e 83       	std	Y+6, r25	; 0x06
    3610:	8d 83       	std	Y+5, r24	; 0x05
    3612:	8d 81       	ldd	r24, Y+5	; 0x05
    3614:	9e 81       	ldd	r25, Y+6	; 0x06
    3616:	9a 83       	std	Y+2, r25	; 0x02
    3618:	89 83       	std	Y+1, r24	; 0x01
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	9a 81       	ldd	r25, Y+2	; 0x02
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <LCD_SendCMD+0x458>
    3622:	9a 83       	std	Y+2, r25	; 0x02
    3624:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    3626:	e9 96       	adiw	r28, 0x39	; 57
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <LCD_Init>:

// Initializes the LCD module by setting various display and cursor settings
void LCD_Init(void) {
    3638:	0f 93       	push	r16
    363a:	1f 93       	push	r17
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	c6 54       	subi	r28, 0x46	; 70
    3646:	d0 40       	sbci	r29, 0x00	; 0
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	fe 01       	movw	r30, r28
    3654:	ed 5b       	subi	r30, 0xBD	; 189
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	a8 e4       	ldi	r26, 0x48	; 72
    365e:	b2 e4       	ldi	r27, 0x42	; 66
    3660:	80 83       	st	Z, r24
    3662:	91 83       	std	Z+1, r25	; 0x01
    3664:	a2 83       	std	Z+2, r26	; 0x02
    3666:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3668:	8e 01       	movw	r16, r28
    366a:	01 5c       	subi	r16, 0xC1	; 193
    366c:	1f 4f       	sbci	r17, 0xFF	; 255
    366e:	fe 01       	movw	r30, r28
    3670:	ed 5b       	subi	r30, 0xBD	; 189
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	60 81       	ld	r22, Z
    3676:	71 81       	ldd	r23, Z+1	; 0x01
    3678:	82 81       	ldd	r24, Z+2	; 0x02
    367a:	93 81       	ldd	r25, Z+3	; 0x03
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	4a e7       	ldi	r20, 0x7A	; 122
    3682:	55 e4       	ldi	r21, 0x45	; 69
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	f8 01       	movw	r30, r16
    368e:	80 83       	st	Z, r24
    3690:	91 83       	std	Z+1, r25	; 0x01
    3692:	a2 83       	std	Z+2, r26	; 0x02
    3694:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3696:	fe 01       	movw	r30, r28
    3698:	ff 96       	adiw	r30, 0x3f	; 63
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	82 81       	ldd	r24, Z+2	; 0x02
    36a0:	93 81       	ldd	r25, Z+3	; 0x03
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e8       	ldi	r20, 0x80	; 128
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36ae:	88 23       	and	r24, r24
    36b0:	2c f4       	brge	.+10     	; 0x36bc <LCD_Init+0x84>
		__ticks = 1;
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	9e af       	std	Y+62, r25	; 0x3e
    36b8:	8d af       	std	Y+61, r24	; 0x3d
    36ba:	46 c0       	rjmp	.+140    	; 0x3748 <LCD_Init+0x110>
	else if (__tmp > 65535)
    36bc:	fe 01       	movw	r30, r28
    36be:	ff 96       	adiw	r30, 0x3f	; 63
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	3f ef       	ldi	r19, 0xFF	; 255
    36cc:	4f e7       	ldi	r20, 0x7F	; 127
    36ce:	57 e4       	ldi	r21, 0x47	; 71
    36d0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36d4:	18 16       	cp	r1, r24
    36d6:	64 f5       	brge	.+88     	; 0x3730 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d8:	fe 01       	movw	r30, r28
    36da:	ed 5b       	subi	r30, 0xBD	; 189
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	60 81       	ld	r22, Z
    36e0:	71 81       	ldd	r23, Z+1	; 0x01
    36e2:	82 81       	ldd	r24, Z+2	; 0x02
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 e2       	ldi	r20, 0x20	; 32
    36ec:	51 e4       	ldi	r21, 0x41	; 65
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	9e af       	std	Y+62, r25	; 0x3e
    3704:	8d af       	std	Y+61, r24	; 0x3d
    3706:	0f c0       	rjmp	.+30     	; 0x3726 <LCD_Init+0xee>
    3708:	80 e9       	ldi	r24, 0x90	; 144
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	9c af       	std	Y+60, r25	; 0x3c
    370e:	8b af       	std	Y+59, r24	; 0x3b
    3710:	8b ad       	ldd	r24, Y+59	; 0x3b
    3712:	9c ad       	ldd	r25, Y+60	; 0x3c
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <LCD_Init+0xdc>
    3718:	9c af       	std	Y+60, r25	; 0x3c
    371a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371c:	8d ad       	ldd	r24, Y+61	; 0x3d
    371e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	9e af       	std	Y+62, r25	; 0x3e
    3724:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3726:	8d ad       	ldd	r24, Y+61	; 0x3d
    3728:	9e ad       	ldd	r25, Y+62	; 0x3e
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	69 f7       	brne	.-38     	; 0x3708 <LCD_Init+0xd0>
    372e:	16 c0       	rjmp	.+44     	; 0x375c <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3730:	fe 01       	movw	r30, r28
    3732:	ff 96       	adiw	r30, 0x3f	; 63
    3734:	60 81       	ld	r22, Z
    3736:	71 81       	ldd	r23, Z+1	; 0x01
    3738:	82 81       	ldd	r24, Z+2	; 0x02
    373a:	93 81       	ldd	r25, Z+3	; 0x03
    373c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	9e af       	std	Y+62, r25	; 0x3e
    3746:	8d af       	std	Y+61, r24	; 0x3d
    3748:	8d ad       	ldd	r24, Y+61	; 0x3d
    374a:	9e ad       	ldd	r25, Y+62	; 0x3e
    374c:	9a af       	std	Y+58, r25	; 0x3a
    374e:	89 af       	std	Y+57, r24	; 0x39
    3750:	89 ad       	ldd	r24, Y+57	; 0x39
    3752:	9a ad       	ldd	r25, Y+58	; 0x3a
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <LCD_Init+0x11c>
    3758:	9a af       	std	Y+58, r25	; 0x3a
    375a:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(50);  // Wait for the LCD to power up

    // Setting the display mode and cursor settings
    LCD_SendCMD(LCD_CURSOR_HOME);
    375c:	82 e0       	ldi	r24, 0x02	; 2
    375e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    LCD_SendCMD(LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    3762:	88 e2       	ldi	r24, 0x28	; 40
    3764:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	a0 e8       	ldi	r26, 0x80	; 128
    376e:	bf e3       	ldi	r27, 0x3F	; 63
    3770:	8d ab       	std	Y+53, r24	; 0x35
    3772:	9e ab       	std	Y+54, r25	; 0x36
    3774:	af ab       	std	Y+55, r26	; 0x37
    3776:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3778:	6d a9       	ldd	r22, Y+53	; 0x35
    377a:	7e a9       	ldd	r23, Y+54	; 0x36
    377c:	8f a9       	ldd	r24, Y+55	; 0x37
    377e:	98 ad       	ldd	r25, Y+56	; 0x38
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	4a e7       	ldi	r20, 0x7A	; 122
    3786:	55 e4       	ldi	r21, 0x45	; 69
    3788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	89 ab       	std	Y+49, r24	; 0x31
    3792:	9a ab       	std	Y+50, r25	; 0x32
    3794:	ab ab       	std	Y+51, r26	; 0x33
    3796:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3798:	69 a9       	ldd	r22, Y+49	; 0x31
    379a:	7a a9       	ldd	r23, Y+50	; 0x32
    379c:	8b a9       	ldd	r24, Y+51	; 0x33
    379e:	9c a9       	ldd	r25, Y+52	; 0x34
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e8       	ldi	r20, 0x80	; 128
    37a6:	5f e3       	ldi	r21, 0x3F	; 63
    37a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37ac:	88 23       	and	r24, r24
    37ae:	2c f4       	brge	.+10     	; 0x37ba <LCD_Init+0x182>
		__ticks = 1;
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	98 ab       	std	Y+48, r25	; 0x30
    37b6:	8f a7       	std	Y+47, r24	; 0x2f
    37b8:	3f c0       	rjmp	.+126    	; 0x3838 <LCD_Init+0x200>
	else if (__tmp > 65535)
    37ba:	69 a9       	ldd	r22, Y+49	; 0x31
    37bc:	7a a9       	ldd	r23, Y+50	; 0x32
    37be:	8b a9       	ldd	r24, Y+51	; 0x33
    37c0:	9c a9       	ldd	r25, Y+52	; 0x34
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	3f ef       	ldi	r19, 0xFF	; 255
    37c6:	4f e7       	ldi	r20, 0x7F	; 127
    37c8:	57 e4       	ldi	r21, 0x47	; 71
    37ca:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37ce:	18 16       	cp	r1, r24
    37d0:	4c f5       	brge	.+82     	; 0x3824 <LCD_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d2:	6d a9       	ldd	r22, Y+53	; 0x35
    37d4:	7e a9       	ldd	r23, Y+54	; 0x36
    37d6:	8f a9       	ldd	r24, Y+55	; 0x37
    37d8:	98 ad       	ldd	r25, Y+56	; 0x38
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 e2       	ldi	r20, 0x20	; 32
    37e0:	51 e4       	ldi	r21, 0x41	; 65
    37e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	bc 01       	movw	r22, r24
    37ec:	cd 01       	movw	r24, r26
    37ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	98 ab       	std	Y+48, r25	; 0x30
    37f8:	8f a7       	std	Y+47, r24	; 0x2f
    37fa:	0f c0       	rjmp	.+30     	; 0x381a <LCD_Init+0x1e2>
    37fc:	80 e9       	ldi	r24, 0x90	; 144
    37fe:	91 e0       	ldi	r25, 0x01	; 1
    3800:	9e a7       	std	Y+46, r25	; 0x2e
    3802:	8d a7       	std	Y+45, r24	; 0x2d
    3804:	8d a5       	ldd	r24, Y+45	; 0x2d
    3806:	9e a5       	ldd	r25, Y+46	; 0x2e
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <LCD_Init+0x1d0>
    380c:	9e a7       	std	Y+46, r25	; 0x2e
    380e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3810:	8f a5       	ldd	r24, Y+47	; 0x2f
    3812:	98 a9       	ldd	r25, Y+48	; 0x30
    3814:	01 97       	sbiw	r24, 0x01	; 1
    3816:	98 ab       	std	Y+48, r25	; 0x30
    3818:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381a:	8f a5       	ldd	r24, Y+47	; 0x2f
    381c:	98 a9       	ldd	r25, Y+48	; 0x30
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	69 f7       	brne	.-38     	; 0x37fc <LCD_Init+0x1c4>
    3822:	14 c0       	rjmp	.+40     	; 0x384c <LCD_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3824:	69 a9       	ldd	r22, Y+49	; 0x31
    3826:	7a a9       	ldd	r23, Y+50	; 0x32
    3828:	8b a9       	ldd	r24, Y+51	; 0x33
    382a:	9c a9       	ldd	r25, Y+52	; 0x34
    382c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	98 ab       	std	Y+48, r25	; 0x30
    3836:	8f a7       	std	Y+47, r24	; 0x2f
    3838:	8f a5       	ldd	r24, Y+47	; 0x2f
    383a:	98 a9       	ldd	r25, Y+48	; 0x30
    383c:	9c a7       	std	Y+44, r25	; 0x2c
    383e:	8b a7       	std	Y+43, r24	; 0x2b
    3840:	8b a5       	ldd	r24, Y+43	; 0x2b
    3842:	9c a5       	ldd	r25, Y+44	; 0x2c
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	f1 f7       	brne	.-4      	; 0x3844 <LCD_Init+0x20c>
    3848:	9c a7       	std	Y+44, r25	; 0x2c
    384a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);

    LCD_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_ON_BLOCK_CURSOR_ON);
    384c:	8f e0       	ldi	r24, 0x0F	; 15
    384e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	a0 e8       	ldi	r26, 0x80	; 128
    3858:	bf e3       	ldi	r27, 0x3F	; 63
    385a:	8f a3       	std	Y+39, r24	; 0x27
    385c:	98 a7       	std	Y+40, r25	; 0x28
    385e:	a9 a7       	std	Y+41, r26	; 0x29
    3860:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3862:	6f a1       	ldd	r22, Y+39	; 0x27
    3864:	78 a5       	ldd	r23, Y+40	; 0x28
    3866:	89 a5       	ldd	r24, Y+41	; 0x29
    3868:	9a a5       	ldd	r25, Y+42	; 0x2a
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	4a e7       	ldi	r20, 0x7A	; 122
    3870:	55 e4       	ldi	r21, 0x45	; 69
    3872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	8b a3       	std	Y+35, r24	; 0x23
    387c:	9c a3       	std	Y+36, r25	; 0x24
    387e:	ad a3       	std	Y+37, r26	; 0x25
    3880:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3882:	6b a1       	ldd	r22, Y+35	; 0x23
    3884:	7c a1       	ldd	r23, Y+36	; 0x24
    3886:	8d a1       	ldd	r24, Y+37	; 0x25
    3888:	9e a1       	ldd	r25, Y+38	; 0x26
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	40 e8       	ldi	r20, 0x80	; 128
    3890:	5f e3       	ldi	r21, 0x3F	; 63
    3892:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3896:	88 23       	and	r24, r24
    3898:	2c f4       	brge	.+10     	; 0x38a4 <LCD_Init+0x26c>
		__ticks = 1;
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	9a a3       	std	Y+34, r25	; 0x22
    38a0:	89 a3       	std	Y+33, r24	; 0x21
    38a2:	3f c0       	rjmp	.+126    	; 0x3922 <LCD_Init+0x2ea>
	else if (__tmp > 65535)
    38a4:	6b a1       	ldd	r22, Y+35	; 0x23
    38a6:	7c a1       	ldd	r23, Y+36	; 0x24
    38a8:	8d a1       	ldd	r24, Y+37	; 0x25
    38aa:	9e a1       	ldd	r25, Y+38	; 0x26
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	3f ef       	ldi	r19, 0xFF	; 255
    38b0:	4f e7       	ldi	r20, 0x7F	; 127
    38b2:	57 e4       	ldi	r21, 0x47	; 71
    38b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    38b8:	18 16       	cp	r1, r24
    38ba:	4c f5       	brge	.+82     	; 0x390e <LCD_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38bc:	6f a1       	ldd	r22, Y+39	; 0x27
    38be:	78 a5       	ldd	r23, Y+40	; 0x28
    38c0:	89 a5       	ldd	r24, Y+41	; 0x29
    38c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e2       	ldi	r20, 0x20	; 32
    38ca:	51 e4       	ldi	r21, 0x41	; 65
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	bc 01       	movw	r22, r24
    38d6:	cd 01       	movw	r24, r26
    38d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	9a a3       	std	Y+34, r25	; 0x22
    38e2:	89 a3       	std	Y+33, r24	; 0x21
    38e4:	0f c0       	rjmp	.+30     	; 0x3904 <LCD_Init+0x2cc>
    38e6:	80 e9       	ldi	r24, 0x90	; 144
    38e8:	91 e0       	ldi	r25, 0x01	; 1
    38ea:	98 a3       	std	Y+32, r25	; 0x20
    38ec:	8f 8f       	std	Y+31, r24	; 0x1f
    38ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f0:	98 a1       	ldd	r25, Y+32	; 0x20
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	f1 f7       	brne	.-4      	; 0x38f2 <LCD_Init+0x2ba>
    38f6:	98 a3       	std	Y+32, r25	; 0x20
    38f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38fa:	89 a1       	ldd	r24, Y+33	; 0x21
    38fc:	9a a1       	ldd	r25, Y+34	; 0x22
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	9a a3       	std	Y+34, r25	; 0x22
    3902:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3904:	89 a1       	ldd	r24, Y+33	; 0x21
    3906:	9a a1       	ldd	r25, Y+34	; 0x22
    3908:	00 97       	sbiw	r24, 0x00	; 0
    390a:	69 f7       	brne	.-38     	; 0x38e6 <LCD_Init+0x2ae>
    390c:	14 c0       	rjmp	.+40     	; 0x3936 <LCD_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390e:	6b a1       	ldd	r22, Y+35	; 0x23
    3910:	7c a1       	ldd	r23, Y+36	; 0x24
    3912:	8d a1       	ldd	r24, Y+37	; 0x25
    3914:	9e a1       	ldd	r25, Y+38	; 0x26
    3916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	9a a3       	std	Y+34, r25	; 0x22
    3920:	89 a3       	std	Y+33, r24	; 0x21
    3922:	89 a1       	ldd	r24, Y+33	; 0x21
    3924:	9a a1       	ldd	r25, Y+34	; 0x22
    3926:	9e 8f       	std	Y+30, r25	; 0x1e
    3928:	8d 8f       	std	Y+29, r24	; 0x1d
    392a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    392c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    392e:	01 97       	sbiw	r24, 0x01	; 1
    3930:	f1 f7       	brne	.-4      	; 0x392e <LCD_Init+0x2f6>
    3932:	9e 8f       	std	Y+30, r25	; 0x1e
    3934:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    LCD_SendCMD(LCD_CLEAR_COMMAND);
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	a0 e0       	ldi	r26, 0x00	; 0
    3942:	b0 e4       	ldi	r27, 0x40	; 64
    3944:	89 8f       	std	Y+25, r24	; 0x19
    3946:	9a 8f       	std	Y+26, r25	; 0x1a
    3948:	ab 8f       	std	Y+27, r26	; 0x1b
    394a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394c:	69 8d       	ldd	r22, Y+25	; 0x19
    394e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	4a e7       	ldi	r20, 0x7A	; 122
    395a:	55 e4       	ldi	r21, 0x45	; 69
    395c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	8d 8b       	std	Y+21, r24	; 0x15
    3966:	9e 8b       	std	Y+22, r25	; 0x16
    3968:	af 8b       	std	Y+23, r26	; 0x17
    396a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    396c:	6d 89       	ldd	r22, Y+21	; 0x15
    396e:	7e 89       	ldd	r23, Y+22	; 0x16
    3970:	8f 89       	ldd	r24, Y+23	; 0x17
    3972:	98 8d       	ldd	r25, Y+24	; 0x18
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e8       	ldi	r20, 0x80	; 128
    397a:	5f e3       	ldi	r21, 0x3F	; 63
    397c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3980:	88 23       	and	r24, r24
    3982:	2c f4       	brge	.+10     	; 0x398e <LCD_Init+0x356>
		__ticks = 1;
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	9c 8b       	std	Y+20, r25	; 0x14
    398a:	8b 8b       	std	Y+19, r24	; 0x13
    398c:	3f c0       	rjmp	.+126    	; 0x3a0c <LCD_Init+0x3d4>
	else if (__tmp > 65535)
    398e:	6d 89       	ldd	r22, Y+21	; 0x15
    3990:	7e 89       	ldd	r23, Y+22	; 0x16
    3992:	8f 89       	ldd	r24, Y+23	; 0x17
    3994:	98 8d       	ldd	r25, Y+24	; 0x18
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	3f ef       	ldi	r19, 0xFF	; 255
    399a:	4f e7       	ldi	r20, 0x7F	; 127
    399c:	57 e4       	ldi	r21, 0x47	; 71
    399e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39a2:	18 16       	cp	r1, r24
    39a4:	4c f5       	brge	.+82     	; 0x39f8 <LCD_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a6:	69 8d       	ldd	r22, Y+25	; 0x19
    39a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	40 e2       	ldi	r20, 0x20	; 32
    39b4:	51 e4       	ldi	r21, 0x41	; 65
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	bc 01       	movw	r22, r24
    39c0:	cd 01       	movw	r24, r26
    39c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	9c 8b       	std	Y+20, r25	; 0x14
    39cc:	8b 8b       	std	Y+19, r24	; 0x13
    39ce:	0f c0       	rjmp	.+30     	; 0x39ee <LCD_Init+0x3b6>
    39d0:	80 e9       	ldi	r24, 0x90	; 144
    39d2:	91 e0       	ldi	r25, 0x01	; 1
    39d4:	9a 8b       	std	Y+18, r25	; 0x12
    39d6:	89 8b       	std	Y+17, r24	; 0x11
    39d8:	89 89       	ldd	r24, Y+17	; 0x11
    39da:	9a 89       	ldd	r25, Y+18	; 0x12
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <LCD_Init+0x3a4>
    39e0:	9a 8b       	std	Y+18, r25	; 0x12
    39e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e4:	8b 89       	ldd	r24, Y+19	; 0x13
    39e6:	9c 89       	ldd	r25, Y+20	; 0x14
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	9c 8b       	std	Y+20, r25	; 0x14
    39ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ee:	8b 89       	ldd	r24, Y+19	; 0x13
    39f0:	9c 89       	ldd	r25, Y+20	; 0x14
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	69 f7       	brne	.-38     	; 0x39d0 <LCD_Init+0x398>
    39f6:	14 c0       	rjmp	.+40     	; 0x3a20 <LCD_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f8:	6d 89       	ldd	r22, Y+21	; 0x15
    39fa:	7e 89       	ldd	r23, Y+22	; 0x16
    39fc:	8f 89       	ldd	r24, Y+23	; 0x17
    39fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	9c 8b       	std	Y+20, r25	; 0x14
    3a0a:	8b 8b       	std	Y+19, r24	; 0x13
    3a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a10:	98 8b       	std	Y+16, r25	; 0x10
    3a12:	8f 87       	std	Y+15, r24	; 0x0f
    3a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a16:	98 89       	ldd	r25, Y+16	; 0x10
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <LCD_Init+0x3e0>
    3a1c:	98 8b       	std	Y+16, r25	; 0x10
    3a1e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);

    LCD_SendCMD(LCD_ENTRY_MODE_INC_SHIFT_OFF);
    3a20:	86 e0       	ldi	r24, 0x06	; 6
    3a22:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	a0 e8       	ldi	r26, 0x80	; 128
    3a2c:	bf e3       	ldi	r27, 0x3F	; 63
    3a2e:	8b 87       	std	Y+11, r24	; 0x0b
    3a30:	9c 87       	std	Y+12, r25	; 0x0c
    3a32:	ad 87       	std	Y+13, r26	; 0x0d
    3a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	4a e7       	ldi	r20, 0x7A	; 122
    3a44:	55 e4       	ldi	r21, 0x45	; 69
    3a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	8f 83       	std	Y+7, r24	; 0x07
    3a50:	98 87       	std	Y+8, r25	; 0x08
    3a52:	a9 87       	std	Y+9, r26	; 0x09
    3a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a56:	6f 81       	ldd	r22, Y+7	; 0x07
    3a58:	78 85       	ldd	r23, Y+8	; 0x08
    3a5a:	89 85       	ldd	r24, Y+9	; 0x09
    3a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5f e3       	ldi	r21, 0x3F	; 63
    3a66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a6a:	88 23       	and	r24, r24
    3a6c:	2c f4       	brge	.+10     	; 0x3a78 <LCD_Init+0x440>
		__ticks = 1;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
    3a76:	3f c0       	rjmp	.+126    	; 0x3af6 <LCD_Init+0x4be>
	else if (__tmp > 65535)
    3a78:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7a:	78 85       	ldd	r23, Y+8	; 0x08
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	3f ef       	ldi	r19, 0xFF	; 255
    3a84:	4f e7       	ldi	r20, 0x7F	; 127
    3a86:	57 e4       	ldi	r21, 0x47	; 71
    3a88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a8c:	18 16       	cp	r1, r24
    3a8e:	4c f5       	brge	.+82     	; 0x3ae2 <LCD_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e2       	ldi	r20, 0x20	; 32
    3a9e:	51 e4       	ldi	r21, 0x41	; 65
    3aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
    3ab8:	0f c0       	rjmp	.+30     	; 0x3ad8 <LCD_Init+0x4a0>
    3aba:	80 e9       	ldi	r24, 0x90	; 144
    3abc:	91 e0       	ldi	r25, 0x01	; 1
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
    3ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <LCD_Init+0x48e>
    3aca:	9c 83       	std	Y+4, r25	; 0x04
    3acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ace:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	69 f7       	brne	.-38     	; 0x3aba <LCD_Init+0x482>
    3ae0:	14 c0       	rjmp	.+40     	; 0x3b0a <LCD_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae4:	78 85       	ldd	r23, Y+8	; 0x08
    3ae6:	89 85       	ldd	r24, Y+9	; 0x09
    3ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	9e 83       	std	Y+6, r25	; 0x06
    3af4:	8d 83       	std	Y+5, r24	; 0x05
    3af6:	8d 81       	ldd	r24, Y+5	; 0x05
    3af8:	9e 81       	ldd	r25, Y+6	; 0x06
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	9a 81       	ldd	r25, Y+2	; 0x02
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <LCD_Init+0x4ca>
    3b06:	9a 83       	std	Y+2, r25	; 0x02
    3b08:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);

    LCD_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    3b0a:	8c e0       	ldi	r24, 0x0C	; 12
    3b0c:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>

    LCD_SendCMD(LCD_DDRAM_START);  // Set the cursor to the start of the Display Data RAM (DDRAM)
    3b10:	80 e8       	ldi	r24, 0x80	; 128
    3b12:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
}
    3b16:	ca 5b       	subi	r28, 0xBA	; 186
    3b18:	df 4f       	sbci	r29, 0xFF	; 255
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	08 95       	ret

00003b2e <LCD_CLR>:

// Clears the LCD display
void LCD_CLR(void) {
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCMD(0x01);
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    current_pos = 0;
    3b3c:	10 92 14 02 	sts	0x0214, r1
}
    3b40:	cf 91       	pop	r28
    3b42:	df 91       	pop	r29
    3b44:	08 95       	ret

00003b46 <LCD_PutChar>:

// Displays a character on the LCD
void LCD_PutChar(const u8 character) {
    3b46:	df 93       	push	r29
    3b48:	cf 93       	push	r28
    3b4a:	0f 92       	push	r0
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(character);
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_SendData>
    current_pos++;
    3b58:	80 91 14 02 	lds	r24, 0x0214
    3b5c:	8f 5f       	subi	r24, 0xFF	; 255
    3b5e:	80 93 14 02 	sts	0x0214, r24
}
    3b62:	0f 90       	pop	r0
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <LCD_PutString>:

// Displays a text string on the LCD
void LCD_PutString(const u8 *str) {
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <LCD_PutString+0x6>
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	9a 83       	std	Y+2, r25	; 0x02
    3b76:	89 83       	std	Y+1, r24	; 0x01
    3b78:	0a c0       	rjmp	.+20     	; 0x3b8e <LCD_PutString+0x24>
    while (*str) {
        LCD_PutChar(*str);
    3b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b7e:	80 81       	ld	r24, Z
    3b80:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <LCD_PutChar>
        str++;
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	9a 81       	ldd	r25, Y+2	; 0x02
    3b88:	01 96       	adiw	r24, 0x01	; 1
    3b8a:	9a 83       	std	Y+2, r25	; 0x02
    3b8c:	89 83       	std	Y+1, r24	; 0x01
    current_pos++;
}

// Displays a text string on the LCD
void LCD_PutString(const u8 *str) {
    while (*str) {
    3b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b90:	fa 81       	ldd	r31, Y+2	; 0x02
    3b92:	80 81       	ld	r24, Z
    3b94:	88 23       	and	r24, r24
    3b96:	89 f7       	brne	.-30     	; 0x3b7a <LCD_PutString+0x10>
        LCD_PutChar(*str);
        str++;
    }
}
    3b98:	0f 90       	pop	r0
    3b9a:	0f 90       	pop	r0
    3b9c:	cf 91       	pop	r28
    3b9e:	df 91       	pop	r29
    3ba0:	08 95       	ret

00003ba2 <LCD_PutChar_at_X_Y>:

// Displays a character at a specific position on the LCD
void LCD_PutChar_at_X_Y(u8 data, u8 row, u8 col) {
    3ba2:	df 93       	push	r29
    3ba4:	cf 93       	push	r28
    3ba6:	00 d0       	rcall	.+0      	; 0x3ba8 <LCD_PutChar_at_X_Y+0x6>
    3ba8:	0f 92       	push	r0
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	89 83       	std	Y+1, r24	; 0x01
    3bb0:	6a 83       	std	Y+2, r22	; 0x02
    3bb2:	4b 83       	std	Y+3, r20	; 0x03
    LCD_GoTo(row, col);
    3bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb6:	6b 81       	ldd	r22, Y+3	; 0x03
    3bb8:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_GoTo>
    LCD_SendData(data);
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_SendData>
}
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	cf 91       	pop	r28
    3bca:	df 91       	pop	r29
    3bcc:	08 95       	ret

00003bce <LCD_PutString_at_X_Y>:

// Displays a string at a specific position on the LCD
void LCD_PutString_at_X_Y(u8 *data, u8 row, u8 col) {
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	00 d0       	rcall	.+0      	; 0x3bd4 <LCD_PutString_at_X_Y+0x6>
    3bd4:	00 d0       	rcall	.+0      	; 0x3bd6 <LCD_PutString_at_X_Y+0x8>
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	9a 83       	std	Y+2, r25	; 0x02
    3bdc:	89 83       	std	Y+1, r24	; 0x01
    3bde:	6b 83       	std	Y+3, r22	; 0x03
    3be0:	4c 83       	std	Y+4, r20	; 0x04
    LCD_GoTo(row, col);
    3be2:	8b 81       	ldd	r24, Y+3	; 0x03
    3be4:	6c 81       	ldd	r22, Y+4	; 0x04
    3be6:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_GoTo>
    LCD_PutString(data);
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <LCD_PutString>
}
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <LCD_PutInt>:

// Displays an integer value on the LCD
void LCD_PutInt(u32 Number) {
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <LCD_PutInt+0x6>
    3c06:	00 d0       	rcall	.+0      	; 0x3c08 <LCD_PutInt+0x8>
    3c08:	cd b7       	in	r28, 0x3d	; 61
    3c0a:	de b7       	in	r29, 0x3e	; 62
    3c0c:	69 83       	std	Y+1, r22	; 0x01
    3c0e:	7a 83       	std	Y+2, r23	; 0x02
    3c10:	8b 83       	std	Y+3, r24	; 0x03
    3c12:	9c 83       	std	Y+4, r25	; 0x04
	if(Number == 0 )
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	9a 81       	ldd	r25, Y+2	; 0x02
    3c18:	ab 81       	ldd	r26, Y+3	; 0x03
    3c1a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	a1 05       	cpc	r26, r1
    3c20:	b1 05       	cpc	r27, r1
    3c22:	19 f1       	breq	.+70     	; 0x3c6a <LCD_PutInt+0x6a>
	return ;
	else
	LCD_PutInt(Number/10);
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	9a 81       	ldd	r25, Y+2	; 0x02
    3c28:	ab 81       	ldd	r26, Y+3	; 0x03
    3c2a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c2c:	2a e0       	ldi	r18, 0x0A	; 10
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	40 e0       	ldi	r20, 0x00	; 0
    3c32:	50 e0       	ldi	r21, 0x00	; 0
    3c34:	bc 01       	movw	r22, r24
    3c36:	cd 01       	movw	r24, r26
    3c38:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <__udivmodsi4>
    3c3c:	da 01       	movw	r26, r20
    3c3e:	c9 01       	movw	r24, r18
    3c40:	bc 01       	movw	r22, r24
    3c42:	cd 01       	movw	r24, r26
    3c44:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <LCD_PutInt>
	LCD_PutChar((Number%10)+0x30);
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4c:	ab 81       	ldd	r26, Y+3	; 0x03
    3c4e:	bc 81       	ldd	r27, Y+4	; 0x04
    3c50:	2a e0       	ldi	r18, 0x0A	; 10
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	50 e0       	ldi	r21, 0x00	; 0
    3c58:	bc 01       	movw	r22, r24
    3c5a:	cd 01       	movw	r24, r26
    3c5c:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <__udivmodsi4>
    3c60:	dc 01       	movw	r26, r24
    3c62:	cb 01       	movw	r24, r22
    3c64:	80 5d       	subi	r24, 0xD0	; 208
    3c66:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <LCD_PutChar>
}
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <LCD_PutCustomChar>:

// Displays a custom character at a specific row and column on the LCD
void LCD_PutCustomChar(u8 row, u8 col, u8 *CustomCharacter, u8 MemPos) {
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	cd b7       	in	r28, 0x3d	; 61
    3c7e:	de b7       	in	r29, 0x3e	; 62
    3c80:	27 97       	sbiw	r28, 0x07	; 7
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	cd bf       	out	0x3d, r28	; 61
    3c8c:	8b 83       	std	Y+3, r24	; 0x03
    3c8e:	6c 83       	std	Y+4, r22	; 0x04
    3c90:	5e 83       	std	Y+6, r21	; 0x06
    3c92:	4d 83       	std	Y+5, r20	; 0x05
    3c94:	2f 83       	std	Y+7, r18	; 0x07
    LCD_SendCMD(LCD_CGRAM_START + (MemPos * 8));
    3c96:	8f 81       	ldd	r24, Y+7	; 0x07
    3c98:	88 2f       	mov	r24, r24
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	08 96       	adiw	r24, 0x08	; 8
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	88 0f       	add	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    for (int i = 0; i < 8; i++) {
    3cae:	1a 82       	std	Y+2, r1	; 0x02
    3cb0:	19 82       	std	Y+1, r1	; 0x01
    3cb2:	0f c0       	rjmp	.+30     	; 0x3cd2 <LCD_PutCustomChar+0x5a>
        LCD_SendData(CustomCharacter[i]);
    3cb4:	29 81       	ldd	r18, Y+1	; 0x01
    3cb6:	3a 81       	ldd	r19, Y+2	; 0x02
    3cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cba:	9e 81       	ldd	r25, Y+6	; 0x06
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	e2 0f       	add	r30, r18
    3cc0:	f3 1f       	adc	r31, r19
    3cc2:	80 81       	ld	r24, Z
    3cc4:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_SendData>
}

// Displays a custom character at a specific row and column on the LCD
void LCD_PutCustomChar(u8 row, u8 col, u8 *CustomCharacter, u8 MemPos) {
    LCD_SendCMD(LCD_CGRAM_START + (MemPos * 8));
    for (int i = 0; i < 8; i++) {
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ccc:	01 96       	adiw	r24, 0x01	; 1
    3cce:	9a 83       	std	Y+2, r25	; 0x02
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd6:	88 30       	cpi	r24, 0x08	; 8
    3cd8:	91 05       	cpc	r25, r1
    3cda:	64 f3       	brlt	.-40     	; 0x3cb4 <LCD_PutCustomChar+0x3c>
        LCD_SendData(CustomCharacter[i]);
    }
    LCD_PutChar_at_X_Y(MemPos, row, col);
    3cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3cde:	6b 81       	ldd	r22, Y+3	; 0x03
    3ce0:	4c 81       	ldd	r20, Y+4	; 0x04
    3ce2:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <LCD_PutChar_at_X_Y>
}
    3ce6:	27 96       	adiw	r28, 0x07	; 7
    3ce8:	0f b6       	in	r0, 0x3f	; 63
    3cea:	f8 94       	cli
    3cec:	de bf       	out	0x3e, r29	; 62
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	cd bf       	out	0x3d, r28	; 61
    3cf2:	cf 91       	pop	r28
    3cf4:	df 91       	pop	r29
    3cf6:	08 95       	ret

00003cf8 <LCD_GoTo>:

// Moves the cursor to a specified row and column on the LCD
void LCD_GoTo(u8 row, u8 col) {
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <LCD_GoTo+0x6>
    3cfe:	00 d0       	rcall	.+0      	; 0x3d00 <LCD_GoTo+0x8>
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
    3d04:	89 83       	std	Y+1, r24	; 0x01
    3d06:	6a 83       	std	Y+2, r22	; 0x02
    col--;
    3d08:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0a:	81 50       	subi	r24, 0x01	; 1
    3d0c:	8a 83       	std	Y+2, r24	; 0x02
    switch (row) {
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	28 2f       	mov	r18, r24
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	3c 83       	std	Y+4, r19	; 0x04
    3d16:	2b 83       	std	Y+3, r18	; 0x03
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1c:	82 30       	cpi	r24, 0x02	; 2
    3d1e:	91 05       	cpc	r25, r1
    3d20:	d9 f0       	breq	.+54     	; 0x3d58 <LCD_GoTo+0x60>
    3d22:	2b 81       	ldd	r18, Y+3	; 0x03
    3d24:	3c 81       	ldd	r19, Y+4	; 0x04
    3d26:	23 30       	cpi	r18, 0x03	; 3
    3d28:	31 05       	cpc	r19, r1
    3d2a:	34 f4       	brge	.+12     	; 0x3d38 <LCD_GoTo+0x40>
    3d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d30:	81 30       	cpi	r24, 0x01	; 1
    3d32:	91 05       	cpc	r25, r1
    3d34:	61 f0       	breq	.+24     	; 0x3d4e <LCD_GoTo+0x56>
    3d36:	1e c0       	rjmp	.+60     	; 0x3d74 <LCD_GoTo+0x7c>
    3d38:	2b 81       	ldd	r18, Y+3	; 0x03
    3d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d3c:	23 30       	cpi	r18, 0x03	; 3
    3d3e:	31 05       	cpc	r19, r1
    3d40:	81 f0       	breq	.+32     	; 0x3d62 <LCD_GoTo+0x6a>
    3d42:	8b 81       	ldd	r24, Y+3	; 0x03
    3d44:	9c 81       	ldd	r25, Y+4	; 0x04
    3d46:	84 30       	cpi	r24, 0x04	; 4
    3d48:	91 05       	cpc	r25, r1
    3d4a:	81 f0       	breq	.+32     	; 0x3d6c <LCD_GoTo+0x74>
    3d4c:	13 c0       	rjmp	.+38     	; 0x3d74 <LCD_GoTo+0x7c>
        case ROW1:
            LCD_SendCMD(0x80 + col);
    3d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d50:	80 58       	subi	r24, 0x80	; 128
    3d52:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    3d56:	0e c0       	rjmp	.+28     	; 0x3d74 <LCD_GoTo+0x7c>
            break;
        case ROW2://C0
            LCD_SendCMD(0xC0 + col);
    3d58:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5a:	80 54       	subi	r24, 0x40	; 64
    3d5c:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    3d60:	09 c0       	rjmp	.+18     	; 0x3d74 <LCD_GoTo+0x7c>
            break;
        case ROW3:
            LCD_SendCMD(0x94 + col);
    3d62:	8a 81       	ldd	r24, Y+2	; 0x02
    3d64:	8c 56       	subi	r24, 0x6C	; 108
    3d66:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
    3d6a:	04 c0       	rjmp	.+8      	; 0x3d74 <LCD_GoTo+0x7c>
            break;
        case ROW4://D4
            LCD_SendCMD(0xD4 + col);
    3d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6e:	8c 52       	subi	r24, 0x2C	; 44
    3d70:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_SendCMD>
            break;
        default:
            break;
    }
}
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	cf 91       	pop	r28
    3d7e:	df 91       	pop	r29
    3d80:	08 95       	ret

00003d82 <EEPROM_voidInit>:
#include "../../MCAL/TWI/includes/TWI_interface.h"
#include "EEPROM_interface.h"
#include "EEPROM_private.h"
#include "util/delay.h"

void EEPROM_voidInit(void) {
    3d82:	df 93       	push	r29
    3d84:	cf 93       	push	r28
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    // Initialize the I2C (TWI) as a master with a specified slave address
    TWI_voidInitMaster(255);
    3d8a:	8f ef       	ldi	r24, 0xFF	; 255
    3d8c:	0e 94 77 07 	call	0xeee	; 0xeee <TWI_voidInitMaster>
}
    3d90:	cf 91       	pop	r28
    3d92:	df 91       	pop	r29
    3d94:	08 95       	ret

00003d96 <EEPROM_voidWriteByte>:

void EEPROM_voidWriteByte(u16 Copy_u16WordAddress, u8 Copy_u8Data) {
    3d96:	df 93       	push	r29
    3d98:	cf 93       	push	r28
    3d9a:	cd b7       	in	r28, 0x3d	; 61
    3d9c:	de b7       	in	r29, 0x3e	; 62
    3d9e:	62 97       	sbiw	r28, 0x12	; 18
    3da0:	0f b6       	in	r0, 0x3f	; 63
    3da2:	f8 94       	cli
    3da4:	de bf       	out	0x3e, r29	; 62
    3da6:	0f be       	out	0x3f, r0	; 63
    3da8:	cd bf       	out	0x3d, r28	; 61
    3daa:	99 8b       	std	Y+17, r25	; 0x11
    3dac:	88 8b       	std	Y+16, r24	; 0x10
    3dae:	6a 8b       	std	Y+18, r22	; 0x12
    u8 local_u8Address = (Copy_u16WordAddress >> 8) | EEPROM_FIXED_ADDRESS;
    3db0:	88 89       	ldd	r24, Y+16	; 0x10
    3db2:	99 89       	ldd	r25, Y+17	; 0x11
    3db4:	89 2f       	mov	r24, r25
    3db6:	99 27       	eor	r25, r25
    3db8:	80 65       	ori	r24, 0x50	; 80
    3dba:	8f 87       	std	Y+15, r24	; 0x0f
    TWI_voidSendStartCondition();  // Send Start Condition
    3dbc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_voidSendStartCondition>
    TWI_voidSendSlaveAddWithWrite(local_u8Address);  // Send Slave Address with Write Operation
    3dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dc2:	0e 94 02 08 	call	0x1004	; 0x1004 <TWI_voidSendSlaveAddWithWrite>
    TWI_voidWriteMasterDataByte((u8)Copy_u16WordAddress);  // Write Data Byte by Master for Word Address
    3dc6:	88 89       	ldd	r24, Y+16	; 0x10
    3dc8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <TWI_voidWriteMasterDataByte>
    TWI_voidWriteMasterDataByte(Copy_u8Data);  // Write the data byte to EEPROM
    3dcc:	8a 89       	ldd	r24, Y+18	; 0x12
    3dce:	0e 94 6e 08 	call	0x10dc	; 0x10dc <TWI_voidWriteMasterDataByte>
    TWI_voidSendStopCondition();  // Send Stop Condition
    3dd2:	0e 94 ed 07 	call	0xfda	; 0xfda <TWI_voidSendStopCondition>
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	a0 ea       	ldi	r26, 0xA0	; 160
    3ddc:	b0 e4       	ldi	r27, 0x40	; 64
    3dde:	8b 87       	std	Y+11, r24	; 0x0b
    3de0:	9c 87       	std	Y+12, r25	; 0x0c
    3de2:	ad 87       	std	Y+13, r26	; 0x0d
    3de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	4a e7       	ldi	r20, 0x7A	; 122
    3df4:	55 e4       	ldi	r21, 0x45	; 69
    3df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	8f 83       	std	Y+7, r24	; 0x07
    3e00:	98 87       	std	Y+8, r25	; 0x08
    3e02:	a9 87       	std	Y+9, r26	; 0x09
    3e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e06:	6f 81       	ldd	r22, Y+7	; 0x07
    3e08:	78 85       	ldd	r23, Y+8	; 0x08
    3e0a:	89 85       	ldd	r24, Y+9	; 0x09
    3e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e8       	ldi	r20, 0x80	; 128
    3e14:	5f e3       	ldi	r21, 0x3F	; 63
    3e16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e1a:	88 23       	and	r24, r24
    3e1c:	2c f4       	brge	.+10     	; 0x3e28 <EEPROM_voidWriteByte+0x92>
		__ticks = 1;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	9e 83       	std	Y+6, r25	; 0x06
    3e24:	8d 83       	std	Y+5, r24	; 0x05
    3e26:	3f c0       	rjmp	.+126    	; 0x3ea6 <EEPROM_voidWriteByte+0x110>
	else if (__tmp > 65535)
    3e28:	6f 81       	ldd	r22, Y+7	; 0x07
    3e2a:	78 85       	ldd	r23, Y+8	; 0x08
    3e2c:	89 85       	ldd	r24, Y+9	; 0x09
    3e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	3f ef       	ldi	r19, 0xFF	; 255
    3e34:	4f e7       	ldi	r20, 0x7F	; 127
    3e36:	57 e4       	ldi	r21, 0x47	; 71
    3e38:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e3c:	18 16       	cp	r1, r24
    3e3e:	4c f5       	brge	.+82     	; 0x3e92 <EEPROM_voidWriteByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e2       	ldi	r20, 0x20	; 32
    3e4e:	51 e4       	ldi	r21, 0x41	; 65
    3e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	bc 01       	movw	r22, r24
    3e5a:	cd 01       	movw	r24, r26
    3e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e60:	dc 01       	movw	r26, r24
    3e62:	cb 01       	movw	r24, r22
    3e64:	9e 83       	std	Y+6, r25	; 0x06
    3e66:	8d 83       	std	Y+5, r24	; 0x05
    3e68:	0f c0       	rjmp	.+30     	; 0x3e88 <EEPROM_voidWriteByte+0xf2>
    3e6a:	80 e9       	ldi	r24, 0x90	; 144
    3e6c:	91 e0       	ldi	r25, 0x01	; 1
    3e6e:	9c 83       	std	Y+4, r25	; 0x04
    3e70:	8b 83       	std	Y+3, r24	; 0x03
    3e72:	8b 81       	ldd	r24, Y+3	; 0x03
    3e74:	9c 81       	ldd	r25, Y+4	; 0x04
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	f1 f7       	brne	.-4      	; 0x3e76 <EEPROM_voidWriteByte+0xe0>
    3e7a:	9c 83       	std	Y+4, r25	; 0x04
    3e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e80:	9e 81       	ldd	r25, Y+6	; 0x06
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	9e 83       	std	Y+6, r25	; 0x06
    3e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e88:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	69 f7       	brne	.-38     	; 0x3e6a <EEPROM_voidWriteByte+0xd4>
    3e90:	14 c0       	rjmp	.+40     	; 0x3eba <EEPROM_voidWriteByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e92:	6f 81       	ldd	r22, Y+7	; 0x07
    3e94:	78 85       	ldd	r23, Y+8	; 0x08
    3e96:	89 85       	ldd	r24, Y+9	; 0x09
    3e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	9e 83       	std	Y+6, r25	; 0x06
    3ea4:	8d 83       	std	Y+5, r24	; 0x05
    3ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	89 83       	std	Y+1, r24	; 0x01
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	f1 f7       	brne	.-4      	; 0x3eb2 <EEPROM_voidWriteByte+0x11c>
    3eb6:	9a 83       	std	Y+2, r25	; 0x02
    3eb8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);  // Delay for EEPROM write cycle completion
}
    3eba:	62 96       	adiw	r28, 0x12	; 18
    3ebc:	0f b6       	in	r0, 0x3f	; 63
    3ebe:	f8 94       	cli
    3ec0:	de bf       	out	0x3e, r29	; 62
    3ec2:	0f be       	out	0x3f, r0	; 63
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	08 95       	ret

00003ecc <EEPROM_voidWritePage>:

void EEPROM_voidWritePage(u16 Copy_u16WordAddress, u8 *Copy_pu8Array, u8 Copy_arraySize) {
    3ecc:	df 93       	push	r29
    3ece:	cf 93       	push	r28
    3ed0:	cd b7       	in	r28, 0x3d	; 61
    3ed2:	de b7       	in	r29, 0x3e	; 62
    3ed4:	65 97       	sbiw	r28, 0x15	; 21
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	f8 94       	cli
    3eda:	de bf       	out	0x3e, r29	; 62
    3edc:	0f be       	out	0x3f, r0	; 63
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	9a 8b       	std	Y+18, r25	; 0x12
    3ee2:	89 8b       	std	Y+17, r24	; 0x11
    3ee4:	7c 8b       	std	Y+20, r23	; 0x14
    3ee6:	6b 8b       	std	Y+19, r22	; 0x13
    3ee8:	4d 8b       	std	Y+21, r20	; 0x15
    u8 i = 0;
    3eea:	18 8a       	std	Y+16, r1	; 0x10
    u8 local_u8Address = (Copy_u16WordAddress >> 8) | EEPROM_FIXED_ADDRESS;  // Calculate the actual EEPROM address
    3eec:	89 89       	ldd	r24, Y+17	; 0x11
    3eee:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef0:	89 2f       	mov	r24, r25
    3ef2:	99 27       	eor	r25, r25
    3ef4:	80 65       	ori	r24, 0x50	; 80
    3ef6:	8f 87       	std	Y+15, r24	; 0x0f

    TWI_voidSendStartCondition();  // Send Start Condition
    3ef8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_voidSendStartCondition>
    TWI_voidSendSlaveAddWithWrite(local_u8Address);  // Send Slave Address with Write Operation
    3efc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3efe:	0e 94 02 08 	call	0x1004	; 0x1004 <TWI_voidSendSlaveAddWithWrite>

    TWI_voidWriteMasterDataByte((u8)Copy_u16WordAddress);  // Write Data Byte by Master for Word Address
    3f02:	89 89       	ldd	r24, Y+17	; 0x11
    3f04:	0e 94 6e 08 	call	0x10dc	; 0x10dc <TWI_voidWriteMasterDataByte>

    for (i = 0; i < Copy_arraySize; i++) {
    3f08:	18 8a       	std	Y+16, r1	; 0x10
    3f0a:	0e c0       	rjmp	.+28     	; 0x3f28 <EEPROM_voidWritePage+0x5c>
        TWI_voidWriteMasterDataByte(Copy_pu8Array[i]);  // Write Data Byte by Master in a Loop
    3f0c:	88 89       	ldd	r24, Y+16	; 0x10
    3f0e:	28 2f       	mov	r18, r24
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	8b 89       	ldd	r24, Y+19	; 0x13
    3f14:	9c 89       	ldd	r25, Y+20	; 0x14
    3f16:	fc 01       	movw	r30, r24
    3f18:	e2 0f       	add	r30, r18
    3f1a:	f3 1f       	adc	r31, r19
    3f1c:	80 81       	ld	r24, Z
    3f1e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <TWI_voidWriteMasterDataByte>
    TWI_voidSendStartCondition();  // Send Start Condition
    TWI_voidSendSlaveAddWithWrite(local_u8Address);  // Send Slave Address with Write Operation

    TWI_voidWriteMasterDataByte((u8)Copy_u16WordAddress);  // Write Data Byte by Master for Word Address

    for (i = 0; i < Copy_arraySize; i++) {
    3f22:	88 89       	ldd	r24, Y+16	; 0x10
    3f24:	8f 5f       	subi	r24, 0xFF	; 255
    3f26:	88 8b       	std	Y+16, r24	; 0x10
    3f28:	98 89       	ldd	r25, Y+16	; 0x10
    3f2a:	8d 89       	ldd	r24, Y+21	; 0x15
    3f2c:	98 17       	cp	r25, r24
    3f2e:	70 f3       	brcs	.-36     	; 0x3f0c <EEPROM_voidWritePage+0x40>
        TWI_voidWriteMasterDataByte(Copy_pu8Array[i]);  // Write Data Byte by Master in a Loop
    }

    TWI_voidSendStopCondition();  // Send Stop Condition
    3f30:	0e 94 ed 07 	call	0xfda	; 0xfda <TWI_voidSendStopCondition>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	a0 ea       	ldi	r26, 0xA0	; 160
    3f3a:	b0 e4       	ldi	r27, 0x40	; 64
    3f3c:	8b 87       	std	Y+11, r24	; 0x0b
    3f3e:	9c 87       	std	Y+12, r25	; 0x0c
    3f40:	ad 87       	std	Y+13, r26	; 0x0d
    3f42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	4a e7       	ldi	r20, 0x7A	; 122
    3f52:	55 e4       	ldi	r21, 0x45	; 69
    3f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	8f 83       	std	Y+7, r24	; 0x07
    3f5e:	98 87       	std	Y+8, r25	; 0x08
    3f60:	a9 87       	std	Y+9, r26	; 0x09
    3f62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f64:	6f 81       	ldd	r22, Y+7	; 0x07
    3f66:	78 85       	ldd	r23, Y+8	; 0x08
    3f68:	89 85       	ldd	r24, Y+9	; 0x09
    3f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e8       	ldi	r20, 0x80	; 128
    3f72:	5f e3       	ldi	r21, 0x3F	; 63
    3f74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f78:	88 23       	and	r24, r24
    3f7a:	2c f4       	brge	.+10     	; 0x3f86 <EEPROM_voidWritePage+0xba>
		__ticks = 1;
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	9e 83       	std	Y+6, r25	; 0x06
    3f82:	8d 83       	std	Y+5, r24	; 0x05
    3f84:	3f c0       	rjmp	.+126    	; 0x4004 <EEPROM_voidWritePage+0x138>
	else if (__tmp > 65535)
    3f86:	6f 81       	ldd	r22, Y+7	; 0x07
    3f88:	78 85       	ldd	r23, Y+8	; 0x08
    3f8a:	89 85       	ldd	r24, Y+9	; 0x09
    3f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	3f ef       	ldi	r19, 0xFF	; 255
    3f92:	4f e7       	ldi	r20, 0x7F	; 127
    3f94:	57 e4       	ldi	r21, 0x47	; 71
    3f96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f9a:	18 16       	cp	r1, r24
    3f9c:	4c f5       	brge	.+82     	; 0x3ff0 <EEPROM_voidWritePage+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	40 e2       	ldi	r20, 0x20	; 32
    3fac:	51 e4       	ldi	r21, 0x41	; 65
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	cd 01       	movw	r24, r26
    3fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	9e 83       	std	Y+6, r25	; 0x06
    3fc4:	8d 83       	std	Y+5, r24	; 0x05
    3fc6:	0f c0       	rjmp	.+30     	; 0x3fe6 <EEPROM_voidWritePage+0x11a>
    3fc8:	80 e9       	ldi	r24, 0x90	; 144
    3fca:	91 e0       	ldi	r25, 0x01	; 1
    3fcc:	9c 83       	std	Y+4, r25	; 0x04
    3fce:	8b 83       	std	Y+3, r24	; 0x03
    3fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd4:	01 97       	sbiw	r24, 0x01	; 1
    3fd6:	f1 f7       	brne	.-4      	; 0x3fd4 <EEPROM_voidWritePage+0x108>
    3fd8:	9c 83       	std	Y+4, r25	; 0x04
    3fda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fde:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	9e 83       	std	Y+6, r25	; 0x06
    3fe4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fea:	00 97       	sbiw	r24, 0x00	; 0
    3fec:	69 f7       	brne	.-38     	; 0x3fc8 <EEPROM_voidWritePage+0xfc>
    3fee:	14 c0       	rjmp	.+40     	; 0x4018 <EEPROM_voidWritePage+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff2:	78 85       	ldd	r23, Y+8	; 0x08
    3ff4:	89 85       	ldd	r24, Y+9	; 0x09
    3ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	9e 83       	std	Y+6, r25	; 0x06
    4002:	8d 83       	std	Y+5, r24	; 0x05
    4004:	8d 81       	ldd	r24, Y+5	; 0x05
    4006:	9e 81       	ldd	r25, Y+6	; 0x06
    4008:	9a 83       	std	Y+2, r25	; 0x02
    400a:	89 83       	std	Y+1, r24	; 0x01
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	9a 81       	ldd	r25, Y+2	; 0x02
    4010:	01 97       	sbiw	r24, 0x01	; 1
    4012:	f1 f7       	brne	.-4      	; 0x4010 <EEPROM_voidWritePage+0x144>
    4014:	9a 83       	std	Y+2, r25	; 0x02
    4016:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);  // Delay for EEPROM write cycle completion
}
    4018:	65 96       	adiw	r28, 0x15	; 21
    401a:	0f b6       	in	r0, 0x3f	; 63
    401c:	f8 94       	cli
    401e:	de bf       	out	0x3e, r29	; 62
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	cd bf       	out	0x3d, r28	; 61
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	08 95       	ret

0000402a <EEPROM_voidReadByte>:

void EEPROM_voidReadByte(u16 Copy_u16WordAddress, u8 *Copy_pu8RxData) {
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
    4032:	63 97       	sbiw	r28, 0x13	; 19
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	f8 94       	cli
    4038:	de bf       	out	0x3e, r29	; 62
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	cd bf       	out	0x3d, r28	; 61
    403e:	99 8b       	std	Y+17, r25	; 0x11
    4040:	88 8b       	std	Y+16, r24	; 0x10
    4042:	7b 8b       	std	Y+19, r23	; 0x13
    4044:	6a 8b       	std	Y+18, r22	; 0x12
    if (Copy_pu8RxData != NULL) {
    4046:	8a 89       	ldd	r24, Y+18	; 0x12
    4048:	9b 89       	ldd	r25, Y+19	; 0x13
    404a:	00 97       	sbiw	r24, 0x00	; 0
    404c:	09 f4       	brne	.+2      	; 0x4050 <EEPROM_voidReadByte+0x26>
    404e:	8b c0       	rjmp	.+278    	; 0x4166 <EEPROM_voidReadByte+0x13c>
        u8 local_u8Address = (Copy_u16WordAddress >> 8) | EEPROM_FIXED_ADDRESS;  // Calculate the actual EEPROM address
    4050:	88 89       	ldd	r24, Y+16	; 0x10
    4052:	99 89       	ldd	r25, Y+17	; 0x11
    4054:	89 2f       	mov	r24, r25
    4056:	99 27       	eor	r25, r25
    4058:	80 65       	ori	r24, 0x50	; 80
    405a:	8f 87       	std	Y+15, r24	; 0x0f
        TWI_voidSendStartCondition();  // Send Start Condition
    405c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_voidSendStartCondition>
        TWI_voidSendSlaveAddWithWrite(local_u8Address);  // Send Slave Address with Write Operation
    4060:	8f 85       	ldd	r24, Y+15	; 0x0f
    4062:	0e 94 02 08 	call	0x1004	; 0x1004 <TWI_voidSendSlaveAddWithWrite>
        TWI_voidWriteMasterDataByte((u8)Copy_u16WordAddress);  // Write Data Byte by Master for Word Address
    4066:	88 89       	ldd	r24, Y+16	; 0x10
    4068:	0e 94 6e 08 	call	0x10dc	; 0x10dc <TWI_voidWriteMasterDataByte>
        TWI_voidSendRepStartCondition();  // Send Repeated Start Condition
    406c:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_voidSendRepStartCondition>
        TWI_voidSendSlaveAddWithRead(local_u8Address);  // Send Slave Address with Read Operation
    4070:	8f 85       	ldd	r24, Y+15	; 0x0f
    4072:	0e 94 38 08 	call	0x1070	; 0x1070 <TWI_voidSendSlaveAddWithRead>
        TWI_voidReadMasterDataByte_With_NACK(Copy_pu8RxData);  // Read Data Byte by Master with NACK
    4076:	8a 89       	ldd	r24, Y+18	; 0x12
    4078:	9b 89       	ldd	r25, Y+19	; 0x13
    407a:	0e 94 c5 08 	call	0x118a	; 0x118a <TWI_voidReadMasterDataByte_With_NACK>
        TWI_voidSendStopCondition();  // Send Stop Condition
    407e:	0e 94 ed 07 	call	0xfda	; 0xfda <TWI_voidSendStopCondition>
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	a0 ea       	ldi	r26, 0xA0	; 160
    4088:	b0 e4       	ldi	r27, 0x40	; 64
    408a:	8b 87       	std	Y+11, r24	; 0x0b
    408c:	9c 87       	std	Y+12, r25	; 0x0c
    408e:	ad 87       	std	Y+13, r26	; 0x0d
    4090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4092:	6b 85       	ldd	r22, Y+11	; 0x0b
    4094:	7c 85       	ldd	r23, Y+12	; 0x0c
    4096:	8d 85       	ldd	r24, Y+13	; 0x0d
    4098:	9e 85       	ldd	r25, Y+14	; 0x0e
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	4a e7       	ldi	r20, 0x7A	; 122
    40a0:	55 e4       	ldi	r21, 0x45	; 69
    40a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	8f 83       	std	Y+7, r24	; 0x07
    40ac:	98 87       	std	Y+8, r25	; 0x08
    40ae:	a9 87       	std	Y+9, r26	; 0x09
    40b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40b2:	6f 81       	ldd	r22, Y+7	; 0x07
    40b4:	78 85       	ldd	r23, Y+8	; 0x08
    40b6:	89 85       	ldd	r24, Y+9	; 0x09
    40b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e8       	ldi	r20, 0x80	; 128
    40c0:	5f e3       	ldi	r21, 0x3F	; 63
    40c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    40c6:	88 23       	and	r24, r24
    40c8:	2c f4       	brge	.+10     	; 0x40d4 <EEPROM_voidReadByte+0xaa>
		__ticks = 1;
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	9e 83       	std	Y+6, r25	; 0x06
    40d0:	8d 83       	std	Y+5, r24	; 0x05
    40d2:	3f c0       	rjmp	.+126    	; 0x4152 <EEPROM_voidReadByte+0x128>
	else if (__tmp > 65535)
    40d4:	6f 81       	ldd	r22, Y+7	; 0x07
    40d6:	78 85       	ldd	r23, Y+8	; 0x08
    40d8:	89 85       	ldd	r24, Y+9	; 0x09
    40da:	9a 85       	ldd	r25, Y+10	; 0x0a
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	3f ef       	ldi	r19, 0xFF	; 255
    40e0:	4f e7       	ldi	r20, 0x7F	; 127
    40e2:	57 e4       	ldi	r21, 0x47	; 71
    40e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    40e8:	18 16       	cp	r1, r24
    40ea:	4c f5       	brge	.+82     	; 0x413e <EEPROM_voidReadByte+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    40f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e2       	ldi	r20, 0x20	; 32
    40fa:	51 e4       	ldi	r21, 0x41	; 65
    40fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	bc 01       	movw	r22, r24
    4106:	cd 01       	movw	r24, r26
    4108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	9e 83       	std	Y+6, r25	; 0x06
    4112:	8d 83       	std	Y+5, r24	; 0x05
    4114:	0f c0       	rjmp	.+30     	; 0x4134 <EEPROM_voidReadByte+0x10a>
    4116:	80 e9       	ldi	r24, 0x90	; 144
    4118:	91 e0       	ldi	r25, 0x01	; 1
    411a:	9c 83       	std	Y+4, r25	; 0x04
    411c:	8b 83       	std	Y+3, r24	; 0x03
    411e:	8b 81       	ldd	r24, Y+3	; 0x03
    4120:	9c 81       	ldd	r25, Y+4	; 0x04
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	f1 f7       	brne	.-4      	; 0x4122 <EEPROM_voidReadByte+0xf8>
    4126:	9c 83       	std	Y+4, r25	; 0x04
    4128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    412a:	8d 81       	ldd	r24, Y+5	; 0x05
    412c:	9e 81       	ldd	r25, Y+6	; 0x06
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	9e 83       	std	Y+6, r25	; 0x06
    4132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4134:	8d 81       	ldd	r24, Y+5	; 0x05
    4136:	9e 81       	ldd	r25, Y+6	; 0x06
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	69 f7       	brne	.-38     	; 0x4116 <EEPROM_voidReadByte+0xec>
    413c:	14 c0       	rjmp	.+40     	; 0x4166 <EEPROM_voidReadByte+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413e:	6f 81       	ldd	r22, Y+7	; 0x07
    4140:	78 85       	ldd	r23, Y+8	; 0x08
    4142:	89 85       	ldd	r24, Y+9	; 0x09
    4144:	9a 85       	ldd	r25, Y+10	; 0x0a
    4146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	9e 83       	std	Y+6, r25	; 0x06
    4150:	8d 83       	std	Y+5, r24	; 0x05
    4152:	8d 81       	ldd	r24, Y+5	; 0x05
    4154:	9e 81       	ldd	r25, Y+6	; 0x06
    4156:	9a 83       	std	Y+2, r25	; 0x02
    4158:	89 83       	std	Y+1, r24	; 0x01
    415a:	89 81       	ldd	r24, Y+1	; 0x01
    415c:	9a 81       	ldd	r25, Y+2	; 0x02
    415e:	01 97       	sbiw	r24, 0x01	; 1
    4160:	f1 f7       	brne	.-4      	; 0x415e <EEPROM_voidReadByte+0x134>
    4162:	9a 83       	std	Y+2, r25	; 0x02
    4164:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(5);  // Delay for EEPROM read cycle completion
    }
}
    4166:	63 96       	adiw	r28, 0x13	; 19
    4168:	0f b6       	in	r0, 0x3f	; 63
    416a:	f8 94       	cli
    416c:	de bf       	out	0x3e, r29	; 62
    416e:	0f be       	out	0x3f, r0	; 63
    4170:	cd bf       	out	0x3d, r28	; 61
    4172:	cf 91       	pop	r28
    4174:	df 91       	pop	r29
    4176:	08 95       	ret

00004178 <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 Copy_u16WordAddress, u8 *Copy_pu8RxData, u8 Copy_arraySize) {
    4178:	df 93       	push	r29
    417a:	cf 93       	push	r28
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62
    4180:	65 97       	sbiw	r28, 0x15	; 21
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	f8 94       	cli
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	cd bf       	out	0x3d, r28	; 61
    418c:	9a 8b       	std	Y+18, r25	; 0x12
    418e:	89 8b       	std	Y+17, r24	; 0x11
    4190:	7c 8b       	std	Y+20, r23	; 0x14
    4192:	6b 8b       	std	Y+19, r22	; 0x13
    4194:	4d 8b       	std	Y+21, r20	; 0x15
    if (Copy_pu8RxData != NULL) {
    4196:	8b 89       	ldd	r24, Y+19	; 0x13
    4198:	9c 89       	ldd	r25, Y+20	; 0x14
    419a:	00 97       	sbiw	r24, 0x00	; 0
    419c:	09 f4       	brne	.+2      	; 0x41a0 <EEPROM_voidSequentialRead+0x28>
    419e:	ac c0       	rjmp	.+344    	; 0x42f8 <EEPROM_voidSequentialRead+0x180>
        u8 i = 0;
    41a0:	18 8a       	std	Y+16, r1	; 0x10
        u8 local_u8Address = (Copy_u16WordAddress >> 8) | EEPROM_FIXED_ADDRESS;  // Calculate the actual EEPROM address
    41a2:	89 89       	ldd	r24, Y+17	; 0x11
    41a4:	9a 89       	ldd	r25, Y+18	; 0x12
    41a6:	89 2f       	mov	r24, r25
    41a8:	99 27       	eor	r25, r25
    41aa:	80 65       	ori	r24, 0x50	; 80
    41ac:	8f 87       	std	Y+15, r24	; 0x0f
        TWI_voidSendStartCondition();  // Send Start Condition
    41ae:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_voidSendStartCondition>
        TWI_voidSendSlaveAddWithWrite(local_u8Address);  // Send Slave Address with Write Operation
    41b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b4:	0e 94 02 08 	call	0x1004	; 0x1004 <TWI_voidSendSlaveAddWithWrite>
        TWI_voidWriteMasterDataByte((u8)Copy_u16WordAddress);  // Write Data Byte by Master for Word Address
    41b8:	89 89       	ldd	r24, Y+17	; 0x11
    41ba:	0e 94 6e 08 	call	0x10dc	; 0x10dc <TWI_voidWriteMasterDataByte>
        TWI_voidSendRepStartCondition();  // Send Repeated Start Condition
    41be:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_voidSendRepStartCondition>
        TWI_voidSendSlaveAddWithRead(local_u8Address);  // Send Slave Address with Read Operation
    41c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c4:	0e 94 38 08 	call	0x1070	; 0x1070 <TWI_voidSendSlaveAddWithRead>
        for (i = 0; i < Copy_arraySize - 1; i++) {
    41c8:	18 8a       	std	Y+16, r1	; 0x10
    41ca:	0c c0       	rjmp	.+24     	; 0x41e4 <EEPROM_voidSequentialRead+0x6c>
            TWI_voidReadMasterDataByte_With_ACK(Copy_pu8RxData + i);  // Read Data Byte by Master with ACK
    41cc:	88 89       	ldd	r24, Y+16	; 0x10
    41ce:	28 2f       	mov	r18, r24
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	8b 89       	ldd	r24, Y+19	; 0x13
    41d4:	9c 89       	ldd	r25, Y+20	; 0x14
    41d6:	82 0f       	add	r24, r18
    41d8:	93 1f       	adc	r25, r19
    41da:	0e 94 92 08 	call	0x1124	; 0x1124 <TWI_voidReadMasterDataByte_With_ACK>
        TWI_voidSendStartCondition();  // Send Start Condition
        TWI_voidSendSlaveAddWithWrite(local_u8Address);  // Send Slave Address with Write Operation
        TWI_voidWriteMasterDataByte((u8)Copy_u16WordAddress);  // Write Data Byte by Master for Word Address
        TWI_voidSendRepStartCondition();  // Send Repeated Start Condition
        TWI_voidSendSlaveAddWithRead(local_u8Address);  // Send Slave Address with Read Operation
        for (i = 0; i < Copy_arraySize - 1; i++) {
    41de:	88 89       	ldd	r24, Y+16	; 0x10
    41e0:	8f 5f       	subi	r24, 0xFF	; 255
    41e2:	88 8b       	std	Y+16, r24	; 0x10
    41e4:	88 89       	ldd	r24, Y+16	; 0x10
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	8d 89       	ldd	r24, Y+21	; 0x15
    41ec:	88 2f       	mov	r24, r24
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	01 97       	sbiw	r24, 0x01	; 1
    41f2:	28 17       	cp	r18, r24
    41f4:	39 07       	cpc	r19, r25
    41f6:	54 f3       	brlt	.-44     	; 0x41cc <EEPROM_voidSequentialRead+0x54>
            TWI_voidReadMasterDataByte_With_ACK(Copy_pu8RxData + i);  // Read Data Byte by Master with ACK
        }
        TWI_voidReadMasterDataByte_With_NACK(&Copy_pu8RxData[Copy_arraySize - 1]);  // Read Data Byte by Master with NACK
    41f8:	8d 89       	ldd	r24, Y+21	; 0x15
    41fa:	88 2f       	mov	r24, r24
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	9c 01       	movw	r18, r24
    4200:	21 50       	subi	r18, 0x01	; 1
    4202:	30 40       	sbci	r19, 0x00	; 0
    4204:	8b 89       	ldd	r24, Y+19	; 0x13
    4206:	9c 89       	ldd	r25, Y+20	; 0x14
    4208:	82 0f       	add	r24, r18
    420a:	93 1f       	adc	r25, r19
    420c:	0e 94 c5 08 	call	0x118a	; 0x118a <TWI_voidReadMasterDataByte_With_NACK>
        TWI_voidSendStopCondition();  // Send Stop Condition
    4210:	0e 94 ed 07 	call	0xfda	; 0xfda <TWI_voidSendStopCondition>
    4214:	80 e0       	ldi	r24, 0x00	; 0
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	a0 ea       	ldi	r26, 0xA0	; 160
    421a:	b0 e4       	ldi	r27, 0x40	; 64
    421c:	8b 87       	std	Y+11, r24	; 0x0b
    421e:	9c 87       	std	Y+12, r25	; 0x0c
    4220:	ad 87       	std	Y+13, r26	; 0x0d
    4222:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4224:	6b 85       	ldd	r22, Y+11	; 0x0b
    4226:	7c 85       	ldd	r23, Y+12	; 0x0c
    4228:	8d 85       	ldd	r24, Y+13	; 0x0d
    422a:	9e 85       	ldd	r25, Y+14	; 0x0e
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	4a e7       	ldi	r20, 0x7A	; 122
    4232:	55 e4       	ldi	r21, 0x45	; 69
    4234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	8f 83       	std	Y+7, r24	; 0x07
    423e:	98 87       	std	Y+8, r25	; 0x08
    4240:	a9 87       	std	Y+9, r26	; 0x09
    4242:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4244:	6f 81       	ldd	r22, Y+7	; 0x07
    4246:	78 85       	ldd	r23, Y+8	; 0x08
    4248:	89 85       	ldd	r24, Y+9	; 0x09
    424a:	9a 85       	ldd	r25, Y+10	; 0x0a
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	40 e8       	ldi	r20, 0x80	; 128
    4252:	5f e3       	ldi	r21, 0x3F	; 63
    4254:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4258:	88 23       	and	r24, r24
    425a:	2c f4       	brge	.+10     	; 0x4266 <EEPROM_voidSequentialRead+0xee>
		__ticks = 1;
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	9e 83       	std	Y+6, r25	; 0x06
    4262:	8d 83       	std	Y+5, r24	; 0x05
    4264:	3f c0       	rjmp	.+126    	; 0x42e4 <EEPROM_voidSequentialRead+0x16c>
	else if (__tmp > 65535)
    4266:	6f 81       	ldd	r22, Y+7	; 0x07
    4268:	78 85       	ldd	r23, Y+8	; 0x08
    426a:	89 85       	ldd	r24, Y+9	; 0x09
    426c:	9a 85       	ldd	r25, Y+10	; 0x0a
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	3f ef       	ldi	r19, 0xFF	; 255
    4272:	4f e7       	ldi	r20, 0x7F	; 127
    4274:	57 e4       	ldi	r21, 0x47	; 71
    4276:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    427a:	18 16       	cp	r1, r24
    427c:	4c f5       	brge	.+82     	; 0x42d0 <EEPROM_voidSequentialRead+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    427e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4280:	7c 85       	ldd	r23, Y+12	; 0x0c
    4282:	8d 85       	ldd	r24, Y+13	; 0x0d
    4284:	9e 85       	ldd	r25, Y+14	; 0x0e
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	40 e2       	ldi	r20, 0x20	; 32
    428c:	51 e4       	ldi	r21, 0x41	; 65
    428e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	bc 01       	movw	r22, r24
    4298:	cd 01       	movw	r24, r26
    429a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	9e 83       	std	Y+6, r25	; 0x06
    42a4:	8d 83       	std	Y+5, r24	; 0x05
    42a6:	0f c0       	rjmp	.+30     	; 0x42c6 <EEPROM_voidSequentialRead+0x14e>
    42a8:	80 e9       	ldi	r24, 0x90	; 144
    42aa:	91 e0       	ldi	r25, 0x01	; 1
    42ac:	9c 83       	std	Y+4, r25	; 0x04
    42ae:	8b 83       	std	Y+3, r24	; 0x03
    42b0:	8b 81       	ldd	r24, Y+3	; 0x03
    42b2:	9c 81       	ldd	r25, Y+4	; 0x04
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	f1 f7       	brne	.-4      	; 0x42b4 <EEPROM_voidSequentialRead+0x13c>
    42b8:	9c 83       	std	Y+4, r25	; 0x04
    42ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42bc:	8d 81       	ldd	r24, Y+5	; 0x05
    42be:	9e 81       	ldd	r25, Y+6	; 0x06
    42c0:	01 97       	sbiw	r24, 0x01	; 1
    42c2:	9e 83       	std	Y+6, r25	; 0x06
    42c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42c6:	8d 81       	ldd	r24, Y+5	; 0x05
    42c8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ca:	00 97       	sbiw	r24, 0x00	; 0
    42cc:	69 f7       	brne	.-38     	; 0x42a8 <EEPROM_voidSequentialRead+0x130>
    42ce:	14 c0       	rjmp	.+40     	; 0x42f8 <EEPROM_voidSequentialRead+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42d0:	6f 81       	ldd	r22, Y+7	; 0x07
    42d2:	78 85       	ldd	r23, Y+8	; 0x08
    42d4:	89 85       	ldd	r24, Y+9	; 0x09
    42d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	9e 83       	std	Y+6, r25	; 0x06
    42e2:	8d 83       	std	Y+5, r24	; 0x05
    42e4:	8d 81       	ldd	r24, Y+5	; 0x05
    42e6:	9e 81       	ldd	r25, Y+6	; 0x06
    42e8:	9a 83       	std	Y+2, r25	; 0x02
    42ea:	89 83       	std	Y+1, r24	; 0x01
    42ec:	89 81       	ldd	r24, Y+1	; 0x01
    42ee:	9a 81       	ldd	r25, Y+2	; 0x02
    42f0:	01 97       	sbiw	r24, 0x01	; 1
    42f2:	f1 f7       	brne	.-4      	; 0x42f0 <EEPROM_voidSequentialRead+0x178>
    42f4:	9a 83       	std	Y+2, r25	; 0x02
    42f6:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(5);  // Delay for EEPROM read cycle completion
    }
}
    42f8:	65 96       	adiw	r28, 0x15	; 21
    42fa:	0f b6       	in	r0, 0x3f	; 63
    42fc:	f8 94       	cli
    42fe:	de bf       	out	0x3e, r29	; 62
    4300:	0f be       	out	0x3f, r0	; 63
    4302:	cd bf       	out	0x3d, r28	; 61
    4304:	cf 91       	pop	r28
    4306:	df 91       	pop	r29
    4308:	08 95       	ret

0000430a <main>:
#include "HAL/LCD/LCD.h"
#include "string.h"

#define main1 main

int main1() {
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	cd b7       	in	r28, 0x3d	; 61
    4310:	de b7       	in	r29, 0x3e	; 62
    4312:	62 97       	sbiw	r28, 0x12	; 18
    4314:	0f b6       	in	r0, 0x3f	; 63
    4316:	f8 94       	cli
    4318:	de bf       	out	0x3e, r29	; 62
    431a:	0f be       	out	0x3f, r0	; 63
    431c:	cd bf       	out	0x3d, r28	; 61
    // Initialize ports and LCD
    Port_Init(pin_cfg);
    431e:	87 e8       	ldi	r24, 0x87	; 135
    4320:	91 e0       	ldi	r25, 0x01	; 1
    4322:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Port_Init>
    LCD_Init();
    4326:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_Init>
    EEPROM_voidInit();
    432a:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <EEPROM_voidInit>

    // Define variables
    u16 localcal_data;
    char name[] = { '1', '2', '3', '4', '5' };
    432e:	ce 01       	movw	r24, r28
    4330:	03 96       	adiw	r24, 0x03	; 3
    4332:	9f 87       	std	Y+15, r25	; 0x0f
    4334:	8e 87       	std	Y+14, r24	; 0x0e
    4336:	ea ee       	ldi	r30, 0xEA	; 234
    4338:	f1 e0       	ldi	r31, 0x01	; 1
    433a:	f9 8b       	std	Y+17, r31	; 0x11
    433c:	e8 8b       	std	Y+16, r30	; 0x10
    433e:	f5 e0       	ldi	r31, 0x05	; 5
    4340:	fa 8b       	std	Y+18, r31	; 0x12
    4342:	e8 89       	ldd	r30, Y+16	; 0x10
    4344:	f9 89       	ldd	r31, Y+17	; 0x11
    4346:	00 80       	ld	r0, Z
    4348:	88 89       	ldd	r24, Y+16	; 0x10
    434a:	99 89       	ldd	r25, Y+17	; 0x11
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	99 8b       	std	Y+17, r25	; 0x11
    4350:	88 8b       	std	Y+16, r24	; 0x10
    4352:	ee 85       	ldd	r30, Y+14	; 0x0e
    4354:	ff 85       	ldd	r31, Y+15	; 0x0f
    4356:	00 82       	st	Z, r0
    4358:	8e 85       	ldd	r24, Y+14	; 0x0e
    435a:	9f 85       	ldd	r25, Y+15	; 0x0f
    435c:	01 96       	adiw	r24, 0x01	; 1
    435e:	9f 87       	std	Y+15, r25	; 0x0f
    4360:	8e 87       	std	Y+14, r24	; 0x0e
    4362:	9a 89       	ldd	r25, Y+18	; 0x12
    4364:	91 50       	subi	r25, 0x01	; 1
    4366:	9a 8b       	std	Y+18, r25	; 0x12
    4368:	ea 89       	ldd	r30, Y+18	; 0x12
    436a:	ee 23       	and	r30, r30
    436c:	51 f7       	brne	.-44     	; 0x4342 <main+0x38>
    char name2[5];
    char na = 'N';
    436e:	8e e4       	ldi	r24, 0x4E	; 78
    4370:	8d 87       	std	Y+13, r24	; 0x0d

    // Write data to an EEPROM page
    EEPROM_voidWritePage(0x50, name, 5); // Write '12345' to EEPROM address 0x50
    4372:	9e 01       	movw	r18, r28
    4374:	2d 5f       	subi	r18, 0xFD	; 253
    4376:	3f 4f       	sbci	r19, 0xFF	; 255
    4378:	80 e5       	ldi	r24, 0x50	; 80
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	b9 01       	movw	r22, r18
    437e:	45 e0       	ldi	r20, 0x05	; 5
    4380:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <EEPROM_voidWritePage>

    // Display the content of the EEPROM on an LCD
    LCD_PutString("Read second byte: ");
    4384:	80 e6       	ldi	r24, 0x60	; 96
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <LCD_PutString>
    EEPROM_voidReadByte(0x50 + 1, &na); // Read the second byte at address 0x51
    438c:	9e 01       	movw	r18, r28
    438e:	23 5f       	subi	r18, 0xF3	; 243
    4390:	3f 4f       	sbci	r19, 0xFF	; 255
    4392:	81 e5       	ldi	r24, 0x51	; 81
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	b9 01       	movw	r22, r18
    4398:	0e 94 15 20 	call	0x402a	; 0x402a <EEPROM_voidReadByte>
    LCD_PutChar(na);
    439c:	8d 85       	ldd	r24, Y+13	; 0x0d
    439e:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <LCD_PutChar>

    LCD_GoTo(2, 1);
    43a2:	82 e0       	ldi	r24, 0x02	; 2
    43a4:	61 e0       	ldi	r22, 0x01	; 1
    43a6:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_GoTo>
    LCD_PutString("Read Page: ");
    43aa:	83 e7       	ldi	r24, 0x73	; 115
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <LCD_PutString>
    EEPROM_voidSequentialRead(0x50, name2, 5); // Read a page of data starting at address 0x50
    43b2:	9e 01       	movw	r18, r28
    43b4:	28 5f       	subi	r18, 0xF8	; 248
    43b6:	3f 4f       	sbci	r19, 0xFF	; 255
    43b8:	80 e5       	ldi	r24, 0x50	; 80
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	b9 01       	movw	r22, r18
    43be:	45 e0       	ldi	r20, 0x05	; 5
    43c0:	0e 94 bc 20 	call	0x4178	; 0x4178 <EEPROM_voidSequentialRead>
    name2[4] = '\0'; // Null-terminate the string
    43c4:	1c 86       	std	Y+12, r1	; 0x0c
    LCD_PutString(name2);
    43c6:	ce 01       	movw	r24, r28
    43c8:	08 96       	adiw	r24, 0x08	; 8
    43ca:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <LCD_PutString>
    43ce:	ff cf       	rjmp	.-2      	; 0x43ce <main+0xc4>

000043d0 <__udivmodhi4>:
    43d0:	aa 1b       	sub	r26, r26
    43d2:	bb 1b       	sub	r27, r27
    43d4:	51 e1       	ldi	r21, 0x11	; 17
    43d6:	07 c0       	rjmp	.+14     	; 0x43e6 <__udivmodhi4_ep>

000043d8 <__udivmodhi4_loop>:
    43d8:	aa 1f       	adc	r26, r26
    43da:	bb 1f       	adc	r27, r27
    43dc:	a6 17       	cp	r26, r22
    43de:	b7 07       	cpc	r27, r23
    43e0:	10 f0       	brcs	.+4      	; 0x43e6 <__udivmodhi4_ep>
    43e2:	a6 1b       	sub	r26, r22
    43e4:	b7 0b       	sbc	r27, r23

000043e6 <__udivmodhi4_ep>:
    43e6:	88 1f       	adc	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	5a 95       	dec	r21
    43ec:	a9 f7       	brne	.-22     	; 0x43d8 <__udivmodhi4_loop>
    43ee:	80 95       	com	r24
    43f0:	90 95       	com	r25
    43f2:	bc 01       	movw	r22, r24
    43f4:	cd 01       	movw	r24, r26
    43f6:	08 95       	ret

000043f8 <__udivmodsi4>:
    43f8:	a1 e2       	ldi	r26, 0x21	; 33
    43fa:	1a 2e       	mov	r1, r26
    43fc:	aa 1b       	sub	r26, r26
    43fe:	bb 1b       	sub	r27, r27
    4400:	fd 01       	movw	r30, r26
    4402:	0d c0       	rjmp	.+26     	; 0x441e <__udivmodsi4_ep>

00004404 <__udivmodsi4_loop>:
    4404:	aa 1f       	adc	r26, r26
    4406:	bb 1f       	adc	r27, r27
    4408:	ee 1f       	adc	r30, r30
    440a:	ff 1f       	adc	r31, r31
    440c:	a2 17       	cp	r26, r18
    440e:	b3 07       	cpc	r27, r19
    4410:	e4 07       	cpc	r30, r20
    4412:	f5 07       	cpc	r31, r21
    4414:	20 f0       	brcs	.+8      	; 0x441e <__udivmodsi4_ep>
    4416:	a2 1b       	sub	r26, r18
    4418:	b3 0b       	sbc	r27, r19
    441a:	e4 0b       	sbc	r30, r20
    441c:	f5 0b       	sbc	r31, r21

0000441e <__udivmodsi4_ep>:
    441e:	66 1f       	adc	r22, r22
    4420:	77 1f       	adc	r23, r23
    4422:	88 1f       	adc	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	1a 94       	dec	r1
    4428:	69 f7       	brne	.-38     	; 0x4404 <__udivmodsi4_loop>
    442a:	60 95       	com	r22
    442c:	70 95       	com	r23
    442e:	80 95       	com	r24
    4430:	90 95       	com	r25
    4432:	9b 01       	movw	r18, r22
    4434:	ac 01       	movw	r20, r24
    4436:	bd 01       	movw	r22, r26
    4438:	cf 01       	movw	r24, r30
    443a:	08 95       	ret

0000443c <__prologue_saves__>:
    443c:	2f 92       	push	r2
    443e:	3f 92       	push	r3
    4440:	4f 92       	push	r4
    4442:	5f 92       	push	r5
    4444:	6f 92       	push	r6
    4446:	7f 92       	push	r7
    4448:	8f 92       	push	r8
    444a:	9f 92       	push	r9
    444c:	af 92       	push	r10
    444e:	bf 92       	push	r11
    4450:	cf 92       	push	r12
    4452:	df 92       	push	r13
    4454:	ef 92       	push	r14
    4456:	ff 92       	push	r15
    4458:	0f 93       	push	r16
    445a:	1f 93       	push	r17
    445c:	cf 93       	push	r28
    445e:	df 93       	push	r29
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	ca 1b       	sub	r28, r26
    4466:	db 0b       	sbc	r29, r27
    4468:	0f b6       	in	r0, 0x3f	; 63
    446a:	f8 94       	cli
    446c:	de bf       	out	0x3e, r29	; 62
    446e:	0f be       	out	0x3f, r0	; 63
    4470:	cd bf       	out	0x3d, r28	; 61
    4472:	09 94       	ijmp

00004474 <__epilogue_restores__>:
    4474:	2a 88       	ldd	r2, Y+18	; 0x12
    4476:	39 88       	ldd	r3, Y+17	; 0x11
    4478:	48 88       	ldd	r4, Y+16	; 0x10
    447a:	5f 84       	ldd	r5, Y+15	; 0x0f
    447c:	6e 84       	ldd	r6, Y+14	; 0x0e
    447e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4480:	8c 84       	ldd	r8, Y+12	; 0x0c
    4482:	9b 84       	ldd	r9, Y+11	; 0x0b
    4484:	aa 84       	ldd	r10, Y+10	; 0x0a
    4486:	b9 84       	ldd	r11, Y+9	; 0x09
    4488:	c8 84       	ldd	r12, Y+8	; 0x08
    448a:	df 80       	ldd	r13, Y+7	; 0x07
    448c:	ee 80       	ldd	r14, Y+6	; 0x06
    448e:	fd 80       	ldd	r15, Y+5	; 0x05
    4490:	0c 81       	ldd	r16, Y+4	; 0x04
    4492:	1b 81       	ldd	r17, Y+3	; 0x03
    4494:	aa 81       	ldd	r26, Y+2	; 0x02
    4496:	b9 81       	ldd	r27, Y+1	; 0x01
    4498:	ce 0f       	add	r28, r30
    449a:	d1 1d       	adc	r29, r1
    449c:	0f b6       	in	r0, 0x3f	; 63
    449e:	f8 94       	cli
    44a0:	de bf       	out	0x3e, r29	; 62
    44a2:	0f be       	out	0x3f, r0	; 63
    44a4:	cd bf       	out	0x3d, r28	; 61
    44a6:	ed 01       	movw	r28, r26
    44a8:	08 95       	ret

000044aa <_exit>:
    44aa:	f8 94       	cli

000044ac <__stop_program>:
    44ac:	ff cf       	rjmp	.-2      	; 0x44ac <__stop_program>
