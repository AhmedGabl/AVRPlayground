
ADAS_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d2  00800060  000056fe  00005792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800232  00800232  00005964  2**0
                  ALLOC
  3 .stab         00004f50  00000000  00000000  00005964  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028bd  00000000  00000000  0000a8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000d171  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  0000d351  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  0000d57f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000fe88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  000114c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00012840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  00012a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  00012d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001372c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__vector_1>
       8:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__vector_2>
       c:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_3>
      10:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_4>
      14:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_10>
      2c:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__vector_11>
      30:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__vector_12>
      34:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 35       	cpi	r26, 0x5A	; 90
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 22 	call	0x450a	; 0x450a <main>
      8a:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 20 2b 	jmp	0x5640	; 0x5640 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ec       	ldi	r26, 0xC6	; 198
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3c 2b 	jmp	0x5678	; 0x5678 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 20 2b 	jmp	0x5640	; 0x5640 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ec       	ldi	r24, 0xC6	; 198
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3c 2b 	jmp	0x5678	; 0x5678 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 28 2b 	jmp	0x5650	; 0x5650 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ec       	ldi	r22, 0xC6	; 198
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 30 2b 	jmp	0x5660	; 0x5660 <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 4c 2b 	jmp	0x5698	; 0x5698 <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 28 2b 	jmp	0x5650	; 0x5650 <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e2 53       	subi	r30, 0x32	; 50
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <UART_Init>:
static void(*UART_RX_Fptr)(u8 RXdata)=NULL;
//static void(*UART_TX_Fptr)(void)=NULL;


void UART_Init(void)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	//baud rate 9600
	UBRRL= (1000000/(2*((BAUDRATE))))-1;
     ef6:	e9 e2       	ldi	r30, 0x29	; 41
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	83 e3       	ldi	r24, 0x33	; 51
     efc:	80 83       	st	Z, r24

	//normal speed
	CLR_BIT(UCSRA,U2X);
     efe:	ab e2       	ldi	r26, 0x2B	; 43
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	eb e2       	ldi	r30, 0x2B	; 43
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	8c 93       	st	X, r24


	//frame (stop ,data ,parity) 1 STOP NO PARITY 8 DATA

	// ENABLE RX TX
	SET_BIT(UCSRB,RXEN);
     f0c:	aa e2       	ldi	r26, 0x2A	; 42
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ea e2       	ldi	r30, 0x2A	; 42
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 61       	ori	r24, 0x10	; 16
     f18:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     f1a:	aa e2       	ldi	r26, 0x2A	; 42
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e2       	ldi	r30, 0x2A	; 42
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 60       	ori	r24, 0x08	; 8
     f26:	8c 93       	st	X, r24
}
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <UART_Send>:

void UART_Send(u8 data)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA,UDRE));
     f3a:	eb e2       	ldi	r30, 0x2B	; 43
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	82 95       	swap	r24
     f42:	86 95       	lsr	r24
     f44:	87 70       	andi	r24, 0x07	; 7
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	81 70       	andi	r24, 0x01	; 1
     f4c:	90 70       	andi	r25, 0x00	; 0
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	a1 f3       	breq	.-24     	; 0xf3a <UART_Send+0xc>
	UDR=data;
     f52:	ec e2       	ldi	r30, 0x2C	; 44
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	80 83       	st	Z, r24
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <UART_SendNoBlock>:

void UART_SendNoBlock(u8 data)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
     f6e:	ec e2       	ldi	r30, 0x2C	; 44
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	80 83       	st	Z, r24
}
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <UART_ReceiveNoBlock>:

u8 UART_ReceiveNoBlock(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     f86:	ec e2       	ldi	r30, 0x2C	; 44
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <UART_Receive>:




u8 UART_Receive(void)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC));
     f9a:	eb e2       	ldi	r30, 0x2B	; 43
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 23       	and	r24, r24
     fa2:	dc f7       	brge	.-10     	; 0xf9a <UART_Receive+0x8>
	return UDR;
     fa4:	ec e2       	ldi	r30, 0x2C	; 44
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <UART_ReceivePerodic>:


u8 UART_ReceivePerodic(u8*pdata)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <UART_ReceivePerodic+0x6>
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(UCSRA,RXC))
     fc0:	eb e2       	ldi	r30, 0x2B	; 43
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	88 23       	and	r24, r24
     fc8:	4c f4       	brge	.+18     	; 0xfdc <UART_ReceivePerodic+0x2c>
	{

		*pdata=UDR;
     fca:	ec e2       	ldi	r30, 0x2C	; 44
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	e9 81       	ldd	r30, Y+1	; 0x01
     fd2:	fa 81       	ldd	r31, Y+2	; 0x02
     fd4:	80 83       	st	Z, r24
		return 1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	8b 83       	std	Y+3, r24	; 0x03
     fda:	01 c0       	rjmp	.+2      	; 0xfde <UART_ReceivePerodic+0x2e>
	}
	return 0;
     fdc:	1b 82       	std	Y+3, r1	; 0x03
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <UART_TransmitString>:



void UART_TransmitString(const char* str) {
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <UART_TransmitString+0x6>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9b 83       	std	Y+3, r25	; 0x03
     ffa:	8a 83       	std	Y+2, r24	; 0x02
    // Iterate over each character in the string until the null terminator is reached
    for (u8 i = 0; str[i] != '\0'; i++) {
     ffc:	19 82       	std	Y+1, r1	; 0x01
     ffe:	0e c0       	rjmp	.+28     	; 0x101c <UART_TransmitString+0x30>
    	UART_Send(str[i]); // Transmit each character
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	fc 01       	movw	r30, r24
    100c:	e2 0f       	add	r30, r18
    100e:	f3 1f       	adc	r31, r19
    1010:	80 81       	ld	r24, Z
    1012:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_Send>



void UART_TransmitString(const char* str) {
    // Iterate over each character in the string until the null terminator is reached
    for (u8 i = 0; str[i] != '\0'; i++) {
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	8f 5f       	subi	r24, 0xFF	; 255
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	9b 81       	ldd	r25, Y+3	; 0x03
    1026:	fc 01       	movw	r30, r24
    1028:	e2 0f       	add	r30, r18
    102a:	f3 1f       	adc	r31, r19
    102c:	80 81       	ld	r24, Z
    102e:	88 23       	and	r24, r24
    1030:	39 f7       	brne	.-50     	; 0x1000 <UART_TransmitString+0x14>
    	UART_Send(str[i]); // Transmit each character
    }
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <UART_ReceiveNumber>:


// Function to receive a number over UART, terminated by '\r' (Enter key)
int UART_ReceiveNumber() {
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	6a 97       	sbiw	r28, 0x1a	; 26
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    char rxBuffer[20];  // A buffer to store received characters
    int rxIndex = 0;    // Index for the buffer
    1052:	1e 82       	std	Y+6, r1	; 0x06
    1054:	1d 82       	std	Y+5, r1	; 0x05
    char receivedChar;
    u8 endOfNumber = 0;
    1056:	1b 82       	std	Y+3, r1	; 0x03
    1058:	29 c0       	rjmp	.+82     	; 0x10ac <UART_ReceiveNumber+0x6e>

    // Read characters until Enter ('\r') is received
    while (!endOfNumber) {
        while (!GET_BIT(UCSRA, 7));  // Wait for a character to be received
    105a:	eb e2       	ldi	r30, 0x2B	; 43
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	88 23       	and	r24, r24
    1062:	dc f7       	brge	.-10     	; 0x105a <UART_ReceiveNumber+0x1c>
        receivedChar = UDR;          // Read the received character
    1064:	ec e2       	ldi	r30, 0x2C	; 44
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8c 83       	std	Y+4, r24	; 0x04

        if (receivedChar == '\r' || receivedChar == '\n') {
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	8d 30       	cpi	r24, 0x0D	; 13
    1070:	19 f0       	breq	.+6      	; 0x1078 <UART_ReceiveNumber+0x3a>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	8a 30       	cpi	r24, 0x0A	; 10
    1076:	19 f4       	brne	.+6      	; 0x107e <UART_ReceiveNumber+0x40>
            // If Enter key is received, mark the end of the number
            endOfNumber = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	17 c0       	rjmp	.+46     	; 0x10ac <UART_ReceiveNumber+0x6e>
        } else {
            // Store the character in the buffer
            rxBuffer[rxIndex] = receivedChar;
    107e:	2d 81       	ldd	r18, Y+5	; 0x05
    1080:	3e 81       	ldd	r19, Y+6	; 0x06
    1082:	ce 01       	movw	r24, r28
    1084:	07 96       	adiw	r24, 0x07	; 7
    1086:	fc 01       	movw	r30, r24
    1088:	e2 0f       	add	r30, r18
    108a:	f3 1f       	adc	r31, r19
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	80 83       	st	Z, r24
            rxIndex++;
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05

            // Check if the buffer is full (adjust the buffer size as needed)
            if (rxIndex >= sizeof(rxBuffer)) {
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	84 31       	cpi	r24, 0x14	; 20
    10a0:	91 05       	cpc	r25, r1
    10a2:	20 f0       	brcs	.+8      	; 0x10ac <UART_ReceiveNumber+0x6e>
                rxIndex = sizeof(rxBuffer) - 1;
    10a4:	83 e1       	ldi	r24, 0x13	; 19
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    int rxIndex = 0;    // Index for the buffer
    char receivedChar;
    u8 endOfNumber = 0;

    // Read characters until Enter ('\r') is received
    while (!endOfNumber) {
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	88 23       	and	r24, r24
    10b0:	a1 f2       	breq	.-88     	; 0x105a <UART_ReceiveNumber+0x1c>
            }
        }
    }

    // Null-terminate the string in the buffer
    rxBuffer[rxIndex] = '\0';
    10b2:	2d 81       	ldd	r18, Y+5	; 0x05
    10b4:	3e 81       	ldd	r19, Y+6	; 0x06
    10b6:	ce 01       	movw	r24, r28
    10b8:	07 96       	adiw	r24, 0x07	; 7
    10ba:	fc 01       	movw	r30, r24
    10bc:	e2 0f       	add	r30, r18
    10be:	f3 1f       	adc	r31, r19
    10c0:	10 82       	st	Z, r1

    // Convert the received string to an integer
    int receivedNumber = atoi(rxBuffer);
    10c2:	ce 01       	movw	r24, r28
    10c4:	07 96       	adiw	r24, 0x07	; 7
    10c6:	0e 94 57 2b 	call	0x56ae	; 0x56ae <atoi>
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01

    return receivedNumber;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10d2:	6a 96       	adiw	r28, 0x1a	; 26
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <UART_RX_InterruptEnable>:
/*
 * interrupt
 */

void UART_RX_InterruptEnable(void)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    10ec:	aa e2       	ldi	r26, 0x2A	; 42
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ea e2       	ldi	r30, 0x2A	; 42
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 68       	ori	r24, 0x80	; 128
    10f8:	8c 93       	st	X, r24
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <UART_RX_InterruptDisable>:

void UART_RX_InterruptDisable(void)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
    1108:	aa e2       	ldi	r26, 0x2A	; 42
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ea e2       	ldi	r30, 0x2A	; 42
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8f 77       	andi	r24, 0x7F	; 127
    1114:	8c 93       	st	X, r24
}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <UART_RX_SetCallBack>:
//{
//	CLR_BIT(UCSRB,TXCIE);
//}

void UART_RX_SetCallBack(void (*LocalFptr)(u8))
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <UART_RX_SetCallBack+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	90 93 33 02 	sts	0x0233, r25
    1132:	80 93 32 02 	sts	0x0232, r24
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <__vector_13>:
//}


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr != NULL)
    116a:	80 91 32 02 	lds	r24, 0x0232
    116e:	90 91 33 02 	lds	r25, 0x0233
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	41 f0       	breq	.+16     	; 0x1186 <__vector_13+0x46>
	{
		UART_RX_Fptr(UDR);
    1176:	e0 91 32 02 	lds	r30, 0x0232
    117a:	f0 91 33 02 	lds	r31, 0x0233
    117e:	ac e2       	ldi	r26, 0x2C	; 44
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	8c 91       	ld	r24, X
    1184:	09 95       	icall
	}
}
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	ff 91       	pop	r31
    118c:	ef 91       	pop	r30
    118e:	bf 91       	pop	r27
    1190:	af 91       	pop	r26
    1192:	9f 91       	pop	r25
    1194:	8f 91       	pop	r24
    1196:	7f 91       	pop	r23
    1198:	6f 91       	pop	r22
    119a:	5f 91       	pop	r21
    119c:	4f 91       	pop	r20
    119e:	3f 91       	pop	r19
    11a0:	2f 91       	pop	r18
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <TMR2_voidSetDelay_ms_usingCTC+0x6>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
    11ba:	e3 e4       	ldi	r30, 0x43	; 67
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	89 ef       	ldi	r24, 0xF9	; 249
    11c0:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	cc 01       	movw	r24, r24
    11c8:	a0 e0       	ldi	r26, 0x00	; 0
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	80 93 3e 02 	sts	0x023E, r24
    11d0:	90 93 3f 02 	sts	0x023F, r25
    11d4:	a0 93 40 02 	sts	0x0240, r26
    11d8:	b0 93 41 02 	sts	0x0241, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	89 83       	std	Y+1, r24	; 0x01
#if TMR2_MODE == TMR2_FAST_PWM_MODE

	if ((100 >= copy_u8DutyCycle)) {
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	85 36       	cpi	r24, 0x65	; 101
    11f6:	e0 f4       	brcc	.+56     	; 0x1230 <TMR2_voidSetDutyCycleForPWM+0x4a>
		OCR2 = 0;
		else
		OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;

#elif TMR2_PWM_MODE == TMR2_INVERTING
		copy_u8DutyCycle = 100 - copy_u8DutyCycle;
    11f8:	94 e6       	ldi	r25, 0x64	; 100
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	29 2f       	mov	r18, r25
    11fe:	28 1b       	sub	r18, r24
    1200:	82 2f       	mov	r24, r18
    1202:	89 83       	std	Y+1, r24	; 0x01
		if (copy_u8DutyCycle == 0)
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	88 23       	and	r24, r24
    1208:	21 f4       	brne	.+8      	; 0x1212 <TMR2_voidSetDutyCycleForPWM+0x2c>
			OCR2 = 0;
    120a:	e3 e4       	ldi	r30, 0x43	; 67
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	10 82       	st	Z, r1
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <TMR2_voidSetDutyCycleForPWM+0x4a>
		else
			OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;
    1212:	e3 e4       	ldi	r30, 0x43	; 67
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	98 2f       	mov	r25, r24
    121e:	88 27       	eor	r24, r24
    1220:	24 e6       	ldi	r18, 0x64	; 100
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	b9 01       	movw	r22, r18
    1226:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <__udivmodhi4>
    122a:	cb 01       	movw	r24, r22
    122c:	81 50       	subi	r24, 0x01	; 1
    122e:	80 83       	st	Z, r24
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);

#elif TMR2_MODE == TMR2_FAST_PWM_MODE
	// Select Fast PWM mode
	SET_BIT(TCCR2, WGM20);
    1240:	a5 e4       	ldi	r26, 0x45	; 69
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e4       	ldi	r30, 0x45	; 69
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 64       	ori	r24, 0x40	; 64
    124c:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
    124e:	a5 e4       	ldi	r26, 0x45	; 69
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e4       	ldi	r30, 0x45	; 69
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	88 60       	ori	r24, 0x08	; 8
    125a:	8c 93       	st	X, r24

#if TMR2_PWM_MODE == TMR2_INVERTING
	SET_BIT(TCCR2, COM20);
    125c:	a5 e4       	ldi	r26, 0x45	; 69
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e4       	ldi	r30, 0x45	; 69
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	80 61       	ori	r24, 0x10	; 16
    1268:	8c 93       	st	X, r24
	SET_BIT(TCCR2, COM21);
    126a:	a5 e4       	ldi	r26, 0x45	; 69
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e4       	ldi	r30, 0x45	; 69
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 62       	ori	r24, 0x20	; 32
    1276:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    1286:	a5 e4       	ldi	r26, 0x45	; 69
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e4       	ldi	r30, 0x45	; 69
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    1294:	a5 e4       	ldi	r26, 0x45	; 69
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e4       	ldi	r30, 0x45	; 69
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	82 60       	ori	r24, 0x02	; 2
    12a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    12a2:	a5 e4       	ldi	r26, 0x45	; 69
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e4       	ldi	r30, 0x45	; 69
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8b 7f       	andi	r24, 0xFB	; 251
    12ae:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    12be:	a5 e4       	ldi	r26, 0x45	; 69
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e5 e4       	ldi	r30, 0x45	; 69
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8e 7f       	andi	r24, 0xFE	; 254
    12ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    12cc:	a5 e4       	ldi	r26, 0x45	; 69
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e4       	ldi	r30, 0x45	; 69
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8d 7f       	andi	r24, 0xFD	; 253
    12d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    12da:	a5 e4       	ldi	r26, 0x45	; 69
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e5 e4       	ldi	r30, 0x45	; 69
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8b 7f       	andi	r24, 0xFB	; 251
    12e6:	8c 93       	st	X, r24
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <TMR2_voidSetCallBackOVF+0x6>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	31 f0       	breq	.+12     	; 0x1310 <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	90 93 35 02 	sts	0x0235, r25
    130c:	80 93 34 02 	sts	0x0234, r24
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <TMR2_voidSetCallBackCTC+0x6>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	31 f0       	breq	.+12     	; 0x133c <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	90 93 37 02 	sts	0x0237, r25
    1338:	80 93 36 02 	sts	0x0236, r24
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    1346:	1f 92       	push	r1
    1348:	0f 92       	push	r0
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	0f 92       	push	r0
    134e:	11 24       	eor	r1, r1
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    1370:	80 91 38 02 	lds	r24, 0x0238
    1374:	90 91 39 02 	lds	r25, 0x0239
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	90 93 39 02 	sts	0x0239, r25
    137e:	80 93 38 02 	sts	0x0238, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    1382:	80 91 38 02 	lds	r24, 0x0238
    1386:	90 91 39 02 	lds	r25, 0x0239
    138a:	23 e0       	ldi	r18, 0x03	; 3
    138c:	81 3d       	cpi	r24, 0xD1	; 209
    138e:	92 07       	cpc	r25, r18
    1390:	99 f4       	brne	.+38     	; 0x13b8 <__vector_5+0x72>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    1392:	e4 e4       	ldi	r30, 0x44	; 68
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	81 e7       	ldi	r24, 0x71	; 113
    1398:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    139a:	10 92 39 02 	sts	0x0239, r1
    139e:	10 92 38 02 	sts	0x0238, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    13a2:	80 91 34 02 	lds	r24, 0x0234
    13a6:	90 91 35 02 	lds	r25, 0x0235
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__vector_5+0x72>
			TMR2_privatePtrToCAllBackOVF();
    13ae:	e0 91 34 02 	lds	r30, 0x0234
    13b2:	f0 91 35 02 	lds	r31, 0x0235
    13b6:	09 95       	icall
		}
	}
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1408:	80 91 3a 02 	lds	r24, 0x023A
    140c:	90 91 3b 02 	lds	r25, 0x023B
    1410:	a0 91 3c 02 	lds	r26, 0x023C
    1414:	b0 91 3d 02 	lds	r27, 0x023D
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	a1 1d       	adc	r26, r1
    141c:	b1 1d       	adc	r27, r1
    141e:	80 93 3a 02 	sts	0x023A, r24
    1422:	90 93 3b 02 	sts	0x023B, r25
    1426:	a0 93 3c 02 	sts	0x023C, r26
    142a:	b0 93 3d 02 	sts	0x023D, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    142e:	20 91 3e 02 	lds	r18, 0x023E
    1432:	30 91 3f 02 	lds	r19, 0x023F
    1436:	40 91 40 02 	lds	r20, 0x0240
    143a:	50 91 41 02 	lds	r21, 0x0241
    143e:	80 91 3a 02 	lds	r24, 0x023A
    1442:	90 91 3b 02 	lds	r25, 0x023B
    1446:	a0 91 3c 02 	lds	r26, 0x023C
    144a:	b0 91 3d 02 	lds	r27, 0x023D
    144e:	28 17       	cp	r18, r24
    1450:	39 07       	cpc	r19, r25
    1452:	4a 07       	cpc	r20, r26
    1454:	5b 07       	cpc	r21, r27
    1456:	99 f4       	brne	.+38     	; 0x147e <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1458:	10 92 3a 02 	sts	0x023A, r1
    145c:	10 92 3b 02 	sts	0x023B, r1
    1460:	10 92 3c 02 	sts	0x023C, r1
    1464:	10 92 3d 02 	sts	0x023D, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    1468:	80 91 36 02 	lds	r24, 0x0236
    146c:	90 91 37 02 	lds	r25, 0x0237
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	29 f0       	breq	.+10     	; 0x147e <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    1474:	e0 91 36 02 	lds	r30, 0x0236
    1478:	f0 91 37 02 	lds	r31, 0x0237
    147c:	09 95       	icall
		}
	}
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    14b0:	e3 e4       	ldi	r30, 0x43	; 67
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	80 83       	st	Z, r24
}
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    14d2:	06 e4       	ldi	r16, 0x46	; 70
    14d4:	10 e0       	ldi	r17, 0x00	; 0
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	9c 01       	movw	r18, r24
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	80 e9       	ldi	r24, 0x90	; 144
    14e2:	90 ed       	ldi	r25, 0xD0	; 208
    14e4:	a3 e0       	ldi	r26, 0x03	; 3
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <__udivmodsi4>
    14f0:	da 01       	movw	r26, r20
    14f2:	c9 01       	movw	r24, r18
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f8 01       	movw	r30, r16
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	69 83       	std	Y+1, r22	; 0x01
    151c:	7a 83       	std	Y+2, r23	; 0x02
    151e:	8b 83       	std	Y+3, r24	; 0x03
    1520:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    1522:	69 81       	ldd	r22, Y+1	; 0x01
    1524:	7a 81       	ldd	r23, Y+2	; 0x02
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	48 ec       	ldi	r20, 0xC8	; 200
    1530:	52 e4       	ldi	r21, 0x42	; 66
    1532:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    1536:	18 16       	cp	r1, r24
    1538:	0c f4       	brge	.+2      	; 0x153c <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    153a:	48 c0       	rjmp	.+144    	; 0x15cc <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    153c:	69 81       	ldd	r22, Y+1	; 0x01
    153e:	7a 81       	ldd	r23, Y+2	; 0x02
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1550:	88 23       	and	r24, r24
    1552:	29 f4       	brne	.+10     	; 0x155e <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    1554:	ea e4       	ldi	r30, 0x4A	; 74
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	11 82       	std	Z+1, r1	; 0x01
    155a:	10 82       	st	Z, r1
    155c:	37 c0       	rjmp	.+110    	; 0x15cc <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    155e:	0a e4       	ldi	r16, 0x4A	; 74
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	e6 e4       	ldi	r30, 0x46	; 70
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	cc 01       	movw	r24, r24
    156e:	a0 e0       	ldi	r26, 0x00	; 0
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	29 81       	ldd	r18, Y+1	; 0x01
    1584:	3a 81       	ldd	r19, Y+2	; 0x02
    1586:	4b 81       	ldd	r20, Y+3	; 0x03
    1588:	5c 81       	ldd	r21, Y+4	; 0x04
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	48 ec       	ldi	r20, 0xC8	; 200
    159c:	52 e4       	ldi	r21, 0x42	; 66
    159e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e8       	ldi	r20, 0x80	; 128
    15b0:	5f e3       	ldi	r21, 0x3F	; 63
    15b2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	f8 01       	movw	r30, r16
    15c8:	91 83       	std	Z+1, r25	; 0x01
    15ca:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	08 95       	ret

000015de <TMR1_voidInit>:


void TMR1_voidInit(void) {
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    15e6:	af e4       	ldi	r26, 0x4F	; 79
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ef e4       	ldi	r30, 0x4F	; 79
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8e 7f       	andi	r24, 0xFE	; 254
    15f2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    15f4:	af e4       	ldi	r26, 0x4F	; 79
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ef e4       	ldi	r30, 0x4F	; 79
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	82 60       	ori	r24, 0x02	; 2
    1600:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1602:	ae e4       	ldi	r26, 0x4E	; 78
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ee e4       	ldi	r30, 0x4E	; 78
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	88 60       	ori	r24, 0x08	; 8
    160e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1610:	ae e4       	ldi	r26, 0x4E	; 78
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e4       	ldi	r30, 0x4E	; 78
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 61       	ori	r24, 0x10	; 16
    161c:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    161e:	af e4       	ldi	r26, 0x4F	; 79
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ef e4       	ldi	r30, 0x4F	; 79
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	8f 7b       	andi	r24, 0xBF	; 191
    162a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    162c:	af e4       	ldi	r26, 0x4F	; 79
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ef e4       	ldi	r30, 0x4F	; 79
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	80 68       	ori	r24, 0x80	; 128
    1638:	8c 93       	st	X, r24
#elif TMR1_PWM_MODE == TMR1_INVERTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
	TMR1_voidSetFrequencyMode14FastPWM(50);
    163a:	82 e3       	ldi	r24, 0x32	; 50
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <TMR1_voidSetFrequencyMode14FastPWM>

#endif
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <TMR1_voidSetCompareMatchValueA+0x6>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    1656:	ea e4       	ldi	r30, 0x4A	; 74
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    1674:	ae e4       	ldi	r26, 0x4E	; 78
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	ee e4       	ldi	r30, 0x4E	; 78
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	81 60       	ori	r24, 0x01	; 1
    1680:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1682:	ae e4       	ldi	r26, 0x4E	; 78
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	ee e4       	ldi	r30, 0x4E	; 78
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	82 60       	ori	r24, 0x02	; 2
    168e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    1690:	ae e4       	ldi	r26, 0x4E	; 78
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ee e4       	ldi	r30, 0x4E	; 78
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8b 7f       	andi	r24, 0xFB	; 251
    169c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    16ac:	ae e4       	ldi	r26, 0x4E	; 78
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ee e4       	ldi	r30, 0x4E	; 78
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8e 7f       	andi	r24, 0xFE	; 254
    16b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    16ba:	ae e4       	ldi	r26, 0x4E	; 78
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ee e4       	ldi	r30, 0x4E	; 78
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8d 7f       	andi	r24, 0xFD	; 253
    16c6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    16c8:	ae e4       	ldi	r26, 0x4E	; 78
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ee e4       	ldi	r30, 0x4E	; 78
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8b 7f       	andi	r24, 0xFB	; 251
    16d4:	8c 93       	st	X, r24
}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    16ea:	ec e5       	ldi	r30, 0x5C	; 92
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	89 ef       	ldi	r24, 0xF9	; 249
    16f0:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	cc 01       	movw	r24, r24
    16f8:	a0 e0       	ldi	r26, 0x00	; 0
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	80 93 4c 02 	sts	0x024C, r24
    1700:	90 93 4d 02 	sts	0x024D, r25
    1704:	a0 93 4e 02 	sts	0x024E, r26
    1708:	b0 93 4f 02 	sts	0x024F, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	85 36       	cpi	r24, 0x65	; 101
    1726:	d0 f4       	brcc	.+52     	; 0x175c <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    1728:	ec e5       	ldi	r30, 0x5C	; 92
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	48 2f       	mov	r20, r24
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	ca 01       	movw	r24, r20
    1734:	9c 01       	movw	r18, r24
    1736:	22 0f       	add	r18, r18
    1738:	33 1f       	adc	r19, r19
    173a:	c9 01       	movw	r24, r18
    173c:	96 95       	lsr	r25
    173e:	98 2f       	mov	r25, r24
    1740:	88 27       	eor	r24, r24
    1742:	97 95       	ror	r25
    1744:	87 95       	ror	r24
    1746:	82 1b       	sub	r24, r18
    1748:	93 0b       	sbc	r25, r19
    174a:	84 0f       	add	r24, r20
    174c:	95 1f       	adc	r25, r21
    174e:	24 e6       	ldi	r18, 0x64	; 100
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	b9 01       	movw	r22, r18
    1754:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <__udivmodhi4>
    1758:	cb 01       	movw	r24, r22
    175a:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    176c:	a3 e5       	ldi	r26, 0x53	; 83
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e3 e5       	ldi	r30, 0x53	; 83
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 64       	ori	r24, 0x40	; 64
    1778:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    177a:	a3 e5       	ldi	r26, 0x53	; 83
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e3 e5       	ldi	r30, 0x53	; 83
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	87 7f       	andi	r24, 0xF7	; 247
    1786:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    1788:	a3 e5       	ldi	r26, 0x53	; 83
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e3 e5       	ldi	r30, 0x53	; 83
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8f 7e       	andi	r24, 0xEF	; 239
    1794:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    1796:	a3 e5       	ldi	r26, 0x53	; 83
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e3 e5       	ldi	r30, 0x53	; 83
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	80 62       	ori	r24, 0x20	; 32
    17a2:	8c 93       	st	X, r24
#endif

#endif
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    17b2:	a3 e5       	ldi	r26, 0x53	; 83
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e3 e5       	ldi	r30, 0x53	; 83
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	81 60       	ori	r24, 0x01	; 1
    17be:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    17c0:	a3 e5       	ldi	r26, 0x53	; 83
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	82 60       	ori	r24, 0x02	; 2
    17cc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    17ce:	a3 e5       	ldi	r26, 0x53	; 83
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e3 e5       	ldi	r30, 0x53	; 83
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8b 7f       	andi	r24, 0xFB	; 251
    17da:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    17ea:	a3 e5       	ldi	r26, 0x53	; 83
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e3 e5       	ldi	r30, 0x53	; 83
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8e 7f       	andi	r24, 0xFE	; 254
    17f6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    17f8:	a3 e5       	ldi	r26, 0x53	; 83
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e3 e5       	ldi	r30, 0x53	; 83
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8d 7f       	andi	r24, 0xFD	; 253
    1804:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1806:	a3 e5       	ldi	r26, 0x53	; 83
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e3 e5       	ldi	r30, 0x53	; 83
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	8b 7f       	andi	r24, 0xFB	; 251
    1812:	8c 93       	st	X, r24
}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <TMR0_voidSetCallBackOVF+0x6>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	31 f0       	breq	.+12     	; 0x183c <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	90 93 43 02 	sts	0x0243, r25
    1838:	80 93 42 02 	sts	0x0242, r24
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <TMR0_voidSetCallBackCTC+0x6>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	31 f0       	breq	.+12     	; 0x1868 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	90 93 45 02 	sts	0x0245, r25
    1864:	80 93 44 02 	sts	0x0244, r24
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1872:	1f 92       	push	r1
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	0f 92       	push	r0
    187a:	11 24       	eor	r1, r1
    187c:	2f 93       	push	r18
    187e:	3f 93       	push	r19
    1880:	4f 93       	push	r20
    1882:	5f 93       	push	r21
    1884:	6f 93       	push	r22
    1886:	7f 93       	push	r23
    1888:	8f 93       	push	r24
    188a:	9f 93       	push	r25
    188c:	af 93       	push	r26
    188e:	bf 93       	push	r27
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    189c:	80 91 46 02 	lds	r24, 0x0246
    18a0:	90 91 47 02 	lds	r25, 0x0247
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	90 93 47 02 	sts	0x0247, r25
    18aa:	80 93 46 02 	sts	0x0246, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    18ae:	80 91 46 02 	lds	r24, 0x0246
    18b2:	90 91 47 02 	lds	r25, 0x0247
    18b6:	23 e0       	ldi	r18, 0x03	; 3
    18b8:	81 3d       	cpi	r24, 0xD1	; 209
    18ba:	92 07       	cpc	r25, r18
    18bc:	99 f4       	brne	.+38     	; 0x18e4 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    18be:	e2 e5       	ldi	r30, 0x52	; 82
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	81 e7       	ldi	r24, 0x71	; 113
    18c4:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    18c6:	10 92 47 02 	sts	0x0247, r1
    18ca:	10 92 46 02 	sts	0x0246, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    18ce:	80 91 42 02 	lds	r24, 0x0242
    18d2:	90 91 43 02 	lds	r25, 0x0243
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	29 f0       	breq	.+10     	; 0x18e4 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    18da:	e0 91 42 02 	lds	r30, 0x0242
    18de:	f0 91 43 02 	lds	r31, 0x0243
    18e2:	09 95       	icall
		}
	}
}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1934:	80 91 48 02 	lds	r24, 0x0248
    1938:	90 91 49 02 	lds	r25, 0x0249
    193c:	a0 91 4a 02 	lds	r26, 0x024A
    1940:	b0 91 4b 02 	lds	r27, 0x024B
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	a1 1d       	adc	r26, r1
    1948:	b1 1d       	adc	r27, r1
    194a:	80 93 48 02 	sts	0x0248, r24
    194e:	90 93 49 02 	sts	0x0249, r25
    1952:	a0 93 4a 02 	sts	0x024A, r26
    1956:	b0 93 4b 02 	sts	0x024B, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    195a:	20 91 4c 02 	lds	r18, 0x024C
    195e:	30 91 4d 02 	lds	r19, 0x024D
    1962:	40 91 4e 02 	lds	r20, 0x024E
    1966:	50 91 4f 02 	lds	r21, 0x024F
    196a:	80 91 48 02 	lds	r24, 0x0248
    196e:	90 91 49 02 	lds	r25, 0x0249
    1972:	a0 91 4a 02 	lds	r26, 0x024A
    1976:	b0 91 4b 02 	lds	r27, 0x024B
    197a:	28 17       	cp	r18, r24
    197c:	39 07       	cpc	r19, r25
    197e:	4a 07       	cpc	r20, r26
    1980:	5b 07       	cpc	r21, r27
    1982:	99 f4       	brne	.+38     	; 0x19aa <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1984:	10 92 48 02 	sts	0x0248, r1
    1988:	10 92 49 02 	sts	0x0249, r1
    198c:	10 92 4a 02 	sts	0x024A, r1
    1990:	10 92 4b 02 	sts	0x024B, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    1994:	80 91 44 02 	lds	r24, 0x0244
    1998:	90 91 45 02 	lds	r25, 0x0245
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	29 f0       	breq	.+10     	; 0x19aa <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    19a0:	e0 91 44 02 	lds	r30, 0x0244
    19a4:	f0 91 45 02 	lds	r31, 0x0245
    19a8:	09 95       	icall
		}
	}
}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	bf 91       	pop	r27
    19b4:	af 91       	pop	r26
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	7f 91       	pop	r23
    19bc:	6f 91       	pop	r22
    19be:	5f 91       	pop	r21
    19c0:	4f 91       	pop	r20
    19c2:	3f 91       	pop	r19
    19c4:	2f 91       	pop	r18
    19c6:	0f 90       	pop	r0
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	0f 90       	pop	r0
    19cc:	1f 90       	pop	r1
    19ce:	18 95       	reti

000019d0 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    19dc:	ec e5       	ldi	r30, 0x5C	; 92
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	80 83       	st	Z, r24
}
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <SPI_voidInit>:

// Function pointer to store the callback function for asynchronous SPI communication
static void (*private_pCallBackSPI)(u8) = NULL;

// Function to initialize the SPI module
void SPI_voidInit(void){
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62

    // Select master or slave based on SPI_MODE configuration
    #if SPI_MODE == SPI_MASTER
        SET_BIT(SPI->SPCR, MSTR);
    19f4:	ad e2       	ldi	r26, 0x2D	; 45
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ed e2       	ldi	r30, 0x2D	; 45
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 61       	ori	r24, 0x10	; 16
    1a00:	8c 93       	st	X, r24

        // Set frequency to 1 MHz (only master selects the clock)
        SET_BIT(SPI->SPCR, SPR0);
    1a02:	ad e2       	ldi	r26, 0x2D	; 45
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	ed e2       	ldi	r30, 0x2D	; 45
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	81 60       	ori	r24, 0x01	; 1
    1a0e:	8c 93       	st	X, r24
        CLR_BIT(SPI->SPCR, SPR1);
    1a10:	ad e2       	ldi	r26, 0x2D	; 45
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	ed e2       	ldi	r30, 0x2D	; 45
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8d 7f       	andi	r24, 0xFD	; 253
    1a1c:	8c 93       	st	X, r24
        CLR_BIT(SPI->SPSR, SPI2X);
    1a1e:	ad e2       	ldi	r26, 0x2D	; 45
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ed e2       	ldi	r30, 0x2D	; 45
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	81 81       	ldd	r24, Z+1	; 0x01
    1a28:	8e 7f       	andi	r24, 0xFE	; 254
    1a2a:	11 96       	adiw	r26, 0x01	; 1
    1a2c:	8c 93       	st	X, r24
    #elif SPI_MODE == SPI_SLAVE
        CLR_BIT(SPI->SPCR, MSTR);
    #endif

    // Select LSB first
    SET_BIT(SPI->SPCR, DORD);
    1a2e:	ad e2       	ldi	r26, 0x2D	; 45
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	ed e2       	ldi	r30, 0x2D	; 45
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	80 62       	ori	r24, 0x20	; 32
    1a3a:	8c 93       	st	X, r24

    // Select clock polarity (CPOL) falling edge, and clock phase (CPHA) rising edge sample
    SET_BIT(SPI->SPCR, CPOL);
    1a3c:	ad e2       	ldi	r26, 0x2D	; 45
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	ed e2       	ldi	r30, 0x2D	; 45
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	88 60       	ori	r24, 0x08	; 8
    1a48:	8c 93       	st	X, r24
    SET_BIT(SPI->SPCR, CPHA);
    1a4a:	ad e2       	ldi	r26, 0x2D	; 45
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	ed e2       	ldi	r30, 0x2D	; 45
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	84 60       	ori	r24, 0x04	; 4
    1a56:	8c 93       	st	X, r24

    // Enable SPI
    SET_BIT(SPI->SPCR, SPE);
    1a58:	ad e2       	ldi	r26, 0x2D	; 45
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	ed e2       	ldi	r30, 0x2D	; 45
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 64       	ori	r24, 0x40	; 64
    1a64:	8c 93       	st	X, r24
}
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <SPI_voidTransceive>:

// Function to transmit and receive data synchronously
void SPI_voidTransceive(u8 copy_u8TXdata, u8* copy_pu8_RXdata){
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <SPI_voidTransceive+0x6>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	7b 83       	std	Y+3, r23	; 0x03
    1a7c:	6a 83       	std	Y+2, r22	; 0x02

    if(copy_pu8_RXdata != NULL){
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	e1 f0       	breq	.+56     	; 0x1abe <SPI_voidTransceive+0x52>
        // Wait for the write collision flag to be clear
        while(1 == GET_BIT(SPI->SPSR, WCOL));
    1a86:	ed e2       	ldi	r30, 0x2D	; 45
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	81 81       	ldd	r24, Z+1	; 0x01
    1a8c:	82 95       	swap	r24
    1a8e:	86 95       	lsr	r24
    1a90:	86 95       	lsr	r24
    1a92:	83 70       	andi	r24, 0x03	; 3
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	90 70       	andi	r25, 0x00	; 0
    1a9c:	88 23       	and	r24, r24
    1a9e:	99 f7       	brne	.-26     	; 0x1a86 <SPI_voidTransceive+0x1a>

        // Send data
        SPI->SPDR = copy_u8TXdata;
    1aa0:	ed e2       	ldi	r30, 0x2D	; 45
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	82 83       	std	Z+2, r24	; 0x02

        // Wait for the SPIF flag to be set (data received)
        while(0 == GET_BIT(SPI->SPSR, SPIF));
    1aa8:	ed e2       	ldi	r30, 0x2D	; 45
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	81 81       	ldd	r24, Z+1	; 0x01
    1aae:	88 23       	and	r24, r24
    1ab0:	dc f7       	brge	.-10     	; 0x1aa8 <SPI_voidTransceive+0x3c>

        // Read received data
        *copy_pu8_RXdata =  SPI->SPDR;
    1ab2:	ed e2       	ldi	r30, 0x2D	; 45
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aba:	fb 81       	ldd	r31, Y+3	; 0x03
    1abc:	80 83       	st	Z, r24
    }
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <SPI_voidTransmitAsynchronous>:

// Function to transmit data asynchronously with a callback function
void SPI_voidTransmitAsynchronous(u8 copy_u8TxData, void(*ptrToFun)(u8 copy_u8RxData)){
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <SPI_voidTransmitAsynchronous+0x6>
    1ad0:	0f 92       	push	r0
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	7b 83       	std	Y+3, r23	; 0x03
    1ada:	6a 83       	std	Y+2, r22	; 0x02
    if(ptrToFun != NULL)
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	f1 f0       	breq	.+60     	; 0x1b20 <SPI_voidTransmitAsynchronous+0x56>
    {
        // Enable SPI Interrupt
        SET_BIT(SPI->SPCR, SPIE);
    1ae4:	ad e2       	ldi	r26, 0x2D	; 45
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	ed e2       	ldi	r30, 0x2D	; 45
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	80 68       	ori	r24, 0x80	; 128
    1af0:	8c 93       	st	X, r24

        // Set the callback function
        private_pCallBackSPI = ptrToFun ;
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	90 93 51 02 	sts	0x0251, r25
    1afa:	80 93 50 02 	sts	0x0250, r24

        // Check for collision
        while(1 == GET_BIT(SPI->SPSR, WCOL));
    1afe:	ed e2       	ldi	r30, 0x2D	; 45
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	81 81       	ldd	r24, Z+1	; 0x01
    1b04:	82 95       	swap	r24
    1b06:	86 95       	lsr	r24
    1b08:	86 95       	lsr	r24
    1b0a:	83 70       	andi	r24, 0x03	; 3
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	81 70       	andi	r24, 0x01	; 1
    1b12:	90 70       	andi	r25, 0x00	; 0
    1b14:	88 23       	and	r24, r24
    1b16:	99 f7       	brne	.-26     	; 0x1afe <SPI_voidTransmitAsynchronous+0x34>

        // Send data
        SPI->SPDR = copy_u8TxData;
    1b18:	ed e2       	ldi	r30, 0x2D	; 45
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	82 83       	std	Z+2, r24	; 0x02
    }
    else
    {

    }
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <__vector_12>:

// ISR (Interrupt Service Routine) for SPI communication
void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    1b2c:	1f 92       	push	r1
    1b2e:	0f 92       	push	r0
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	0f 92       	push	r0
    1b34:	11 24       	eor	r1, r1
    1b36:	2f 93       	push	r18
    1b38:	3f 93       	push	r19
    1b3a:	4f 93       	push	r20
    1b3c:	5f 93       	push	r21
    1b3e:	6f 93       	push	r22
    1b40:	7f 93       	push	r23
    1b42:	8f 93       	push	r24
    1b44:	9f 93       	push	r25
    1b46:	af 93       	push	r26
    1b48:	bf 93       	push	r27
    1b4a:	ef 93       	push	r30
    1b4c:	ff 93       	push	r31
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    // Check if the callback function is assigned
    if (private_pCallBackSPI != NULL) {
    1b56:	80 91 50 02 	lds	r24, 0x0250
    1b5a:	90 91 51 02 	lds	r25, 0x0251
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	49 f0       	breq	.+18     	; 0x1b74 <__vector_12+0x48>
        // Call the callback function with the received data
        private_pCallBackSPI(SPI->SPDR);
    1b62:	e0 91 50 02 	lds	r30, 0x0250
    1b66:	f0 91 51 02 	lds	r31, 0x0251
    1b6a:	ad e2       	ldi	r26, 0x2D	; 45
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	12 96       	adiw	r26, 0x02	; 2
    1b70:	8c 91       	ld	r24, X
    1b72:	09 95       	icall
    }
}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	ff 91       	pop	r31
    1b7a:	ef 91       	pop	r30
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	7f 91       	pop	r23
    1b86:	6f 91       	pop	r22
    1b88:	5f 91       	pop	r21
    1b8a:	4f 91       	pop	r20
    1b8c:	3f 91       	pop	r19
    1b8e:	2f 91       	pop	r18
    1b90:	0f 90       	pop	r0
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	0f 90       	pop	r0
    1b96:	1f 90       	pop	r1
    1b98:	18 95       	reti

00001b9a <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <Port_Init+0x6>
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <Port_Init+0x8>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <Port_Init+0xa>
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    1bac:	1a 82       	std	Y+2, r1	; 0x02
    1bae:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i < 32; i++) {
    1bb0:	1a 82       	std	Y+2, r1	; 0x02
    1bb2:	19 82       	std	Y+1, r1	; 0x01
    1bb4:	72 c1       	rjmp	.+740    	; 0x1e9a <Port_Init+0x300>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    1bb6:	29 81       	ldd	r18, Y+1	; 0x01
    1bb8:	3a 81       	ldd	r19, Y+2	; 0x02
    1bba:	c9 01       	movw	r24, r18
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	28 0f       	add	r18, r24
    1bc2:	39 1f       	adc	r19, r25
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	fc 01       	movw	r30, r24
    1bca:	e2 0f       	add	r30, r18
    1bcc:	f3 1f       	adc	r31, r19
    1bce:	80 81       	ld	r24, Z
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	3e 83       	std	Y+6, r19	; 0x06
    1bd6:	2d 83       	std	Y+5, r18	; 0x05
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	91 05       	cpc	r25, r1
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <Port_Init+0x4a>
    1be2:	67 c0       	rjmp	.+206    	; 0x1cb2 <Port_Init+0x118>
    1be4:	2d 81       	ldd	r18, Y+5	; 0x05
    1be6:	3e 81       	ldd	r19, Y+6	; 0x06
    1be8:	22 30       	cpi	r18, 0x02	; 2
    1bea:	31 05       	cpc	r19, r1
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <Port_Init+0x5e>
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	71 f0       	breq	.+28     	; 0x1c12 <Port_Init+0x78>
    1bf6:	4c c1       	rjmp	.+664    	; 0x1e90 <Port_Init+0x2f6>
    1bf8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <Port_Init+0x6a>
    1c02:	a7 c0       	rjmp	.+334    	; 0x1d52 <Port_Init+0x1b8>
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	83 30       	cpi	r24, 0x03	; 3
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <Port_Init+0x76>
    1c0e:	f1 c0       	rjmp	.+482    	; 0x1df2 <Port_Init+0x258>
    1c10:	3f c1       	rjmp	.+638    	; 0x1e90 <Port_Init+0x2f6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1c12:	29 81       	ldd	r18, Y+1	; 0x01
    1c14:	3a 81       	ldd	r19, Y+2	; 0x02
    1c16:	c9 01       	movw	r24, r18
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	28 0f       	add	r18, r24
    1c1e:	39 1f       	adc	r19, r25
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	fc 01       	movw	r30, r24
    1c26:	e2 0f       	add	r30, r18
    1c28:	f3 1f       	adc	r31, r19
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	01 f5       	brne	.+64     	; 0x1c70 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1c30:	aa e3       	ldi	r26, 0x3A	; 58
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ea e3       	ldi	r30, 0x3A	; 58
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	29 81       	ldd	r18, Y+1	; 0x01
    1c3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c40:	c9 01       	movw	r24, r18
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	28 0f       	add	r18, r24
    1c48:	39 1f       	adc	r19, r25
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e2 0f       	add	r30, r18
    1c52:	f3 1f       	adc	r31, r19
    1c54:	81 81       	ldd	r24, Z+1	; 0x01
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <Port_Init+0xcc>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <Port_Init+0xc8>
    1c6a:	84 2b       	or	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	10 c1       	rjmp	.+544    	; 0x1e90 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1c70:	aa e3       	ldi	r26, 0x3A	; 58
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	ea e3       	ldi	r30, 0x3A	; 58
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	29 81       	ldd	r18, Y+1	; 0x01
    1c7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c80:	c9 01       	movw	r24, r18
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	28 0f       	add	r18, r24
    1c88:	39 1f       	adc	r19, r25
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	fc 01       	movw	r30, r24
    1c90:	e2 0f       	add	r30, r18
    1c92:	f3 1f       	adc	r31, r19
    1c94:	81 81       	ldd	r24, Z+1	; 0x01
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <Port_Init+0x10c>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <Port_Init+0x108>
    1caa:	80 95       	com	r24
    1cac:	84 23       	and	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	ef c0       	rjmp	.+478    	; 0x1e90 <Port_Init+0x2f6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	28 0f       	add	r18, r24
    1cbe:	39 1f       	adc	r19, r25
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e2 0f       	add	r30, r18
    1cc8:	f3 1f       	adc	r31, r19
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	01 f5       	brne	.+64     	; 0x1d10 <Port_Init+0x176>
				SET_BIT(DDRB, pin_cfg[i].pin);
    1cd0:	a7 e3       	ldi	r26, 0x37	; 55
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e7 e3       	ldi	r30, 0x37	; 55
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	29 81       	ldd	r18, Y+1	; 0x01
    1cde:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce0:	c9 01       	movw	r24, r18
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	28 0f       	add	r18, r24
    1ce8:	39 1f       	adc	r19, r25
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	fc 01       	movw	r30, r24
    1cf0:	e2 0f       	add	r30, r18
    1cf2:	f3 1f       	adc	r31, r19
    1cf4:	81 81       	ldd	r24, Z+1	; 0x01
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <Port_Init+0x16c>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <Port_Init+0x168>
    1d0a:	84 2b       	or	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	c0 c0       	rjmp	.+384    	; 0x1e90 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1d10:	a7 e3       	ldi	r26, 0x37	; 55
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e7 e3       	ldi	r30, 0x37	; 55
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	29 81       	ldd	r18, Y+1	; 0x01
    1d1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d20:	c9 01       	movw	r24, r18
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	28 0f       	add	r18, r24
    1d28:	39 1f       	adc	r19, r25
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	fc 01       	movw	r30, r24
    1d30:	e2 0f       	add	r30, r18
    1d32:	f3 1f       	adc	r31, r19
    1d34:	81 81       	ldd	r24, Z+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	02 2e       	mov	r0, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <Port_Init+0x1ac>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	0a 94       	dec	r0
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <Port_Init+0x1a8>
    1d4a:	80 95       	com	r24
    1d4c:	84 23       	and	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	9f c0       	rjmp	.+318    	; 0x1e90 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1d52:	29 81       	ldd	r18, Y+1	; 0x01
    1d54:	3a 81       	ldd	r19, Y+2	; 0x02
    1d56:	c9 01       	movw	r24, r18
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	28 0f       	add	r18, r24
    1d5e:	39 1f       	adc	r19, r25
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	fc 01       	movw	r30, r24
    1d66:	e2 0f       	add	r30, r18
    1d68:	f3 1f       	adc	r31, r19
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	01 f5       	brne	.+64     	; 0x1db0 <Port_Init+0x216>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1d70:	a4 e3       	ldi	r26, 0x34	; 52
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e4 e3       	ldi	r30, 0x34	; 52
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	29 81       	ldd	r18, Y+1	; 0x01
    1d7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d80:	c9 01       	movw	r24, r18
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	28 0f       	add	r18, r24
    1d88:	39 1f       	adc	r19, r25
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e2 0f       	add	r30, r18
    1d92:	f3 1f       	adc	r31, r19
    1d94:	81 81       	ldd	r24, Z+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <Port_Init+0x20c>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <Port_Init+0x208>
    1daa:	84 2b       	or	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	70 c0       	rjmp	.+224    	; 0x1e90 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1db0:	a4 e3       	ldi	r26, 0x34	; 52
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e4 e3       	ldi	r30, 0x34	; 52
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	29 81       	ldd	r18, Y+1	; 0x01
    1dbe:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc0:	c9 01       	movw	r24, r18
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	28 0f       	add	r18, r24
    1dc8:	39 1f       	adc	r19, r25
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	81 81       	ldd	r24, Z+1	; 0x01
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <Port_Init+0x24c>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <Port_Init+0x248>
    1dea:	80 95       	com	r24
    1dec:	84 23       	and	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	4f c0       	rjmp	.+158    	; 0x1e90 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1df2:	29 81       	ldd	r18, Y+1	; 0x01
    1df4:	3a 81       	ldd	r19, Y+2	; 0x02
    1df6:	c9 01       	movw	r24, r18
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	28 0f       	add	r18, r24
    1dfe:	39 1f       	adc	r19, r25
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	fc 01       	movw	r30, r24
    1e06:	e2 0f       	add	r30, r18
    1e08:	f3 1f       	adc	r31, r19
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	01 f5       	brne	.+64     	; 0x1e50 <Port_Init+0x2b6>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1e10:	a1 e3       	ldi	r26, 0x31	; 49
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e1 e3       	ldi	r30, 0x31	; 49
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	29 81       	ldd	r18, Y+1	; 0x01
    1e1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e20:	c9 01       	movw	r24, r18
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	28 0f       	add	r18, r24
    1e28:	39 1f       	adc	r19, r25
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	81 81       	ldd	r24, Z+1	; 0x01
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <Port_Init+0x2ac>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <Port_Init+0x2a8>
    1e4a:	84 2b       	or	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	20 c0       	rjmp	.+64     	; 0x1e90 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1e50:	a1 e3       	ldi	r26, 0x31	; 49
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e1 e3       	ldi	r30, 0x31	; 49
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	29 81       	ldd	r18, Y+1	; 0x01
    1e5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e60:	c9 01       	movw	r24, r18
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	28 0f       	add	r18, r24
    1e68:	39 1f       	adc	r19, r25
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	fc 01       	movw	r30, r24
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	81 81       	ldd	r24, Z+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <Port_Init+0x2ec>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <Port_Init+0x2e8>
    1e8a:	80 95       	com	r24
    1e8c:	84 23       	and	r24, r20
    1e8e:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i=0; i < 32; i++) {
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	80 32       	cpi	r24, 0x20	; 32
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	0c f4       	brge	.+2      	; 0x1ea6 <Port_Init+0x30c>
    1ea4:	88 ce       	rjmp	.-752    	; 0x1bb6 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    1ea6:	26 96       	adiw	r28, 0x06	; 6
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    1ec0:	af e5       	ldi	r26, 0x5F	; 95
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	ef e5       	ldi	r30, 0x5F	; 95
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	80 68       	ori	r24, 0x80	; 128
    1ecc:	8c 93       	st	X, r24
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <GI_voidDisable>:

void GI_voidDisable(void)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    1edc:	af e5       	ldi	r26, 0x5F	; 95
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	ef e5       	ldi	r30, 0x5F	; 95
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 77       	andi	r24, 0x7F	; 127
    1ee8:	8c 93       	st	X, r24
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	28 97       	sbiw	r28, 0x08	; 8
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	38 87       	std	Y+8, r19	; 0x08
    1f10:	2f 83       	std	Y+7, r18	; 0x07
    1f12:	8f 81       	ldd	r24, Y+7	; 0x07
    1f14:	98 85       	ldd	r25, Y+8	; 0x08
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	91 05       	cpc	r25, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <EXTI_voidInit+0x2e>
    1f1c:	5a c0       	rjmp	.+180    	; 0x1fd2 <EXTI_voidInit+0xe2>
    1f1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1f20:	38 85       	ldd	r19, Y+8	; 0x08
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <EXTI_voidInit+0x3a>
    1f28:	a3 c0       	rjmp	.+326    	; 0x2070 <EXTI_voidInit+0x180>
    1f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2c:	98 85       	ldd	r25, Y+8	; 0x08
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <EXTI_voidInit+0x44>
    1f32:	b3 c0       	rjmp	.+358    	; 0x209a <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	3e 83       	std	Y+6, r19	; 0x06
    1f3c:	2d 83       	std	Y+5, r18	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	91 05       	cpc	r25, r1
    1f46:	39 f1       	breq	.+78     	; 0x1f96 <EXTI_voidInit+0xa6>
    1f48:	2d 81       	ldd	r18, Y+5	; 0x05
    1f4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f4c:	22 30       	cpi	r18, 0x02	; 2
    1f4e:	31 05       	cpc	r19, r1
    1f50:	99 f0       	breq	.+38     	; 0x1f78 <EXTI_voidInit+0x88>
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	9e 81       	ldd	r25, Y+6	; 0x06
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f1       	breq	.+90     	; 0x1fb4 <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    1f5a:	a5 e5       	ldi	r26, 0x55	; 85
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e5 e5       	ldi	r30, 0x55	; 85
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	81 60       	ori	r24, 0x01	; 1
    1f66:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1f68:	a5 e5       	ldi	r26, 0x55	; 85
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e5 e5       	ldi	r30, 0x55	; 85
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	82 60       	ori	r24, 0x02	; 2
    1f74:	8c 93       	st	X, r24
    1f76:	91 c0       	rjmp	.+290    	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    1f78:	a5 e5       	ldi	r26, 0x55	; 85
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e5 e5       	ldi	r30, 0x55	; 85
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8e 7f       	andi	r24, 0xFE	; 254
    1f84:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1f86:	a5 e5       	ldi	r26, 0x55	; 85
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e5 e5       	ldi	r30, 0x55	; 85
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	82 60       	ori	r24, 0x02	; 2
    1f92:	8c 93       	st	X, r24
    1f94:	82 c0       	rjmp	.+260    	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    1f96:	a5 e5       	ldi	r26, 0x55	; 85
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e5 e5       	ldi	r30, 0x55	; 85
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	81 60       	ori	r24, 0x01	; 1
    1fa2:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    1fa4:	a5 e5       	ldi	r26, 0x55	; 85
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e5 e5       	ldi	r30, 0x55	; 85
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8d 7f       	andi	r24, 0xFD	; 253
    1fb0:	8c 93       	st	X, r24
    1fb2:	73 c0       	rjmp	.+230    	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    1fb4:	a5 e5       	ldi	r26, 0x55	; 85
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e5 e5       	ldi	r30, 0x55	; 85
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8e 7f       	andi	r24, 0xFE	; 254
    1fc0:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    1fc2:	a5 e5       	ldi	r26, 0x55	; 85
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e5 e5       	ldi	r30, 0x55	; 85
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8d 7f       	andi	r24, 0xFD	; 253
    1fce:	8c 93       	st	X, r24
    1fd0:	64 c0       	rjmp	.+200    	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	3c 83       	std	Y+4, r19	; 0x04
    1fda:	2b 83       	std	Y+3, r18	; 0x03
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	39 f1       	breq	.+78     	; 0x2034 <EXTI_voidInit+0x144>
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	99 f0       	breq	.+38     	; 0x2016 <EXTI_voidInit+0x126>
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f1       	breq	.+90     	; 0x2052 <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    1ff8:	a5 e5       	ldi	r26, 0x55	; 85
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e5 e5       	ldi	r30, 0x55	; 85
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	84 60       	ori	r24, 0x04	; 4
    2004:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    2006:	a5 e5       	ldi	r26, 0x55	; 85
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e5 e5       	ldi	r30, 0x55	; 85
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	88 60       	ori	r24, 0x08	; 8
    2012:	8c 93       	st	X, r24
    2014:	42 c0       	rjmp	.+132    	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    2016:	a5 e5       	ldi	r26, 0x55	; 85
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e5 e5       	ldi	r30, 0x55	; 85
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	8b 7f       	andi	r24, 0xFB	; 251
    2022:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    2024:	a5 e5       	ldi	r26, 0x55	; 85
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e5 e5       	ldi	r30, 0x55	; 85
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	88 60       	ori	r24, 0x08	; 8
    2030:	8c 93       	st	X, r24
    2032:	33 c0       	rjmp	.+102    	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    2034:	a5 e5       	ldi	r26, 0x55	; 85
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e5 e5       	ldi	r30, 0x55	; 85
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	84 60       	ori	r24, 0x04	; 4
    2040:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    2042:	a5 e5       	ldi	r26, 0x55	; 85
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e5 e5       	ldi	r30, 0x55	; 85
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	87 7f       	andi	r24, 0xF7	; 247
    204e:	8c 93       	st	X, r24
    2050:	24 c0       	rjmp	.+72     	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    2052:	a5 e5       	ldi	r26, 0x55	; 85
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e5 e5       	ldi	r30, 0x55	; 85
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8b 7f       	andi	r24, 0xFB	; 251
    205e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    2060:	a5 e5       	ldi	r26, 0x55	; 85
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e5 e5       	ldi	r30, 0x55	; 85
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	87 7f       	andi	r24, 0xF7	; 247
    206c:	8c 93       	st	X, r24
    206e:	15 c0       	rjmp	.+42     	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	82 30       	cpi	r24, 0x02	; 2
    2078:	91 05       	cpc	r25, r1
    207a:	41 f0       	breq	.+16     	; 0x208c <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    207c:	a4 e5       	ldi	r26, 0x54	; 84
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e4 e5       	ldi	r30, 0x54	; 84
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	80 64       	ori	r24, 0x40	; 64
    2088:	8c 93       	st	X, r24
    208a:	07 c0       	rjmp	.+14     	; 0x209a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    208c:	a4 e5       	ldi	r26, 0x54	; 84
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e4 e5       	ldi	r30, 0x54	; 84
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8f 7b       	andi	r24, 0xBF	; 191
    2098:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    209a:	28 96       	adiw	r28, 0x08	; 8
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <EXTI_voidEnable+0x6>
    20b2:	0f 92       	push	r0
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	3b 83       	std	Y+3, r19	; 0x03
    20c2:	2a 83       	std	Y+2, r18	; 0x02
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	91 05       	cpc	r25, r1
    20cc:	89 f0       	breq	.+34     	; 0x20f0 <EXTI_voidEnable+0x44>
    20ce:	2a 81       	ldd	r18, Y+2	; 0x02
    20d0:	3b 81       	ldd	r19, Y+3	; 0x03
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	a1 f0       	breq	.+40     	; 0x2100 <EXTI_voidEnable+0x54>
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	b9 f4       	brne	.+46     	; 0x210e <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    20e0:	ab e5       	ldi	r26, 0x5B	; 91
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	eb e5       	ldi	r30, 0x5B	; 91
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	80 64       	ori	r24, 0x40	; 64
    20ec:	8c 93       	st	X, r24
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    20f0:	ab e5       	ldi	r26, 0x5B	; 91
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	eb e5       	ldi	r30, 0x5B	; 91
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	80 68       	ori	r24, 0x80	; 128
    20fc:	8c 93       	st	X, r24
    20fe:	07 c0       	rjmp	.+14     	; 0x210e <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    2100:	ab e5       	ldi	r26, 0x5B	; 91
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	eb e5       	ldi	r30, 0x5B	; 91
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	80 62       	ori	r24, 0x20	; 32
    210c:	8c 93       	st	X, r24
        break;
    }
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <EXTI_voidDisable+0x6>
    2120:	0f 92       	push	r0
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	3b 83       	std	Y+3, r19	; 0x03
    2130:	2a 83       	std	Y+2, r18	; 0x02
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	9b 81       	ldd	r25, Y+3	; 0x03
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	91 05       	cpc	r25, r1
    213a:	89 f0       	breq	.+34     	; 0x215e <EXTI_voidDisable+0x44>
    213c:	2a 81       	ldd	r18, Y+2	; 0x02
    213e:	3b 81       	ldd	r19, Y+3	; 0x03
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	31 05       	cpc	r19, r1
    2144:	a1 f0       	breq	.+40     	; 0x216e <EXTI_voidDisable+0x54>
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	9b 81       	ldd	r25, Y+3	; 0x03
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	b9 f4       	brne	.+46     	; 0x217c <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    214e:	ab e5       	ldi	r26, 0x5B	; 91
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	eb e5       	ldi	r30, 0x5B	; 91
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8f 7b       	andi	r24, 0xBF	; 191
    215a:	8c 93       	st	X, r24
    215c:	0f c0       	rjmp	.+30     	; 0x217c <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    215e:	ab e5       	ldi	r26, 0x5B	; 91
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	eb e5       	ldi	r30, 0x5B	; 91
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8f 77       	andi	r24, 0x7F	; 127
    216a:	8c 93       	st	X, r24
    216c:	07 c0       	rjmp	.+14     	; 0x217c <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    216e:	ab e5       	ldi	r26, 0x5B	; 91
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	eb e5       	ldi	r30, 0x5B	; 91
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	8f 7d       	andi	r24, 0xDF	; 223
    217a:	8c 93       	st	X, r24
        break;
    }
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <EXTRI_voidSetCallBackINT+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <EXTRI_voidSetCallBackINT+0x8>
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	7b 83       	std	Y+3, r23	; 0x03
    219a:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	39 f1       	breq	.+78     	; 0x21f2 <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	3d 83       	std	Y+5, r19	; 0x05
    21ac:	2c 83       	std	Y+4, r18	; 0x04
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	9d 81       	ldd	r25, Y+5	; 0x05
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	91 05       	cpc	r25, r1
    21b6:	81 f0       	breq	.+32     	; 0x21d8 <EXTRI_voidSetCallBackINT+0x50>
    21b8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ba:	3d 81       	ldd	r19, Y+5	; 0x05
    21bc:	22 30       	cpi	r18, 0x02	; 2
    21be:	31 05       	cpc	r19, r1
    21c0:	91 f0       	breq	.+36     	; 0x21e6 <EXTRI_voidSetCallBackINT+0x5e>
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	a1 f4       	brne	.+40     	; 0x21f2 <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	90 93 53 02 	sts	0x0253, r25
    21d2:	80 93 52 02 	sts	0x0252, r24
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
    21dc:	90 93 55 02 	sts	0x0255, r25
    21e0:	80 93 54 02 	sts	0x0254, r24
    21e4:	06 c0       	rjmp	.+12     	; 0x21f2 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ea:	90 93 57 02 	sts	0x0257, r25
    21ee:	80 93 56 02 	sts	0x0256, r24
            break;
        default:
            break;
        }
    }
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    2202:	1f 92       	push	r1
    2204:	0f 92       	push	r0
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	0f 92       	push	r0
    220a:	11 24       	eor	r1, r1
    220c:	2f 93       	push	r18
    220e:	3f 93       	push	r19
    2210:	4f 93       	push	r20
    2212:	5f 93       	push	r21
    2214:	6f 93       	push	r22
    2216:	7f 93       	push	r23
    2218:	8f 93       	push	r24
    221a:	9f 93       	push	r25
    221c:	af 93       	push	r26
    221e:	bf 93       	push	r27
    2220:	ef 93       	push	r30
    2222:	ff 93       	push	r31
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    222c:	80 91 52 02 	lds	r24, 0x0252
    2230:	90 91 53 02 	lds	r25, 0x0253
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	29 f0       	breq	.+10     	; 0x2242 <__vector_1+0x40>
        private_pCallBackINT0();
    2238:	e0 91 52 02 	lds	r30, 0x0252
    223c:	f0 91 53 02 	lds	r31, 0x0253
    2240:	09 95       	icall
    }
}
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	ff 91       	pop	r31
    2248:	ef 91       	pop	r30
    224a:	bf 91       	pop	r27
    224c:	af 91       	pop	r26
    224e:	9f 91       	pop	r25
    2250:	8f 91       	pop	r24
    2252:	7f 91       	pop	r23
    2254:	6f 91       	pop	r22
    2256:	5f 91       	pop	r21
    2258:	4f 91       	pop	r20
    225a:	3f 91       	pop	r19
    225c:	2f 91       	pop	r18
    225e:	0f 90       	pop	r0
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	0f 90       	pop	r0
    2264:	1f 90       	pop	r1
    2266:	18 95       	reti

00002268 <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    2268:	1f 92       	push	r1
    226a:	0f 92       	push	r0
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	0f 92       	push	r0
    2270:	11 24       	eor	r1, r1
    2272:	2f 93       	push	r18
    2274:	3f 93       	push	r19
    2276:	4f 93       	push	r20
    2278:	5f 93       	push	r21
    227a:	6f 93       	push	r22
    227c:	7f 93       	push	r23
    227e:	8f 93       	push	r24
    2280:	9f 93       	push	r25
    2282:	af 93       	push	r26
    2284:	bf 93       	push	r27
    2286:	ef 93       	push	r30
    2288:	ff 93       	push	r31
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    2292:	80 91 54 02 	lds	r24, 0x0254
    2296:	90 91 55 02 	lds	r25, 0x0255
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	29 f0       	breq	.+10     	; 0x22a8 <__vector_2+0x40>
        private_pCallBackINT1();
    229e:	e0 91 54 02 	lds	r30, 0x0254
    22a2:	f0 91 55 02 	lds	r31, 0x0255
    22a6:	09 95       	icall
    }
}
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	ff 91       	pop	r31
    22ae:	ef 91       	pop	r30
    22b0:	bf 91       	pop	r27
    22b2:	af 91       	pop	r26
    22b4:	9f 91       	pop	r25
    22b6:	8f 91       	pop	r24
    22b8:	7f 91       	pop	r23
    22ba:	6f 91       	pop	r22
    22bc:	5f 91       	pop	r21
    22be:	4f 91       	pop	r20
    22c0:	3f 91       	pop	r19
    22c2:	2f 91       	pop	r18
    22c4:	0f 90       	pop	r0
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	0f 90       	pop	r0
    22ca:	1f 90       	pop	r1
    22cc:	18 95       	reti

000022ce <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	2f 93       	push	r18
    22da:	3f 93       	push	r19
    22dc:	4f 93       	push	r20
    22de:	5f 93       	push	r21
    22e0:	6f 93       	push	r22
    22e2:	7f 93       	push	r23
    22e4:	8f 93       	push	r24
    22e6:	9f 93       	push	r25
    22e8:	af 93       	push	r26
    22ea:	bf 93       	push	r27
    22ec:	ef 93       	push	r30
    22ee:	ff 93       	push	r31
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    22f8:	80 91 56 02 	lds	r24, 0x0256
    22fc:	90 91 57 02 	lds	r25, 0x0257
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	29 f0       	breq	.+10     	; 0x230e <__vector_3+0x40>
        private_pCallBackINT2();
    2304:	e0 91 56 02 	lds	r30, 0x0256
    2308:	f0 91 57 02 	lds	r31, 0x0257
    230c:	09 95       	icall
    }
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	bf 91       	pop	r27
    2318:	af 91       	pop	r26
    231a:	9f 91       	pop	r25
    231c:	8f 91       	pop	r24
    231e:	7f 91       	pop	r23
    2320:	6f 91       	pop	r22
    2322:	5f 91       	pop	r21
    2324:	4f 91       	pop	r20
    2326:	3f 91       	pop	r19
    2328:	2f 91       	pop	r18
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <Dio_WriteChannel+0x6>
    233a:	00 d0       	rcall	.+0      	; 0x233c <Dio_WriteChannel+0x8>
    233c:	0f 92       	push	r0
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	86 95       	lsr	r24
    234a:	86 95       	lsr	r24
    234c:	86 95       	lsr	r24
    234e:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	3d 83       	std	Y+5, r19	; 0x05
    2358:	2c 83       	std	Y+4, r18	; 0x04
    235a:	8c 81       	ldd	r24, Y+4	; 0x04
    235c:	9d 81       	ldd	r25, Y+5	; 0x05
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	91 05       	cpc	r25, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <Dio_WriteChannel+0x32>
    2364:	43 c0       	rjmp	.+134    	; 0x23ec <Dio_WriteChannel+0xb8>
    2366:	2c 81       	ldd	r18, Y+4	; 0x04
    2368:	3d 81       	ldd	r19, Y+5	; 0x05
    236a:	22 30       	cpi	r18, 0x02	; 2
    236c:	31 05       	cpc	r19, r1
    236e:	2c f4       	brge	.+10     	; 0x237a <Dio_WriteChannel+0x46>
    2370:	8c 81       	ldd	r24, Y+4	; 0x04
    2372:	9d 81       	ldd	r25, Y+5	; 0x05
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	71 f0       	breq	.+28     	; 0x2394 <Dio_WriteChannel+0x60>
    2378:	ce c0       	rjmp	.+412    	; 0x2516 <Dio_WriteChannel+0x1e2>
    237a:	2c 81       	ldd	r18, Y+4	; 0x04
    237c:	3d 81       	ldd	r19, Y+5	; 0x05
    237e:	22 30       	cpi	r18, 0x02	; 2
    2380:	31 05       	cpc	r19, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <Dio_WriteChannel+0x52>
    2384:	65 c0       	rjmp	.+202    	; 0x2450 <Dio_WriteChannel+0x11c>
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	83 30       	cpi	r24, 0x03	; 3
    238c:	91 05       	cpc	r25, r1
    238e:	09 f4       	brne	.+2      	; 0x2392 <Dio_WriteChannel+0x5e>
    2390:	91 c0       	rjmp	.+290    	; 0x24b4 <Dio_WriteChannel+0x180>
    2392:	c1 c0       	rjmp	.+386    	; 0x2516 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	a1 f4       	brne	.+40     	; 0x23c2 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    239a:	ab e3       	ldi	r26, 0x3B	; 59
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	eb e3       	ldi	r30, 0x3B	; 59
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <Dio_WriteChannel+0x84>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <Dio_WriteChannel+0x80>
    23bc:	84 2b       	or	r24, r20
    23be:	8c 93       	st	X, r24
    23c0:	aa c0       	rjmp	.+340    	; 0x2516 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    23c2:	ab e3       	ldi	r26, 0x3B	; 59
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	eb e3       	ldi	r30, 0x3B	; 59
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <Dio_WriteChannel+0xac>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <Dio_WriteChannel+0xa8>
    23e4:	80 95       	com	r24
    23e6:	84 23       	and	r24, r20
    23e8:	8c 93       	st	X, r24
    23ea:	95 c0       	rjmp	.+298    	; 0x2516 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	81 30       	cpi	r24, 0x01	; 1
    23f0:	b9 f4       	brne	.+46     	; 0x2420 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    23f2:	a8 e3       	ldi	r26, 0x38	; 56
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e8 e3       	ldi	r30, 0x38	; 56
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	48 2f       	mov	r20, r24
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 01       	movw	r18, r24
    2406:	27 70       	andi	r18, 0x07	; 7
    2408:	30 70       	andi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	02 2e       	mov	r0, r18
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <Dio_WriteChannel+0xe2>
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	0a 94       	dec	r0
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <Dio_WriteChannel+0xde>
    241a:	84 2b       	or	r24, r20
    241c:	8c 93       	st	X, r24
    241e:	7b c0       	rjmp	.+246    	; 0x2516 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    2420:	a8 e3       	ldi	r26, 0x38	; 56
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e8 e3       	ldi	r30, 0x38	; 56
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	48 2f       	mov	r20, r24
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 01       	movw	r18, r24
    2434:	27 70       	andi	r18, 0x07	; 7
    2436:	30 70       	andi	r19, 0x00	; 0
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 2e       	mov	r0, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <Dio_WriteChannel+0x110>
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	0a 94       	dec	r0
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <Dio_WriteChannel+0x10c>
    2448:	80 95       	com	r24
    244a:	84 23       	and	r24, r20
    244c:	8c 93       	st	X, r24
    244e:	63 c0       	rjmp	.+198    	; 0x2516 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	81 30       	cpi	r24, 0x01	; 1
    2454:	b9 f4       	brne	.+46     	; 0x2484 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    2456:	a5 e3       	ldi	r26, 0x35	; 53
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e5 e3       	ldi	r30, 0x35	; 53
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	48 2f       	mov	r20, r24
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9c 01       	movw	r18, r24
    246a:	27 70       	andi	r18, 0x07	; 7
    246c:	30 70       	andi	r19, 0x00	; 0
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	02 2e       	mov	r0, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <Dio_WriteChannel+0x146>
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	0a 94       	dec	r0
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <Dio_WriteChannel+0x142>
    247e:	84 2b       	or	r24, r20
    2480:	8c 93       	st	X, r24
    2482:	49 c0       	rjmp	.+146    	; 0x2516 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    2484:	a5 e3       	ldi	r26, 0x35	; 53
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e5 e3       	ldi	r30, 0x35	; 53
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9c 01       	movw	r18, r24
    2498:	27 70       	andi	r18, 0x07	; 7
    249a:	30 70       	andi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <Dio_WriteChannel+0x174>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <Dio_WriteChannel+0x170>
    24ac:	80 95       	com	r24
    24ae:	84 23       	and	r24, r20
    24b0:	8c 93       	st	X, r24
    24b2:	31 c0       	rjmp	.+98     	; 0x2516 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	81 30       	cpi	r24, 0x01	; 1
    24b8:	b9 f4       	brne	.+46     	; 0x24e8 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    24ba:	a2 e3       	ldi	r26, 0x32	; 50
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e2 e3       	ldi	r30, 0x32	; 50
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	48 2f       	mov	r20, r24
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9c 01       	movw	r18, r24
    24ce:	27 70       	andi	r18, 0x07	; 7
    24d0:	30 70       	andi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <Dio_WriteChannel+0x1aa>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <Dio_WriteChannel+0x1a6>
    24e2:	84 2b       	or	r24, r20
    24e4:	8c 93       	st	X, r24
    24e6:	17 c0       	rjmp	.+46     	; 0x2516 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    24e8:	a2 e3       	ldi	r26, 0x32	; 50
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e2 e3       	ldi	r30, 0x32	; 50
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9c 01       	movw	r18, r24
    24fc:	27 70       	andi	r18, 0x07	; 7
    24fe:	30 70       	andi	r19, 0x00	; 0
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	02 2e       	mov	r0, r18
    2506:	02 c0       	rjmp	.+4      	; 0x250c <Dio_WriteChannel+0x1d8>
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	0a 94       	dec	r0
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <Dio_WriteChannel+0x1d4>
    2510:	80 95       	com	r24
    2512:	84 23       	and	r24, r20
    2514:	8c 93       	st	X, r24
		}
		break;
	}
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	00 d0       	rcall	.+0      	; 0x252c <Dio_ReadChannel+0x6>
    252c:	00 d0       	rcall	.+0      	; 0x252e <Dio_ReadChannel+0x8>
    252e:	0f 92       	push	r0
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	86 95       	lsr	r24
    253a:	86 95       	lsr	r24
    253c:	86 95       	lsr	r24
    253e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	3d 83       	std	Y+5, r19	; 0x05
    2548:	2c 83       	std	Y+4, r18	; 0x04
    254a:	4c 81       	ldd	r20, Y+4	; 0x04
    254c:	5d 81       	ldd	r21, Y+5	; 0x05
    254e:	41 30       	cpi	r20, 0x01	; 1
    2550:	51 05       	cpc	r21, r1
    2552:	49 f1       	breq	.+82     	; 0x25a6 <Dio_ReadChannel+0x80>
    2554:	8c 81       	ldd	r24, Y+4	; 0x04
    2556:	9d 81       	ldd	r25, Y+5	; 0x05
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	91 05       	cpc	r25, r1
    255c:	34 f4       	brge	.+12     	; 0x256a <Dio_ReadChannel+0x44>
    255e:	2c 81       	ldd	r18, Y+4	; 0x04
    2560:	3d 81       	ldd	r19, Y+5	; 0x05
    2562:	21 15       	cp	r18, r1
    2564:	31 05       	cpc	r19, r1
    2566:	69 f0       	breq	.+26     	; 0x2582 <Dio_ReadChannel+0x5c>
    2568:	59 c0       	rjmp	.+178    	; 0x261c <Dio_ReadChannel+0xf6>
    256a:	4c 81       	ldd	r20, Y+4	; 0x04
    256c:	5d 81       	ldd	r21, Y+5	; 0x05
    256e:	42 30       	cpi	r20, 0x02	; 2
    2570:	51 05       	cpc	r21, r1
    2572:	69 f1       	breq	.+90     	; 0x25ce <Dio_ReadChannel+0xa8>
    2574:	8c 81       	ldd	r24, Y+4	; 0x04
    2576:	9d 81       	ldd	r25, Y+5	; 0x05
    2578:	83 30       	cpi	r24, 0x03	; 3
    257a:	91 05       	cpc	r25, r1
    257c:	09 f4       	brne	.+2      	; 0x2580 <Dio_ReadChannel+0x5a>
    257e:	3b c0       	rjmp	.+118    	; 0x25f6 <Dio_ReadChannel+0xd0>
    2580:	4d c0       	rjmp	.+154    	; 0x261c <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2582:	e9 e3       	ldi	r30, 0x39	; 57
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a9 01       	movw	r20, r18
    2594:	02 c0       	rjmp	.+4      	; 0x259a <Dio_ReadChannel+0x74>
    2596:	55 95       	asr	r21
    2598:	47 95       	ror	r20
    259a:	8a 95       	dec	r24
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <Dio_ReadChannel+0x70>
    259e:	ca 01       	movw	r24, r20
    25a0:	81 70       	andi	r24, 0x01	; 1
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	3b c0       	rjmp	.+118    	; 0x261c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    25a6:	e6 e3       	ldi	r30, 0x36	; 54
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	87 70       	andi	r24, 0x07	; 7
    25b8:	90 70       	andi	r25, 0x00	; 0
    25ba:	a9 01       	movw	r20, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <Dio_ReadChannel+0x9c>
    25be:	55 95       	asr	r21
    25c0:	47 95       	ror	r20
    25c2:	8a 95       	dec	r24
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <Dio_ReadChannel+0x98>
    25c6:	ca 01       	movw	r24, r20
    25c8:	81 70       	andi	r24, 0x01	; 1
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	27 c0       	rjmp	.+78     	; 0x261c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    25ce:	e3 e3       	ldi	r30, 0x33	; 51
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	87 70       	andi	r24, 0x07	; 7
    25e0:	90 70       	andi	r25, 0x00	; 0
    25e2:	a9 01       	movw	r20, r18
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <Dio_ReadChannel+0xc4>
    25e6:	55 95       	asr	r21
    25e8:	47 95       	ror	r20
    25ea:	8a 95       	dec	r24
    25ec:	e2 f7       	brpl	.-8      	; 0x25e6 <Dio_ReadChannel+0xc0>
    25ee:	ca 01       	movw	r24, r20
    25f0:	81 70       	andi	r24, 0x01	; 1
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	13 c0       	rjmp	.+38     	; 0x261c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    25f6:	e0 e3       	ldi	r30, 0x30	; 48
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	87 70       	andi	r24, 0x07	; 7
    2608:	90 70       	andi	r25, 0x00	; 0
    260a:	a9 01       	movw	r20, r18
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <Dio_ReadChannel+0xec>
    260e:	55 95       	asr	r21
    2610:	47 95       	ror	r20
    2612:	8a 95       	dec	r24
    2614:	e2 f7       	brpl	.-8      	; 0x260e <Dio_ReadChannel+0xe8>
    2616:	ca 01       	movw	r24, r20
    2618:	81 70       	andi	r24, 0x01	; 1
    261a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <Dio_FlipChannel+0x6>
    2634:	00 d0       	rcall	.+0      	; 0x2636 <Dio_FlipChannel+0x8>
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	86 95       	lsr	r24
    2640:	86 95       	lsr	r24
    2642:	86 95       	lsr	r24
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	3c 83       	std	Y+4, r19	; 0x04
    264a:	2b 83       	std	Y+3, r18	; 0x03
    264c:	4b 81       	ldd	r20, Y+3	; 0x03
    264e:	5c 81       	ldd	r21, Y+4	; 0x04
    2650:	41 30       	cpi	r20, 0x01	; 1
    2652:	51 05       	cpc	r21, r1
    2654:	09 f4       	brne	.+2      	; 0x2658 <Dio_FlipChannel+0x2a>
    2656:	3c c0       	rjmp	.+120    	; 0x26d0 <Dio_FlipChannel+0xa2>
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	91 05       	cpc	r25, r1
    2660:	34 f4       	brge	.+12     	; 0x266e <Dio_FlipChannel+0x40>
    2662:	2b 81       	ldd	r18, Y+3	; 0x03
    2664:	3c 81       	ldd	r19, Y+4	; 0x04
    2666:	21 15       	cp	r18, r1
    2668:	31 05       	cpc	r19, r1
    266a:	71 f0       	breq	.+28     	; 0x2688 <Dio_FlipChannel+0x5a>
    266c:	ab c0       	rjmp	.+342    	; 0x27c4 <Dio_FlipChannel+0x196>
    266e:	4b 81       	ldd	r20, Y+3	; 0x03
    2670:	5c 81       	ldd	r21, Y+4	; 0x04
    2672:	42 30       	cpi	r20, 0x02	; 2
    2674:	51 05       	cpc	r21, r1
    2676:	09 f4       	brne	.+2      	; 0x267a <Dio_FlipChannel+0x4c>
    2678:	54 c0       	rjmp	.+168    	; 0x2722 <Dio_FlipChannel+0xf4>
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	83 30       	cpi	r24, 0x03	; 3
    2680:	91 05       	cpc	r25, r1
    2682:	09 f4       	brne	.+2      	; 0x2686 <Dio_FlipChannel+0x58>
    2684:	77 c0       	rjmp	.+238    	; 0x2774 <Dio_FlipChannel+0x146>
    2686:	9e c0       	rjmp	.+316    	; 0x27c4 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    2688:	ab e3       	ldi	r26, 0x3B	; 59
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	eb e3       	ldi	r30, 0x3B	; 59
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	48 2f       	mov	r20, r24
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <Dio_FlipChannel+0x76>
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	2a 95       	dec	r18
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <Dio_FlipChannel+0x72>
    26a8:	84 27       	eor	r24, r20
    26aa:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    26ac:	eb e3       	ldi	r30, 0x3B	; 59
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a9 01       	movw	r20, r18
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <Dio_FlipChannel+0x96>
    26c0:	55 95       	asr	r21
    26c2:	47 95       	ror	r20
    26c4:	8a 95       	dec	r24
    26c6:	e2 f7       	brpl	.-8      	; 0x26c0 <Dio_FlipChannel+0x92>
    26c8:	ca 01       	movw	r24, r20
    26ca:	81 70       	andi	r24, 0x01	; 1
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	7a c0       	rjmp	.+244    	; 0x27c4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    26d0:	a8 e3       	ldi	r26, 0x38	; 56
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e8 e3       	ldi	r30, 0x38	; 56
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	48 2f       	mov	r20, r24
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	88 2f       	mov	r24, r24
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9c 01       	movw	r18, r24
    26e4:	27 70       	andi	r18, 0x07	; 7
    26e6:	30 70       	andi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <Dio_FlipChannel+0xc4>
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	2a 95       	dec	r18
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <Dio_FlipChannel+0xc0>
    26f6:	84 27       	eor	r24, r20
    26f8:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    26fa:	e8 e3       	ldi	r30, 0x38	; 56
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	87 70       	andi	r24, 0x07	; 7
    270c:	90 70       	andi	r25, 0x00	; 0
    270e:	a9 01       	movw	r20, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <Dio_FlipChannel+0xe8>
    2712:	55 95       	asr	r21
    2714:	47 95       	ror	r20
    2716:	8a 95       	dec	r24
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <Dio_FlipChannel+0xe4>
    271a:	ca 01       	movw	r24, r20
    271c:	81 70       	andi	r24, 0x01	; 1
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	51 c0       	rjmp	.+162    	; 0x27c4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    2722:	a5 e3       	ldi	r26, 0x35	; 53
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e5 e3       	ldi	r30, 0x35	; 53
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	48 2f       	mov	r20, r24
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9c 01       	movw	r18, r24
    2736:	27 70       	andi	r18, 0x07	; 7
    2738:	30 70       	andi	r19, 0x00	; 0
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <Dio_FlipChannel+0x116>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	2a 95       	dec	r18
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <Dio_FlipChannel+0x112>
    2748:	84 27       	eor	r24, r20
    274a:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    274c:	e5 e3       	ldi	r30, 0x35	; 53
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	87 70       	andi	r24, 0x07	; 7
    275e:	90 70       	andi	r25, 0x00	; 0
    2760:	a9 01       	movw	r20, r18
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <Dio_FlipChannel+0x13a>
    2764:	55 95       	asr	r21
    2766:	47 95       	ror	r20
    2768:	8a 95       	dec	r24
    276a:	e2 f7       	brpl	.-8      	; 0x2764 <Dio_FlipChannel+0x136>
    276c:	ca 01       	movw	r24, r20
    276e:	81 70       	andi	r24, 0x01	; 1
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	28 c0       	rjmp	.+80     	; 0x27c4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    2774:	a2 e3       	ldi	r26, 0x32	; 50
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e2 e3       	ldi	r30, 0x32	; 50
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	48 2f       	mov	r20, r24
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	88 2f       	mov	r24, r24
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 01       	movw	r18, r24
    2788:	27 70       	andi	r18, 0x07	; 7
    278a:	30 70       	andi	r19, 0x00	; 0
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <Dio_FlipChannel+0x168>
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	2a 95       	dec	r18
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <Dio_FlipChannel+0x164>
    279a:	84 27       	eor	r24, r20
    279c:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    279e:	e2 e3       	ldi	r30, 0x32	; 50
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	87 70       	andi	r24, 0x07	; 7
    27b0:	90 70       	andi	r25, 0x00	; 0
    27b2:	a9 01       	movw	r20, r18
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <Dio_FlipChannel+0x18c>
    27b6:	55 95       	asr	r21
    27b8:	47 95       	ror	r20
    27ba:	8a 95       	dec	r24
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <Dio_FlipChannel+0x188>
    27be:	ca 01       	movw	r24, r20
    27c0:	81 70       	andi	r24, 0x01	; 1
    27c2:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	00 d0       	rcall	.+0      	; 0x27da <Dio_WritePort+0x6>
    27da:	00 d0       	rcall	.+0      	; 0x27dc <Dio_WritePort+0x8>
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	3c 83       	std	Y+4, r19	; 0x04
    27ec:	2b 83       	std	Y+3, r18	; 0x03
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	81 30       	cpi	r24, 0x01	; 1
    27f4:	91 05       	cpc	r25, r1
    27f6:	d1 f0       	breq	.+52     	; 0x282c <Dio_WritePort+0x58>
    27f8:	2b 81       	ldd	r18, Y+3	; 0x03
    27fa:	3c 81       	ldd	r19, Y+4	; 0x04
    27fc:	22 30       	cpi	r18, 0x02	; 2
    27fe:	31 05       	cpc	r19, r1
    2800:	2c f4       	brge	.+10     	; 0x280c <Dio_WritePort+0x38>
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	61 f0       	breq	.+24     	; 0x2822 <Dio_WritePort+0x4e>
    280a:	1e c0       	rjmp	.+60     	; 0x2848 <Dio_WritePort+0x74>
    280c:	2b 81       	ldd	r18, Y+3	; 0x03
    280e:	3c 81       	ldd	r19, Y+4	; 0x04
    2810:	22 30       	cpi	r18, 0x02	; 2
    2812:	31 05       	cpc	r19, r1
    2814:	81 f0       	breq	.+32     	; 0x2836 <Dio_WritePort+0x62>
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	83 30       	cpi	r24, 0x03	; 3
    281c:	91 05       	cpc	r25, r1
    281e:	81 f0       	breq	.+32     	; 0x2840 <Dio_WritePort+0x6c>
    2820:	13 c0       	rjmp	.+38     	; 0x2848 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    2822:	eb e3       	ldi	r30, 0x3B	; 59
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	80 83       	st	Z, r24
    282a:	0e c0       	rjmp	.+28     	; 0x2848 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    282c:	e8 e3       	ldi	r30, 0x38	; 56
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	80 83       	st	Z, r24
    2834:	09 c0       	rjmp	.+18     	; 0x2848 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    2836:	e5 e3       	ldi	r30, 0x35	; 53
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	80 83       	st	Z, r24
    283e:	04 c0       	rjmp	.+8      	; 0x2848 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    2840:	e2 e3       	ldi	r30, 0x32	; 50
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	80 83       	st	Z, r24
		break;
	}
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <SevenSeg_SegEnable>:

#include "SEVEN_SEGMENT.h"
#include <avr/io.h>
#include <avr/delay.h>

void SevenSeg_SegEnable(SegNumber seg) {
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <SevenSeg_SegEnable+0x6>
    285c:	0f 92       	push	r0
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	89 83       	std	Y+1, r24	; 0x01
	switch (seg) {
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	28 2f       	mov	r18, r24
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	3b 83       	std	Y+3, r19	; 0x03
    286c:	2a 83       	std	Y+2, r18	; 0x02
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	9b 81       	ldd	r25, Y+3	; 0x03
    2872:	83 30       	cpi	r24, 0x03	; 3
    2874:	91 05       	cpc	r25, r1
    2876:	b1 f0       	breq	.+44     	; 0x28a4 <SevenSeg_SegEnable+0x4e>
    2878:	2a 81       	ldd	r18, Y+2	; 0x02
    287a:	3b 81       	ldd	r19, Y+3	; 0x03
    287c:	24 30       	cpi	r18, 0x04	; 4
    287e:	31 05       	cpc	r19, r1
    2880:	34 f4       	brge	.+12     	; 0x288e <SevenSeg_SegEnable+0x38>
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	9b 81       	ldd	r25, Y+3	; 0x03
    2886:	82 30       	cpi	r24, 0x02	; 2
    2888:	91 05       	cpc	r25, r1
    288a:	e9 f0       	breq	.+58     	; 0x28c6 <SevenSeg_SegEnable+0x70>
    288c:	4e c0       	rjmp	.+156    	; 0x292a <SevenSeg_SegEnable+0xd4>
    288e:	2a 81       	ldd	r18, Y+2	; 0x02
    2890:	3b 81       	ldd	r19, Y+3	; 0x03
    2892:	2d 30       	cpi	r18, 0x0D	; 13
    2894:	31 05       	cpc	r19, r1
    2896:	41 f1       	breq	.+80     	; 0x28e8 <SevenSeg_SegEnable+0x92>
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	9b 81       	ldd	r25, Y+3	; 0x03
    289c:	8e 30       	cpi	r24, 0x0E	; 14
    289e:	91 05       	cpc	r25, r1
    28a0:	a1 f1       	breq	.+104    	; 0x290a <SevenSeg_SegEnable+0xb4>
    28a2:	43 c0       	rjmp	.+134    	; 0x292a <SevenSeg_SegEnable+0xd4>
	case SEG_1:
		Dio_WriteChannel(SEG_2, 1);
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	61 e0       	ldi	r22, 0x01	; 1
    28a8:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    28ac:	8d e0       	ldi	r24, 0x0D	; 13
    28ae:	61 e0       	ldi	r22, 0x01	; 1
    28b0:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    28b4:	8e e0       	ldi	r24, 0x0E	; 14
    28b6:	61 e0       	ldi	r22, 0x01	; 1
    28b8:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 0);
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    28c4:	32 c0       	rjmp	.+100    	; 0x292a <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_2:
		Dio_WriteChannel(SEG_1, 1);
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	61 e0       	ldi	r22, 0x01	; 1
    28ca:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    28ce:	8d e0       	ldi	r24, 0x0D	; 13
    28d0:	61 e0       	ldi	r22, 0x01	; 1
    28d2:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    28d6:	8e e0       	ldi	r24, 0x0E	; 14
    28d8:	61 e0       	ldi	r22, 0x01	; 1
    28da:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_2, 0);
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    28e6:	21 c0       	rjmp	.+66     	; 0x292a <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_3:
		Dio_WriteChannel(SEG_2, 1);
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	61 e0       	ldi	r22, 0x01	; 1
    28ec:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    28f0:	83 e0       	ldi	r24, 0x03	; 3
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    28f8:	8e e0       	ldi	r24, 0x0E	; 14
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 0);
    2900:	8d e0       	ldi	r24, 0x0D	; 13
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    2908:	10 c0       	rjmp	.+32     	; 0x292a <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_4:
		Dio_WriteChannel(SEG_2, 1);
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	61 e0       	ldi	r22, 0x01	; 1
    290e:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    2912:	8d e0       	ldi	r24, 0x0D	; 13
    2914:	61 e0       	ldi	r22, 0x01	; 1
    2916:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 0);
    2922:	8e e0       	ldi	r24, 0x0E	; 14
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>

		break;

	}

}
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <SevenSeg_Send>:
//
//void SevenSeg_SegDisable(SegNumber seg){
//	Dio_WriteChannel(seg,1);
//}

void SevenSeg_Send(u8 num1, u8 num2, u8 num3, u8 num4) {
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	ec 97       	sbiw	r28, 0x3c	; 60
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	89 af       	std	Y+57, r24	; 0x39
    294c:	6a af       	std	Y+58, r22	; 0x3a
    294e:	4b af       	std	Y+59, r20	; 0x3b
    2950:	2c af       	std	Y+60, r18	; 0x3c

	SevenSeg_SegEnable(SEG_1);
    2952:	83 e0       	ldi	r24, 0x03	; 3
    2954:	0e 94 2b 14 	call	0x2856	; 0x2856 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num1);
    2958:	89 ad       	ldd	r24, Y+57	; 0x39
    295a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <SevenSeg_SendOneSeg>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	a8 ec       	ldi	r26, 0xC8	; 200
    2964:	b2 e4       	ldi	r27, 0x42	; 66
    2966:	8d ab       	std	Y+53, r24	; 0x35
    2968:	9e ab       	std	Y+54, r25	; 0x36
    296a:	af ab       	std	Y+55, r26	; 0x37
    296c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296e:	6d a9       	ldd	r22, Y+53	; 0x35
    2970:	7e a9       	ldd	r23, Y+54	; 0x36
    2972:	8f a9       	ldd	r24, Y+55	; 0x37
    2974:	98 ad       	ldd	r25, Y+56	; 0x38
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	4a e7       	ldi	r20, 0x7A	; 122
    297c:	55 e4       	ldi	r21, 0x45	; 69
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	89 ab       	std	Y+49, r24	; 0x31
    2988:	9a ab       	std	Y+50, r25	; 0x32
    298a:	ab ab       	std	Y+51, r26	; 0x33
    298c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    298e:	69 a9       	ldd	r22, Y+49	; 0x31
    2990:	7a a9       	ldd	r23, Y+50	; 0x32
    2992:	8b a9       	ldd	r24, Y+51	; 0x33
    2994:	9c a9       	ldd	r25, Y+52	; 0x34
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29a2:	88 23       	and	r24, r24
    29a4:	2c f4       	brge	.+10     	; 0x29b0 <SevenSeg_Send+0x7a>
		__ticks = 1;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	98 ab       	std	Y+48, r25	; 0x30
    29ac:	8f a7       	std	Y+47, r24	; 0x2f
    29ae:	3f c0       	rjmp	.+126    	; 0x2a2e <SevenSeg_Send+0xf8>
	else if (__tmp > 65535)
    29b0:	69 a9       	ldd	r22, Y+49	; 0x31
    29b2:	7a a9       	ldd	r23, Y+50	; 0x32
    29b4:	8b a9       	ldd	r24, Y+51	; 0x33
    29b6:	9c a9       	ldd	r25, Y+52	; 0x34
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	3f ef       	ldi	r19, 0xFF	; 255
    29bc:	4f e7       	ldi	r20, 0x7F	; 127
    29be:	57 e4       	ldi	r21, 0x47	; 71
    29c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    29c4:	18 16       	cp	r1, r24
    29c6:	4c f5       	brge	.+82     	; 0x2a1a <SevenSeg_Send+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c8:	6d a9       	ldd	r22, Y+53	; 0x35
    29ca:	7e a9       	ldd	r23, Y+54	; 0x36
    29cc:	8f a9       	ldd	r24, Y+55	; 0x37
    29ce:	98 ad       	ldd	r25, Y+56	; 0x38
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e2       	ldi	r20, 0x20	; 32
    29d6:	51 e4       	ldi	r21, 0x41	; 65
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	98 ab       	std	Y+48, r25	; 0x30
    29ee:	8f a7       	std	Y+47, r24	; 0x2f
    29f0:	0f c0       	rjmp	.+30     	; 0x2a10 <SevenSeg_Send+0xda>
    29f2:	80 e9       	ldi	r24, 0x90	; 144
    29f4:	91 e0       	ldi	r25, 0x01	; 1
    29f6:	9e a7       	std	Y+46, r25	; 0x2e
    29f8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    29fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <SevenSeg_Send+0xc8>
    2a02:	9e a7       	std	Y+46, r25	; 0x2e
    2a04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a08:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	98 ab       	std	Y+48, r25	; 0x30
    2a0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a12:	98 a9       	ldd	r25, Y+48	; 0x30
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	69 f7       	brne	.-38     	; 0x29f2 <SevenSeg_Send+0xbc>
    2a18:	14 c0       	rjmp	.+40     	; 0x2a42 <SevenSeg_Send+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a20:	9c a9       	ldd	r25, Y+52	; 0x34
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	98 ab       	std	Y+48, r25	; 0x30
    2a2c:	8f a7       	std	Y+47, r24	; 0x2f
    2a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a30:	98 a9       	ldd	r25, Y+48	; 0x30
    2a32:	9c a7       	std	Y+44, r25	; 0x2c
    2a34:	8b a7       	std	Y+43, r24	; 0x2b
    2a36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a38:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <SevenSeg_Send+0x104>
    2a3e:	9c a7       	std	Y+44, r25	; 0x2c
    2a40:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_2);
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	0e 94 2b 14 	call	0x2856	; 0x2856 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num2);
    2a48:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a4a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <SevenSeg_SendOneSeg>
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	a8 ec       	ldi	r26, 0xC8	; 200
    2a54:	b2 e4       	ldi	r27, 0x42	; 66
    2a56:	8f a3       	std	Y+39, r24	; 0x27
    2a58:	98 a7       	std	Y+40, r25	; 0x28
    2a5a:	a9 a7       	std	Y+41, r26	; 0x29
    2a5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a60:	78 a5       	ldd	r23, Y+40	; 0x28
    2a62:	89 a5       	ldd	r24, Y+41	; 0x29
    2a64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a e7       	ldi	r20, 0x7A	; 122
    2a6c:	55 e4       	ldi	r21, 0x45	; 69
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	8b a3       	std	Y+35, r24	; 0x23
    2a78:	9c a3       	std	Y+36, r25	; 0x24
    2a7a:	ad a3       	std	Y+37, r26	; 0x25
    2a7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a80:	7c a1       	ldd	r23, Y+36	; 0x24
    2a82:	8d a1       	ldd	r24, Y+37	; 0x25
    2a84:	9e a1       	ldd	r25, Y+38	; 0x26
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <SevenSeg_Send+0x16a>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9a a3       	std	Y+34, r25	; 0x22
    2a9c:	89 a3       	std	Y+33, r24	; 0x21
    2a9e:	3f c0       	rjmp	.+126    	; 0x2b1e <SevenSeg_Send+0x1e8>
	else if (__tmp > 65535)
    2aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	57 e4       	ldi	r21, 0x47	; 71
    2ab0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	4c f5       	brge	.+82     	; 0x2b0a <SevenSeg_Send+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab8:	6f a1       	ldd	r22, Y+39	; 0x27
    2aba:	78 a5       	ldd	r23, Y+40	; 0x28
    2abc:	89 a5       	ldd	r24, Y+41	; 0x29
    2abe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9a a3       	std	Y+34, r25	; 0x22
    2ade:	89 a3       	std	Y+33, r24	; 0x21
    2ae0:	0f c0       	rjmp	.+30     	; 0x2b00 <SevenSeg_Send+0x1ca>
    2ae2:	80 e9       	ldi	r24, 0x90	; 144
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	98 a3       	std	Y+32, r25	; 0x20
    2ae8:	8f 8f       	std	Y+31, r24	; 0x1f
    2aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aec:	98 a1       	ldd	r25, Y+32	; 0x20
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <SevenSeg_Send+0x1b8>
    2af2:	98 a3       	std	Y+32, r25	; 0x20
    2af4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af6:	89 a1       	ldd	r24, Y+33	; 0x21
    2af8:	9a a1       	ldd	r25, Y+34	; 0x22
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9a a3       	std	Y+34, r25	; 0x22
    2afe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b00:	89 a1       	ldd	r24, Y+33	; 0x21
    2b02:	9a a1       	ldd	r25, Y+34	; 0x22
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	69 f7       	brne	.-38     	; 0x2ae2 <SevenSeg_Send+0x1ac>
    2b08:	14 c0       	rjmp	.+40     	; 0x2b32 <SevenSeg_Send+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b10:	9e a1       	ldd	r25, Y+38	; 0x26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9a a3       	std	Y+34, r25	; 0x22
    2b1c:	89 a3       	std	Y+33, r24	; 0x21
    2b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b20:	9a a1       	ldd	r25, Y+34	; 0x22
    2b22:	9e 8f       	std	Y+30, r25	; 0x1e
    2b24:	8d 8f       	std	Y+29, r24	; 0x1d
    2b26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <SevenSeg_Send+0x1f4>
    2b2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b30:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_3);
    2b32:	8d e0       	ldi	r24, 0x0D	; 13
    2b34:	0e 94 2b 14 	call	0x2856	; 0x2856 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num3);
    2b38:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b3a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <SevenSeg_SendOneSeg>
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	a8 ec       	ldi	r26, 0xC8	; 200
    2b44:	b2 e4       	ldi	r27, 0x42	; 66
    2b46:	89 8f       	std	Y+25, r24	; 0x19
    2b48:	9a 8f       	std	Y+26, r25	; 0x1a
    2b4a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	4a e7       	ldi	r20, 0x7A	; 122
    2b5c:	55 e4       	ldi	r21, 0x45	; 69
    2b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	8d 8b       	std	Y+21, r24	; 0x15
    2b68:	9e 8b       	std	Y+22, r25	; 0x16
    2b6a:	af 8b       	std	Y+23, r26	; 0x17
    2b6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b70:	7e 89       	ldd	r23, Y+22	; 0x16
    2b72:	8f 89       	ldd	r24, Y+23	; 0x17
    2b74:	98 8d       	ldd	r25, Y+24	; 0x18
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e8       	ldi	r20, 0x80	; 128
    2b7c:	5f e3       	ldi	r21, 0x3F	; 63
    2b7e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b82:	88 23       	and	r24, r24
    2b84:	2c f4       	brge	.+10     	; 0x2b90 <SevenSeg_Send+0x25a>
		__ticks = 1;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	9c 8b       	std	Y+20, r25	; 0x14
    2b8c:	8b 8b       	std	Y+19, r24	; 0x13
    2b8e:	3f c0       	rjmp	.+126    	; 0x2c0e <SevenSeg_Send+0x2d8>
	else if (__tmp > 65535)
    2b90:	6d 89       	ldd	r22, Y+21	; 0x15
    2b92:	7e 89       	ldd	r23, Y+22	; 0x16
    2b94:	8f 89       	ldd	r24, Y+23	; 0x17
    2b96:	98 8d       	ldd	r25, Y+24	; 0x18
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	3f ef       	ldi	r19, 0xFF	; 255
    2b9c:	4f e7       	ldi	r20, 0x7F	; 127
    2b9e:	57 e4       	ldi	r21, 0x47	; 71
    2ba0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ba4:	18 16       	cp	r1, r24
    2ba6:	4c f5       	brge	.+82     	; 0x2bfa <SevenSeg_Send+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba8:	69 8d       	ldd	r22, Y+25	; 0x19
    2baa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e2       	ldi	r20, 0x20	; 32
    2bb6:	51 e4       	ldi	r21, 0x41	; 65
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9c 8b       	std	Y+20, r25	; 0x14
    2bce:	8b 8b       	std	Y+19, r24	; 0x13
    2bd0:	0f c0       	rjmp	.+30     	; 0x2bf0 <SevenSeg_Send+0x2ba>
    2bd2:	80 e9       	ldi	r24, 0x90	; 144
    2bd4:	91 e0       	ldi	r25, 0x01	; 1
    2bd6:	9a 8b       	std	Y+18, r25	; 0x12
    2bd8:	89 8b       	std	Y+17, r24	; 0x11
    2bda:	89 89       	ldd	r24, Y+17	; 0x11
    2bdc:	9a 89       	ldd	r25, Y+18	; 0x12
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <SevenSeg_Send+0x2a8>
    2be2:	9a 8b       	std	Y+18, r25	; 0x12
    2be4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be6:	8b 89       	ldd	r24, Y+19	; 0x13
    2be8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	9c 8b       	std	Y+20, r25	; 0x14
    2bee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	69 f7       	brne	.-38     	; 0x2bd2 <SevenSeg_Send+0x29c>
    2bf8:	14 c0       	rjmp	.+40     	; 0x2c22 <SevenSeg_Send+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2c00:	98 8d       	ldd	r25, Y+24	; 0x18
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9c 8b       	std	Y+20, r25	; 0x14
    2c0c:	8b 8b       	std	Y+19, r24	; 0x13
    2c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c10:	9c 89       	ldd	r25, Y+20	; 0x14
    2c12:	98 8b       	std	Y+16, r25	; 0x10
    2c14:	8f 87       	std	Y+15, r24	; 0x0f
    2c16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c18:	98 89       	ldd	r25, Y+16	; 0x10
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <SevenSeg_Send+0x2e4>
    2c1e:	98 8b       	std	Y+16, r25	; 0x10
    2c20:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_4);
    2c22:	8e e0       	ldi	r24, 0x0E	; 14
    2c24:	0e 94 2b 14 	call	0x2856	; 0x2856 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num4);
    2c28:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c2a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <SevenSeg_SendOneSeg>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	a8 ec       	ldi	r26, 0xC8	; 200
    2c34:	b2 e4       	ldi	r27, 0x42	; 66
    2c36:	8b 87       	std	Y+11, r24	; 0x0b
    2c38:	9c 87       	std	Y+12, r25	; 0x0c
    2c3a:	ad 87       	std	Y+13, r26	; 0x0d
    2c3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a e7       	ldi	r20, 0x7A	; 122
    2c4c:	55 e4       	ldi	r21, 0x45	; 69
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	8f 83       	std	Y+7, r24	; 0x07
    2c58:	98 87       	std	Y+8, r25	; 0x08
    2c5a:	a9 87       	std	Y+9, r26	; 0x09
    2c5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c60:	78 85       	ldd	r23, Y+8	; 0x08
    2c62:	89 85       	ldd	r24, Y+9	; 0x09
    2c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	2c f4       	brge	.+10     	; 0x2c80 <SevenSeg_Send+0x34a>
		__ticks = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	9e 83       	std	Y+6, r25	; 0x06
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <SevenSeg_Send+0x3c8>
	else if (__tmp > 65535)
    2c80:	6f 81       	ldd	r22, Y+7	; 0x07
    2c82:	78 85       	ldd	r23, Y+8	; 0x08
    2c84:	89 85       	ldd	r24, Y+9	; 0x09
    2c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	4c f5       	brge	.+82     	; 0x2cea <SevenSeg_Send+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <SevenSeg_Send+0x3aa>
    2cc2:	80 e9       	ldi	r24, 0x90	; 144
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <SevenSeg_Send+0x398>
    2cd2:	9c 83       	std	Y+4, r25	; 0x04
    2cd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <SevenSeg_Send+0x38c>
    2ce8:	14 c0       	rjmp	.+40     	; 0x2d12 <SevenSeg_Send+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <SevenSeg_Send+0x3d4>
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);

}
    2d12:	ec 96       	adiw	r28, 0x3c	; 60
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <SevenSeg_SendOneSeg>:
void SevenSeg_SendOneSeg(u8 number) //SevenSeg_Type type ,
{
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	0f 92       	push	r0
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	89 83       	std	Y+1, r24	; 0x01
//	SevenSeg_SegEnable(seg);
	Dio_WriteChannel(PB_0, GET_BIT(number, 0));
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	98 2f       	mov	r25, r24
    2d34:	91 70       	andi	r25, 0x01	; 1
    2d36:	88 e0       	ldi	r24, 0x08	; 8
    2d38:	69 2f       	mov	r22, r25
    2d3a:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(number, 1));
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	86 95       	lsr	r24
    2d42:	98 2f       	mov	r25, r24
    2d44:	91 70       	andi	r25, 0x01	; 1
    2d46:	89 e0       	ldi	r24, 0x09	; 9
    2d48:	69 2f       	mov	r22, r25
    2d4a:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(number, 2));
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	86 95       	lsr	r24
    2d52:	86 95       	lsr	r24
    2d54:	98 2f       	mov	r25, r24
    2d56:	91 70       	andi	r25, 0x01	; 1
    2d58:	8a e0       	ldi	r24, 0x0A	; 10
    2d5a:	69 2f       	mov	r22, r25
    2d5c:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(number, 3));
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	86 95       	lsr	r24
    2d64:	86 95       	lsr	r24
    2d66:	86 95       	lsr	r24
    2d68:	98 2f       	mov	r25, r24
    2d6a:	91 70       	andi	r25, 0x01	; 1
    2d6c:	8c e0       	ldi	r24, 0x0C	; 12
    2d6e:	69 2f       	mov	r22, r25
    2d70:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
}
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <Lcd_SendCMD>:
 *      Author: AhmedAbogabl
 */

#include "LCD.h"

void Lcd_SendCMD(u8 cmd) {
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	c1 56       	subi	r28, 0x61	; 97
    2d8a:	d0 40       	sbci	r29, 0x00	; 0
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	fe 01       	movw	r30, r28
    2d98:	ef 59       	subi	r30, 0x9F	; 159
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 83       	st	Z, r24
	// Set RS to command mode
	Dio_WriteChannel(LCD_RS, STD_LOW);
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	60 e0       	ldi	r22, 0x00	; 0
    2da2:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>

	// Send the high nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 4));
    2da6:	fe 01       	movw	r30, r28
    2da8:	ef 59       	subi	r30, 0x9F	; 159
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	82 95       	swap	r24
    2db0:	8f 70       	andi	r24, 0x0F	; 15
    2db2:	98 2f       	mov	r25, r24
    2db4:	91 70       	andi	r25, 0x01	; 1
    2db6:	88 e0       	ldi	r24, 0x08	; 8
    2db8:	69 2f       	mov	r22, r25
    2dba:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 5));
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	ef 59       	subi	r30, 0x9F	; 159
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	82 95       	swap	r24
    2dc8:	86 95       	lsr	r24
    2dca:	87 70       	andi	r24, 0x07	; 7
    2dcc:	98 2f       	mov	r25, r24
    2dce:	91 70       	andi	r25, 0x01	; 1
    2dd0:	89 e0       	ldi	r24, 0x09	; 9
    2dd2:	69 2f       	mov	r22, r25
    2dd4:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 6));
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ef 59       	subi	r30, 0x9F	; 159
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 81       	ld	r24, Z
    2de0:	82 95       	swap	r24
    2de2:	86 95       	lsr	r24
    2de4:	86 95       	lsr	r24
    2de6:	83 70       	andi	r24, 0x03	; 3
    2de8:	98 2f       	mov	r25, r24
    2dea:	91 70       	andi	r25, 0x01	; 1
    2dec:	8a e0       	ldi	r24, 0x0A	; 10
    2dee:	69 2f       	mov	r22, r25
    2df0:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 7));
    2df4:	fe 01       	movw	r30, r28
    2df6:	ef 59       	subi	r30, 0x9F	; 159
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 81       	ld	r24, Z
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	99 27       	eor	r25, r25
    2e02:	99 1f       	adc	r25, r25
    2e04:	8c e0       	ldi	r24, 0x0C	; 12
    2e06:	69 2f       	mov	r22, r25
    2e08:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	61 e0       	ldi	r22, 0x01	; 1
    2e10:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    2e14:	fe 01       	movw	r30, r28
    2e16:	e3 5a       	subi	r30, 0xA3	; 163
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	a0 e8       	ldi	r26, 0x80	; 128
    2e20:	bf e3       	ldi	r27, 0x3F	; 63
    2e22:	80 83       	st	Z, r24
    2e24:	91 83       	std	Z+1, r25	; 0x01
    2e26:	a2 83       	std	Z+2, r26	; 0x02
    2e28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e2a:	8e 01       	movw	r16, r28
    2e2c:	07 5a       	subi	r16, 0xA7	; 167
    2e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e30:	fe 01       	movw	r30, r28
    2e32:	e3 5a       	subi	r30, 0xA3	; 163
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	60 81       	ld	r22, Z
    2e38:	71 81       	ldd	r23, Z+1	; 0x01
    2e3a:	82 81       	ldd	r24, Z+2	; 0x02
    2e3c:	93 81       	ldd	r25, Z+3	; 0x03
    2e3e:	2b ea       	ldi	r18, 0xAB	; 171
    2e40:	3a ea       	ldi	r19, 0xAA	; 170
    2e42:	4a ea       	ldi	r20, 0xAA	; 170
    2e44:	50 e4       	ldi	r21, 0x40	; 64
    2e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	f8 01       	movw	r30, r16
    2e50:	80 83       	st	Z, r24
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	a2 83       	std	Z+2, r26	; 0x02
    2e56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e7 5a       	subi	r30, 0xA7	; 167
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	60 81       	ld	r22, Z
    2e60:	71 81       	ldd	r23, Z+1	; 0x01
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	34 f4       	brge	.+12     	; 0x2e82 <Lcd_SendCMD+0x106>
		__ticks = 1;
    2e76:	fe 01       	movw	r30, r28
    2e78:	e8 5a       	subi	r30, 0xA8	; 168
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	80 83       	st	Z, r24
    2e80:	e0 c0       	rjmp	.+448    	; 0x3042 <Lcd_SendCMD+0x2c6>
	else if (__tmp > 255)
    2e82:	fe 01       	movw	r30, r28
    2e84:	e7 5a       	subi	r30, 0xA7	; 167
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	53 e4       	ldi	r21, 0x43	; 67
    2e98:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	0c f0       	brlt	.+2      	; 0x2ea2 <Lcd_SendCMD+0x126>
    2ea0:	c0 c0       	rjmp	.+384    	; 0x3022 <Lcd_SendCMD+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e3 5a       	subi	r30, 0xA3	; 163
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	4a e7       	ldi	r20, 0x7A	; 122
    2eb6:	54 e4       	ldi	r21, 0x44	; 68
    2eb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	ec 5a       	subi	r30, 0xAC	; 172
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 83       	st	Z, r24
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	a2 83       	std	Z+2, r26	; 0x02
    2ecc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ece:	8e 01       	movw	r16, r28
    2ed0:	00 5b       	subi	r16, 0xB0	; 176
    2ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ec 5a       	subi	r30, 0xAC	; 172
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	60 81       	ld	r22, Z
    2edc:	71 81       	ldd	r23, Z+1	; 0x01
    2ede:	82 81       	ldd	r24, Z+2	; 0x02
    2ee0:	93 81       	ldd	r25, Z+3	; 0x03
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	4a e7       	ldi	r20, 0x7A	; 122
    2ee8:	55 e4       	ldi	r21, 0x45	; 69
    2eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	f8 01       	movw	r30, r16
    2ef4:	80 83       	st	Z, r24
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	a2 83       	std	Z+2, r26	; 0x02
    2efa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2efc:	fe 01       	movw	r30, r28
    2efe:	e0 5b       	subi	r30, 0xB0	; 176
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e8       	ldi	r20, 0x80	; 128
    2f10:	5f e3       	ldi	r21, 0x3F	; 63
    2f12:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f16:	88 23       	and	r24, r24
    2f18:	44 f4       	brge	.+16     	; 0x2f2a <Lcd_SendCMD+0x1ae>
		__ticks = 1;
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e2 5b       	subi	r30, 0xB2	; 178
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	80 83       	st	Z, r24
    2f28:	64 c0       	rjmp	.+200    	; 0x2ff2 <Lcd_SendCMD+0x276>
	else if (__tmp > 65535)
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e0 5b       	subi	r30, 0xB0	; 176
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	60 81       	ld	r22, Z
    2f32:	71 81       	ldd	r23, Z+1	; 0x01
    2f34:	82 81       	ldd	r24, Z+2	; 0x02
    2f36:	93 81       	ldd	r25, Z+3	; 0x03
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	3f ef       	ldi	r19, 0xFF	; 255
    2f3c:	4f e7       	ldi	r20, 0x7F	; 127
    2f3e:	57 e4       	ldi	r21, 0x47	; 71
    2f40:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f44:	18 16       	cp	r1, r24
    2f46:	0c f0       	brlt	.+2      	; 0x2f4a <Lcd_SendCMD+0x1ce>
    2f48:	43 c0       	rjmp	.+134    	; 0x2fd0 <Lcd_SendCMD+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ec 5a       	subi	r30, 0xAC	; 172
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	60 81       	ld	r22, Z
    2f52:	71 81       	ldd	r23, Z+1	; 0x01
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e2       	ldi	r20, 0x20	; 32
    2f5e:	51 e4       	ldi	r21, 0x41	; 65
    2f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	8e 01       	movw	r16, r28
    2f6a:	02 5b       	subi	r16, 0xB2	; 178
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	80 83       	st	Z, r24
    2f80:	1f c0       	rjmp	.+62     	; 0x2fc0 <Lcd_SendCMD+0x244>
    2f82:	fe 01       	movw	r30, r28
    2f84:	e4 5b       	subi	r30, 0xB4	; 180
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 e9       	ldi	r24, 0x90	; 144
    2f8a:	91 e0       	ldi	r25, 0x01	; 1
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	80 83       	st	Z, r24
    2f90:	fe 01       	movw	r30, r28
    2f92:	e4 5b       	subi	r30, 0xB4	; 180
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 81       	ld	r24, Z
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <Lcd_SendCMD+0x21e>
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e4 5b       	subi	r30, 0xB4	; 180
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa8:	de 01       	movw	r26, r28
    2faa:	a2 5b       	subi	r26, 0xB2	; 178
    2fac:	bf 4f       	sbci	r27, 0xFF	; 255
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e2 5b       	subi	r30, 0xB2	; 178
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	80 81       	ld	r24, Z
    2fb6:	91 81       	ldd	r25, Z+1	; 0x01
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	11 96       	adiw	r26, 0x01	; 1
    2fbc:	9c 93       	st	X, r25
    2fbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e2 5b       	subi	r30, 0xB2	; 178
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 81       	ld	r24, Z
    2fc8:	91 81       	ldd	r25, Z+1	; 0x01
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	d1 f6       	brne	.-76     	; 0x2f82 <Lcd_SendCMD+0x206>
    2fce:	4b c0       	rjmp	.+150    	; 0x3066 <Lcd_SendCMD+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd0:	8e 01       	movw	r16, r28
    2fd2:	02 5b       	subi	r16, 0xB2	; 178
    2fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e0 5b       	subi	r30, 0xB0	; 176
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	60 81       	ld	r22, Z
    2fde:	71 81       	ldd	r23, Z+1	; 0x01
    2fe0:	82 81       	ldd	r24, Z+2	; 0x02
    2fe2:	93 81       	ldd	r25, Z+3	; 0x03
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	f8 01       	movw	r30, r16
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
    2ff2:	de 01       	movw	r26, r28
    2ff4:	a6 5b       	subi	r26, 0xB6	; 182
    2ff6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e2 5b       	subi	r30, 0xB2	; 178
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	11 96       	adiw	r26, 0x01	; 1
    3004:	9c 93       	st	X, r25
    3006:	8e 93       	st	-X, r24
    3008:	fe 01       	movw	r30, r28
    300a:	e6 5b       	subi	r30, 0xB6	; 182
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <Lcd_SendCMD+0x296>
    3016:	fe 01       	movw	r30, r28
    3018:	e6 5b       	subi	r30, 0xB6	; 182
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	80 83       	st	Z, r24
    3020:	22 c0       	rjmp	.+68     	; 0x3066 <Lcd_SendCMD+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3022:	8e 01       	movw	r16, r28
    3024:	08 5a       	subi	r16, 0xA8	; 168
    3026:	1f 4f       	sbci	r17, 0xFF	; 255
    3028:	fe 01       	movw	r30, r28
    302a:	e7 5a       	subi	r30, 0xA7	; 167
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	60 81       	ld	r22, Z
    3030:	71 81       	ldd	r23, Z+1	; 0x01
    3032:	82 81       	ldd	r24, Z+2	; 0x02
    3034:	93 81       	ldd	r25, Z+3	; 0x03
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	f8 01       	movw	r30, r16
    3040:	80 83       	st	Z, r24
    3042:	de 01       	movw	r26, r28
    3044:	a7 5b       	subi	r26, 0xB7	; 183
    3046:	bf 4f       	sbci	r27, 0xFF	; 255
    3048:	fe 01       	movw	r30, r28
    304a:	e8 5a       	subi	r30, 0xA8	; 168
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 81       	ld	r24, Z
    3050:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3052:	fe 01       	movw	r30, r28
    3054:	e7 5b       	subi	r30, 0xB7	; 183
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 81       	ld	r24, Z
    305a:	8a 95       	dec	r24
    305c:	f1 f7       	brne	.-4      	; 0x305a <Lcd_SendCMD+0x2de>
    305e:	fe 01       	movw	r30, r28
    3060:	e7 5b       	subi	r30, 0xB7	; 183
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3066:	82 e0       	ldi	r24, 0x02	; 2
    3068:	60 e0       	ldi	r22, 0x00	; 0
    306a:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    306e:	fe 01       	movw	r30, r28
    3070:	eb 5b       	subi	r30, 0xBB	; 187
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a0 e8       	ldi	r26, 0x80	; 128
    307a:	bf e3       	ldi	r27, 0x3F	; 63
    307c:	80 83       	st	Z, r24
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	a2 83       	std	Z+2, r26	; 0x02
    3082:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3084:	8e 01       	movw	r16, r28
    3086:	0f 5b       	subi	r16, 0xBF	; 191
    3088:	1f 4f       	sbci	r17, 0xFF	; 255
    308a:	fe 01       	movw	r30, r28
    308c:	eb 5b       	subi	r30, 0xBB	; 187
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	2b ea       	ldi	r18, 0xAB	; 171
    309a:	3a ea       	ldi	r19, 0xAA	; 170
    309c:	4a ea       	ldi	r20, 0xAA	; 170
    309e:	50 e4       	ldi	r21, 0x40	; 64
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	f8 01       	movw	r30, r16
    30aa:	80 83       	st	Z, r24
    30ac:	91 83       	std	Z+1, r25	; 0x01
    30ae:	a2 83       	std	Z+2, r26	; 0x02
    30b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30b2:	fe 01       	movw	r30, r28
    30b4:	ef 5b       	subi	r30, 0xBF	; 191
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	60 81       	ld	r22, Z
    30ba:	71 81       	ldd	r23, Z+1	; 0x01
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	93 81       	ldd	r25, Z+3	; 0x03
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	34 f4       	brge	.+12     	; 0x30dc <Lcd_SendCMD+0x360>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	fe 01       	movw	r30, r28
    30d4:	e0 5c       	subi	r30, 0xC0	; 192
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 83       	st	Z, r24
    30da:	9d c0       	rjmp	.+314    	; 0x3216 <Lcd_SendCMD+0x49a>
	else if (__tmp > 255)
    30dc:	fe 01       	movw	r30, r28
    30de:	ef 5b       	subi	r30, 0xBF	; 191
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	4f e7       	ldi	r20, 0x7F	; 127
    30f0:	53 e4       	ldi	r21, 0x43	; 67
    30f2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	0c f0       	brlt	.+2      	; 0x30fc <Lcd_SendCMD+0x380>
    30fa:	7e c0       	rjmp	.+252    	; 0x31f8 <Lcd_SendCMD+0x47c>
	{
		_delay_ms(__us / 1000.0);
    30fc:	fe 01       	movw	r30, r28
    30fe:	eb 5b       	subi	r30, 0xBB	; 187
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	60 81       	ld	r22, Z
    3104:	71 81       	ldd	r23, Z+1	; 0x01
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	93 81       	ldd	r25, Z+3	; 0x03
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4a e7       	ldi	r20, 0x7A	; 122
    3110:	54 e4       	ldi	r21, 0x44	; 68
    3112:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	8c af       	std	Y+60, r24	; 0x3c
    311c:	9d af       	std	Y+61, r25	; 0x3d
    311e:	ae af       	std	Y+62, r26	; 0x3e
    3120:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3122:	6c ad       	ldd	r22, Y+60	; 0x3c
    3124:	7d ad       	ldd	r23, Y+61	; 0x3d
    3126:	8e ad       	ldd	r24, Y+62	; 0x3e
    3128:	9f ad       	ldd	r25, Y+63	; 0x3f
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	4a e7       	ldi	r20, 0x7A	; 122
    3130:	55 e4       	ldi	r21, 0x45	; 69
    3132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	88 af       	std	Y+56, r24	; 0x38
    313c:	99 af       	std	Y+57, r25	; 0x39
    313e:	aa af       	std	Y+58, r26	; 0x3a
    3140:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3142:	68 ad       	ldd	r22, Y+56	; 0x38
    3144:	79 ad       	ldd	r23, Y+57	; 0x39
    3146:	8a ad       	ldd	r24, Y+58	; 0x3a
    3148:	9b ad       	ldd	r25, Y+59	; 0x3b
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e8       	ldi	r20, 0x80	; 128
    3150:	5f e3       	ldi	r21, 0x3F	; 63
    3152:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3156:	88 23       	and	r24, r24
    3158:	2c f4       	brge	.+10     	; 0x3164 <Lcd_SendCMD+0x3e8>
		__ticks = 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9f ab       	std	Y+55, r25	; 0x37
    3160:	8e ab       	std	Y+54, r24	; 0x36
    3162:	3f c0       	rjmp	.+126    	; 0x31e2 <Lcd_SendCMD+0x466>
	else if (__tmp > 65535)
    3164:	68 ad       	ldd	r22, Y+56	; 0x38
    3166:	79 ad       	ldd	r23, Y+57	; 0x39
    3168:	8a ad       	ldd	r24, Y+58	; 0x3a
    316a:	9b ad       	ldd	r25, Y+59	; 0x3b
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	3f ef       	ldi	r19, 0xFF	; 255
    3170:	4f e7       	ldi	r20, 0x7F	; 127
    3172:	57 e4       	ldi	r21, 0x47	; 71
    3174:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3178:	18 16       	cp	r1, r24
    317a:	4c f5       	brge	.+82     	; 0x31ce <Lcd_SendCMD+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317c:	6c ad       	ldd	r22, Y+60	; 0x3c
    317e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3180:	8e ad       	ldd	r24, Y+62	; 0x3e
    3182:	9f ad       	ldd	r25, Y+63	; 0x3f
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e2       	ldi	r20, 0x20	; 32
    318a:	51 e4       	ldi	r21, 0x41	; 65
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9f ab       	std	Y+55, r25	; 0x37
    31a2:	8e ab       	std	Y+54, r24	; 0x36
    31a4:	0f c0       	rjmp	.+30     	; 0x31c4 <Lcd_SendCMD+0x448>
    31a6:	80 e9       	ldi	r24, 0x90	; 144
    31a8:	91 e0       	ldi	r25, 0x01	; 1
    31aa:	9d ab       	std	Y+53, r25	; 0x35
    31ac:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31ae:	8c a9       	ldd	r24, Y+52	; 0x34
    31b0:	9d a9       	ldd	r25, Y+53	; 0x35
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <Lcd_SendCMD+0x436>
    31b6:	9d ab       	std	Y+53, r25	; 0x35
    31b8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ba:	8e a9       	ldd	r24, Y+54	; 0x36
    31bc:	9f a9       	ldd	r25, Y+55	; 0x37
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	9f ab       	std	Y+55, r25	; 0x37
    31c2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c4:	8e a9       	ldd	r24, Y+54	; 0x36
    31c6:	9f a9       	ldd	r25, Y+55	; 0x37
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	69 f7       	brne	.-38     	; 0x31a6 <Lcd_SendCMD+0x42a>
    31cc:	2d c0       	rjmp	.+90     	; 0x3228 <Lcd_SendCMD+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ce:	68 ad       	ldd	r22, Y+56	; 0x38
    31d0:	79 ad       	ldd	r23, Y+57	; 0x39
    31d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    31d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	9f ab       	std	Y+55, r25	; 0x37
    31e0:	8e ab       	std	Y+54, r24	; 0x36
    31e2:	8e a9       	ldd	r24, Y+54	; 0x36
    31e4:	9f a9       	ldd	r25, Y+55	; 0x37
    31e6:	9b ab       	std	Y+51, r25	; 0x33
    31e8:	8a ab       	std	Y+50, r24	; 0x32
    31ea:	8a a9       	ldd	r24, Y+50	; 0x32
    31ec:	9b a9       	ldd	r25, Y+51	; 0x33
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <Lcd_SendCMD+0x472>
    31f2:	9b ab       	std	Y+51, r25	; 0x33
    31f4:	8a ab       	std	Y+50, r24	; 0x32
    31f6:	18 c0       	rjmp	.+48     	; 0x3228 <Lcd_SendCMD+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31f8:	fe 01       	movw	r30, r28
    31fa:	ef 5b       	subi	r30, 0xBF	; 191
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	fe 01       	movw	r30, r28
    3210:	e0 5c       	subi	r30, 0xC0	; 192
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	80 83       	st	Z, r24
    3216:	fe 01       	movw	r30, r28
    3218:	e0 5c       	subi	r30, 0xC0	; 192
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	80 81       	ld	r24, Z
    321e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3220:	89 a9       	ldd	r24, Y+49	; 0x31
    3222:	8a 95       	dec	r24
    3224:	f1 f7       	brne	.-4      	; 0x3222 <Lcd_SendCMD+0x4a6>
    3226:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 0));
    3228:	fe 01       	movw	r30, r28
    322a:	ef 59       	subi	r30, 0x9F	; 159
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	80 81       	ld	r24, Z
    3230:	98 2f       	mov	r25, r24
    3232:	91 70       	andi	r25, 0x01	; 1
    3234:	88 e0       	ldi	r24, 0x08	; 8
    3236:	69 2f       	mov	r22, r25
    3238:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 1));
    323c:	fe 01       	movw	r30, r28
    323e:	ef 59       	subi	r30, 0x9F	; 159
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	86 95       	lsr	r24
    3246:	98 2f       	mov	r25, r24
    3248:	91 70       	andi	r25, 0x01	; 1
    324a:	89 e0       	ldi	r24, 0x09	; 9
    324c:	69 2f       	mov	r22, r25
    324e:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 2));
    3252:	fe 01       	movw	r30, r28
    3254:	ef 59       	subi	r30, 0x9F	; 159
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 81       	ld	r24, Z
    325a:	86 95       	lsr	r24
    325c:	86 95       	lsr	r24
    325e:	98 2f       	mov	r25, r24
    3260:	91 70       	andi	r25, 0x01	; 1
    3262:	8a e0       	ldi	r24, 0x0A	; 10
    3264:	69 2f       	mov	r22, r25
    3266:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 3));
    326a:	fe 01       	movw	r30, r28
    326c:	ef 59       	subi	r30, 0x9F	; 159
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	86 95       	lsr	r24
    3274:	86 95       	lsr	r24
    3276:	86 95       	lsr	r24
    3278:	98 2f       	mov	r25, r24
    327a:	91 70       	andi	r25, 0x01	; 1
    327c:	8c e0       	ldi	r24, 0x0C	; 12
    327e:	69 2f       	mov	r22, r25
    3280:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	61 e0       	ldi	r22, 0x01	; 1
    3288:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	a0 e8       	ldi	r26, 0x80	; 128
    3292:	bf e3       	ldi	r27, 0x3F	; 63
    3294:	8d a7       	std	Y+45, r24	; 0x2d
    3296:	9e a7       	std	Y+46, r25	; 0x2e
    3298:	af a7       	std	Y+47, r26	; 0x2f
    329a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    329c:	6d a5       	ldd	r22, Y+45	; 0x2d
    329e:	7e a5       	ldd	r23, Y+46	; 0x2e
    32a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a2:	98 a9       	ldd	r25, Y+48	; 0x30
    32a4:	2b ea       	ldi	r18, 0xAB	; 171
    32a6:	3a ea       	ldi	r19, 0xAA	; 170
    32a8:	4a ea       	ldi	r20, 0xAA	; 170
    32aa:	50 e4       	ldi	r21, 0x40	; 64
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	89 a7       	std	Y+41, r24	; 0x29
    32b6:	9a a7       	std	Y+42, r25	; 0x2a
    32b8:	ab a7       	std	Y+43, r26	; 0x2b
    32ba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    32bc:	69 a5       	ldd	r22, Y+41	; 0x29
    32be:	7a a5       	ldd	r23, Y+42	; 0x2a
    32c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e8       	ldi	r20, 0x80	; 128
    32ca:	5f e3       	ldi	r21, 0x3F	; 63
    32cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32d0:	88 23       	and	r24, r24
    32d2:	1c f4       	brge	.+6      	; 0x32da <Lcd_SendCMD+0x55e>
		__ticks = 1;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	88 a7       	std	Y+40, r24	; 0x28
    32d8:	91 c0       	rjmp	.+290    	; 0x33fc <Lcd_SendCMD+0x680>
	else if (__tmp > 255)
    32da:	69 a5       	ldd	r22, Y+41	; 0x29
    32dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    32de:	8b a5       	ldd	r24, Y+43	; 0x2b
    32e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	4f e7       	ldi	r20, 0x7F	; 127
    32e8:	53 e4       	ldi	r21, 0x43	; 67
    32ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    32ee:	18 16       	cp	r1, r24
    32f0:	0c f0       	brlt	.+2      	; 0x32f4 <Lcd_SendCMD+0x578>
    32f2:	7b c0       	rjmp	.+246    	; 0x33ea <Lcd_SendCMD+0x66e>
	{
		_delay_ms(__us / 1000.0);
    32f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    32f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    32f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32fa:	98 a9       	ldd	r25, Y+48	; 0x30
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	4a e7       	ldi	r20, 0x7A	; 122
    3302:	54 e4       	ldi	r21, 0x44	; 68
    3304:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	8c a3       	std	Y+36, r24	; 0x24
    330e:	9d a3       	std	Y+37, r25	; 0x25
    3310:	ae a3       	std	Y+38, r26	; 0x26
    3312:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3314:	6c a1       	ldd	r22, Y+36	; 0x24
    3316:	7d a1       	ldd	r23, Y+37	; 0x25
    3318:	8e a1       	ldd	r24, Y+38	; 0x26
    331a:	9f a1       	ldd	r25, Y+39	; 0x27
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	4a e7       	ldi	r20, 0x7A	; 122
    3322:	55 e4       	ldi	r21, 0x45	; 69
    3324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	88 a3       	std	Y+32, r24	; 0x20
    332e:	99 a3       	std	Y+33, r25	; 0x21
    3330:	aa a3       	std	Y+34, r26	; 0x22
    3332:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3334:	68 a1       	ldd	r22, Y+32	; 0x20
    3336:	79 a1       	ldd	r23, Y+33	; 0x21
    3338:	8a a1       	ldd	r24, Y+34	; 0x22
    333a:	9b a1       	ldd	r25, Y+35	; 0x23
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e8       	ldi	r20, 0x80	; 128
    3342:	5f e3       	ldi	r21, 0x3F	; 63
    3344:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3348:	88 23       	and	r24, r24
    334a:	2c f4       	brge	.+10     	; 0x3356 <Lcd_SendCMD+0x5da>
		__ticks = 1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9f 8f       	std	Y+31, r25	; 0x1f
    3352:	8e 8f       	std	Y+30, r24	; 0x1e
    3354:	3f c0       	rjmp	.+126    	; 0x33d4 <Lcd_SendCMD+0x658>
	else if (__tmp > 65535)
    3356:	68 a1       	ldd	r22, Y+32	; 0x20
    3358:	79 a1       	ldd	r23, Y+33	; 0x21
    335a:	8a a1       	ldd	r24, Y+34	; 0x22
    335c:	9b a1       	ldd	r25, Y+35	; 0x23
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	3f ef       	ldi	r19, 0xFF	; 255
    3362:	4f e7       	ldi	r20, 0x7F	; 127
    3364:	57 e4       	ldi	r21, 0x47	; 71
    3366:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    336a:	18 16       	cp	r1, r24
    336c:	4c f5       	brge	.+82     	; 0x33c0 <Lcd_SendCMD+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336e:	6c a1       	ldd	r22, Y+36	; 0x24
    3370:	7d a1       	ldd	r23, Y+37	; 0x25
    3372:	8e a1       	ldd	r24, Y+38	; 0x26
    3374:	9f a1       	ldd	r25, Y+39	; 0x27
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 e2       	ldi	r20, 0x20	; 32
    337c:	51 e4       	ldi	r21, 0x41	; 65
    337e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	9f 8f       	std	Y+31, r25	; 0x1f
    3394:	8e 8f       	std	Y+30, r24	; 0x1e
    3396:	0f c0       	rjmp	.+30     	; 0x33b6 <Lcd_SendCMD+0x63a>
    3398:	80 e9       	ldi	r24, 0x90	; 144
    339a:	91 e0       	ldi	r25, 0x01	; 1
    339c:	9d 8f       	std	Y+29, r25	; 0x1d
    339e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <Lcd_SendCMD+0x628>
    33a8:	9d 8f       	std	Y+29, r25	; 0x1d
    33aa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	9f 8f       	std	Y+31, r25	; 0x1f
    33b4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	69 f7       	brne	.-38     	; 0x3398 <Lcd_SendCMD+0x61c>
    33be:	24 c0       	rjmp	.+72     	; 0x3408 <Lcd_SendCMD+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c0:	68 a1       	ldd	r22, Y+32	; 0x20
    33c2:	79 a1       	ldd	r23, Y+33	; 0x21
    33c4:	8a a1       	ldd	r24, Y+34	; 0x22
    33c6:	9b a1       	ldd	r25, Y+35	; 0x23
    33c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	9f 8f       	std	Y+31, r25	; 0x1f
    33d2:	8e 8f       	std	Y+30, r24	; 0x1e
    33d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33d8:	9b 8f       	std	Y+27, r25	; 0x1b
    33da:	8a 8f       	std	Y+26, r24	; 0x1a
    33dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <Lcd_SendCMD+0x664>
    33e4:	9b 8f       	std	Y+27, r25	; 0x1b
    33e6:	8a 8f       	std	Y+26, r24	; 0x1a
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <Lcd_SendCMD+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33ea:	69 a5       	ldd	r22, Y+41	; 0x29
    33ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    33ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    33f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	88 a7       	std	Y+40, r24	; 0x28
    33fc:	88 a5       	ldd	r24, Y+40	; 0x28
    33fe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3400:	89 8d       	ldd	r24, Y+25	; 0x19
    3402:	8a 95       	dec	r24
    3404:	f1 f7       	brne	.-4      	; 0x3402 <Lcd_SendCMD+0x686>
    3406:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3408:	82 e0       	ldi	r24, 0x02	; 2
    340a:	60 e0       	ldi	r22, 0x00	; 0
    340c:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	a0 e8       	ldi	r26, 0x80	; 128
    3416:	bf e3       	ldi	r27, 0x3F	; 63
    3418:	8d 8b       	std	Y+21, r24	; 0x15
    341a:	9e 8b       	std	Y+22, r25	; 0x16
    341c:	af 8b       	std	Y+23, r26	; 0x17
    341e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3420:	6d 89       	ldd	r22, Y+21	; 0x15
    3422:	7e 89       	ldd	r23, Y+22	; 0x16
    3424:	8f 89       	ldd	r24, Y+23	; 0x17
    3426:	98 8d       	ldd	r25, Y+24	; 0x18
    3428:	2b ea       	ldi	r18, 0xAB	; 171
    342a:	3a ea       	ldi	r19, 0xAA	; 170
    342c:	4a ea       	ldi	r20, 0xAA	; 170
    342e:	50 e4       	ldi	r21, 0x40	; 64
    3430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	89 8b       	std	Y+17, r24	; 0x11
    343a:	9a 8b       	std	Y+18, r25	; 0x12
    343c:	ab 8b       	std	Y+19, r26	; 0x13
    343e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3440:	69 89       	ldd	r22, Y+17	; 0x11
    3442:	7a 89       	ldd	r23, Y+18	; 0x12
    3444:	8b 89       	ldd	r24, Y+19	; 0x13
    3446:	9c 89       	ldd	r25, Y+20	; 0x14
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	5f e3       	ldi	r21, 0x3F	; 63
    3450:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3454:	88 23       	and	r24, r24
    3456:	1c f4       	brge	.+6      	; 0x345e <Lcd_SendCMD+0x6e2>
		__ticks = 1;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	88 8b       	std	Y+16, r24	; 0x10
    345c:	91 c0       	rjmp	.+290    	; 0x3580 <Lcd_SendCMD+0x804>
	else if (__tmp > 255)
    345e:	69 89       	ldd	r22, Y+17	; 0x11
    3460:	7a 89       	ldd	r23, Y+18	; 0x12
    3462:	8b 89       	ldd	r24, Y+19	; 0x13
    3464:	9c 89       	ldd	r25, Y+20	; 0x14
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	4f e7       	ldi	r20, 0x7F	; 127
    346c:	53 e4       	ldi	r21, 0x43	; 67
    346e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3472:	18 16       	cp	r1, r24
    3474:	0c f0       	brlt	.+2      	; 0x3478 <Lcd_SendCMD+0x6fc>
    3476:	7b c0       	rjmp	.+246    	; 0x356e <Lcd_SendCMD+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    3478:	6d 89       	ldd	r22, Y+21	; 0x15
    347a:	7e 89       	ldd	r23, Y+22	; 0x16
    347c:	8f 89       	ldd	r24, Y+23	; 0x17
    347e:	98 8d       	ldd	r25, Y+24	; 0x18
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	4a e7       	ldi	r20, 0x7A	; 122
    3486:	54 e4       	ldi	r21, 0x44	; 68
    3488:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	8c 87       	std	Y+12, r24	; 0x0c
    3492:	9d 87       	std	Y+13, r25	; 0x0d
    3494:	ae 87       	std	Y+14, r26	; 0x0e
    3496:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3498:	6c 85       	ldd	r22, Y+12	; 0x0c
    349a:	7d 85       	ldd	r23, Y+13	; 0x0d
    349c:	8e 85       	ldd	r24, Y+14	; 0x0e
    349e:	9f 85       	ldd	r25, Y+15	; 0x0f
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	4a e7       	ldi	r20, 0x7A	; 122
    34a6:	55 e4       	ldi	r21, 0x45	; 69
    34a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	88 87       	std	Y+8, r24	; 0x08
    34b2:	99 87       	std	Y+9, r25	; 0x09
    34b4:	aa 87       	std	Y+10, r26	; 0x0a
    34b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    34b8:	68 85       	ldd	r22, Y+8	; 0x08
    34ba:	79 85       	ldd	r23, Y+9	; 0x09
    34bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    34be:	9b 85       	ldd	r25, Y+11	; 0x0b
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	40 e8       	ldi	r20, 0x80	; 128
    34c6:	5f e3       	ldi	r21, 0x3F	; 63
    34c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34cc:	88 23       	and	r24, r24
    34ce:	2c f4       	brge	.+10     	; 0x34da <Lcd_SendCMD+0x75e>
		__ticks = 1;
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	9f 83       	std	Y+7, r25	; 0x07
    34d6:	8e 83       	std	Y+6, r24	; 0x06
    34d8:	3f c0       	rjmp	.+126    	; 0x3558 <Lcd_SendCMD+0x7dc>
	else if (__tmp > 65535)
    34da:	68 85       	ldd	r22, Y+8	; 0x08
    34dc:	79 85       	ldd	r23, Y+9	; 0x09
    34de:	8a 85       	ldd	r24, Y+10	; 0x0a
    34e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	3f ef       	ldi	r19, 0xFF	; 255
    34e6:	4f e7       	ldi	r20, 0x7F	; 127
    34e8:	57 e4       	ldi	r21, 0x47	; 71
    34ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    34ee:	18 16       	cp	r1, r24
    34f0:	4c f5       	brge	.+82     	; 0x3544 <Lcd_SendCMD+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    34f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    34f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	40 e2       	ldi	r20, 0x20	; 32
    3500:	51 e4       	ldi	r21, 0x41	; 65
    3502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	9f 83       	std	Y+7, r25	; 0x07
    3518:	8e 83       	std	Y+6, r24	; 0x06
    351a:	0f c0       	rjmp	.+30     	; 0x353a <Lcd_SendCMD+0x7be>
    351c:	80 e9       	ldi	r24, 0x90	; 144
    351e:	91 e0       	ldi	r25, 0x01	; 1
    3520:	9d 83       	std	Y+5, r25	; 0x05
    3522:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3524:	8c 81       	ldd	r24, Y+4	; 0x04
    3526:	9d 81       	ldd	r25, Y+5	; 0x05
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	f1 f7       	brne	.-4      	; 0x3528 <Lcd_SendCMD+0x7ac>
    352c:	9d 83       	std	Y+5, r25	; 0x05
    352e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3530:	8e 81       	ldd	r24, Y+6	; 0x06
    3532:	9f 81       	ldd	r25, Y+7	; 0x07
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	9f 83       	std	Y+7, r25	; 0x07
    3538:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353a:	8e 81       	ldd	r24, Y+6	; 0x06
    353c:	9f 81       	ldd	r25, Y+7	; 0x07
    353e:	00 97       	sbiw	r24, 0x00	; 0
    3540:	69 f7       	brne	.-38     	; 0x351c <Lcd_SendCMD+0x7a0>
    3542:	24 c0       	rjmp	.+72     	; 0x358c <Lcd_SendCMD+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3544:	68 85       	ldd	r22, Y+8	; 0x08
    3546:	79 85       	ldd	r23, Y+9	; 0x09
    3548:	8a 85       	ldd	r24, Y+10	; 0x0a
    354a:	9b 85       	ldd	r25, Y+11	; 0x0b
    354c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	9f 83       	std	Y+7, r25	; 0x07
    3556:	8e 83       	std	Y+6, r24	; 0x06
    3558:	8e 81       	ldd	r24, Y+6	; 0x06
    355a:	9f 81       	ldd	r25, Y+7	; 0x07
    355c:	9b 83       	std	Y+3, r25	; 0x03
    355e:	8a 83       	std	Y+2, r24	; 0x02
    3560:	8a 81       	ldd	r24, Y+2	; 0x02
    3562:	9b 81       	ldd	r25, Y+3	; 0x03
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <Lcd_SendCMD+0x7e8>
    3568:	9b 83       	std	Y+3, r25	; 0x03
    356a:	8a 83       	std	Y+2, r24	; 0x02
    356c:	0f c0       	rjmp	.+30     	; 0x358c <Lcd_SendCMD+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    356e:	69 89       	ldd	r22, Y+17	; 0x11
    3570:	7a 89       	ldd	r23, Y+18	; 0x12
    3572:	8b 89       	ldd	r24, Y+19	; 0x13
    3574:	9c 89       	ldd	r25, Y+20	; 0x14
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	88 8b       	std	Y+16, r24	; 0x10
    3580:	88 89       	ldd	r24, Y+16	; 0x10
    3582:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	8a 95       	dec	r24
    3588:	f1 f7       	brne	.-4      	; 0x3586 <Lcd_SendCMD+0x80a>
    358a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);  // Wait for the command to execute
}
    358c:	cf 59       	subi	r28, 0x9F	; 159
    358e:	df 4f       	sbci	r29, 0xFF	; 255
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	1f 91       	pop	r17
    35a0:	0f 91       	pop	r16
    35a2:	08 95       	ret

000035a4 <Lcd_SendData>:

void Lcd_SendData(u8 data) {
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	c1 56       	subi	r28, 0x61	; 97
    35b2:	d0 40       	sbci	r29, 0x00	; 0
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	fe 01       	movw	r30, r28
    35c0:	ef 59       	subi	r30, 0x9F	; 159
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 83       	st	Z, r24

	// Set RS to data mode
//	SET_BIT(PORTA, LCD_RS);
	Dio_WriteChannel(LCD_RS, STD_HIGH);
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	// Send the high nibble

	Dio_WriteChannel(PB_0, GET_BIT(data, 4));
    35ce:	fe 01       	movw	r30, r28
    35d0:	ef 59       	subi	r30, 0x9F	; 159
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	82 95       	swap	r24
    35d8:	8f 70       	andi	r24, 0x0F	; 15
    35da:	98 2f       	mov	r25, r24
    35dc:	91 70       	andi	r25, 0x01	; 1
    35de:	88 e0       	ldi	r24, 0x08	; 8
    35e0:	69 2f       	mov	r22, r25
    35e2:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 5));
    35e6:	fe 01       	movw	r30, r28
    35e8:	ef 59       	subi	r30, 0x9F	; 159
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	80 81       	ld	r24, Z
    35ee:	82 95       	swap	r24
    35f0:	86 95       	lsr	r24
    35f2:	87 70       	andi	r24, 0x07	; 7
    35f4:	98 2f       	mov	r25, r24
    35f6:	91 70       	andi	r25, 0x01	; 1
    35f8:	89 e0       	ldi	r24, 0x09	; 9
    35fa:	69 2f       	mov	r22, r25
    35fc:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 6));
    3600:	fe 01       	movw	r30, r28
    3602:	ef 59       	subi	r30, 0x9F	; 159
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	82 95       	swap	r24
    360a:	86 95       	lsr	r24
    360c:	86 95       	lsr	r24
    360e:	83 70       	andi	r24, 0x03	; 3
    3610:	98 2f       	mov	r25, r24
    3612:	91 70       	andi	r25, 0x01	; 1
    3614:	8a e0       	ldi	r24, 0x0A	; 10
    3616:	69 2f       	mov	r22, r25
    3618:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 7));
    361c:	fe 01       	movw	r30, r28
    361e:	ef 59       	subi	r30, 0x9F	; 159
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	80 81       	ld	r24, Z
    3624:	98 2f       	mov	r25, r24
    3626:	99 1f       	adc	r25, r25
    3628:	99 27       	eor	r25, r25
    362a:	99 1f       	adc	r25, r25
    362c:	8c e0       	ldi	r24, 0x0C	; 12
    362e:	69 2f       	mov	r22, r25
    3630:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3634:	82 e0       	ldi	r24, 0x02	; 2
    3636:	61 e0       	ldi	r22, 0x01	; 1
    3638:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    363c:	fe 01       	movw	r30, r28
    363e:	e3 5a       	subi	r30, 0xA3	; 163
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	a0 e8       	ldi	r26, 0x80	; 128
    3648:	bf e3       	ldi	r27, 0x3F	; 63
    364a:	80 83       	st	Z, r24
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	a2 83       	std	Z+2, r26	; 0x02
    3650:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3652:	8e 01       	movw	r16, r28
    3654:	07 5a       	subi	r16, 0xA7	; 167
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	fe 01       	movw	r30, r28
    365a:	e3 5a       	subi	r30, 0xA3	; 163
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	2b ea       	ldi	r18, 0xAB	; 171
    3668:	3a ea       	ldi	r19, 0xAA	; 170
    366a:	4a ea       	ldi	r20, 0xAA	; 170
    366c:	50 e4       	ldi	r21, 0x40	; 64
    366e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	f8 01       	movw	r30, r16
    3678:	80 83       	st	Z, r24
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	a2 83       	std	Z+2, r26	; 0x02
    367e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3680:	fe 01       	movw	r30, r28
    3682:	e7 5a       	subi	r30, 0xA7	; 167
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	60 81       	ld	r22, Z
    3688:	71 81       	ldd	r23, Z+1	; 0x01
    368a:	82 81       	ldd	r24, Z+2	; 0x02
    368c:	93 81       	ldd	r25, Z+3	; 0x03
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e8       	ldi	r20, 0x80	; 128
    3694:	5f e3       	ldi	r21, 0x3F	; 63
    3696:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    369a:	88 23       	and	r24, r24
    369c:	34 f4       	brge	.+12     	; 0x36aa <Lcd_SendData+0x106>
		__ticks = 1;
    369e:	fe 01       	movw	r30, r28
    36a0:	e8 5a       	subi	r30, 0xA8	; 168
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	80 83       	st	Z, r24
    36a8:	e0 c0       	rjmp	.+448    	; 0x386a <Lcd_SendData+0x2c6>
	else if (__tmp > 255)
    36aa:	fe 01       	movw	r30, r28
    36ac:	e7 5a       	subi	r30, 0xA7	; 167
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	4f e7       	ldi	r20, 0x7F	; 127
    36be:	53 e4       	ldi	r21, 0x43	; 67
    36c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36c4:	18 16       	cp	r1, r24
    36c6:	0c f0       	brlt	.+2      	; 0x36ca <Lcd_SendData+0x126>
    36c8:	c0 c0       	rjmp	.+384    	; 0x384a <Lcd_SendData+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    36ca:	fe 01       	movw	r30, r28
    36cc:	e3 5a       	subi	r30, 0xA3	; 163
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	60 81       	ld	r22, Z
    36d2:	71 81       	ldd	r23, Z+1	; 0x01
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4a e7       	ldi	r20, 0x7A	; 122
    36de:	54 e4       	ldi	r21, 0x44	; 68
    36e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	fe 01       	movw	r30, r28
    36ea:	ec 5a       	subi	r30, 0xAC	; 172
    36ec:	ff 4f       	sbci	r31, 0xFF	; 255
    36ee:	80 83       	st	Z, r24
    36f0:	91 83       	std	Z+1, r25	; 0x01
    36f2:	a2 83       	std	Z+2, r26	; 0x02
    36f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f6:	8e 01       	movw	r16, r28
    36f8:	00 5b       	subi	r16, 0xB0	; 176
    36fa:	1f 4f       	sbci	r17, 0xFF	; 255
    36fc:	fe 01       	movw	r30, r28
    36fe:	ec 5a       	subi	r30, 0xAC	; 172
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	4a e7       	ldi	r20, 0x7A	; 122
    3710:	55 e4       	ldi	r21, 0x45	; 69
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	f8 01       	movw	r30, r16
    371c:	80 83       	st	Z, r24
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	a2 83       	std	Z+2, r26	; 0x02
    3722:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3724:	fe 01       	movw	r30, r28
    3726:	e0 5b       	subi	r30, 0xB0	; 176
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	44 f4       	brge	.+16     	; 0x3752 <Lcd_SendData+0x1ae>
		__ticks = 1;
    3742:	fe 01       	movw	r30, r28
    3744:	e2 5b       	subi	r30, 0xB2	; 178
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	80 83       	st	Z, r24
    3750:	64 c0       	rjmp	.+200    	; 0x381a <Lcd_SendData+0x276>
	else if (__tmp > 65535)
    3752:	fe 01       	movw	r30, r28
    3754:	e0 5b       	subi	r30, 0xB0	; 176
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	60 81       	ld	r22, Z
    375a:	71 81       	ldd	r23, Z+1	; 0x01
    375c:	82 81       	ldd	r24, Z+2	; 0x02
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	3f ef       	ldi	r19, 0xFF	; 255
    3764:	4f e7       	ldi	r20, 0x7F	; 127
    3766:	57 e4       	ldi	r21, 0x47	; 71
    3768:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    376c:	18 16       	cp	r1, r24
    376e:	0c f0       	brlt	.+2      	; 0x3772 <Lcd_SendData+0x1ce>
    3770:	43 c0       	rjmp	.+134    	; 0x37f8 <Lcd_SendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3772:	fe 01       	movw	r30, r28
    3774:	ec 5a       	subi	r30, 0xAC	; 172
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	60 81       	ld	r22, Z
    377a:	71 81       	ldd	r23, Z+1	; 0x01
    377c:	82 81       	ldd	r24, Z+2	; 0x02
    377e:	93 81       	ldd	r25, Z+3	; 0x03
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	40 e2       	ldi	r20, 0x20	; 32
    3786:	51 e4       	ldi	r21, 0x41	; 65
    3788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	8e 01       	movw	r16, r28
    3792:	02 5b       	subi	r16, 0xB2	; 178
    3794:	1f 4f       	sbci	r17, 0xFF	; 255
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	f8 01       	movw	r30, r16
    37a4:	91 83       	std	Z+1, r25	; 0x01
    37a6:	80 83       	st	Z, r24
    37a8:	1f c0       	rjmp	.+62     	; 0x37e8 <Lcd_SendData+0x244>
    37aa:	fe 01       	movw	r30, r28
    37ac:	e4 5b       	subi	r30, 0xB4	; 180
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	80 e9       	ldi	r24, 0x90	; 144
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	91 83       	std	Z+1, r25	; 0x01
    37b6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37b8:	fe 01       	movw	r30, r28
    37ba:	e4 5b       	subi	r30, 0xB4	; 180
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	80 81       	ld	r24, Z
    37c0:	91 81       	ldd	r25, Z+1	; 0x01
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <Lcd_SendData+0x21e>
    37c6:	fe 01       	movw	r30, r28
    37c8:	e4 5b       	subi	r30, 0xB4	; 180
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d0:	de 01       	movw	r26, r28
    37d2:	a2 5b       	subi	r26, 0xB2	; 178
    37d4:	bf 4f       	sbci	r27, 0xFF	; 255
    37d6:	fe 01       	movw	r30, r28
    37d8:	e2 5b       	subi	r30, 0xB2	; 178
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	80 81       	ld	r24, Z
    37de:	91 81       	ldd	r25, Z+1	; 0x01
    37e0:	01 97       	sbiw	r24, 0x01	; 1
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	9c 93       	st	X, r25
    37e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e8:	fe 01       	movw	r30, r28
    37ea:	e2 5b       	subi	r30, 0xB2	; 178
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	d1 f6       	brne	.-76     	; 0x37aa <Lcd_SendData+0x206>
    37f6:	4b c0       	rjmp	.+150    	; 0x388e <Lcd_SendData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f8:	8e 01       	movw	r16, r28
    37fa:	02 5b       	subi	r16, 0xB2	; 178
    37fc:	1f 4f       	sbci	r17, 0xFF	; 255
    37fe:	fe 01       	movw	r30, r28
    3800:	e0 5b       	subi	r30, 0xB0	; 176
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	60 81       	ld	r22, Z
    3806:	71 81       	ldd	r23, Z+1	; 0x01
    3808:	82 81       	ldd	r24, Z+2	; 0x02
    380a:	93 81       	ldd	r25, Z+3	; 0x03
    380c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	f8 01       	movw	r30, r16
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	80 83       	st	Z, r24
    381a:	de 01       	movw	r26, r28
    381c:	a6 5b       	subi	r26, 0xB6	; 182
    381e:	bf 4f       	sbci	r27, 0xFF	; 255
    3820:	fe 01       	movw	r30, r28
    3822:	e2 5b       	subi	r30, 0xB2	; 178
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	80 81       	ld	r24, Z
    3828:	91 81       	ldd	r25, Z+1	; 0x01
    382a:	11 96       	adiw	r26, 0x01	; 1
    382c:	9c 93       	st	X, r25
    382e:	8e 93       	st	-X, r24
    3830:	fe 01       	movw	r30, r28
    3832:	e6 5b       	subi	r30, 0xB6	; 182
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	01 97       	sbiw	r24, 0x01	; 1
    383c:	f1 f7       	brne	.-4      	; 0x383a <Lcd_SendData+0x296>
    383e:	fe 01       	movw	r30, r28
    3840:	e6 5b       	subi	r30, 0xB6	; 182
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	80 83       	st	Z, r24
    3848:	22 c0       	rjmp	.+68     	; 0x388e <Lcd_SendData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    384a:	8e 01       	movw	r16, r28
    384c:	08 5a       	subi	r16, 0xA8	; 168
    384e:	1f 4f       	sbci	r17, 0xFF	; 255
    3850:	fe 01       	movw	r30, r28
    3852:	e7 5a       	subi	r30, 0xA7	; 167
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	60 81       	ld	r22, Z
    3858:	71 81       	ldd	r23, Z+1	; 0x01
    385a:	82 81       	ldd	r24, Z+2	; 0x02
    385c:	93 81       	ldd	r25, Z+3	; 0x03
    385e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	f8 01       	movw	r30, r16
    3868:	80 83       	st	Z, r24
    386a:	de 01       	movw	r26, r28
    386c:	a7 5b       	subi	r26, 0xB7	; 183
    386e:	bf 4f       	sbci	r27, 0xFF	; 255
    3870:	fe 01       	movw	r30, r28
    3872:	e8 5a       	subi	r30, 0xA8	; 168
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	80 81       	ld	r24, Z
    3878:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    387a:	fe 01       	movw	r30, r28
    387c:	e7 5b       	subi	r30, 0xB7	; 183
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 81       	ld	r24, Z
    3882:	8a 95       	dec	r24
    3884:	f1 f7       	brne	.-4      	; 0x3882 <Lcd_SendData+0x2de>
    3886:	fe 01       	movw	r30, r28
    3888:	e7 5b       	subi	r30, 0xB7	; 183
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    388e:	82 e0       	ldi	r24, 0x02	; 2
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    3896:	fe 01       	movw	r30, r28
    3898:	eb 5b       	subi	r30, 0xBB	; 187
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a0 e8       	ldi	r26, 0x80	; 128
    38a2:	bf e3       	ldi	r27, 0x3F	; 63
    38a4:	80 83       	st	Z, r24
    38a6:	91 83       	std	Z+1, r25	; 0x01
    38a8:	a2 83       	std	Z+2, r26	; 0x02
    38aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38ac:	8e 01       	movw	r16, r28
    38ae:	0f 5b       	subi	r16, 0xBF	; 191
    38b0:	1f 4f       	sbci	r17, 0xFF	; 255
    38b2:	fe 01       	movw	r30, r28
    38b4:	eb 5b       	subi	r30, 0xBB	; 187
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	60 81       	ld	r22, Z
    38ba:	71 81       	ldd	r23, Z+1	; 0x01
    38bc:	82 81       	ldd	r24, Z+2	; 0x02
    38be:	93 81       	ldd	r25, Z+3	; 0x03
    38c0:	2b ea       	ldi	r18, 0xAB	; 171
    38c2:	3a ea       	ldi	r19, 0xAA	; 170
    38c4:	4a ea       	ldi	r20, 0xAA	; 170
    38c6:	50 e4       	ldi	r21, 0x40	; 64
    38c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	f8 01       	movw	r30, r16
    38d2:	80 83       	st	Z, r24
    38d4:	91 83       	std	Z+1, r25	; 0x01
    38d6:	a2 83       	std	Z+2, r26	; 0x02
    38d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38da:	fe 01       	movw	r30, r28
    38dc:	ef 5b       	subi	r30, 0xBF	; 191
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	60 81       	ld	r22, Z
    38e2:	71 81       	ldd	r23, Z+1	; 0x01
    38e4:	82 81       	ldd	r24, Z+2	; 0x02
    38e6:	93 81       	ldd	r25, Z+3	; 0x03
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e8       	ldi	r20, 0x80	; 128
    38ee:	5f e3       	ldi	r21, 0x3F	; 63
    38f0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    38f4:	88 23       	and	r24, r24
    38f6:	34 f4       	brge	.+12     	; 0x3904 <Lcd_SendData+0x360>
		__ticks = 1;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	fe 01       	movw	r30, r28
    38fc:	e0 5c       	subi	r30, 0xC0	; 192
    38fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3900:	80 83       	st	Z, r24
    3902:	9d c0       	rjmp	.+314    	; 0x3a3e <Lcd_SendData+0x49a>
	else if (__tmp > 255)
    3904:	fe 01       	movw	r30, r28
    3906:	ef 5b       	subi	r30, 0xBF	; 191
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	4f e7       	ldi	r20, 0x7F	; 127
    3918:	53 e4       	ldi	r21, 0x43	; 67
    391a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    391e:	18 16       	cp	r1, r24
    3920:	0c f0       	brlt	.+2      	; 0x3924 <Lcd_SendData+0x380>
    3922:	7e c0       	rjmp	.+252    	; 0x3a20 <Lcd_SendData+0x47c>
	{
		_delay_ms(__us / 1000.0);
    3924:	fe 01       	movw	r30, r28
    3926:	eb 5b       	subi	r30, 0xBB	; 187
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a e7       	ldi	r20, 0x7A	; 122
    3938:	54 e4       	ldi	r21, 0x44	; 68
    393a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	8c af       	std	Y+60, r24	; 0x3c
    3944:	9d af       	std	Y+61, r25	; 0x3d
    3946:	ae af       	std	Y+62, r26	; 0x3e
    3948:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394a:	6c ad       	ldd	r22, Y+60	; 0x3c
    394c:	7d ad       	ldd	r23, Y+61	; 0x3d
    394e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3950:	9f ad       	ldd	r25, Y+63	; 0x3f
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	4a e7       	ldi	r20, 0x7A	; 122
    3958:	55 e4       	ldi	r21, 0x45	; 69
    395a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	88 af       	std	Y+56, r24	; 0x38
    3964:	99 af       	std	Y+57, r25	; 0x39
    3966:	aa af       	std	Y+58, r26	; 0x3a
    3968:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    396a:	68 ad       	ldd	r22, Y+56	; 0x38
    396c:	79 ad       	ldd	r23, Y+57	; 0x39
    396e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3970:	9b ad       	ldd	r25, Y+59	; 0x3b
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e8       	ldi	r20, 0x80	; 128
    3978:	5f e3       	ldi	r21, 0x3F	; 63
    397a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    397e:	88 23       	and	r24, r24
    3980:	2c f4       	brge	.+10     	; 0x398c <Lcd_SendData+0x3e8>
		__ticks = 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	9f ab       	std	Y+55, r25	; 0x37
    3988:	8e ab       	std	Y+54, r24	; 0x36
    398a:	3f c0       	rjmp	.+126    	; 0x3a0a <Lcd_SendData+0x466>
	else if (__tmp > 65535)
    398c:	68 ad       	ldd	r22, Y+56	; 0x38
    398e:	79 ad       	ldd	r23, Y+57	; 0x39
    3990:	8a ad       	ldd	r24, Y+58	; 0x3a
    3992:	9b ad       	ldd	r25, Y+59	; 0x3b
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	3f ef       	ldi	r19, 0xFF	; 255
    3998:	4f e7       	ldi	r20, 0x7F	; 127
    399a:	57 e4       	ldi	r21, 0x47	; 71
    399c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39a0:	18 16       	cp	r1, r24
    39a2:	4c f5       	brge	.+82     	; 0x39f6 <Lcd_SendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a4:	6c ad       	ldd	r22, Y+60	; 0x3c
    39a6:	7d ad       	ldd	r23, Y+61	; 0x3d
    39a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    39aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e2       	ldi	r20, 0x20	; 32
    39b2:	51 e4       	ldi	r21, 0x41	; 65
    39b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	9f ab       	std	Y+55, r25	; 0x37
    39ca:	8e ab       	std	Y+54, r24	; 0x36
    39cc:	0f c0       	rjmp	.+30     	; 0x39ec <Lcd_SendData+0x448>
    39ce:	80 e9       	ldi	r24, 0x90	; 144
    39d0:	91 e0       	ldi	r25, 0x01	; 1
    39d2:	9d ab       	std	Y+53, r25	; 0x35
    39d4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39d6:	8c a9       	ldd	r24, Y+52	; 0x34
    39d8:	9d a9       	ldd	r25, Y+53	; 0x35
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <Lcd_SendData+0x436>
    39de:	9d ab       	std	Y+53, r25	; 0x35
    39e0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e2:	8e a9       	ldd	r24, Y+54	; 0x36
    39e4:	9f a9       	ldd	r25, Y+55	; 0x37
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	9f ab       	std	Y+55, r25	; 0x37
    39ea:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ec:	8e a9       	ldd	r24, Y+54	; 0x36
    39ee:	9f a9       	ldd	r25, Y+55	; 0x37
    39f0:	00 97       	sbiw	r24, 0x00	; 0
    39f2:	69 f7       	brne	.-38     	; 0x39ce <Lcd_SendData+0x42a>
    39f4:	2d c0       	rjmp	.+90     	; 0x3a50 <Lcd_SendData+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f6:	68 ad       	ldd	r22, Y+56	; 0x38
    39f8:	79 ad       	ldd	r23, Y+57	; 0x39
    39fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    39fc:	9b ad       	ldd	r25, Y+59	; 0x3b
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9f ab       	std	Y+55, r25	; 0x37
    3a08:	8e ab       	std	Y+54, r24	; 0x36
    3a0a:	8e a9       	ldd	r24, Y+54	; 0x36
    3a0c:	9f a9       	ldd	r25, Y+55	; 0x37
    3a0e:	9b ab       	std	Y+51, r25	; 0x33
    3a10:	8a ab       	std	Y+50, r24	; 0x32
    3a12:	8a a9       	ldd	r24, Y+50	; 0x32
    3a14:	9b a9       	ldd	r25, Y+51	; 0x33
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <Lcd_SendData+0x472>
    3a1a:	9b ab       	std	Y+51, r25	; 0x33
    3a1c:	8a ab       	std	Y+50, r24	; 0x32
    3a1e:	18 c0       	rjmp	.+48     	; 0x3a50 <Lcd_SendData+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a20:	fe 01       	movw	r30, r28
    3a22:	ef 5b       	subi	r30, 0xBF	; 191
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	60 81       	ld	r22, Z
    3a28:	71 81       	ldd	r23, Z+1	; 0x01
    3a2a:	82 81       	ldd	r24, Z+2	; 0x02
    3a2c:	93 81       	ldd	r25, Z+3	; 0x03
    3a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	fe 01       	movw	r30, r28
    3a38:	e0 5c       	subi	r30, 0xC0	; 192
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	80 83       	st	Z, r24
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e0 5c       	subi	r30, 0xC0	; 192
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 81       	ld	r24, Z
    3a46:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a48:	89 a9       	ldd	r24, Y+49	; 0x31
    3a4a:	8a 95       	dec	r24
    3a4c:	f1 f7       	brne	.-4      	; 0x3a4a <Lcd_SendData+0x4a6>
    3a4e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(data, 0));
    3a50:	fe 01       	movw	r30, r28
    3a52:	ef 59       	subi	r30, 0x9F	; 159
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	80 81       	ld	r24, Z
    3a58:	98 2f       	mov	r25, r24
    3a5a:	91 70       	andi	r25, 0x01	; 1
    3a5c:	88 e0       	ldi	r24, 0x08	; 8
    3a5e:	69 2f       	mov	r22, r25
    3a60:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 1));
    3a64:	fe 01       	movw	r30, r28
    3a66:	ef 59       	subi	r30, 0x9F	; 159
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	86 95       	lsr	r24
    3a6e:	98 2f       	mov	r25, r24
    3a70:	91 70       	andi	r25, 0x01	; 1
    3a72:	89 e0       	ldi	r24, 0x09	; 9
    3a74:	69 2f       	mov	r22, r25
    3a76:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 2));
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	ef 59       	subi	r30, 0x9F	; 159
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	80 81       	ld	r24, Z
    3a82:	86 95       	lsr	r24
    3a84:	86 95       	lsr	r24
    3a86:	98 2f       	mov	r25, r24
    3a88:	91 70       	andi	r25, 0x01	; 1
    3a8a:	8a e0       	ldi	r24, 0x0A	; 10
    3a8c:	69 2f       	mov	r22, r25
    3a8e:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 3));
    3a92:	fe 01       	movw	r30, r28
    3a94:	ef 59       	subi	r30, 0x9F	; 159
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	80 81       	ld	r24, Z
    3a9a:	86 95       	lsr	r24
    3a9c:	86 95       	lsr	r24
    3a9e:	86 95       	lsr	r24
    3aa0:	98 2f       	mov	r25, r24
    3aa2:	91 70       	andi	r25, 0x01	; 1
    3aa4:	8c e0       	ldi	r24, 0x0C	; 12
    3aa6:	69 2f       	mov	r22, r25
    3aa8:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3aac:	82 e0       	ldi	r24, 0x02	; 2
    3aae:	61 e0       	ldi	r22, 0x01	; 1
    3ab0:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 e8       	ldi	r26, 0x80	; 128
    3aba:	bf e3       	ldi	r27, 0x3F	; 63
    3abc:	8d a7       	std	Y+45, r24	; 0x2d
    3abe:	9e a7       	std	Y+46, r25	; 0x2e
    3ac0:	af a7       	std	Y+47, r26	; 0x2f
    3ac2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ac4:	6d a5       	ldd	r22, Y+45	; 0x2d
    3ac6:	7e a5       	ldd	r23, Y+46	; 0x2e
    3ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aca:	98 a9       	ldd	r25, Y+48	; 0x30
    3acc:	2b ea       	ldi	r18, 0xAB	; 171
    3ace:	3a ea       	ldi	r19, 0xAA	; 170
    3ad0:	4a ea       	ldi	r20, 0xAA	; 170
    3ad2:	50 e4       	ldi	r21, 0x40	; 64
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	89 a7       	std	Y+41, r24	; 0x29
    3ade:	9a a7       	std	Y+42, r25	; 0x2a
    3ae0:	ab a7       	std	Y+43, r26	; 0x2b
    3ae2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3ae4:	69 a5       	ldd	r22, Y+41	; 0x29
    3ae6:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ae8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aea:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	1c f4       	brge	.+6      	; 0x3b02 <Lcd_SendData+0x55e>
		__ticks = 1;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	88 a7       	std	Y+40, r24	; 0x28
    3b00:	91 c0       	rjmp	.+290    	; 0x3c24 <Lcd_SendData+0x680>
	else if (__tmp > 255)
    3b02:	69 a5       	ldd	r22, Y+41	; 0x29
    3b04:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b06:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b08:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	4f e7       	ldi	r20, 0x7F	; 127
    3b10:	53 e4       	ldi	r21, 0x43	; 67
    3b12:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b16:	18 16       	cp	r1, r24
    3b18:	0c f0       	brlt	.+2      	; 0x3b1c <Lcd_SendData+0x578>
    3b1a:	7b c0       	rjmp	.+246    	; 0x3c12 <Lcd_SendData+0x66e>
	{
		_delay_ms(__us / 1000.0);
    3b1c:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b1e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b22:	98 a9       	ldd	r25, Y+48	; 0x30
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	4a e7       	ldi	r20, 0x7A	; 122
    3b2a:	54 e4       	ldi	r21, 0x44	; 68
    3b2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8c a3       	std	Y+36, r24	; 0x24
    3b36:	9d a3       	std	Y+37, r25	; 0x25
    3b38:	ae a3       	std	Y+38, r26	; 0x26
    3b3a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3c:	6c a1       	ldd	r22, Y+36	; 0x24
    3b3e:	7d a1       	ldd	r23, Y+37	; 0x25
    3b40:	8e a1       	ldd	r24, Y+38	; 0x26
    3b42:	9f a1       	ldd	r25, Y+39	; 0x27
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	4a e7       	ldi	r20, 0x7A	; 122
    3b4a:	55 e4       	ldi	r21, 0x45	; 69
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	88 a3       	std	Y+32, r24	; 0x20
    3b56:	99 a3       	std	Y+33, r25	; 0x21
    3b58:	aa a3       	std	Y+34, r26	; 0x22
    3b5a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3b5c:	68 a1       	ldd	r22, Y+32	; 0x20
    3b5e:	79 a1       	ldd	r23, Y+33	; 0x21
    3b60:	8a a1       	ldd	r24, Y+34	; 0x22
    3b62:	9b a1       	ldd	r25, Y+35	; 0x23
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e8       	ldi	r20, 0x80	; 128
    3b6a:	5f e3       	ldi	r21, 0x3F	; 63
    3b6c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b70:	88 23       	and	r24, r24
    3b72:	2c f4       	brge	.+10     	; 0x3b7e <Lcd_SendData+0x5da>
		__ticks = 1;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	9f 8f       	std	Y+31, r25	; 0x1f
    3b7a:	8e 8f       	std	Y+30, r24	; 0x1e
    3b7c:	3f c0       	rjmp	.+126    	; 0x3bfc <Lcd_SendData+0x658>
	else if (__tmp > 65535)
    3b7e:	68 a1       	ldd	r22, Y+32	; 0x20
    3b80:	79 a1       	ldd	r23, Y+33	; 0x21
    3b82:	8a a1       	ldd	r24, Y+34	; 0x22
    3b84:	9b a1       	ldd	r25, Y+35	; 0x23
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	3f ef       	ldi	r19, 0xFF	; 255
    3b8a:	4f e7       	ldi	r20, 0x7F	; 127
    3b8c:	57 e4       	ldi	r21, 0x47	; 71
    3b8e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b92:	18 16       	cp	r1, r24
    3b94:	4c f5       	brge	.+82     	; 0x3be8 <Lcd_SendData+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b96:	6c a1       	ldd	r22, Y+36	; 0x24
    3b98:	7d a1       	ldd	r23, Y+37	; 0x25
    3b9a:	8e a1       	ldd	r24, Y+38	; 0x26
    3b9c:	9f a1       	ldd	r25, Y+39	; 0x27
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e2       	ldi	r20, 0x20	; 32
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	bc 01       	movw	r22, r24
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	9f 8f       	std	Y+31, r25	; 0x1f
    3bbc:	8e 8f       	std	Y+30, r24	; 0x1e
    3bbe:	0f c0       	rjmp	.+30     	; 0x3bde <Lcd_SendData+0x63a>
    3bc0:	80 e9       	ldi	r24, 0x90	; 144
    3bc2:	91 e0       	ldi	r25, 0x01	; 1
    3bc4:	9d 8f       	std	Y+29, r25	; 0x1d
    3bc6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <Lcd_SendData+0x628>
    3bd0:	9d 8f       	std	Y+29, r25	; 0x1d
    3bd2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	9f 8f       	std	Y+31, r25	; 0x1f
    3bdc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3be0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3be2:	00 97       	sbiw	r24, 0x00	; 0
    3be4:	69 f7       	brne	.-38     	; 0x3bc0 <Lcd_SendData+0x61c>
    3be6:	24 c0       	rjmp	.+72     	; 0x3c30 <Lcd_SendData+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be8:	68 a1       	ldd	r22, Y+32	; 0x20
    3bea:	79 a1       	ldd	r23, Y+33	; 0x21
    3bec:	8a a1       	ldd	r24, Y+34	; 0x22
    3bee:	9b a1       	ldd	r25, Y+35	; 0x23
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	9f 8f       	std	Y+31, r25	; 0x1f
    3bfa:	8e 8f       	std	Y+30, r24	; 0x1e
    3bfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bfe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c00:	9b 8f       	std	Y+27, r25	; 0x1b
    3c02:	8a 8f       	std	Y+26, r24	; 0x1a
    3c04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <Lcd_SendData+0x664>
    3c0c:	9b 8f       	std	Y+27, r25	; 0x1b
    3c0e:	8a 8f       	std	Y+26, r24	; 0x1a
    3c10:	0f c0       	rjmp	.+30     	; 0x3c30 <Lcd_SendData+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c12:	69 a5       	ldd	r22, Y+41	; 0x29
    3c14:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c16:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c18:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	88 a7       	std	Y+40, r24	; 0x28
    3c24:	88 a5       	ldd	r24, Y+40	; 0x28
    3c26:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c28:	89 8d       	ldd	r24, Y+25	; 0x19
    3c2a:	8a 95       	dec	r24
    3c2c:	f1 f7       	brne	.-4      	; 0x3c2a <Lcd_SendData+0x686>
    3c2e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3c30:	82 e0       	ldi	r24, 0x02	; 2
    3c32:	60 e0       	ldi	r22, 0x00	; 0
    3c34:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	a0 e2       	ldi	r26, 0x20	; 32
    3c3e:	b1 e4       	ldi	r27, 0x41	; 65
    3c40:	8d 8b       	std	Y+21, r24	; 0x15
    3c42:	9e 8b       	std	Y+22, r25	; 0x16
    3c44:	af 8b       	std	Y+23, r26	; 0x17
    3c46:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c48:	6d 89       	ldd	r22, Y+21	; 0x15
    3c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c50:	2b ea       	ldi	r18, 0xAB	; 171
    3c52:	3a ea       	ldi	r19, 0xAA	; 170
    3c54:	4a ea       	ldi	r20, 0xAA	; 170
    3c56:	50 e4       	ldi	r21, 0x40	; 64
    3c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	89 8b       	std	Y+17, r24	; 0x11
    3c62:	9a 8b       	std	Y+18, r25	; 0x12
    3c64:	ab 8b       	std	Y+19, r26	; 0x13
    3c66:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3c68:	69 89       	ldd	r22, Y+17	; 0x11
    3c6a:	7a 89       	ldd	r23, Y+18	; 0x12
    3c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	40 e8       	ldi	r20, 0x80	; 128
    3c76:	5f e3       	ldi	r21, 0x3F	; 63
    3c78:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c7c:	88 23       	and	r24, r24
    3c7e:	1c f4       	brge	.+6      	; 0x3c86 <Lcd_SendData+0x6e2>
		__ticks = 1;
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	88 8b       	std	Y+16, r24	; 0x10
    3c84:	91 c0       	rjmp	.+290    	; 0x3da8 <Lcd_SendData+0x804>
	else if (__tmp > 255)
    3c86:	69 89       	ldd	r22, Y+17	; 0x11
    3c88:	7a 89       	ldd	r23, Y+18	; 0x12
    3c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	4f e7       	ldi	r20, 0x7F	; 127
    3c94:	53 e4       	ldi	r21, 0x43	; 67
    3c96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c9a:	18 16       	cp	r1, r24
    3c9c:	0c f0       	brlt	.+2      	; 0x3ca0 <Lcd_SendData+0x6fc>
    3c9e:	7b c0       	rjmp	.+246    	; 0x3d96 <Lcd_SendData+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    3ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	4a e7       	ldi	r20, 0x7A	; 122
    3cae:	54 e4       	ldi	r21, 0x44	; 68
    3cb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	8c 87       	std	Y+12, r24	; 0x0c
    3cba:	9d 87       	std	Y+13, r25	; 0x0d
    3cbc:	ae 87       	std	Y+14, r26	; 0x0e
    3cbe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    3cc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    3cc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	4a e7       	ldi	r20, 0x7A	; 122
    3cce:	55 e4       	ldi	r21, 0x45	; 69
    3cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	88 87       	std	Y+8, r24	; 0x08
    3cda:	99 87       	std	Y+9, r25	; 0x09
    3cdc:	aa 87       	std	Y+10, r26	; 0x0a
    3cde:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3ce0:	68 85       	ldd	r22, Y+8	; 0x08
    3ce2:	79 85       	ldd	r23, Y+9	; 0x09
    3ce4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ce6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e8       	ldi	r20, 0x80	; 128
    3cee:	5f e3       	ldi	r21, 0x3F	; 63
    3cf0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cf4:	88 23       	and	r24, r24
    3cf6:	2c f4       	brge	.+10     	; 0x3d02 <Lcd_SendData+0x75e>
		__ticks = 1;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	9f 83       	std	Y+7, r25	; 0x07
    3cfe:	8e 83       	std	Y+6, r24	; 0x06
    3d00:	3f c0       	rjmp	.+126    	; 0x3d80 <Lcd_SendData+0x7dc>
	else if (__tmp > 65535)
    3d02:	68 85       	ldd	r22, Y+8	; 0x08
    3d04:	79 85       	ldd	r23, Y+9	; 0x09
    3d06:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d08:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	3f ef       	ldi	r19, 0xFF	; 255
    3d0e:	4f e7       	ldi	r20, 0x7F	; 127
    3d10:	57 e4       	ldi	r21, 0x47	; 71
    3d12:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d16:	18 16       	cp	r1, r24
    3d18:	4c f5       	brge	.+82     	; 0x3d6c <Lcd_SendData+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d1c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d20:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e2       	ldi	r20, 0x20	; 32
    3d28:	51 e4       	ldi	r21, 0x41	; 65
    3d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	bc 01       	movw	r22, r24
    3d34:	cd 01       	movw	r24, r26
    3d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	9f 83       	std	Y+7, r25	; 0x07
    3d40:	8e 83       	std	Y+6, r24	; 0x06
    3d42:	0f c0       	rjmp	.+30     	; 0x3d62 <Lcd_SendData+0x7be>
    3d44:	80 e9       	ldi	r24, 0x90	; 144
    3d46:	91 e0       	ldi	r25, 0x01	; 1
    3d48:	9d 83       	std	Y+5, r25	; 0x05
    3d4a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <Lcd_SendData+0x7ac>
    3d54:	9d 83       	std	Y+5, r25	; 0x05
    3d56:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d58:	8e 81       	ldd	r24, Y+6	; 0x06
    3d5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	9f 83       	std	Y+7, r25	; 0x07
    3d60:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d62:	8e 81       	ldd	r24, Y+6	; 0x06
    3d64:	9f 81       	ldd	r25, Y+7	; 0x07
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	69 f7       	brne	.-38     	; 0x3d44 <Lcd_SendData+0x7a0>
    3d6a:	24 c0       	rjmp	.+72     	; 0x3db4 <Lcd_SendData+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6c:	68 85       	ldd	r22, Y+8	; 0x08
    3d6e:	79 85       	ldd	r23, Y+9	; 0x09
    3d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d72:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9f 83       	std	Y+7, r25	; 0x07
    3d7e:	8e 83       	std	Y+6, r24	; 0x06
    3d80:	8e 81       	ldd	r24, Y+6	; 0x06
    3d82:	9f 81       	ldd	r25, Y+7	; 0x07
    3d84:	9b 83       	std	Y+3, r25	; 0x03
    3d86:	8a 83       	std	Y+2, r24	; 0x02
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <Lcd_SendData+0x7e8>
    3d90:	9b 83       	std	Y+3, r25	; 0x03
    3d92:	8a 83       	std	Y+2, r24	; 0x02
    3d94:	0f c0       	rjmp	.+30     	; 0x3db4 <Lcd_SendData+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d96:	69 89       	ldd	r22, Y+17	; 0x11
    3d98:	7a 89       	ldd	r23, Y+18	; 0x12
    3d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	88 8b       	std	Y+16, r24	; 0x10
    3da8:	88 89       	ldd	r24, Y+16	; 0x10
    3daa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	8a 95       	dec	r24
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <Lcd_SendData+0x80a>
    3db2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);  // Wait for the data to be displayed
}
    3db4:	cf 59       	subi	r28, 0x9F	; 159
    3db6:	df 4f       	sbci	r29, 0xFF	; 255
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	f8 94       	cli
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	cd bf       	out	0x3d, r28	; 61
    3dc2:	cf 91       	pop	r28
    3dc4:	df 91       	pop	r29
    3dc6:	1f 91       	pop	r17
    3dc8:	0f 91       	pop	r16
    3dca:	08 95       	ret

00003dcc <Lcd_GoTo>:

void Lcd_GoTo(u8 row,u8 col){
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <Lcd_GoTo+0x6>
    3dd2:	00 d0       	rcall	.+0      	; 0x3dd4 <Lcd_GoTo+0x8>
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	89 83       	std	Y+1, r24	; 0x01
    3dda:	6a 83       	std	Y+2, r22	; 0x02
	col--;
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	81 50       	subi	r24, 0x01	; 1
    3de0:	8a 83       	std	Y+2, r24	; 0x02
	switch (row){
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	28 2f       	mov	r18, r24
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	3c 83       	std	Y+4, r19	; 0x04
    3dea:	2b 83       	std	Y+3, r18	; 0x03
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	9c 81       	ldd	r25, Y+4	; 0x04
    3df0:	82 30       	cpi	r24, 0x02	; 2
    3df2:	91 05       	cpc	r25, r1
    3df4:	d9 f0       	breq	.+54     	; 0x3e2c <Lcd_GoTo+0x60>
    3df6:	2b 81       	ldd	r18, Y+3	; 0x03
    3df8:	3c 81       	ldd	r19, Y+4	; 0x04
    3dfa:	23 30       	cpi	r18, 0x03	; 3
    3dfc:	31 05       	cpc	r19, r1
    3dfe:	34 f4       	brge	.+12     	; 0x3e0c <Lcd_GoTo+0x40>
    3e00:	8b 81       	ldd	r24, Y+3	; 0x03
    3e02:	9c 81       	ldd	r25, Y+4	; 0x04
    3e04:	81 30       	cpi	r24, 0x01	; 1
    3e06:	91 05       	cpc	r25, r1
    3e08:	61 f0       	breq	.+24     	; 0x3e22 <Lcd_GoTo+0x56>
    3e0a:	1e c0       	rjmp	.+60     	; 0x3e48 <Lcd_GoTo+0x7c>
    3e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    3e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    3e10:	23 30       	cpi	r18, 0x03	; 3
    3e12:	31 05       	cpc	r19, r1
    3e14:	81 f0       	breq	.+32     	; 0x3e36 <Lcd_GoTo+0x6a>
    3e16:	8b 81       	ldd	r24, Y+3	; 0x03
    3e18:	9c 81       	ldd	r25, Y+4	; 0x04
    3e1a:	84 30       	cpi	r24, 0x04	; 4
    3e1c:	91 05       	cpc	r25, r1
    3e1e:	81 f0       	breq	.+32     	; 0x3e40 <Lcd_GoTo+0x74>
    3e20:	13 c0       	rjmp	.+38     	; 0x3e48 <Lcd_GoTo+0x7c>
	        case ROW1:
	        	Lcd_SendCMD(0x80+col);
    3e22:	8a 81       	ldd	r24, Y+2	; 0x02
    3e24:	80 58       	subi	r24, 0x80	; 128
    3e26:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
    3e2a:	0e c0       	rjmp	.+28     	; 0x3e48 <Lcd_GoTo+0x7c>
	        break;
	        case ROW2:
	        	Lcd_SendCMD(0xC0+col);
    3e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2e:	80 54       	subi	r24, 0x40	; 64
    3e30:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
    3e34:	09 c0       	rjmp	.+18     	; 0x3e48 <Lcd_GoTo+0x7c>
	        break;
	        case ROW3:
	        	Lcd_SendCMD(0x94+col);
    3e36:	8a 81       	ldd	r24, Y+2	; 0x02
    3e38:	8c 56       	subi	r24, 0x6C	; 108
    3e3a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
    3e3e:	04 c0       	rjmp	.+8      	; 0x3e48 <Lcd_GoTo+0x7c>
	        break;
	        case ROW4:
	        	Lcd_SendCMD(0xD4+col);
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	8c 52       	subi	r24, 0x2C	; 44
    3e44:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
	        break;
	        default:break;

	    }
}
    3e48:	0f 90       	pop	r0
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	cf 91       	pop	r28
    3e52:	df 91       	pop	r29
    3e54:	08 95       	ret

00003e56 <Lcd_PutChar>:

void Lcd_PutChar (u8 character)
{
    3e56:	df 93       	push	r29
    3e58:	cf 93       	push	r28
    3e5a:	0f 92       	push	r0
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62
    3e60:	89 83       	std	Y+1, r24	; 0x01
	Lcd_SendData(character);
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <Lcd_SendData>
}
    3e68:	0f 90       	pop	r0
    3e6a:	cf 91       	pop	r28
    3e6c:	df 91       	pop	r29
    3e6e:	08 95       	ret

00003e70 <Lcd_PutInt>:

void Lcd_PutInt(u32 Number)
{
    3e70:	df 93       	push	r29
    3e72:	cf 93       	push	r28
    3e74:	00 d0       	rcall	.+0      	; 0x3e76 <Lcd_PutInt+0x6>
    3e76:	00 d0       	rcall	.+0      	; 0x3e78 <Lcd_PutInt+0x8>
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	69 83       	std	Y+1, r22	; 0x01
    3e7e:	7a 83       	std	Y+2, r23	; 0x02
    3e80:	8b 83       	std	Y+3, r24	; 0x03
    3e82:	9c 83       	std	Y+4, r25	; 0x04

	if(Number == 0 )
    3e84:	89 81       	ldd	r24, Y+1	; 0x01
    3e86:	9a 81       	ldd	r25, Y+2	; 0x02
    3e88:	ab 81       	ldd	r26, Y+3	; 0x03
    3e8a:	bc 81       	ldd	r27, Y+4	; 0x04
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	a1 05       	cpc	r26, r1
    3e90:	b1 05       	cpc	r27, r1
    3e92:	19 f1       	breq	.+70     	; 0x3eda <Lcd_PutInt+0x6a>
		return ;
	else
		Lcd_PutInt(Number/10);
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	9a 81       	ldd	r25, Y+2	; 0x02
    3e98:	ab 81       	ldd	r26, Y+3	; 0x03
    3e9a:	bc 81       	ldd	r27, Y+4	; 0x04
    3e9c:	2a e0       	ldi	r18, 0x0A	; 10
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	40 e0       	ldi	r20, 0x00	; 0
    3ea2:	50 e0       	ldi	r21, 0x00	; 0
    3ea4:	bc 01       	movw	r22, r24
    3ea6:	cd 01       	movw	r24, r26
    3ea8:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <__udivmodsi4>
    3eac:	da 01       	movw	r26, r20
    3eae:	c9 01       	movw	r24, r18
    3eb0:	bc 01       	movw	r22, r24
    3eb2:	cd 01       	movw	r24, r26
    3eb4:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <Lcd_PutInt>
	///if(Number<255)
	 Lcd_SendData((Number%10)+0x30);
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebc:	ab 81       	ldd	r26, Y+3	; 0x03
    3ebe:	bc 81       	ldd	r27, Y+4	; 0x04
    3ec0:	2a e0       	ldi	r18, 0x0A	; 10
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <__udivmodsi4>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	80 5d       	subi	r24, 0xD0	; 208
    3ed6:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <Lcd_SendData>
}
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <Lcd_Init>:

void Lcd_Init(void) {
    3ee8:	0f 93       	push	r16
    3eea:	1f 93       	push	r17
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62
    3ef4:	c6 54       	subi	r28, 0x46	; 70
    3ef6:	d0 40       	sbci	r29, 0x00	; 0
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
    3f02:	fe 01       	movw	r30, r28
    3f04:	ed 5b       	subi	r30, 0xBD	; 189
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a8 e4       	ldi	r26, 0x48	; 72
    3f0e:	b2 e4       	ldi	r27, 0x42	; 66
    3f10:	80 83       	st	Z, r24
    3f12:	91 83       	std	Z+1, r25	; 0x01
    3f14:	a2 83       	std	Z+2, r26	; 0x02
    3f16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f18:	8e 01       	movw	r16, r28
    3f1a:	01 5c       	subi	r16, 0xC1	; 193
    3f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ed 5b       	subi	r30, 0xBD	; 189
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	60 81       	ld	r22, Z
    3f26:	71 81       	ldd	r23, Z+1	; 0x01
    3f28:	82 81       	ldd	r24, Z+2	; 0x02
    3f2a:	93 81       	ldd	r25, Z+3	; 0x03
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	4a e7       	ldi	r20, 0x7A	; 122
    3f32:	55 e4       	ldi	r21, 0x45	; 69
    3f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	f8 01       	movw	r30, r16
    3f3e:	80 83       	st	Z, r24
    3f40:	91 83       	std	Z+1, r25	; 0x01
    3f42:	a2 83       	std	Z+2, r26	; 0x02
    3f44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f46:	fe 01       	movw	r30, r28
    3f48:	ff 96       	adiw	r30, 0x3f	; 63
    3f4a:	60 81       	ld	r22, Z
    3f4c:	71 81       	ldd	r23, Z+1	; 0x01
    3f4e:	82 81       	ldd	r24, Z+2	; 0x02
    3f50:	93 81       	ldd	r25, Z+3	; 0x03
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	40 e8       	ldi	r20, 0x80	; 128
    3f58:	5f e3       	ldi	r21, 0x3F	; 63
    3f5a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f5e:	88 23       	and	r24, r24
    3f60:	2c f4       	brge	.+10     	; 0x3f6c <Lcd_Init+0x84>
		__ticks = 1;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	9e af       	std	Y+62, r25	; 0x3e
    3f68:	8d af       	std	Y+61, r24	; 0x3d
    3f6a:	46 c0       	rjmp	.+140    	; 0x3ff8 <Lcd_Init+0x110>
	else if (__tmp > 65535)
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	ff 96       	adiw	r30, 0x3f	; 63
    3f70:	60 81       	ld	r22, Z
    3f72:	71 81       	ldd	r23, Z+1	; 0x01
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	3f ef       	ldi	r19, 0xFF	; 255
    3f7c:	4f e7       	ldi	r20, 0x7F	; 127
    3f7e:	57 e4       	ldi	r21, 0x47	; 71
    3f80:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f84:	18 16       	cp	r1, r24
    3f86:	64 f5       	brge	.+88     	; 0x3fe0 <Lcd_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f88:	fe 01       	movw	r30, r28
    3f8a:	ed 5b       	subi	r30, 0xBD	; 189
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e2       	ldi	r20, 0x20	; 32
    3f9c:	51 e4       	ldi	r21, 0x41	; 65
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	cd 01       	movw	r24, r26
    3faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	9e af       	std	Y+62, r25	; 0x3e
    3fb4:	8d af       	std	Y+61, r24	; 0x3d
    3fb6:	0f c0       	rjmp	.+30     	; 0x3fd6 <Lcd_Init+0xee>
    3fb8:	80 e9       	ldi	r24, 0x90	; 144
    3fba:	91 e0       	ldi	r25, 0x01	; 1
    3fbc:	9c af       	std	Y+60, r25	; 0x3c
    3fbe:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fc0:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fc2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <Lcd_Init+0xdc>
    3fc8:	9c af       	std	Y+60, r25	; 0x3c
    3fca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fce:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fd0:	01 97       	sbiw	r24, 0x01	; 1
    3fd2:	9e af       	std	Y+62, r25	; 0x3e
    3fd4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	69 f7       	brne	.-38     	; 0x3fb8 <Lcd_Init+0xd0>
    3fde:	16 c0       	rjmp	.+44     	; 0x400c <Lcd_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	ff 96       	adiw	r30, 0x3f	; 63
    3fe4:	60 81       	ld	r22, Z
    3fe6:	71 81       	ldd	r23, Z+1	; 0x01
    3fe8:	82 81       	ldd	r24, Z+2	; 0x02
    3fea:	93 81       	ldd	r25, Z+3	; 0x03
    3fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	9e af       	std	Y+62, r25	; 0x3e
    3ff6:	8d af       	std	Y+61, r24	; 0x3d
    3ff8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ffa:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ffc:	9a af       	std	Y+58, r25	; 0x3a
    3ffe:	89 af       	std	Y+57, r24	; 0x39
    4000:	89 ad       	ldd	r24, Y+57	; 0x39
    4002:	9a ad       	ldd	r25, Y+58	; 0x3a
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	f1 f7       	brne	.-4      	; 0x4004 <Lcd_Init+0x11c>
    4008:	9a af       	std	Y+58, r25	; 0x3a
    400a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	Lcd_SendCMD(HOME);
    400c:	82 e0       	ldi	r24, 0x02	; 2
    400e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
	Lcd_SendCMD(FOUR_BIT);
    4012:	88 e2       	ldi	r24, 0x28	; 40
    4014:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	a0 e8       	ldi	r26, 0x80	; 128
    401e:	bf e3       	ldi	r27, 0x3F	; 63
    4020:	8d ab       	std	Y+53, r24	; 0x35
    4022:	9e ab       	std	Y+54, r25	; 0x36
    4024:	af ab       	std	Y+55, r26	; 0x37
    4026:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4028:	6d a9       	ldd	r22, Y+53	; 0x35
    402a:	7e a9       	ldd	r23, Y+54	; 0x36
    402c:	8f a9       	ldd	r24, Y+55	; 0x37
    402e:	98 ad       	ldd	r25, Y+56	; 0x38
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	4a e7       	ldi	r20, 0x7A	; 122
    4036:	55 e4       	ldi	r21, 0x45	; 69
    4038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	89 ab       	std	Y+49, r24	; 0x31
    4042:	9a ab       	std	Y+50, r25	; 0x32
    4044:	ab ab       	std	Y+51, r26	; 0x33
    4046:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4048:	69 a9       	ldd	r22, Y+49	; 0x31
    404a:	7a a9       	ldd	r23, Y+50	; 0x32
    404c:	8b a9       	ldd	r24, Y+51	; 0x33
    404e:	9c a9       	ldd	r25, Y+52	; 0x34
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	40 e8       	ldi	r20, 0x80	; 128
    4056:	5f e3       	ldi	r21, 0x3F	; 63
    4058:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    405c:	88 23       	and	r24, r24
    405e:	2c f4       	brge	.+10     	; 0x406a <Lcd_Init+0x182>
		__ticks = 1;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	98 ab       	std	Y+48, r25	; 0x30
    4066:	8f a7       	std	Y+47, r24	; 0x2f
    4068:	3f c0       	rjmp	.+126    	; 0x40e8 <Lcd_Init+0x200>
	else if (__tmp > 65535)
    406a:	69 a9       	ldd	r22, Y+49	; 0x31
    406c:	7a a9       	ldd	r23, Y+50	; 0x32
    406e:	8b a9       	ldd	r24, Y+51	; 0x33
    4070:	9c a9       	ldd	r25, Y+52	; 0x34
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	3f ef       	ldi	r19, 0xFF	; 255
    4076:	4f e7       	ldi	r20, 0x7F	; 127
    4078:	57 e4       	ldi	r21, 0x47	; 71
    407a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    407e:	18 16       	cp	r1, r24
    4080:	4c f5       	brge	.+82     	; 0x40d4 <Lcd_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4082:	6d a9       	ldd	r22, Y+53	; 0x35
    4084:	7e a9       	ldd	r23, Y+54	; 0x36
    4086:	8f a9       	ldd	r24, Y+55	; 0x37
    4088:	98 ad       	ldd	r25, Y+56	; 0x38
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	40 e2       	ldi	r20, 0x20	; 32
    4090:	51 e4       	ldi	r21, 0x41	; 65
    4092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	bc 01       	movw	r22, r24
    409c:	cd 01       	movw	r24, r26
    409e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	98 ab       	std	Y+48, r25	; 0x30
    40a8:	8f a7       	std	Y+47, r24	; 0x2f
    40aa:	0f c0       	rjmp	.+30     	; 0x40ca <Lcd_Init+0x1e2>
    40ac:	80 e9       	ldi	r24, 0x90	; 144
    40ae:	91 e0       	ldi	r25, 0x01	; 1
    40b0:	9e a7       	std	Y+46, r25	; 0x2e
    40b2:	8d a7       	std	Y+45, r24	; 0x2d
    40b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    40b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <Lcd_Init+0x1d0>
    40bc:	9e a7       	std	Y+46, r25	; 0x2e
    40be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    40c2:	98 a9       	ldd	r25, Y+48	; 0x30
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	98 ab       	std	Y+48, r25	; 0x30
    40c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    40cc:	98 a9       	ldd	r25, Y+48	; 0x30
    40ce:	00 97       	sbiw	r24, 0x00	; 0
    40d0:	69 f7       	brne	.-38     	; 0x40ac <Lcd_Init+0x1c4>
    40d2:	14 c0       	rjmp	.+40     	; 0x40fc <Lcd_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d4:	69 a9       	ldd	r22, Y+49	; 0x31
    40d6:	7a a9       	ldd	r23, Y+50	; 0x32
    40d8:	8b a9       	ldd	r24, Y+51	; 0x33
    40da:	9c a9       	ldd	r25, Y+52	; 0x34
    40dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	98 ab       	std	Y+48, r25	; 0x30
    40e6:	8f a7       	std	Y+47, r24	; 0x2f
    40e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    40ea:	98 a9       	ldd	r25, Y+48	; 0x30
    40ec:	9c a7       	std	Y+44, r25	; 0x2c
    40ee:	8b a7       	std	Y+43, r24	; 0x2b
    40f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    40f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	f1 f7       	brne	.-4      	; 0x40f4 <Lcd_Init+0x20c>
    40f8:	9c a7       	std	Y+44, r25	; 0x2c
    40fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Lcd_SendCMD(CURSER_ON);
    40fc:	8f e0       	ldi	r24, 0x0F	; 15
    40fe:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	a0 e8       	ldi	r26, 0x80	; 128
    4108:	bf e3       	ldi	r27, 0x3F	; 63
    410a:	8f a3       	std	Y+39, r24	; 0x27
    410c:	98 a7       	std	Y+40, r25	; 0x28
    410e:	a9 a7       	std	Y+41, r26	; 0x29
    4110:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4112:	6f a1       	ldd	r22, Y+39	; 0x27
    4114:	78 a5       	ldd	r23, Y+40	; 0x28
    4116:	89 a5       	ldd	r24, Y+41	; 0x29
    4118:	9a a5       	ldd	r25, Y+42	; 0x2a
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	4a e7       	ldi	r20, 0x7A	; 122
    4120:	55 e4       	ldi	r21, 0x45	; 69
    4122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	8b a3       	std	Y+35, r24	; 0x23
    412c:	9c a3       	std	Y+36, r25	; 0x24
    412e:	ad a3       	std	Y+37, r26	; 0x25
    4130:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4132:	6b a1       	ldd	r22, Y+35	; 0x23
    4134:	7c a1       	ldd	r23, Y+36	; 0x24
    4136:	8d a1       	ldd	r24, Y+37	; 0x25
    4138:	9e a1       	ldd	r25, Y+38	; 0x26
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e8       	ldi	r20, 0x80	; 128
    4140:	5f e3       	ldi	r21, 0x3F	; 63
    4142:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4146:	88 23       	and	r24, r24
    4148:	2c f4       	brge	.+10     	; 0x4154 <Lcd_Init+0x26c>
		__ticks = 1;
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	9a a3       	std	Y+34, r25	; 0x22
    4150:	89 a3       	std	Y+33, r24	; 0x21
    4152:	3f c0       	rjmp	.+126    	; 0x41d2 <Lcd_Init+0x2ea>
	else if (__tmp > 65535)
    4154:	6b a1       	ldd	r22, Y+35	; 0x23
    4156:	7c a1       	ldd	r23, Y+36	; 0x24
    4158:	8d a1       	ldd	r24, Y+37	; 0x25
    415a:	9e a1       	ldd	r25, Y+38	; 0x26
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	3f ef       	ldi	r19, 0xFF	; 255
    4160:	4f e7       	ldi	r20, 0x7F	; 127
    4162:	57 e4       	ldi	r21, 0x47	; 71
    4164:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4168:	18 16       	cp	r1, r24
    416a:	4c f5       	brge	.+82     	; 0x41be <Lcd_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416c:	6f a1       	ldd	r22, Y+39	; 0x27
    416e:	78 a5       	ldd	r23, Y+40	; 0x28
    4170:	89 a5       	ldd	r24, Y+41	; 0x29
    4172:	9a a5       	ldd	r25, Y+42	; 0x2a
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	40 e2       	ldi	r20, 0x20	; 32
    417a:	51 e4       	ldi	r21, 0x41	; 65
    417c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4180:	dc 01       	movw	r26, r24
    4182:	cb 01       	movw	r24, r22
    4184:	bc 01       	movw	r22, r24
    4186:	cd 01       	movw	r24, r26
    4188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	9a a3       	std	Y+34, r25	; 0x22
    4192:	89 a3       	std	Y+33, r24	; 0x21
    4194:	0f c0       	rjmp	.+30     	; 0x41b4 <Lcd_Init+0x2cc>
    4196:	80 e9       	ldi	r24, 0x90	; 144
    4198:	91 e0       	ldi	r25, 0x01	; 1
    419a:	98 a3       	std	Y+32, r25	; 0x20
    419c:	8f 8f       	std	Y+31, r24	; 0x1f
    419e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41a0:	98 a1       	ldd	r25, Y+32	; 0x20
    41a2:	01 97       	sbiw	r24, 0x01	; 1
    41a4:	f1 f7       	brne	.-4      	; 0x41a2 <Lcd_Init+0x2ba>
    41a6:	98 a3       	std	Y+32, r25	; 0x20
    41a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41aa:	89 a1       	ldd	r24, Y+33	; 0x21
    41ac:	9a a1       	ldd	r25, Y+34	; 0x22
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	9a a3       	std	Y+34, r25	; 0x22
    41b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b4:	89 a1       	ldd	r24, Y+33	; 0x21
    41b6:	9a a1       	ldd	r25, Y+34	; 0x22
    41b8:	00 97       	sbiw	r24, 0x00	; 0
    41ba:	69 f7       	brne	.-38     	; 0x4196 <Lcd_Init+0x2ae>
    41bc:	14 c0       	rjmp	.+40     	; 0x41e6 <Lcd_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41be:	6b a1       	ldd	r22, Y+35	; 0x23
    41c0:	7c a1       	ldd	r23, Y+36	; 0x24
    41c2:	8d a1       	ldd	r24, Y+37	; 0x25
    41c4:	9e a1       	ldd	r25, Y+38	; 0x26
    41c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	9a a3       	std	Y+34, r25	; 0x22
    41d0:	89 a3       	std	Y+33, r24	; 0x21
    41d2:	89 a1       	ldd	r24, Y+33	; 0x21
    41d4:	9a a1       	ldd	r25, Y+34	; 0x22
    41d6:	9e 8f       	std	Y+30, r25	; 0x1e
    41d8:	8d 8f       	std	Y+29, r24	; 0x1d
    41da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41de:	01 97       	sbiw	r24, 0x01	; 1
    41e0:	f1 f7       	brne	.-4      	; 0x41de <Lcd_Init+0x2f6>
    41e2:	9e 8f       	std	Y+30, r25	; 0x1e
    41e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_SendCMD(CLEAR);
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	a0 e8       	ldi	r26, 0x80	; 128
    41f2:	bf e3       	ldi	r27, 0x3F	; 63
    41f4:	89 8f       	std	Y+25, r24	; 0x19
    41f6:	9a 8f       	std	Y+26, r25	; 0x1a
    41f8:	ab 8f       	std	Y+27, r26	; 0x1b
    41fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41fc:	69 8d       	ldd	r22, Y+25	; 0x19
    41fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	4a e7       	ldi	r20, 0x7A	; 122
    420a:	55 e4       	ldi	r21, 0x45	; 69
    420c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	8d 8b       	std	Y+21, r24	; 0x15
    4216:	9e 8b       	std	Y+22, r25	; 0x16
    4218:	af 8b       	std	Y+23, r26	; 0x17
    421a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    421c:	6d 89       	ldd	r22, Y+21	; 0x15
    421e:	7e 89       	ldd	r23, Y+22	; 0x16
    4220:	8f 89       	ldd	r24, Y+23	; 0x17
    4222:	98 8d       	ldd	r25, Y+24	; 0x18
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e8       	ldi	r20, 0x80	; 128
    422a:	5f e3       	ldi	r21, 0x3F	; 63
    422c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4230:	88 23       	and	r24, r24
    4232:	2c f4       	brge	.+10     	; 0x423e <Lcd_Init+0x356>
		__ticks = 1;
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	9c 8b       	std	Y+20, r25	; 0x14
    423a:	8b 8b       	std	Y+19, r24	; 0x13
    423c:	3f c0       	rjmp	.+126    	; 0x42bc <Lcd_Init+0x3d4>
	else if (__tmp > 65535)
    423e:	6d 89       	ldd	r22, Y+21	; 0x15
    4240:	7e 89       	ldd	r23, Y+22	; 0x16
    4242:	8f 89       	ldd	r24, Y+23	; 0x17
    4244:	98 8d       	ldd	r25, Y+24	; 0x18
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	3f ef       	ldi	r19, 0xFF	; 255
    424a:	4f e7       	ldi	r20, 0x7F	; 127
    424c:	57 e4       	ldi	r21, 0x47	; 71
    424e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4252:	18 16       	cp	r1, r24
    4254:	4c f5       	brge	.+82     	; 0x42a8 <Lcd_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4256:	69 8d       	ldd	r22, Y+25	; 0x19
    4258:	7a 8d       	ldd	r23, Y+26	; 0x1a
    425a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    425c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e2       	ldi	r20, 0x20	; 32
    4264:	51 e4       	ldi	r21, 0x41	; 65
    4266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	bc 01       	movw	r22, r24
    4270:	cd 01       	movw	r24, r26
    4272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	9c 8b       	std	Y+20, r25	; 0x14
    427c:	8b 8b       	std	Y+19, r24	; 0x13
    427e:	0f c0       	rjmp	.+30     	; 0x429e <Lcd_Init+0x3b6>
    4280:	80 e9       	ldi	r24, 0x90	; 144
    4282:	91 e0       	ldi	r25, 0x01	; 1
    4284:	9a 8b       	std	Y+18, r25	; 0x12
    4286:	89 8b       	std	Y+17, r24	; 0x11
    4288:	89 89       	ldd	r24, Y+17	; 0x11
    428a:	9a 89       	ldd	r25, Y+18	; 0x12
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <Lcd_Init+0x3a4>
    4290:	9a 8b       	std	Y+18, r25	; 0x12
    4292:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4294:	8b 89       	ldd	r24, Y+19	; 0x13
    4296:	9c 89       	ldd	r25, Y+20	; 0x14
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	9c 8b       	std	Y+20, r25	; 0x14
    429c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    429e:	8b 89       	ldd	r24, Y+19	; 0x13
    42a0:	9c 89       	ldd	r25, Y+20	; 0x14
    42a2:	00 97       	sbiw	r24, 0x00	; 0
    42a4:	69 f7       	brne	.-38     	; 0x4280 <Lcd_Init+0x398>
    42a6:	14 c0       	rjmp	.+40     	; 0x42d0 <Lcd_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a8:	6d 89       	ldd	r22, Y+21	; 0x15
    42aa:	7e 89       	ldd	r23, Y+22	; 0x16
    42ac:	8f 89       	ldd	r24, Y+23	; 0x17
    42ae:	98 8d       	ldd	r25, Y+24	; 0x18
    42b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	9c 8b       	std	Y+20, r25	; 0x14
    42ba:	8b 8b       	std	Y+19, r24	; 0x13
    42bc:	8b 89       	ldd	r24, Y+19	; 0x13
    42be:	9c 89       	ldd	r25, Y+20	; 0x14
    42c0:	98 8b       	std	Y+16, r25	; 0x10
    42c2:	8f 87       	std	Y+15, r24	; 0x0f
    42c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    42c6:	98 89       	ldd	r25, Y+16	; 0x10
    42c8:	01 97       	sbiw	r24, 0x01	; 1
    42ca:	f1 f7       	brne	.-4      	; 0x42c8 <Lcd_Init+0x3e0>
    42cc:	98 8b       	std	Y+16, r25	; 0x10
    42ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_SendCMD(MODE);
    42d0:	86 e0       	ldi	r24, 0x06	; 6
    42d2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
    42d6:	80 e0       	ldi	r24, 0x00	; 0
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	a0 e8       	ldi	r26, 0x80	; 128
    42dc:	bf e3       	ldi	r27, 0x3F	; 63
    42de:	8b 87       	std	Y+11, r24	; 0x0b
    42e0:	9c 87       	std	Y+12, r25	; 0x0c
    42e2:	ad 87       	std	Y+13, r26	; 0x0d
    42e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	4a e7       	ldi	r20, 0x7A	; 122
    42f4:	55 e4       	ldi	r21, 0x45	; 69
    42f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	8f 83       	std	Y+7, r24	; 0x07
    4300:	98 87       	std	Y+8, r25	; 0x08
    4302:	a9 87       	std	Y+9, r26	; 0x09
    4304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4306:	6f 81       	ldd	r22, Y+7	; 0x07
    4308:	78 85       	ldd	r23, Y+8	; 0x08
    430a:	89 85       	ldd	r24, Y+9	; 0x09
    430c:	9a 85       	ldd	r25, Y+10	; 0x0a
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	40 e8       	ldi	r20, 0x80	; 128
    4314:	5f e3       	ldi	r21, 0x3F	; 63
    4316:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    431a:	88 23       	and	r24, r24
    431c:	2c f4       	brge	.+10     	; 0x4328 <Lcd_Init+0x440>
		__ticks = 1;
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	9e 83       	std	Y+6, r25	; 0x06
    4324:	8d 83       	std	Y+5, r24	; 0x05
    4326:	3f c0       	rjmp	.+126    	; 0x43a6 <Lcd_Init+0x4be>
	else if (__tmp > 65535)
    4328:	6f 81       	ldd	r22, Y+7	; 0x07
    432a:	78 85       	ldd	r23, Y+8	; 0x08
    432c:	89 85       	ldd	r24, Y+9	; 0x09
    432e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	3f ef       	ldi	r19, 0xFF	; 255
    4334:	4f e7       	ldi	r20, 0x7F	; 127
    4336:	57 e4       	ldi	r21, 0x47	; 71
    4338:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    433c:	18 16       	cp	r1, r24
    433e:	4c f5       	brge	.+82     	; 0x4392 <Lcd_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4340:	6b 85       	ldd	r22, Y+11	; 0x0b
    4342:	7c 85       	ldd	r23, Y+12	; 0x0c
    4344:	8d 85       	ldd	r24, Y+13	; 0x0d
    4346:	9e 85       	ldd	r25, Y+14	; 0x0e
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	40 e2       	ldi	r20, 0x20	; 32
    434e:	51 e4       	ldi	r21, 0x41	; 65
    4350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	bc 01       	movw	r22, r24
    435a:	cd 01       	movw	r24, r26
    435c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	9e 83       	std	Y+6, r25	; 0x06
    4366:	8d 83       	std	Y+5, r24	; 0x05
    4368:	0f c0       	rjmp	.+30     	; 0x4388 <Lcd_Init+0x4a0>
    436a:	80 e9       	ldi	r24, 0x90	; 144
    436c:	91 e0       	ldi	r25, 0x01	; 1
    436e:	9c 83       	std	Y+4, r25	; 0x04
    4370:	8b 83       	std	Y+3, r24	; 0x03
    4372:	8b 81       	ldd	r24, Y+3	; 0x03
    4374:	9c 81       	ldd	r25, Y+4	; 0x04
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <Lcd_Init+0x48e>
    437a:	9c 83       	std	Y+4, r25	; 0x04
    437c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    437e:	8d 81       	ldd	r24, Y+5	; 0x05
    4380:	9e 81       	ldd	r25, Y+6	; 0x06
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	9e 83       	std	Y+6, r25	; 0x06
    4386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4388:	8d 81       	ldd	r24, Y+5	; 0x05
    438a:	9e 81       	ldd	r25, Y+6	; 0x06
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	69 f7       	brne	.-38     	; 0x436a <Lcd_Init+0x482>
    4390:	14 c0       	rjmp	.+40     	; 0x43ba <Lcd_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4392:	6f 81       	ldd	r22, Y+7	; 0x07
    4394:	78 85       	ldd	r23, Y+8	; 0x08
    4396:	89 85       	ldd	r24, Y+9	; 0x09
    4398:	9a 85       	ldd	r25, Y+10	; 0x0a
    439a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	9e 83       	std	Y+6, r25	; 0x06
    43a4:	8d 83       	std	Y+5, r24	; 0x05
    43a6:	8d 81       	ldd	r24, Y+5	; 0x05
    43a8:	9e 81       	ldd	r25, Y+6	; 0x06
    43aa:	9a 83       	std	Y+2, r25	; 0x02
    43ac:	89 83       	std	Y+1, r24	; 0x01
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
    43b0:	9a 81       	ldd	r25, Y+2	; 0x02
    43b2:	01 97       	sbiw	r24, 0x01	; 1
    43b4:	f1 f7       	brne	.-4      	; 0x43b2 <Lcd_Init+0x4ca>
    43b6:	9a 83       	std	Y+2, r25	; 0x02
    43b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Lcd_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    43ba:	8c e0       	ldi	r24, 0x0C	; 12
    43bc:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
	Lcd_SendCMD(SET_DDRAM_ADDR);
    43c0:	80 e8       	ldi	r24, 0x80	; 128
    43c2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
}
    43c6:	ca 5b       	subi	r28, 0xBA	; 186
    43c8:	df 4f       	sbci	r29, 0xFF	; 255
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	f8 94       	cli
    43ce:	de bf       	out	0x3e, r29	; 62
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	cd bf       	out	0x3d, r28	; 61
    43d4:	cf 91       	pop	r28
    43d6:	df 91       	pop	r29
    43d8:	1f 91       	pop	r17
    43da:	0f 91       	pop	r16
    43dc:	08 95       	ret

000043de <Lcd_Clear>:
void Lcd_Clear(void){
    43de:	df 93       	push	r29
    43e0:	cf 93       	push	r28
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
Lcd_SendCMD(CLEAR);
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Lcd_SendCMD>
}
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <Lcd_PutString>:


void Lcd_PutString (u8* str)
{
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	00 d0       	rcall	.+0      	; 0x43f8 <Lcd_PutString+0x6>
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	9a 83       	std	Y+2, r25	; 0x02
    43fe:	89 83       	std	Y+1, r24	; 0x01
    4400:	0a c0       	rjmp	.+20     	; 0x4416 <Lcd_PutString+0x24>
	 while (*str !='\0'){
		Lcd_PutChar(*str);
    4402:	e9 81       	ldd	r30, Y+1	; 0x01
    4404:	fa 81       	ldd	r31, Y+2	; 0x02
    4406:	80 81       	ld	r24, Z
    4408:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <Lcd_PutChar>
		str++;
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	9a 81       	ldd	r25, Y+2	; 0x02
    4410:	01 96       	adiw	r24, 0x01	; 1
    4412:	9a 83       	std	Y+2, r25	; 0x02
    4414:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_PutString (u8* str)
{
	 while (*str !='\0'){
    4416:	e9 81       	ldd	r30, Y+1	; 0x01
    4418:	fa 81       	ldd	r31, Y+2	; 0x02
    441a:	80 81       	ld	r24, Z
    441c:	88 23       	and	r24, r24
    441e:	89 f7       	brne	.-30     	; 0x4402 <Lcd_PutString+0x10>
		Lcd_PutChar(*str);
		str++;
		}
}
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	cf 91       	pop	r28
    4426:	df 91       	pop	r29
    4428:	08 95       	ret

0000442a <lcd4_disply_char_at_X_Y>:

void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	00 d0       	rcall	.+0      	; 0x4430 <lcd4_disply_char_at_X_Y+0x6>
    4430:	0f 92       	push	r0
    4432:	cd b7       	in	r28, 0x3d	; 61
    4434:	de b7       	in	r29, 0x3e	; 62
    4436:	89 83       	std	Y+1, r24	; 0x01
    4438:	6a 83       	std	Y+2, r22	; 0x02
    443a:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoTo(row, col);
    443c:	8a 81       	ldd	r24, Y+2	; 0x02
    443e:	6b 81       	ldd	r22, Y+3	; 0x03
    4440:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <Lcd_GoTo>
	Lcd_SendData(data);
    4444:	89 81       	ldd	r24, Y+1	; 0x01
    4446:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <Lcd_SendData>
}
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	cf 91       	pop	r28
    4452:	df 91       	pop	r29
    4454:	08 95       	ret

00004456 <Lcd_PutString_x_Y>:


void Lcd_PutString_x_Y(u8* data, u8 row, u8 col)
{
    4456:	df 93       	push	r29
    4458:	cf 93       	push	r28
    445a:	00 d0       	rcall	.+0      	; 0x445c <Lcd_PutString_x_Y+0x6>
    445c:	00 d0       	rcall	.+0      	; 0x445e <Lcd_PutString_x_Y+0x8>
    445e:	cd b7       	in	r28, 0x3d	; 61
    4460:	de b7       	in	r29, 0x3e	; 62
    4462:	9a 83       	std	Y+2, r25	; 0x02
    4464:	89 83       	std	Y+1, r24	; 0x01
    4466:	6b 83       	std	Y+3, r22	; 0x03
    4468:	4c 83       	std	Y+4, r20	; 0x04
	Lcd_GoTo(row, col);
    446a:	8b 81       	ldd	r24, Y+3	; 0x03
    446c:	6c 81       	ldd	r22, Y+4	; 0x04
    446e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <Lcd_GoTo>
	Lcd_PutString(data);
    4472:	89 81       	ldd	r24, Y+1	; 0x01
    4474:	9a 81       	ldd	r25, Y+2	; 0x02
    4476:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Lcd_PutString>
}
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	cf 91       	pop	r28
    4484:	df 91       	pop	r29
    4486:	08 95       	ret

00004488 <Act>:

u8 Lock_state = 0 ;
u8 function_toAct = 0;

//test getting unlocked vehicle so u can proceed with ur actions
void Act(u8 data){
    4488:	df 93       	push	r29
    448a:	cf 93       	push	r28
    448c:	0f 92       	push	r0
    448e:	cd b7       	in	r28, 0x3d	; 61
    4490:	de b7       	in	r29, 0x3e	; 62
    4492:	89 83       	std	Y+1, r24	; 0x01
	if(data == APP_VEHICLE_UNLOCKED)
    4494:	89 81       	ldd	r24, Y+1	; 0x01
    4496:	81 3d       	cpi	r24, 0xD1	; 209
    4498:	59 f4       	brne	.+22     	; 0x44b0 <Act+0x28>
		{
		Lock_state = 1;
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	80 93 58 02 	sts	0x0258, r24
	    UART_TransmitString("\r\n\r\n vehicle unlocked \r\n\r\n");
    44a0:	80 e6       	ldi	r24, 0x60	; 96
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	0e 94 f6 07 	call	0xfec	; 0xfec <UART_TransmitString>
	    Dio_WriteChannel(PB_4, STD_HIGH);
    44a8:	8c e0       	ldi	r24, 0x0C	; 12
    44aa:	61 e0       	ldi	r22, 0x01	; 1
    44ac:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
		}
}
    44b0:	0f 90       	pop	r0
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <Act0>:

//test reciving obstacle  or autopark
void Act0(u8 data){
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	0f 92       	push	r0
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    44c2:	89 83       	std	Y+1, r24	; 0x01
	if(data == 'O' )
    44c4:	89 81       	ldd	r24, Y+1	; 0x01
    44c6:	8f 34       	cpi	r24, 0x4F	; 79
    44c8:	29 f4       	brne	.+10     	; 0x44d4 <Act0+0x1c>
			{
		//	Lock_state = 1;
		    UART_TransmitString("\r\n\r\n UNLOCKED OBStacle AVOIDENCE FEATUURE\r\n\r\n");
    44ca:	8b e7       	ldi	r24, 0x7B	; 123
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	0e 94 f6 07 	call	0xfec	; 0xfec <UART_TransmitString>
    44d2:	07 c0       	rjmp	.+14     	; 0x44e2 <Act0+0x2a>
			}
	else if( data == 'I')
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	89 34       	cpi	r24, 0x49	; 73
    44d8:	21 f4       	brne	.+8      	; 0x44e2 <Act0+0x2a>
			{
		//	Lock_state = 1;
		    UART_TransmitString("\r\n\r\n UNLOCKED  AUTOPARK \r\n\r\n");
    44da:	89 ea       	ldi	r24, 0xA9	; 169
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	0e 94 f6 07 	call	0xfec	; 0xfec <UART_TransmitString>
			}

}
    44e2:	0f 90       	pop	r0
    44e4:	cf 91       	pop	r28
    44e6:	df 91       	pop	r29
    44e8:	08 95       	ret

000044ea <NOAct>:


//test reciving feedback 0xEE
void NOAct(u8 data){
    44ea:	df 93       	push	r29
    44ec:	cf 93       	push	r28
    44ee:	0f 92       	push	r0
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    44f4:	89 83       	std	Y+1, r24	; 0x01
	if(data == 0xEE)
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	8e 3e       	cpi	r24, 0xEE	; 238
    44fa:	19 f4       	brne	.+6      	; 0x4502 <NOAct+0x18>
		Dio_FlipChannel(PA_4);
    44fc:	84 e0       	ldi	r24, 0x04	; 4
    44fe:	0e 94 17 13 	call	0x262e	; 0x262e <Dio_FlipChannel>
//		Dio_WriteChannel(PA_4,STD_HIGH);
}
    4502:	0f 90       	pop	r0
    4504:	cf 91       	pop	r28
    4506:	df 91       	pop	r29
    4508:	08 95       	ret

0000450a <main>:

int main() {
    450a:	0f 93       	push	r16
    450c:	1f 93       	push	r17
    450e:	df 93       	push	r29
    4510:	cf 93       	push	r28
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
    4516:	c6 5b       	subi	r28, 0xB6	; 182
    4518:	d0 40       	sbci	r29, 0x00	; 0
    451a:	0f b6       	in	r0, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	de bf       	out	0x3e, r29	; 62
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	cd bf       	out	0x3d, r28	; 61
	Port_Init(pin_cfg);
    4524:	8e ec       	ldi	r24, 0xCE	; 206
    4526:	91 e0       	ldi	r25, 0x01	; 1
    4528:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Port_Init>
	GI_voidEnable();
    452c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GI_voidEnable>
	UART_Init();
    4530:	0e 94 77 07 	call	0xeee	; 0xeee <UART_Init>
	SPI_voidInit();
    4534:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <SPI_voidInit>
    Dio_WriteChannel(PA_5, STD_HIGH);
    4538:	85 e0       	ldi	r24, 0x05	; 5
    453a:	61 e0       	ldi	r22, 0x01	; 1
    453c:	0e 94 9a 11 	call	0x2334	; 0x2334 <Dio_WriteChannel>
//    Dio_WriteChannel(PB_4, STD_HIGH);

    while (1) {


		if(Lock_state == 0)
    4540:	80 91 58 02 	lds	r24, 0x0258
    4544:	88 23       	and	r24, r24
    4546:	41 f4       	brne	.+16     	; 0x4558 <main+0x4e>
		{
			SPI_voidTransmitAsynchronous(APP_VEHICLE_ACCESS_INFO_REQUEST , Act);
    4548:	24 e4       	ldi	r18, 0x44	; 68
    454a:	32 e2       	ldi	r19, 0x22	; 34
    454c:	8d ed       	ldi	r24, 0xDD	; 221
    454e:	b9 01       	movw	r22, r18
    4550:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    4554:	0c 94 75 2a 	jmp	0x54ea	; 0x54ea <main+0xfe0>
//            UART_TransmitString("\r\n inside LOCK StATE \r\n");
		}
		else if (Dio_ReadChannel(PA_5) == 0)
    4558:	85 e0       	ldi	r24, 0x05	; 5
    455a:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_ReadChannel>
    455e:	88 23       	and	r24, r24
    4560:	11 f0       	breq	.+4      	; 0x4566 <main+0x5c>
    4562:	0c 94 6f 2a 	jmp	0x54de	; 0x54de <main+0xfd4>
		{

			SPI_voidTransmitAsynchronous(APP_MOTORS_CONTROL_REQUEST ,NOAct);
    4566:	25 e7       	ldi	r18, 0x75	; 117
    4568:	32 e2       	ldi	r19, 0x22	; 34
    456a:	8b eb       	ldi	r24, 0xBB	; 187
    456c:	b9 01       	movw	r22, r18
    456e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    4572:	fe 01       	movw	r30, r28
    4574:	ed 54       	subi	r30, 0x4D	; 77
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	a0 e2       	ldi	r26, 0x20	; 32
    457e:	b1 e4       	ldi	r27, 0x41	; 65
    4580:	80 83       	st	Z, r24
    4582:	91 83       	std	Z+1, r25	; 0x01
    4584:	a2 83       	std	Z+2, r26	; 0x02
    4586:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4588:	8e 01       	movw	r16, r28
    458a:	01 55       	subi	r16, 0x51	; 81
    458c:	1f 4f       	sbci	r17, 0xFF	; 255
    458e:	fe 01       	movw	r30, r28
    4590:	ed 54       	subi	r30, 0x4D	; 77
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	60 81       	ld	r22, Z
    4596:	71 81       	ldd	r23, Z+1	; 0x01
    4598:	82 81       	ldd	r24, Z+2	; 0x02
    459a:	93 81       	ldd	r25, Z+3	; 0x03
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	4a e7       	ldi	r20, 0x7A	; 122
    45a2:	55 e4       	ldi	r21, 0x45	; 69
    45a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	f8 01       	movw	r30, r16
    45ae:	80 83       	st	Z, r24
    45b0:	91 83       	std	Z+1, r25	; 0x01
    45b2:	a2 83       	std	Z+2, r26	; 0x02
    45b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45b6:	fe 01       	movw	r30, r28
    45b8:	e1 55       	subi	r30, 0x51	; 81
    45ba:	ff 4f       	sbci	r31, 0xFF	; 255
    45bc:	60 81       	ld	r22, Z
    45be:	71 81       	ldd	r23, Z+1	; 0x01
    45c0:	82 81       	ldd	r24, Z+2	; 0x02
    45c2:	93 81       	ldd	r25, Z+3	; 0x03
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	40 e8       	ldi	r20, 0x80	; 128
    45ca:	5f e3       	ldi	r21, 0x3F	; 63
    45cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    45d0:	88 23       	and	r24, r24
    45d2:	44 f4       	brge	.+16     	; 0x45e4 <main+0xda>
		__ticks = 1;
    45d4:	fe 01       	movw	r30, r28
    45d6:	e3 55       	subi	r30, 0x53	; 83
    45d8:	ff 4f       	sbci	r31, 0xFF	; 255
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	91 83       	std	Z+1, r25	; 0x01
    45e0:	80 83       	st	Z, r24
    45e2:	64 c0       	rjmp	.+200    	; 0x46ac <main+0x1a2>
	else if (__tmp > 65535)
    45e4:	fe 01       	movw	r30, r28
    45e6:	e1 55       	subi	r30, 0x51	; 81
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	60 81       	ld	r22, Z
    45ec:	71 81       	ldd	r23, Z+1	; 0x01
    45ee:	82 81       	ldd	r24, Z+2	; 0x02
    45f0:	93 81       	ldd	r25, Z+3	; 0x03
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	3f ef       	ldi	r19, 0xFF	; 255
    45f6:	4f e7       	ldi	r20, 0x7F	; 127
    45f8:	57 e4       	ldi	r21, 0x47	; 71
    45fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    45fe:	18 16       	cp	r1, r24
    4600:	0c f0       	brlt	.+2      	; 0x4604 <main+0xfa>
    4602:	43 c0       	rjmp	.+134    	; 0x468a <main+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4604:	fe 01       	movw	r30, r28
    4606:	ed 54       	subi	r30, 0x4D	; 77
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	60 81       	ld	r22, Z
    460c:	71 81       	ldd	r23, Z+1	; 0x01
    460e:	82 81       	ldd	r24, Z+2	; 0x02
    4610:	93 81       	ldd	r25, Z+3	; 0x03
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	40 e2       	ldi	r20, 0x20	; 32
    4618:	51 e4       	ldi	r21, 0x41	; 65
    461a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	8e 01       	movw	r16, r28
    4624:	03 55       	subi	r16, 0x53	; 83
    4626:	1f 4f       	sbci	r17, 0xFF	; 255
    4628:	bc 01       	movw	r22, r24
    462a:	cd 01       	movw	r24, r26
    462c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	f8 01       	movw	r30, r16
    4636:	91 83       	std	Z+1, r25	; 0x01
    4638:	80 83       	st	Z, r24
    463a:	1f c0       	rjmp	.+62     	; 0x467a <main+0x170>
    463c:	fe 01       	movw	r30, r28
    463e:	e5 55       	subi	r30, 0x55	; 85
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	80 e9       	ldi	r24, 0x90	; 144
    4644:	91 e0       	ldi	r25, 0x01	; 1
    4646:	91 83       	std	Z+1, r25	; 0x01
    4648:	80 83       	st	Z, r24
    464a:	fe 01       	movw	r30, r28
    464c:	e5 55       	subi	r30, 0x55	; 85
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	80 81       	ld	r24, Z
    4652:	91 81       	ldd	r25, Z+1	; 0x01
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	f1 f7       	brne	.-4      	; 0x4654 <main+0x14a>
    4658:	fe 01       	movw	r30, r28
    465a:	e5 55       	subi	r30, 0x55	; 85
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	91 83       	std	Z+1, r25	; 0x01
    4660:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4662:	de 01       	movw	r26, r28
    4664:	a3 55       	subi	r26, 0x53	; 83
    4666:	bf 4f       	sbci	r27, 0xFF	; 255
    4668:	fe 01       	movw	r30, r28
    466a:	e3 55       	subi	r30, 0x53	; 83
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	80 81       	ld	r24, Z
    4670:	91 81       	ldd	r25, Z+1	; 0x01
    4672:	01 97       	sbiw	r24, 0x01	; 1
    4674:	11 96       	adiw	r26, 0x01	; 1
    4676:	9c 93       	st	X, r25
    4678:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    467a:	fe 01       	movw	r30, r28
    467c:	e3 55       	subi	r30, 0x53	; 83
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	80 81       	ld	r24, Z
    4682:	91 81       	ldd	r25, Z+1	; 0x01
    4684:	00 97       	sbiw	r24, 0x00	; 0
    4686:	d1 f6       	brne	.-76     	; 0x463c <main+0x132>
    4688:	27 c0       	rjmp	.+78     	; 0x46d8 <main+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    468a:	8e 01       	movw	r16, r28
    468c:	03 55       	subi	r16, 0x53	; 83
    468e:	1f 4f       	sbci	r17, 0xFF	; 255
    4690:	fe 01       	movw	r30, r28
    4692:	e1 55       	subi	r30, 0x51	; 81
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	60 81       	ld	r22, Z
    4698:	71 81       	ldd	r23, Z+1	; 0x01
    469a:	82 81       	ldd	r24, Z+2	; 0x02
    469c:	93 81       	ldd	r25, Z+3	; 0x03
    469e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	f8 01       	movw	r30, r16
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	80 83       	st	Z, r24
    46ac:	de 01       	movw	r26, r28
    46ae:	a7 55       	subi	r26, 0x57	; 87
    46b0:	bf 4f       	sbci	r27, 0xFF	; 255
    46b2:	fe 01       	movw	r30, r28
    46b4:	e3 55       	subi	r30, 0x53	; 83
    46b6:	ff 4f       	sbci	r31, 0xFF	; 255
    46b8:	80 81       	ld	r24, Z
    46ba:	91 81       	ldd	r25, Z+1	; 0x01
    46bc:	8d 93       	st	X+, r24
    46be:	9c 93       	st	X, r25
    46c0:	fe 01       	movw	r30, r28
    46c2:	e7 55       	subi	r30, 0x57	; 87
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	80 81       	ld	r24, Z
    46c8:	91 81       	ldd	r25, Z+1	; 0x01
    46ca:	01 97       	sbiw	r24, 0x01	; 1
    46cc:	f1 f7       	brne	.-4      	; 0x46ca <main+0x1c0>
    46ce:	fe 01       	movw	r30, r28
    46d0:	e7 55       	subi	r30, 0x57	; 87
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	91 83       	std	Z+1, r25	; 0x01
    46d6:	80 83       	st	Z, r24
	//	    UART_TransmitString("\r\n inside APP_MOTORS_CONTROL_REQUEST \r\n");
		    _delay_ms(10);
		    SPI_voidTransmitAsynchronous('W', NOAct);
    46d8:	25 e7       	ldi	r18, 0x75	; 117
    46da:	32 e2       	ldi	r19, 0x22	; 34
    46dc:	87 e5       	ldi	r24, 0x57	; 87
    46de:	b9 01       	movw	r22, r18
    46e0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    46e4:	fe 01       	movw	r30, r28
    46e6:	eb 55       	subi	r30, 0x5B	; 91
    46e8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	aa e7       	ldi	r26, 0x7A	; 122
    46f0:	b4 e4       	ldi	r27, 0x44	; 68
    46f2:	80 83       	st	Z, r24
    46f4:	91 83       	std	Z+1, r25	; 0x01
    46f6:	a2 83       	std	Z+2, r26	; 0x02
    46f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fa:	8e 01       	movw	r16, r28
    46fc:	0f 55       	subi	r16, 0x5F	; 95
    46fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4700:	fe 01       	movw	r30, r28
    4702:	eb 55       	subi	r30, 0x5B	; 91
    4704:	ff 4f       	sbci	r31, 0xFF	; 255
    4706:	60 81       	ld	r22, Z
    4708:	71 81       	ldd	r23, Z+1	; 0x01
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	93 81       	ldd	r25, Z+3	; 0x03
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	4a e7       	ldi	r20, 0x7A	; 122
    4714:	55 e4       	ldi	r21, 0x45	; 69
    4716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	f8 01       	movw	r30, r16
    4720:	80 83       	st	Z, r24
    4722:	91 83       	std	Z+1, r25	; 0x01
    4724:	a2 83       	std	Z+2, r26	; 0x02
    4726:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4728:	fe 01       	movw	r30, r28
    472a:	ef 55       	subi	r30, 0x5F	; 95
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	60 81       	ld	r22, Z
    4730:	71 81       	ldd	r23, Z+1	; 0x01
    4732:	82 81       	ldd	r24, Z+2	; 0x02
    4734:	93 81       	ldd	r25, Z+3	; 0x03
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	40 e8       	ldi	r20, 0x80	; 128
    473c:	5f e3       	ldi	r21, 0x3F	; 63
    473e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4742:	88 23       	and	r24, r24
    4744:	44 f4       	brge	.+16     	; 0x4756 <main+0x24c>
		__ticks = 1;
    4746:	fe 01       	movw	r30, r28
    4748:	e1 56       	subi	r30, 0x61	; 97
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	81 e0       	ldi	r24, 0x01	; 1
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	91 83       	std	Z+1, r25	; 0x01
    4752:	80 83       	st	Z, r24
    4754:	64 c0       	rjmp	.+200    	; 0x481e <main+0x314>
	else if (__tmp > 65535)
    4756:	fe 01       	movw	r30, r28
    4758:	ef 55       	subi	r30, 0x5F	; 95
    475a:	ff 4f       	sbci	r31, 0xFF	; 255
    475c:	60 81       	ld	r22, Z
    475e:	71 81       	ldd	r23, Z+1	; 0x01
    4760:	82 81       	ldd	r24, Z+2	; 0x02
    4762:	93 81       	ldd	r25, Z+3	; 0x03
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	3f ef       	ldi	r19, 0xFF	; 255
    4768:	4f e7       	ldi	r20, 0x7F	; 127
    476a:	57 e4       	ldi	r21, 0x47	; 71
    476c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4770:	18 16       	cp	r1, r24
    4772:	0c f0       	brlt	.+2      	; 0x4776 <main+0x26c>
    4774:	43 c0       	rjmp	.+134    	; 0x47fc <main+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4776:	fe 01       	movw	r30, r28
    4778:	eb 55       	subi	r30, 0x5B	; 91
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	60 81       	ld	r22, Z
    477e:	71 81       	ldd	r23, Z+1	; 0x01
    4780:	82 81       	ldd	r24, Z+2	; 0x02
    4782:	93 81       	ldd	r25, Z+3	; 0x03
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e2       	ldi	r20, 0x20	; 32
    478a:	51 e4       	ldi	r21, 0x41	; 65
    478c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4790:	dc 01       	movw	r26, r24
    4792:	cb 01       	movw	r24, r22
    4794:	8e 01       	movw	r16, r28
    4796:	01 56       	subi	r16, 0x61	; 97
    4798:	1f 4f       	sbci	r17, 0xFF	; 255
    479a:	bc 01       	movw	r22, r24
    479c:	cd 01       	movw	r24, r26
    479e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	f8 01       	movw	r30, r16
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	80 83       	st	Z, r24
    47ac:	1f c0       	rjmp	.+62     	; 0x47ec <main+0x2e2>
    47ae:	fe 01       	movw	r30, r28
    47b0:	e3 56       	subi	r30, 0x63	; 99
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	80 e9       	ldi	r24, 0x90	; 144
    47b6:	91 e0       	ldi	r25, 0x01	; 1
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	80 83       	st	Z, r24
    47bc:	fe 01       	movw	r30, r28
    47be:	e3 56       	subi	r30, 0x63	; 99
    47c0:	ff 4f       	sbci	r31, 0xFF	; 255
    47c2:	80 81       	ld	r24, Z
    47c4:	91 81       	ldd	r25, Z+1	; 0x01
    47c6:	01 97       	sbiw	r24, 0x01	; 1
    47c8:	f1 f7       	brne	.-4      	; 0x47c6 <main+0x2bc>
    47ca:	fe 01       	movw	r30, r28
    47cc:	e3 56       	subi	r30, 0x63	; 99
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47d4:	de 01       	movw	r26, r28
    47d6:	a1 56       	subi	r26, 0x61	; 97
    47d8:	bf 4f       	sbci	r27, 0xFF	; 255
    47da:	fe 01       	movw	r30, r28
    47dc:	e1 56       	subi	r30, 0x61	; 97
    47de:	ff 4f       	sbci	r31, 0xFF	; 255
    47e0:	80 81       	ld	r24, Z
    47e2:	91 81       	ldd	r25, Z+1	; 0x01
    47e4:	01 97       	sbiw	r24, 0x01	; 1
    47e6:	11 96       	adiw	r26, 0x01	; 1
    47e8:	9c 93       	st	X, r25
    47ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47ec:	fe 01       	movw	r30, r28
    47ee:	e1 56       	subi	r30, 0x61	; 97
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	80 81       	ld	r24, Z
    47f4:	91 81       	ldd	r25, Z+1	; 0x01
    47f6:	00 97       	sbiw	r24, 0x00	; 0
    47f8:	d1 f6       	brne	.-76     	; 0x47ae <main+0x2a4>
    47fa:	27 c0       	rjmp	.+78     	; 0x484a <main+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47fc:	8e 01       	movw	r16, r28
    47fe:	01 56       	subi	r16, 0x61	; 97
    4800:	1f 4f       	sbci	r17, 0xFF	; 255
    4802:	fe 01       	movw	r30, r28
    4804:	ef 55       	subi	r30, 0x5F	; 95
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	60 81       	ld	r22, Z
    480a:	71 81       	ldd	r23, Z+1	; 0x01
    480c:	82 81       	ldd	r24, Z+2	; 0x02
    480e:	93 81       	ldd	r25, Z+3	; 0x03
    4810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	f8 01       	movw	r30, r16
    481a:	91 83       	std	Z+1, r25	; 0x01
    481c:	80 83       	st	Z, r24
    481e:	de 01       	movw	r26, r28
    4820:	a5 56       	subi	r26, 0x65	; 101
    4822:	bf 4f       	sbci	r27, 0xFF	; 255
    4824:	fe 01       	movw	r30, r28
    4826:	e1 56       	subi	r30, 0x61	; 97
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	80 81       	ld	r24, Z
    482c:	91 81       	ldd	r25, Z+1	; 0x01
    482e:	8d 93       	st	X+, r24
    4830:	9c 93       	st	X, r25
    4832:	fe 01       	movw	r30, r28
    4834:	e5 56       	subi	r30, 0x65	; 101
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	80 81       	ld	r24, Z
    483a:	91 81       	ldd	r25, Z+1	; 0x01
    483c:	01 97       	sbiw	r24, 0x01	; 1
    483e:	f1 f7       	brne	.-4      	; 0x483c <main+0x332>
    4840:	fe 01       	movw	r30, r28
    4842:	e5 56       	subi	r30, 0x65	; 101
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	91 83       	std	Z+1, r25	; 0x01
    4848:	80 83       	st	Z, r24
		    _delay_ms(1000);

			SPI_voidTransmitAsynchronous(APP_MOTORS_CONTROL_REQUEST ,NOAct);
    484a:	25 e7       	ldi	r18, 0x75	; 117
    484c:	32 e2       	ldi	r19, 0x22	; 34
    484e:	8b eb       	ldi	r24, 0xBB	; 187
    4850:	b9 01       	movw	r22, r18
    4852:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    4856:	fe 01       	movw	r30, r28
    4858:	e9 56       	subi	r30, 0x69	; 105
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	a0 e2       	ldi	r26, 0x20	; 32
    4862:	b1 e4       	ldi	r27, 0x41	; 65
    4864:	80 83       	st	Z, r24
    4866:	91 83       	std	Z+1, r25	; 0x01
    4868:	a2 83       	std	Z+2, r26	; 0x02
    486a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    486c:	8e 01       	movw	r16, r28
    486e:	0d 56       	subi	r16, 0x6D	; 109
    4870:	1f 4f       	sbci	r17, 0xFF	; 255
    4872:	fe 01       	movw	r30, r28
    4874:	e9 56       	subi	r30, 0x69	; 105
    4876:	ff 4f       	sbci	r31, 0xFF	; 255
    4878:	60 81       	ld	r22, Z
    487a:	71 81       	ldd	r23, Z+1	; 0x01
    487c:	82 81       	ldd	r24, Z+2	; 0x02
    487e:	93 81       	ldd	r25, Z+3	; 0x03
    4880:	20 e0       	ldi	r18, 0x00	; 0
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	4a e7       	ldi	r20, 0x7A	; 122
    4886:	55 e4       	ldi	r21, 0x45	; 69
    4888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22
    4890:	f8 01       	movw	r30, r16
    4892:	80 83       	st	Z, r24
    4894:	91 83       	std	Z+1, r25	; 0x01
    4896:	a2 83       	std	Z+2, r26	; 0x02
    4898:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    489a:	fe 01       	movw	r30, r28
    489c:	ed 56       	subi	r30, 0x6D	; 109
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	60 81       	ld	r22, Z
    48a2:	71 81       	ldd	r23, Z+1	; 0x01
    48a4:	82 81       	ldd	r24, Z+2	; 0x02
    48a6:	93 81       	ldd	r25, Z+3	; 0x03
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	40 e8       	ldi	r20, 0x80	; 128
    48ae:	5f e3       	ldi	r21, 0x3F	; 63
    48b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48b4:	88 23       	and	r24, r24
    48b6:	44 f4       	brge	.+16     	; 0x48c8 <main+0x3be>
		__ticks = 1;
    48b8:	fe 01       	movw	r30, r28
    48ba:	ef 56       	subi	r30, 0x6F	; 111
    48bc:	ff 4f       	sbci	r31, 0xFF	; 255
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	91 83       	std	Z+1, r25	; 0x01
    48c4:	80 83       	st	Z, r24
    48c6:	64 c0       	rjmp	.+200    	; 0x4990 <main+0x486>
	else if (__tmp > 65535)
    48c8:	fe 01       	movw	r30, r28
    48ca:	ed 56       	subi	r30, 0x6D	; 109
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	60 81       	ld	r22, Z
    48d0:	71 81       	ldd	r23, Z+1	; 0x01
    48d2:	82 81       	ldd	r24, Z+2	; 0x02
    48d4:	93 81       	ldd	r25, Z+3	; 0x03
    48d6:	20 e0       	ldi	r18, 0x00	; 0
    48d8:	3f ef       	ldi	r19, 0xFF	; 255
    48da:	4f e7       	ldi	r20, 0x7F	; 127
    48dc:	57 e4       	ldi	r21, 0x47	; 71
    48de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48e2:	18 16       	cp	r1, r24
    48e4:	0c f0       	brlt	.+2      	; 0x48e8 <main+0x3de>
    48e6:	43 c0       	rjmp	.+134    	; 0x496e <main+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48e8:	fe 01       	movw	r30, r28
    48ea:	e9 56       	subi	r30, 0x69	; 105
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	60 81       	ld	r22, Z
    48f0:	71 81       	ldd	r23, Z+1	; 0x01
    48f2:	82 81       	ldd	r24, Z+2	; 0x02
    48f4:	93 81       	ldd	r25, Z+3	; 0x03
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	40 e2       	ldi	r20, 0x20	; 32
    48fc:	51 e4       	ldi	r21, 0x41	; 65
    48fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4902:	dc 01       	movw	r26, r24
    4904:	cb 01       	movw	r24, r22
    4906:	8e 01       	movw	r16, r28
    4908:	0f 56       	subi	r16, 0x6F	; 111
    490a:	1f 4f       	sbci	r17, 0xFF	; 255
    490c:	bc 01       	movw	r22, r24
    490e:	cd 01       	movw	r24, r26
    4910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	f8 01       	movw	r30, r16
    491a:	91 83       	std	Z+1, r25	; 0x01
    491c:	80 83       	st	Z, r24
    491e:	1f c0       	rjmp	.+62     	; 0x495e <main+0x454>
    4920:	fe 01       	movw	r30, r28
    4922:	e1 57       	subi	r30, 0x71	; 113
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	80 e9       	ldi	r24, 0x90	; 144
    4928:	91 e0       	ldi	r25, 0x01	; 1
    492a:	91 83       	std	Z+1, r25	; 0x01
    492c:	80 83       	st	Z, r24
    492e:	fe 01       	movw	r30, r28
    4930:	e1 57       	subi	r30, 0x71	; 113
    4932:	ff 4f       	sbci	r31, 0xFF	; 255
    4934:	80 81       	ld	r24, Z
    4936:	91 81       	ldd	r25, Z+1	; 0x01
    4938:	01 97       	sbiw	r24, 0x01	; 1
    493a:	f1 f7       	brne	.-4      	; 0x4938 <main+0x42e>
    493c:	fe 01       	movw	r30, r28
    493e:	e1 57       	subi	r30, 0x71	; 113
    4940:	ff 4f       	sbci	r31, 0xFF	; 255
    4942:	91 83       	std	Z+1, r25	; 0x01
    4944:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4946:	de 01       	movw	r26, r28
    4948:	af 56       	subi	r26, 0x6F	; 111
    494a:	bf 4f       	sbci	r27, 0xFF	; 255
    494c:	fe 01       	movw	r30, r28
    494e:	ef 56       	subi	r30, 0x6F	; 111
    4950:	ff 4f       	sbci	r31, 0xFF	; 255
    4952:	80 81       	ld	r24, Z
    4954:	91 81       	ldd	r25, Z+1	; 0x01
    4956:	01 97       	sbiw	r24, 0x01	; 1
    4958:	11 96       	adiw	r26, 0x01	; 1
    495a:	9c 93       	st	X, r25
    495c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    495e:	fe 01       	movw	r30, r28
    4960:	ef 56       	subi	r30, 0x6F	; 111
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	80 81       	ld	r24, Z
    4966:	91 81       	ldd	r25, Z+1	; 0x01
    4968:	00 97       	sbiw	r24, 0x00	; 0
    496a:	d1 f6       	brne	.-76     	; 0x4920 <main+0x416>
    496c:	27 c0       	rjmp	.+78     	; 0x49bc <main+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    496e:	8e 01       	movw	r16, r28
    4970:	0f 56       	subi	r16, 0x6F	; 111
    4972:	1f 4f       	sbci	r17, 0xFF	; 255
    4974:	fe 01       	movw	r30, r28
    4976:	ed 56       	subi	r30, 0x6D	; 109
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	60 81       	ld	r22, Z
    497c:	71 81       	ldd	r23, Z+1	; 0x01
    497e:	82 81       	ldd	r24, Z+2	; 0x02
    4980:	93 81       	ldd	r25, Z+3	; 0x03
    4982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4986:	dc 01       	movw	r26, r24
    4988:	cb 01       	movw	r24, r22
    498a:	f8 01       	movw	r30, r16
    498c:	91 83       	std	Z+1, r25	; 0x01
    498e:	80 83       	st	Z, r24
    4990:	de 01       	movw	r26, r28
    4992:	a3 57       	subi	r26, 0x73	; 115
    4994:	bf 4f       	sbci	r27, 0xFF	; 255
    4996:	fe 01       	movw	r30, r28
    4998:	ef 56       	subi	r30, 0x6F	; 111
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	80 81       	ld	r24, Z
    499e:	91 81       	ldd	r25, Z+1	; 0x01
    49a0:	8d 93       	st	X+, r24
    49a2:	9c 93       	st	X, r25
    49a4:	fe 01       	movw	r30, r28
    49a6:	e3 57       	subi	r30, 0x73	; 115
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	80 81       	ld	r24, Z
    49ac:	91 81       	ldd	r25, Z+1	; 0x01
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	f1 f7       	brne	.-4      	; 0x49ae <main+0x4a4>
    49b2:	fe 01       	movw	r30, r28
    49b4:	e3 57       	subi	r30, 0x73	; 115
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	91 83       	std	Z+1, r25	; 0x01
    49ba:	80 83       	st	Z, r24
	//	    UART_TransmitString("\r\n inside APP_MOTORS_CONTROL_REQUEST \r\n");
		    _delay_ms(10);
		    SPI_voidTransmitAsynchronous('S', NOAct);
    49bc:	25 e7       	ldi	r18, 0x75	; 117
    49be:	32 e2       	ldi	r19, 0x22	; 34
    49c0:	83 e5       	ldi	r24, 0x53	; 83
    49c2:	b9 01       	movw	r22, r18
    49c4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    49c8:	fe 01       	movw	r30, r28
    49ca:	e7 57       	subi	r30, 0x77	; 119
    49cc:	ff 4f       	sbci	r31, 0xFF	; 255
    49ce:	80 e0       	ldi	r24, 0x00	; 0
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	aa e7       	ldi	r26, 0x7A	; 122
    49d4:	b4 e4       	ldi	r27, 0x44	; 68
    49d6:	80 83       	st	Z, r24
    49d8:	91 83       	std	Z+1, r25	; 0x01
    49da:	a2 83       	std	Z+2, r26	; 0x02
    49dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49de:	8e 01       	movw	r16, r28
    49e0:	0b 57       	subi	r16, 0x7B	; 123
    49e2:	1f 4f       	sbci	r17, 0xFF	; 255
    49e4:	fe 01       	movw	r30, r28
    49e6:	e7 57       	subi	r30, 0x77	; 119
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	60 81       	ld	r22, Z
    49ec:	71 81       	ldd	r23, Z+1	; 0x01
    49ee:	82 81       	ldd	r24, Z+2	; 0x02
    49f0:	93 81       	ldd	r25, Z+3	; 0x03
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	4a e7       	ldi	r20, 0x7A	; 122
    49f8:	55 e4       	ldi	r21, 0x45	; 69
    49fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	f8 01       	movw	r30, r16
    4a04:	80 83       	st	Z, r24
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	a2 83       	std	Z+2, r26	; 0x02
    4a0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a0c:	fe 01       	movw	r30, r28
    4a0e:	eb 57       	subi	r30, 0x7B	; 123
    4a10:	ff 4f       	sbci	r31, 0xFF	; 255
    4a12:	60 81       	ld	r22, Z
    4a14:	71 81       	ldd	r23, Z+1	; 0x01
    4a16:	82 81       	ldd	r24, Z+2	; 0x02
    4a18:	93 81       	ldd	r25, Z+3	; 0x03
    4a1a:	20 e0       	ldi	r18, 0x00	; 0
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	40 e8       	ldi	r20, 0x80	; 128
    4a20:	5f e3       	ldi	r21, 0x3F	; 63
    4a22:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4a26:	88 23       	and	r24, r24
    4a28:	44 f4       	brge	.+16     	; 0x4a3a <main+0x530>
		__ticks = 1;
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	ed 57       	subi	r30, 0x7D	; 125
    4a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	91 83       	std	Z+1, r25	; 0x01
    4a36:	80 83       	st	Z, r24
    4a38:	64 c0       	rjmp	.+200    	; 0x4b02 <main+0x5f8>
	else if (__tmp > 65535)
    4a3a:	fe 01       	movw	r30, r28
    4a3c:	eb 57       	subi	r30, 0x7B	; 123
    4a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a40:	60 81       	ld	r22, Z
    4a42:	71 81       	ldd	r23, Z+1	; 0x01
    4a44:	82 81       	ldd	r24, Z+2	; 0x02
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	3f ef       	ldi	r19, 0xFF	; 255
    4a4c:	4f e7       	ldi	r20, 0x7F	; 127
    4a4e:	57 e4       	ldi	r21, 0x47	; 71
    4a50:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4a54:	18 16       	cp	r1, r24
    4a56:	0c f0       	brlt	.+2      	; 0x4a5a <main+0x550>
    4a58:	43 c0       	rjmp	.+134    	; 0x4ae0 <main+0x5d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a5a:	fe 01       	movw	r30, r28
    4a5c:	e7 57       	subi	r30, 0x77	; 119
    4a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a60:	60 81       	ld	r22, Z
    4a62:	71 81       	ldd	r23, Z+1	; 0x01
    4a64:	82 81       	ldd	r24, Z+2	; 0x02
    4a66:	93 81       	ldd	r25, Z+3	; 0x03
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	40 e2       	ldi	r20, 0x20	; 32
    4a6e:	51 e4       	ldi	r21, 0x41	; 65
    4a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a74:	dc 01       	movw	r26, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	8e 01       	movw	r16, r28
    4a7a:	0d 57       	subi	r16, 0x7D	; 125
    4a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a7e:	bc 01       	movw	r22, r24
    4a80:	cd 01       	movw	r24, r26
    4a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	f8 01       	movw	r30, r16
    4a8c:	91 83       	std	Z+1, r25	; 0x01
    4a8e:	80 83       	st	Z, r24
    4a90:	1f c0       	rjmp	.+62     	; 0x4ad0 <main+0x5c6>
    4a92:	fe 01       	movw	r30, r28
    4a94:	ef 57       	subi	r30, 0x7F	; 127
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 e9       	ldi	r24, 0x90	; 144
    4a9a:	91 e0       	ldi	r25, 0x01	; 1
    4a9c:	91 83       	std	Z+1, r25	; 0x01
    4a9e:	80 83       	st	Z, r24
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	ef 57       	subi	r30, 0x7F	; 127
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	80 81       	ld	r24, Z
    4aa8:	91 81       	ldd	r25, Z+1	; 0x01
    4aaa:	01 97       	sbiw	r24, 0x01	; 1
    4aac:	f1 f7       	brne	.-4      	; 0x4aaa <main+0x5a0>
    4aae:	fe 01       	movw	r30, r28
    4ab0:	ef 57       	subi	r30, 0x7F	; 127
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	91 83       	std	Z+1, r25	; 0x01
    4ab6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab8:	de 01       	movw	r26, r28
    4aba:	ad 57       	subi	r26, 0x7D	; 125
    4abc:	bf 4f       	sbci	r27, 0xFF	; 255
    4abe:	fe 01       	movw	r30, r28
    4ac0:	ed 57       	subi	r30, 0x7D	; 125
    4ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac4:	80 81       	ld	r24, Z
    4ac6:	91 81       	ldd	r25, Z+1	; 0x01
    4ac8:	01 97       	sbiw	r24, 0x01	; 1
    4aca:	11 96       	adiw	r26, 0x01	; 1
    4acc:	9c 93       	st	X, r25
    4ace:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	ed 57       	subi	r30, 0x7D	; 125
    4ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad6:	80 81       	ld	r24, Z
    4ad8:	91 81       	ldd	r25, Z+1	; 0x01
    4ada:	00 97       	sbiw	r24, 0x00	; 0
    4adc:	d1 f6       	brne	.-76     	; 0x4a92 <main+0x588>
    4ade:	27 c0       	rjmp	.+78     	; 0x4b2e <main+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae0:	8e 01       	movw	r16, r28
    4ae2:	0d 57       	subi	r16, 0x7D	; 125
    4ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae6:	fe 01       	movw	r30, r28
    4ae8:	eb 57       	subi	r30, 0x7B	; 123
    4aea:	ff 4f       	sbci	r31, 0xFF	; 255
    4aec:	60 81       	ld	r22, Z
    4aee:	71 81       	ldd	r23, Z+1	; 0x01
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af8:	dc 01       	movw	r26, r24
    4afa:	cb 01       	movw	r24, r22
    4afc:	f8 01       	movw	r30, r16
    4afe:	91 83       	std	Z+1, r25	; 0x01
    4b00:	80 83       	st	Z, r24
    4b02:	de 01       	movw	r26, r28
    4b04:	a1 58       	subi	r26, 0x81	; 129
    4b06:	bf 4f       	sbci	r27, 0xFF	; 255
    4b08:	fe 01       	movw	r30, r28
    4b0a:	ed 57       	subi	r30, 0x7D	; 125
    4b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0e:	80 81       	ld	r24, Z
    4b10:	91 81       	ldd	r25, Z+1	; 0x01
    4b12:	8d 93       	st	X+, r24
    4b14:	9c 93       	st	X, r25
    4b16:	fe 01       	movw	r30, r28
    4b18:	e1 58       	subi	r30, 0x81	; 129
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	80 81       	ld	r24, Z
    4b1e:	91 81       	ldd	r25, Z+1	; 0x01
    4b20:	01 97       	sbiw	r24, 0x01	; 1
    4b22:	f1 f7       	brne	.-4      	; 0x4b20 <main+0x616>
    4b24:	fe 01       	movw	r30, r28
    4b26:	e1 58       	subi	r30, 0x81	; 129
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	91 83       	std	Z+1, r25	; 0x01
    4b2c:	80 83       	st	Z, r24
		    _delay_ms(1000);

			SPI_voidTransmitAsynchronous(APP_MOTORS_CONTROL_REQUEST ,NOAct);
    4b2e:	25 e7       	ldi	r18, 0x75	; 117
    4b30:	32 e2       	ldi	r19, 0x22	; 34
    4b32:	8b eb       	ldi	r24, 0xBB	; 187
    4b34:	b9 01       	movw	r22, r18
    4b36:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    4b3a:	fe 01       	movw	r30, r28
    4b3c:	e5 58       	subi	r30, 0x85	; 133
    4b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	a0 e2       	ldi	r26, 0x20	; 32
    4b46:	b1 e4       	ldi	r27, 0x41	; 65
    4b48:	80 83       	st	Z, r24
    4b4a:	91 83       	std	Z+1, r25	; 0x01
    4b4c:	a2 83       	std	Z+2, r26	; 0x02
    4b4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b50:	8e 01       	movw	r16, r28
    4b52:	09 58       	subi	r16, 0x89	; 137
    4b54:	1f 4f       	sbci	r17, 0xFF	; 255
    4b56:	fe 01       	movw	r30, r28
    4b58:	e5 58       	subi	r30, 0x85	; 133
    4b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5c:	60 81       	ld	r22, Z
    4b5e:	71 81       	ldd	r23, Z+1	; 0x01
    4b60:	82 81       	ldd	r24, Z+2	; 0x02
    4b62:	93 81       	ldd	r25, Z+3	; 0x03
    4b64:	20 e0       	ldi	r18, 0x00	; 0
    4b66:	30 e0       	ldi	r19, 0x00	; 0
    4b68:	4a e7       	ldi	r20, 0x7A	; 122
    4b6a:	55 e4       	ldi	r21, 0x45	; 69
    4b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	f8 01       	movw	r30, r16
    4b76:	80 83       	st	Z, r24
    4b78:	91 83       	std	Z+1, r25	; 0x01
    4b7a:	a2 83       	std	Z+2, r26	; 0x02
    4b7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b7e:	fe 01       	movw	r30, r28
    4b80:	e9 58       	subi	r30, 0x89	; 137
    4b82:	ff 4f       	sbci	r31, 0xFF	; 255
    4b84:	60 81       	ld	r22, Z
    4b86:	71 81       	ldd	r23, Z+1	; 0x01
    4b88:	82 81       	ldd	r24, Z+2	; 0x02
    4b8a:	93 81       	ldd	r25, Z+3	; 0x03
    4b8c:	20 e0       	ldi	r18, 0x00	; 0
    4b8e:	30 e0       	ldi	r19, 0x00	; 0
    4b90:	40 e8       	ldi	r20, 0x80	; 128
    4b92:	5f e3       	ldi	r21, 0x3F	; 63
    4b94:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b98:	88 23       	and	r24, r24
    4b9a:	44 f4       	brge	.+16     	; 0x4bac <main+0x6a2>
		__ticks = 1;
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	eb 58       	subi	r30, 0x8B	; 139
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	91 83       	std	Z+1, r25	; 0x01
    4ba8:	80 83       	st	Z, r24
    4baa:	64 c0       	rjmp	.+200    	; 0x4c74 <main+0x76a>
	else if (__tmp > 65535)
    4bac:	fe 01       	movw	r30, r28
    4bae:	e9 58       	subi	r30, 0x89	; 137
    4bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb2:	60 81       	ld	r22, Z
    4bb4:	71 81       	ldd	r23, Z+1	; 0x01
    4bb6:	82 81       	ldd	r24, Z+2	; 0x02
    4bb8:	93 81       	ldd	r25, Z+3	; 0x03
    4bba:	20 e0       	ldi	r18, 0x00	; 0
    4bbc:	3f ef       	ldi	r19, 0xFF	; 255
    4bbe:	4f e7       	ldi	r20, 0x7F	; 127
    4bc0:	57 e4       	ldi	r21, 0x47	; 71
    4bc2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4bc6:	18 16       	cp	r1, r24
    4bc8:	0c f0       	brlt	.+2      	; 0x4bcc <main+0x6c2>
    4bca:	43 c0       	rjmp	.+134    	; 0x4c52 <main+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bcc:	fe 01       	movw	r30, r28
    4bce:	e5 58       	subi	r30, 0x85	; 133
    4bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd2:	60 81       	ld	r22, Z
    4bd4:	71 81       	ldd	r23, Z+1	; 0x01
    4bd6:	82 81       	ldd	r24, Z+2	; 0x02
    4bd8:	93 81       	ldd	r25, Z+3	; 0x03
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	40 e2       	ldi	r20, 0x20	; 32
    4be0:	51 e4       	ldi	r21, 0x41	; 65
    4be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be6:	dc 01       	movw	r26, r24
    4be8:	cb 01       	movw	r24, r22
    4bea:	8e 01       	movw	r16, r28
    4bec:	0b 58       	subi	r16, 0x8B	; 139
    4bee:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf0:	bc 01       	movw	r22, r24
    4bf2:	cd 01       	movw	r24, r26
    4bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	cb 01       	movw	r24, r22
    4bfc:	f8 01       	movw	r30, r16
    4bfe:	91 83       	std	Z+1, r25	; 0x01
    4c00:	80 83       	st	Z, r24
    4c02:	1f c0       	rjmp	.+62     	; 0x4c42 <main+0x738>
    4c04:	fe 01       	movw	r30, r28
    4c06:	ed 58       	subi	r30, 0x8D	; 141
    4c08:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0a:	80 e9       	ldi	r24, 0x90	; 144
    4c0c:	91 e0       	ldi	r25, 0x01	; 1
    4c0e:	91 83       	std	Z+1, r25	; 0x01
    4c10:	80 83       	st	Z, r24
    4c12:	fe 01       	movw	r30, r28
    4c14:	ed 58       	subi	r30, 0x8D	; 141
    4c16:	ff 4f       	sbci	r31, 0xFF	; 255
    4c18:	80 81       	ld	r24, Z
    4c1a:	91 81       	ldd	r25, Z+1	; 0x01
    4c1c:	01 97       	sbiw	r24, 0x01	; 1
    4c1e:	f1 f7       	brne	.-4      	; 0x4c1c <main+0x712>
    4c20:	fe 01       	movw	r30, r28
    4c22:	ed 58       	subi	r30, 0x8D	; 141
    4c24:	ff 4f       	sbci	r31, 0xFF	; 255
    4c26:	91 83       	std	Z+1, r25	; 0x01
    4c28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c2a:	de 01       	movw	r26, r28
    4c2c:	ab 58       	subi	r26, 0x8B	; 139
    4c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4c30:	fe 01       	movw	r30, r28
    4c32:	eb 58       	subi	r30, 0x8B	; 139
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	80 81       	ld	r24, Z
    4c38:	91 81       	ldd	r25, Z+1	; 0x01
    4c3a:	01 97       	sbiw	r24, 0x01	; 1
    4c3c:	11 96       	adiw	r26, 0x01	; 1
    4c3e:	9c 93       	st	X, r25
    4c40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c42:	fe 01       	movw	r30, r28
    4c44:	eb 58       	subi	r30, 0x8B	; 139
    4c46:	ff 4f       	sbci	r31, 0xFF	; 255
    4c48:	80 81       	ld	r24, Z
    4c4a:	91 81       	ldd	r25, Z+1	; 0x01
    4c4c:	00 97       	sbiw	r24, 0x00	; 0
    4c4e:	d1 f6       	brne	.-76     	; 0x4c04 <main+0x6fa>
    4c50:	27 c0       	rjmp	.+78     	; 0x4ca0 <main+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c52:	8e 01       	movw	r16, r28
    4c54:	0b 58       	subi	r16, 0x8B	; 139
    4c56:	1f 4f       	sbci	r17, 0xFF	; 255
    4c58:	fe 01       	movw	r30, r28
    4c5a:	e9 58       	subi	r30, 0x89	; 137
    4c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5e:	60 81       	ld	r22, Z
    4c60:	71 81       	ldd	r23, Z+1	; 0x01
    4c62:	82 81       	ldd	r24, Z+2	; 0x02
    4c64:	93 81       	ldd	r25, Z+3	; 0x03
    4c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	f8 01       	movw	r30, r16
    4c70:	91 83       	std	Z+1, r25	; 0x01
    4c72:	80 83       	st	Z, r24
    4c74:	de 01       	movw	r26, r28
    4c76:	af 58       	subi	r26, 0x8F	; 143
    4c78:	bf 4f       	sbci	r27, 0xFF	; 255
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	eb 58       	subi	r30, 0x8B	; 139
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	80 81       	ld	r24, Z
    4c82:	91 81       	ldd	r25, Z+1	; 0x01
    4c84:	8d 93       	st	X+, r24
    4c86:	9c 93       	st	X, r25
    4c88:	fe 01       	movw	r30, r28
    4c8a:	ef 58       	subi	r30, 0x8F	; 143
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	80 81       	ld	r24, Z
    4c90:	91 81       	ldd	r25, Z+1	; 0x01
    4c92:	01 97       	sbiw	r24, 0x01	; 1
    4c94:	f1 f7       	brne	.-4      	; 0x4c92 <main+0x788>
    4c96:	fe 01       	movw	r30, r28
    4c98:	ef 58       	subi	r30, 0x8F	; 143
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	91 83       	std	Z+1, r25	; 0x01
    4c9e:	80 83       	st	Z, r24
		//    UART_TransmitString("\r\n inside APP_MOTORS_CONTROL_REQUEST \r\n");
		    _delay_ms(10);
		    SPI_voidTransmitAsynchronous('D', NOAct);
    4ca0:	25 e7       	ldi	r18, 0x75	; 117
    4ca2:	32 e2       	ldi	r19, 0x22	; 34
    4ca4:	84 e4       	ldi	r24, 0x44	; 68
    4ca6:	b9 01       	movw	r22, r18
    4ca8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    4cac:	fe 01       	movw	r30, r28
    4cae:	e3 59       	subi	r30, 0x93	; 147
    4cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	aa e7       	ldi	r26, 0x7A	; 122
    4cb8:	b4 e4       	ldi	r27, 0x44	; 68
    4cba:	80 83       	st	Z, r24
    4cbc:	91 83       	std	Z+1, r25	; 0x01
    4cbe:	a2 83       	std	Z+2, r26	; 0x02
    4cc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc2:	8e 01       	movw	r16, r28
    4cc4:	07 59       	subi	r16, 0x97	; 151
    4cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    4cc8:	fe 01       	movw	r30, r28
    4cca:	e3 59       	subi	r30, 0x93	; 147
    4ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cce:	60 81       	ld	r22, Z
    4cd0:	71 81       	ldd	r23, Z+1	; 0x01
    4cd2:	82 81       	ldd	r24, Z+2	; 0x02
    4cd4:	93 81       	ldd	r25, Z+3	; 0x03
    4cd6:	20 e0       	ldi	r18, 0x00	; 0
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	4a e7       	ldi	r20, 0x7A	; 122
    4cdc:	55 e4       	ldi	r21, 0x45	; 69
    4cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	f8 01       	movw	r30, r16
    4ce8:	80 83       	st	Z, r24
    4cea:	91 83       	std	Z+1, r25	; 0x01
    4cec:	a2 83       	std	Z+2, r26	; 0x02
    4cee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cf0:	fe 01       	movw	r30, r28
    4cf2:	e7 59       	subi	r30, 0x97	; 151
    4cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf6:	60 81       	ld	r22, Z
    4cf8:	71 81       	ldd	r23, Z+1	; 0x01
    4cfa:	82 81       	ldd	r24, Z+2	; 0x02
    4cfc:	93 81       	ldd	r25, Z+3	; 0x03
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	40 e8       	ldi	r20, 0x80	; 128
    4d04:	5f e3       	ldi	r21, 0x3F	; 63
    4d06:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4d0a:	88 23       	and	r24, r24
    4d0c:	44 f4       	brge	.+16     	; 0x4d1e <main+0x814>
		__ticks = 1;
    4d0e:	fe 01       	movw	r30, r28
    4d10:	e9 59       	subi	r30, 0x99	; 153
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	81 e0       	ldi	r24, 0x01	; 1
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	80 83       	st	Z, r24
    4d1c:	64 c0       	rjmp	.+200    	; 0x4de6 <main+0x8dc>
	else if (__tmp > 65535)
    4d1e:	fe 01       	movw	r30, r28
    4d20:	e7 59       	subi	r30, 0x97	; 151
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	60 81       	ld	r22, Z
    4d26:	71 81       	ldd	r23, Z+1	; 0x01
    4d28:	82 81       	ldd	r24, Z+2	; 0x02
    4d2a:	93 81       	ldd	r25, Z+3	; 0x03
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	3f ef       	ldi	r19, 0xFF	; 255
    4d30:	4f e7       	ldi	r20, 0x7F	; 127
    4d32:	57 e4       	ldi	r21, 0x47	; 71
    4d34:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4d38:	18 16       	cp	r1, r24
    4d3a:	0c f0       	brlt	.+2      	; 0x4d3e <main+0x834>
    4d3c:	43 c0       	rjmp	.+134    	; 0x4dc4 <main+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d3e:	fe 01       	movw	r30, r28
    4d40:	e3 59       	subi	r30, 0x93	; 147
    4d42:	ff 4f       	sbci	r31, 0xFF	; 255
    4d44:	60 81       	ld	r22, Z
    4d46:	71 81       	ldd	r23, Z+1	; 0x01
    4d48:	82 81       	ldd	r24, Z+2	; 0x02
    4d4a:	93 81       	ldd	r25, Z+3	; 0x03
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e2       	ldi	r20, 0x20	; 32
    4d52:	51 e4       	ldi	r21, 0x41	; 65
    4d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	8e 01       	movw	r16, r28
    4d5e:	09 59       	subi	r16, 0x99	; 153
    4d60:	1f 4f       	sbci	r17, 0xFF	; 255
    4d62:	bc 01       	movw	r22, r24
    4d64:	cd 01       	movw	r24, r26
    4d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	f8 01       	movw	r30, r16
    4d70:	91 83       	std	Z+1, r25	; 0x01
    4d72:	80 83       	st	Z, r24
    4d74:	1f c0       	rjmp	.+62     	; 0x4db4 <main+0x8aa>
    4d76:	fe 01       	movw	r30, r28
    4d78:	eb 59       	subi	r30, 0x9B	; 155
    4d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7c:	80 e9       	ldi	r24, 0x90	; 144
    4d7e:	91 e0       	ldi	r25, 0x01	; 1
    4d80:	91 83       	std	Z+1, r25	; 0x01
    4d82:	80 83       	st	Z, r24
    4d84:	fe 01       	movw	r30, r28
    4d86:	eb 59       	subi	r30, 0x9B	; 155
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	80 81       	ld	r24, Z
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	01 97       	sbiw	r24, 0x01	; 1
    4d90:	f1 f7       	brne	.-4      	; 0x4d8e <main+0x884>
    4d92:	fe 01       	movw	r30, r28
    4d94:	eb 59       	subi	r30, 0x9B	; 155
    4d96:	ff 4f       	sbci	r31, 0xFF	; 255
    4d98:	91 83       	std	Z+1, r25	; 0x01
    4d9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d9c:	de 01       	movw	r26, r28
    4d9e:	a9 59       	subi	r26, 0x99	; 153
    4da0:	bf 4f       	sbci	r27, 0xFF	; 255
    4da2:	fe 01       	movw	r30, r28
    4da4:	e9 59       	subi	r30, 0x99	; 153
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	80 81       	ld	r24, Z
    4daa:	91 81       	ldd	r25, Z+1	; 0x01
    4dac:	01 97       	sbiw	r24, 0x01	; 1
    4dae:	11 96       	adiw	r26, 0x01	; 1
    4db0:	9c 93       	st	X, r25
    4db2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4db4:	fe 01       	movw	r30, r28
    4db6:	e9 59       	subi	r30, 0x99	; 153
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	80 81       	ld	r24, Z
    4dbc:	91 81       	ldd	r25, Z+1	; 0x01
    4dbe:	00 97       	sbiw	r24, 0x00	; 0
    4dc0:	d1 f6       	brne	.-76     	; 0x4d76 <main+0x86c>
    4dc2:	27 c0       	rjmp	.+78     	; 0x4e12 <main+0x908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc4:	8e 01       	movw	r16, r28
    4dc6:	09 59       	subi	r16, 0x99	; 153
    4dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dca:	fe 01       	movw	r30, r28
    4dcc:	e7 59       	subi	r30, 0x97	; 151
    4dce:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd0:	60 81       	ld	r22, Z
    4dd2:	71 81       	ldd	r23, Z+1	; 0x01
    4dd4:	82 81       	ldd	r24, Z+2	; 0x02
    4dd6:	93 81       	ldd	r25, Z+3	; 0x03
    4dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ddc:	dc 01       	movw	r26, r24
    4dde:	cb 01       	movw	r24, r22
    4de0:	f8 01       	movw	r30, r16
    4de2:	91 83       	std	Z+1, r25	; 0x01
    4de4:	80 83       	st	Z, r24
    4de6:	de 01       	movw	r26, r28
    4de8:	ad 59       	subi	r26, 0x9D	; 157
    4dea:	bf 4f       	sbci	r27, 0xFF	; 255
    4dec:	fe 01       	movw	r30, r28
    4dee:	e9 59       	subi	r30, 0x99	; 153
    4df0:	ff 4f       	sbci	r31, 0xFF	; 255
    4df2:	80 81       	ld	r24, Z
    4df4:	91 81       	ldd	r25, Z+1	; 0x01
    4df6:	8d 93       	st	X+, r24
    4df8:	9c 93       	st	X, r25
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	ed 59       	subi	r30, 0x9D	; 157
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	80 81       	ld	r24, Z
    4e02:	91 81       	ldd	r25, Z+1	; 0x01
    4e04:	01 97       	sbiw	r24, 0x01	; 1
    4e06:	f1 f7       	brne	.-4      	; 0x4e04 <main+0x8fa>
    4e08:	fe 01       	movw	r30, r28
    4e0a:	ed 59       	subi	r30, 0x9D	; 157
    4e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0e:	91 83       	std	Z+1, r25	; 0x01
    4e10:	80 83       	st	Z, r24
		    _delay_ms(1000);

			SPI_voidTransmitAsynchronous(APP_MOTORS_CONTROL_REQUEST ,NOAct);
    4e12:	25 e7       	ldi	r18, 0x75	; 117
    4e14:	32 e2       	ldi	r19, 0x22	; 34
    4e16:	8b eb       	ldi	r24, 0xBB	; 187
    4e18:	b9 01       	movw	r22, r18
    4e1a:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    4e1e:	fe 01       	movw	r30, r28
    4e20:	e1 5a       	subi	r30, 0xA1	; 161
    4e22:	ff 4f       	sbci	r31, 0xFF	; 255
    4e24:	80 e0       	ldi	r24, 0x00	; 0
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	a0 e2       	ldi	r26, 0x20	; 32
    4e2a:	b1 e4       	ldi	r27, 0x41	; 65
    4e2c:	80 83       	st	Z, r24
    4e2e:	91 83       	std	Z+1, r25	; 0x01
    4e30:	a2 83       	std	Z+2, r26	; 0x02
    4e32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e34:	8e 01       	movw	r16, r28
    4e36:	05 5a       	subi	r16, 0xA5	; 165
    4e38:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	e1 5a       	subi	r30, 0xA1	; 161
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	60 81       	ld	r22, Z
    4e42:	71 81       	ldd	r23, Z+1	; 0x01
    4e44:	82 81       	ldd	r24, Z+2	; 0x02
    4e46:	93 81       	ldd	r25, Z+3	; 0x03
    4e48:	20 e0       	ldi	r18, 0x00	; 0
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	4a e7       	ldi	r20, 0x7A	; 122
    4e4e:	55 e4       	ldi	r21, 0x45	; 69
    4e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e54:	dc 01       	movw	r26, r24
    4e56:	cb 01       	movw	r24, r22
    4e58:	f8 01       	movw	r30, r16
    4e5a:	80 83       	st	Z, r24
    4e5c:	91 83       	std	Z+1, r25	; 0x01
    4e5e:	a2 83       	std	Z+2, r26	; 0x02
    4e60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e62:	fe 01       	movw	r30, r28
    4e64:	e5 5a       	subi	r30, 0xA5	; 165
    4e66:	ff 4f       	sbci	r31, 0xFF	; 255
    4e68:	60 81       	ld	r22, Z
    4e6a:	71 81       	ldd	r23, Z+1	; 0x01
    4e6c:	82 81       	ldd	r24, Z+2	; 0x02
    4e6e:	93 81       	ldd	r25, Z+3	; 0x03
    4e70:	20 e0       	ldi	r18, 0x00	; 0
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	40 e8       	ldi	r20, 0x80	; 128
    4e76:	5f e3       	ldi	r21, 0x3F	; 63
    4e78:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e7c:	88 23       	and	r24, r24
    4e7e:	44 f4       	brge	.+16     	; 0x4e90 <main+0x986>
		__ticks = 1;
    4e80:	fe 01       	movw	r30, r28
    4e82:	e7 5a       	subi	r30, 0xA7	; 167
    4e84:	ff 4f       	sbci	r31, 0xFF	; 255
    4e86:	81 e0       	ldi	r24, 0x01	; 1
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	91 83       	std	Z+1, r25	; 0x01
    4e8c:	80 83       	st	Z, r24
    4e8e:	64 c0       	rjmp	.+200    	; 0x4f58 <main+0xa4e>
	else if (__tmp > 65535)
    4e90:	fe 01       	movw	r30, r28
    4e92:	e5 5a       	subi	r30, 0xA5	; 165
    4e94:	ff 4f       	sbci	r31, 0xFF	; 255
    4e96:	60 81       	ld	r22, Z
    4e98:	71 81       	ldd	r23, Z+1	; 0x01
    4e9a:	82 81       	ldd	r24, Z+2	; 0x02
    4e9c:	93 81       	ldd	r25, Z+3	; 0x03
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	3f ef       	ldi	r19, 0xFF	; 255
    4ea2:	4f e7       	ldi	r20, 0x7F	; 127
    4ea4:	57 e4       	ldi	r21, 0x47	; 71
    4ea6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4eaa:	18 16       	cp	r1, r24
    4eac:	0c f0       	brlt	.+2      	; 0x4eb0 <main+0x9a6>
    4eae:	43 c0       	rjmp	.+134    	; 0x4f36 <main+0xa2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb0:	fe 01       	movw	r30, r28
    4eb2:	e1 5a       	subi	r30, 0xA1	; 161
    4eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb6:	60 81       	ld	r22, Z
    4eb8:	71 81       	ldd	r23, Z+1	; 0x01
    4eba:	82 81       	ldd	r24, Z+2	; 0x02
    4ebc:	93 81       	ldd	r25, Z+3	; 0x03
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	40 e2       	ldi	r20, 0x20	; 32
    4ec4:	51 e4       	ldi	r21, 0x41	; 65
    4ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	cb 01       	movw	r24, r22
    4ece:	8e 01       	movw	r16, r28
    4ed0:	07 5a       	subi	r16, 0xA7	; 167
    4ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed4:	bc 01       	movw	r22, r24
    4ed6:	cd 01       	movw	r24, r26
    4ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4edc:	dc 01       	movw	r26, r24
    4ede:	cb 01       	movw	r24, r22
    4ee0:	f8 01       	movw	r30, r16
    4ee2:	91 83       	std	Z+1, r25	; 0x01
    4ee4:	80 83       	st	Z, r24
    4ee6:	1f c0       	rjmp	.+62     	; 0x4f26 <main+0xa1c>
    4ee8:	fe 01       	movw	r30, r28
    4eea:	e9 5a       	subi	r30, 0xA9	; 169
    4eec:	ff 4f       	sbci	r31, 0xFF	; 255
    4eee:	80 e9       	ldi	r24, 0x90	; 144
    4ef0:	91 e0       	ldi	r25, 0x01	; 1
    4ef2:	91 83       	std	Z+1, r25	; 0x01
    4ef4:	80 83       	st	Z, r24
    4ef6:	fe 01       	movw	r30, r28
    4ef8:	e9 5a       	subi	r30, 0xA9	; 169
    4efa:	ff 4f       	sbci	r31, 0xFF	; 255
    4efc:	80 81       	ld	r24, Z
    4efe:	91 81       	ldd	r25, Z+1	; 0x01
    4f00:	01 97       	sbiw	r24, 0x01	; 1
    4f02:	f1 f7       	brne	.-4      	; 0x4f00 <main+0x9f6>
    4f04:	fe 01       	movw	r30, r28
    4f06:	e9 5a       	subi	r30, 0xA9	; 169
    4f08:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0a:	91 83       	std	Z+1, r25	; 0x01
    4f0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f0e:	de 01       	movw	r26, r28
    4f10:	a7 5a       	subi	r26, 0xA7	; 167
    4f12:	bf 4f       	sbci	r27, 0xFF	; 255
    4f14:	fe 01       	movw	r30, r28
    4f16:	e7 5a       	subi	r30, 0xA7	; 167
    4f18:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1a:	80 81       	ld	r24, Z
    4f1c:	91 81       	ldd	r25, Z+1	; 0x01
    4f1e:	01 97       	sbiw	r24, 0x01	; 1
    4f20:	11 96       	adiw	r26, 0x01	; 1
    4f22:	9c 93       	st	X, r25
    4f24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f26:	fe 01       	movw	r30, r28
    4f28:	e7 5a       	subi	r30, 0xA7	; 167
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	80 81       	ld	r24, Z
    4f2e:	91 81       	ldd	r25, Z+1	; 0x01
    4f30:	00 97       	sbiw	r24, 0x00	; 0
    4f32:	d1 f6       	brne	.-76     	; 0x4ee8 <main+0x9de>
    4f34:	27 c0       	rjmp	.+78     	; 0x4f84 <main+0xa7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f36:	8e 01       	movw	r16, r28
    4f38:	07 5a       	subi	r16, 0xA7	; 167
    4f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f3c:	fe 01       	movw	r30, r28
    4f3e:	e5 5a       	subi	r30, 0xA5	; 165
    4f40:	ff 4f       	sbci	r31, 0xFF	; 255
    4f42:	60 81       	ld	r22, Z
    4f44:	71 81       	ldd	r23, Z+1	; 0x01
    4f46:	82 81       	ldd	r24, Z+2	; 0x02
    4f48:	93 81       	ldd	r25, Z+3	; 0x03
    4f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f4e:	dc 01       	movw	r26, r24
    4f50:	cb 01       	movw	r24, r22
    4f52:	f8 01       	movw	r30, r16
    4f54:	91 83       	std	Z+1, r25	; 0x01
    4f56:	80 83       	st	Z, r24
    4f58:	de 01       	movw	r26, r28
    4f5a:	ab 5a       	subi	r26, 0xAB	; 171
    4f5c:	bf 4f       	sbci	r27, 0xFF	; 255
    4f5e:	fe 01       	movw	r30, r28
    4f60:	e7 5a       	subi	r30, 0xA7	; 167
    4f62:	ff 4f       	sbci	r31, 0xFF	; 255
    4f64:	80 81       	ld	r24, Z
    4f66:	91 81       	ldd	r25, Z+1	; 0x01
    4f68:	8d 93       	st	X+, r24
    4f6a:	9c 93       	st	X, r25
    4f6c:	fe 01       	movw	r30, r28
    4f6e:	eb 5a       	subi	r30, 0xAB	; 171
    4f70:	ff 4f       	sbci	r31, 0xFF	; 255
    4f72:	80 81       	ld	r24, Z
    4f74:	91 81       	ldd	r25, Z+1	; 0x01
    4f76:	01 97       	sbiw	r24, 0x01	; 1
    4f78:	f1 f7       	brne	.-4      	; 0x4f76 <main+0xa6c>
    4f7a:	fe 01       	movw	r30, r28
    4f7c:	eb 5a       	subi	r30, 0xAB	; 171
    4f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f80:	91 83       	std	Z+1, r25	; 0x01
    4f82:	80 83       	st	Z, r24
	//	    UART_TransmitString("\r\n inside APP_MOTORS_CONTROL_REQUEST \r\n");
		    _delay_ms(10);
		    SPI_voidTransmitAsynchronous('A', NOAct);
    4f84:	25 e7       	ldi	r18, 0x75	; 117
    4f86:	32 e2       	ldi	r19, 0x22	; 34
    4f88:	81 e4       	ldi	r24, 0x41	; 65
    4f8a:	b9 01       	movw	r22, r18
    4f8c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    4f90:	fe 01       	movw	r30, r28
    4f92:	ef 5a       	subi	r30, 0xAF	; 175
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	aa e7       	ldi	r26, 0x7A	; 122
    4f9c:	b4 e4       	ldi	r27, 0x44	; 68
    4f9e:	80 83       	st	Z, r24
    4fa0:	91 83       	std	Z+1, r25	; 0x01
    4fa2:	a2 83       	std	Z+2, r26	; 0x02
    4fa4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fa6:	8e 01       	movw	r16, r28
    4fa8:	03 5b       	subi	r16, 0xB3	; 179
    4faa:	1f 4f       	sbci	r17, 0xFF	; 255
    4fac:	fe 01       	movw	r30, r28
    4fae:	ef 5a       	subi	r30, 0xAF	; 175
    4fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb2:	60 81       	ld	r22, Z
    4fb4:	71 81       	ldd	r23, Z+1	; 0x01
    4fb6:	82 81       	ldd	r24, Z+2	; 0x02
    4fb8:	93 81       	ldd	r25, Z+3	; 0x03
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	4a e7       	ldi	r20, 0x7A	; 122
    4fc0:	55 e4       	ldi	r21, 0x45	; 69
    4fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc6:	dc 01       	movw	r26, r24
    4fc8:	cb 01       	movw	r24, r22
    4fca:	f8 01       	movw	r30, r16
    4fcc:	80 83       	st	Z, r24
    4fce:	91 83       	std	Z+1, r25	; 0x01
    4fd0:	a2 83       	std	Z+2, r26	; 0x02
    4fd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fd4:	fe 01       	movw	r30, r28
    4fd6:	e3 5b       	subi	r30, 0xB3	; 179
    4fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fda:	60 81       	ld	r22, Z
    4fdc:	71 81       	ldd	r23, Z+1	; 0x01
    4fde:	82 81       	ldd	r24, Z+2	; 0x02
    4fe0:	93 81       	ldd	r25, Z+3	; 0x03
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	40 e8       	ldi	r20, 0x80	; 128
    4fe8:	5f e3       	ldi	r21, 0x3F	; 63
    4fea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4fee:	88 23       	and	r24, r24
    4ff0:	44 f4       	brge	.+16     	; 0x5002 <main+0xaf8>
		__ticks = 1;
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	e5 5b       	subi	r30, 0xB5	; 181
    4ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	91 83       	std	Z+1, r25	; 0x01
    4ffe:	80 83       	st	Z, r24
    5000:	64 c0       	rjmp	.+200    	; 0x50ca <main+0xbc0>
	else if (__tmp > 65535)
    5002:	fe 01       	movw	r30, r28
    5004:	e3 5b       	subi	r30, 0xB3	; 179
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	60 81       	ld	r22, Z
    500a:	71 81       	ldd	r23, Z+1	; 0x01
    500c:	82 81       	ldd	r24, Z+2	; 0x02
    500e:	93 81       	ldd	r25, Z+3	; 0x03
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	3f ef       	ldi	r19, 0xFF	; 255
    5014:	4f e7       	ldi	r20, 0x7F	; 127
    5016:	57 e4       	ldi	r21, 0x47	; 71
    5018:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    501c:	18 16       	cp	r1, r24
    501e:	0c f0       	brlt	.+2      	; 0x5022 <main+0xb18>
    5020:	43 c0       	rjmp	.+134    	; 0x50a8 <main+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5022:	fe 01       	movw	r30, r28
    5024:	ef 5a       	subi	r30, 0xAF	; 175
    5026:	ff 4f       	sbci	r31, 0xFF	; 255
    5028:	60 81       	ld	r22, Z
    502a:	71 81       	ldd	r23, Z+1	; 0x01
    502c:	82 81       	ldd	r24, Z+2	; 0x02
    502e:	93 81       	ldd	r25, Z+3	; 0x03
    5030:	20 e0       	ldi	r18, 0x00	; 0
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	40 e2       	ldi	r20, 0x20	; 32
    5036:	51 e4       	ldi	r21, 0x41	; 65
    5038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    503c:	dc 01       	movw	r26, r24
    503e:	cb 01       	movw	r24, r22
    5040:	8e 01       	movw	r16, r28
    5042:	05 5b       	subi	r16, 0xB5	; 181
    5044:	1f 4f       	sbci	r17, 0xFF	; 255
    5046:	bc 01       	movw	r22, r24
    5048:	cd 01       	movw	r24, r26
    504a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    504e:	dc 01       	movw	r26, r24
    5050:	cb 01       	movw	r24, r22
    5052:	f8 01       	movw	r30, r16
    5054:	91 83       	std	Z+1, r25	; 0x01
    5056:	80 83       	st	Z, r24
    5058:	1f c0       	rjmp	.+62     	; 0x5098 <main+0xb8e>
    505a:	fe 01       	movw	r30, r28
    505c:	e7 5b       	subi	r30, 0xB7	; 183
    505e:	ff 4f       	sbci	r31, 0xFF	; 255
    5060:	80 e9       	ldi	r24, 0x90	; 144
    5062:	91 e0       	ldi	r25, 0x01	; 1
    5064:	91 83       	std	Z+1, r25	; 0x01
    5066:	80 83       	st	Z, r24
    5068:	fe 01       	movw	r30, r28
    506a:	e7 5b       	subi	r30, 0xB7	; 183
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	80 81       	ld	r24, Z
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	01 97       	sbiw	r24, 0x01	; 1
    5074:	f1 f7       	brne	.-4      	; 0x5072 <main+0xb68>
    5076:	fe 01       	movw	r30, r28
    5078:	e7 5b       	subi	r30, 0xB7	; 183
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	91 83       	std	Z+1, r25	; 0x01
    507e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5080:	de 01       	movw	r26, r28
    5082:	a5 5b       	subi	r26, 0xB5	; 181
    5084:	bf 4f       	sbci	r27, 0xFF	; 255
    5086:	fe 01       	movw	r30, r28
    5088:	e5 5b       	subi	r30, 0xB5	; 181
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	80 81       	ld	r24, Z
    508e:	91 81       	ldd	r25, Z+1	; 0x01
    5090:	01 97       	sbiw	r24, 0x01	; 1
    5092:	11 96       	adiw	r26, 0x01	; 1
    5094:	9c 93       	st	X, r25
    5096:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5098:	fe 01       	movw	r30, r28
    509a:	e5 5b       	subi	r30, 0xB5	; 181
    509c:	ff 4f       	sbci	r31, 0xFF	; 255
    509e:	80 81       	ld	r24, Z
    50a0:	91 81       	ldd	r25, Z+1	; 0x01
    50a2:	00 97       	sbiw	r24, 0x00	; 0
    50a4:	d1 f6       	brne	.-76     	; 0x505a <main+0xb50>
    50a6:	27 c0       	rjmp	.+78     	; 0x50f6 <main+0xbec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50a8:	8e 01       	movw	r16, r28
    50aa:	05 5b       	subi	r16, 0xB5	; 181
    50ac:	1f 4f       	sbci	r17, 0xFF	; 255
    50ae:	fe 01       	movw	r30, r28
    50b0:	e3 5b       	subi	r30, 0xB3	; 179
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	60 81       	ld	r22, Z
    50b6:	71 81       	ldd	r23, Z+1	; 0x01
    50b8:	82 81       	ldd	r24, Z+2	; 0x02
    50ba:	93 81       	ldd	r25, Z+3	; 0x03
    50bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c0:	dc 01       	movw	r26, r24
    50c2:	cb 01       	movw	r24, r22
    50c4:	f8 01       	movw	r30, r16
    50c6:	91 83       	std	Z+1, r25	; 0x01
    50c8:	80 83       	st	Z, r24
    50ca:	de 01       	movw	r26, r28
    50cc:	a9 5b       	subi	r26, 0xB9	; 185
    50ce:	bf 4f       	sbci	r27, 0xFF	; 255
    50d0:	fe 01       	movw	r30, r28
    50d2:	e5 5b       	subi	r30, 0xB5	; 181
    50d4:	ff 4f       	sbci	r31, 0xFF	; 255
    50d6:	80 81       	ld	r24, Z
    50d8:	91 81       	ldd	r25, Z+1	; 0x01
    50da:	8d 93       	st	X+, r24
    50dc:	9c 93       	st	X, r25
    50de:	fe 01       	movw	r30, r28
    50e0:	e9 5b       	subi	r30, 0xB9	; 185
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	80 81       	ld	r24, Z
    50e6:	91 81       	ldd	r25, Z+1	; 0x01
    50e8:	01 97       	sbiw	r24, 0x01	; 1
    50ea:	f1 f7       	brne	.-4      	; 0x50e8 <main+0xbde>
    50ec:	fe 01       	movw	r30, r28
    50ee:	e9 5b       	subi	r30, 0xB9	; 185
    50f0:	ff 4f       	sbci	r31, 0xFF	; 255
    50f2:	91 83       	std	Z+1, r25	; 0x01
    50f4:	80 83       	st	Z, r24
		    _delay_ms(1000);

			SPI_voidTransmitAsynchronous(APP_MOTORS_CONTROL_REQUEST ,NOAct);
    50f6:	25 e7       	ldi	r18, 0x75	; 117
    50f8:	32 e2       	ldi	r19, 0x22	; 34
    50fa:	8b eb       	ldi	r24, 0xBB	; 187
    50fc:	b9 01       	movw	r22, r18
    50fe:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    5102:	fe 01       	movw	r30, r28
    5104:	ed 5b       	subi	r30, 0xBD	; 189
    5106:	ff 4f       	sbci	r31, 0xFF	; 255
    5108:	80 e0       	ldi	r24, 0x00	; 0
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	a0 e2       	ldi	r26, 0x20	; 32
    510e:	b1 e4       	ldi	r27, 0x41	; 65
    5110:	80 83       	st	Z, r24
    5112:	91 83       	std	Z+1, r25	; 0x01
    5114:	a2 83       	std	Z+2, r26	; 0x02
    5116:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5118:	8e 01       	movw	r16, r28
    511a:	01 5c       	subi	r16, 0xC1	; 193
    511c:	1f 4f       	sbci	r17, 0xFF	; 255
    511e:	fe 01       	movw	r30, r28
    5120:	ed 5b       	subi	r30, 0xBD	; 189
    5122:	ff 4f       	sbci	r31, 0xFF	; 255
    5124:	60 81       	ld	r22, Z
    5126:	71 81       	ldd	r23, Z+1	; 0x01
    5128:	82 81       	ldd	r24, Z+2	; 0x02
    512a:	93 81       	ldd	r25, Z+3	; 0x03
    512c:	20 e0       	ldi	r18, 0x00	; 0
    512e:	30 e0       	ldi	r19, 0x00	; 0
    5130:	4a e7       	ldi	r20, 0x7A	; 122
    5132:	55 e4       	ldi	r21, 0x45	; 69
    5134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5138:	dc 01       	movw	r26, r24
    513a:	cb 01       	movw	r24, r22
    513c:	f8 01       	movw	r30, r16
    513e:	80 83       	st	Z, r24
    5140:	91 83       	std	Z+1, r25	; 0x01
    5142:	a2 83       	std	Z+2, r26	; 0x02
    5144:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5146:	fe 01       	movw	r30, r28
    5148:	ff 96       	adiw	r30, 0x3f	; 63
    514a:	60 81       	ld	r22, Z
    514c:	71 81       	ldd	r23, Z+1	; 0x01
    514e:	82 81       	ldd	r24, Z+2	; 0x02
    5150:	93 81       	ldd	r25, Z+3	; 0x03
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	40 e8       	ldi	r20, 0x80	; 128
    5158:	5f e3       	ldi	r21, 0x3F	; 63
    515a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    515e:	88 23       	and	r24, r24
    5160:	2c f4       	brge	.+10     	; 0x516c <main+0xc62>
		__ticks = 1;
    5162:	81 e0       	ldi	r24, 0x01	; 1
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	9e af       	std	Y+62, r25	; 0x3e
    5168:	8d af       	std	Y+61, r24	; 0x3d
    516a:	46 c0       	rjmp	.+140    	; 0x51f8 <main+0xcee>
	else if (__tmp > 65535)
    516c:	fe 01       	movw	r30, r28
    516e:	ff 96       	adiw	r30, 0x3f	; 63
    5170:	60 81       	ld	r22, Z
    5172:	71 81       	ldd	r23, Z+1	; 0x01
    5174:	82 81       	ldd	r24, Z+2	; 0x02
    5176:	93 81       	ldd	r25, Z+3	; 0x03
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	3f ef       	ldi	r19, 0xFF	; 255
    517c:	4f e7       	ldi	r20, 0x7F	; 127
    517e:	57 e4       	ldi	r21, 0x47	; 71
    5180:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5184:	18 16       	cp	r1, r24
    5186:	64 f5       	brge	.+88     	; 0x51e0 <main+0xcd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5188:	fe 01       	movw	r30, r28
    518a:	ed 5b       	subi	r30, 0xBD	; 189
    518c:	ff 4f       	sbci	r31, 0xFF	; 255
    518e:	60 81       	ld	r22, Z
    5190:	71 81       	ldd	r23, Z+1	; 0x01
    5192:	82 81       	ldd	r24, Z+2	; 0x02
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	20 e0       	ldi	r18, 0x00	; 0
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	40 e2       	ldi	r20, 0x20	; 32
    519c:	51 e4       	ldi	r21, 0x41	; 65
    519e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51a2:	dc 01       	movw	r26, r24
    51a4:	cb 01       	movw	r24, r22
    51a6:	bc 01       	movw	r22, r24
    51a8:	cd 01       	movw	r24, r26
    51aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ae:	dc 01       	movw	r26, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	9e af       	std	Y+62, r25	; 0x3e
    51b4:	8d af       	std	Y+61, r24	; 0x3d
    51b6:	0f c0       	rjmp	.+30     	; 0x51d6 <main+0xccc>
    51b8:	80 e9       	ldi	r24, 0x90	; 144
    51ba:	91 e0       	ldi	r25, 0x01	; 1
    51bc:	9c af       	std	Y+60, r25	; 0x3c
    51be:	8b af       	std	Y+59, r24	; 0x3b
    51c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    51c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    51c4:	01 97       	sbiw	r24, 0x01	; 1
    51c6:	f1 f7       	brne	.-4      	; 0x51c4 <main+0xcba>
    51c8:	9c af       	std	Y+60, r25	; 0x3c
    51ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    51ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    51d0:	01 97       	sbiw	r24, 0x01	; 1
    51d2:	9e af       	std	Y+62, r25	; 0x3e
    51d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    51d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    51da:	00 97       	sbiw	r24, 0x00	; 0
    51dc:	69 f7       	brne	.-38     	; 0x51b8 <main+0xcae>
    51de:	16 c0       	rjmp	.+44     	; 0x520c <main+0xd02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51e0:	fe 01       	movw	r30, r28
    51e2:	ff 96       	adiw	r30, 0x3f	; 63
    51e4:	60 81       	ld	r22, Z
    51e6:	71 81       	ldd	r23, Z+1	; 0x01
    51e8:	82 81       	ldd	r24, Z+2	; 0x02
    51ea:	93 81       	ldd	r25, Z+3	; 0x03
    51ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51f0:	dc 01       	movw	r26, r24
    51f2:	cb 01       	movw	r24, r22
    51f4:	9e af       	std	Y+62, r25	; 0x3e
    51f6:	8d af       	std	Y+61, r24	; 0x3d
    51f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    51fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    51fc:	9a af       	std	Y+58, r25	; 0x3a
    51fe:	89 af       	std	Y+57, r24	; 0x39
    5200:	89 ad       	ldd	r24, Y+57	; 0x39
    5202:	9a ad       	ldd	r25, Y+58	; 0x3a
    5204:	01 97       	sbiw	r24, 0x01	; 1
    5206:	f1 f7       	brne	.-4      	; 0x5204 <main+0xcfa>
    5208:	9a af       	std	Y+58, r25	; 0x3a
    520a:	89 af       	std	Y+57, r24	; 0x39
	//	    UART_TransmitString("\r\n inside APP_MOTORS_CONTROL_REQUEST \r\n");
		    _delay_ms(10);
		    SPI_voidTransmitAsynchronous('P', NOAct);
    520c:	25 e7       	ldi	r18, 0x75	; 117
    520e:	32 e2       	ldi	r19, 0x22	; 34
    5210:	80 e5       	ldi	r24, 0x50	; 80
    5212:	b9 01       	movw	r22, r18
    5214:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	aa e7       	ldi	r26, 0x7A	; 122
    521e:	b4 e4       	ldi	r27, 0x44	; 68
    5220:	8d ab       	std	Y+53, r24	; 0x35
    5222:	9e ab       	std	Y+54, r25	; 0x36
    5224:	af ab       	std	Y+55, r26	; 0x37
    5226:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5228:	6d a9       	ldd	r22, Y+53	; 0x35
    522a:	7e a9       	ldd	r23, Y+54	; 0x36
    522c:	8f a9       	ldd	r24, Y+55	; 0x37
    522e:	98 ad       	ldd	r25, Y+56	; 0x38
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	4a e7       	ldi	r20, 0x7A	; 122
    5236:	55 e4       	ldi	r21, 0x45	; 69
    5238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    523c:	dc 01       	movw	r26, r24
    523e:	cb 01       	movw	r24, r22
    5240:	89 ab       	std	Y+49, r24	; 0x31
    5242:	9a ab       	std	Y+50, r25	; 0x32
    5244:	ab ab       	std	Y+51, r26	; 0x33
    5246:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5248:	69 a9       	ldd	r22, Y+49	; 0x31
    524a:	7a a9       	ldd	r23, Y+50	; 0x32
    524c:	8b a9       	ldd	r24, Y+51	; 0x33
    524e:	9c a9       	ldd	r25, Y+52	; 0x34
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	40 e8       	ldi	r20, 0x80	; 128
    5256:	5f e3       	ldi	r21, 0x3F	; 63
    5258:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    525c:	88 23       	and	r24, r24
    525e:	2c f4       	brge	.+10     	; 0x526a <main+0xd60>
		__ticks = 1;
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	98 ab       	std	Y+48, r25	; 0x30
    5266:	8f a7       	std	Y+47, r24	; 0x2f
    5268:	3f c0       	rjmp	.+126    	; 0x52e8 <main+0xdde>
	else if (__tmp > 65535)
    526a:	69 a9       	ldd	r22, Y+49	; 0x31
    526c:	7a a9       	ldd	r23, Y+50	; 0x32
    526e:	8b a9       	ldd	r24, Y+51	; 0x33
    5270:	9c a9       	ldd	r25, Y+52	; 0x34
    5272:	20 e0       	ldi	r18, 0x00	; 0
    5274:	3f ef       	ldi	r19, 0xFF	; 255
    5276:	4f e7       	ldi	r20, 0x7F	; 127
    5278:	57 e4       	ldi	r21, 0x47	; 71
    527a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    527e:	18 16       	cp	r1, r24
    5280:	4c f5       	brge	.+82     	; 0x52d4 <main+0xdca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5282:	6d a9       	ldd	r22, Y+53	; 0x35
    5284:	7e a9       	ldd	r23, Y+54	; 0x36
    5286:	8f a9       	ldd	r24, Y+55	; 0x37
    5288:	98 ad       	ldd	r25, Y+56	; 0x38
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	40 e2       	ldi	r20, 0x20	; 32
    5290:	51 e4       	ldi	r21, 0x41	; 65
    5292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5296:	dc 01       	movw	r26, r24
    5298:	cb 01       	movw	r24, r22
    529a:	bc 01       	movw	r22, r24
    529c:	cd 01       	movw	r24, r26
    529e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	98 ab       	std	Y+48, r25	; 0x30
    52a8:	8f a7       	std	Y+47, r24	; 0x2f
    52aa:	0f c0       	rjmp	.+30     	; 0x52ca <main+0xdc0>
    52ac:	80 e9       	ldi	r24, 0x90	; 144
    52ae:	91 e0       	ldi	r25, 0x01	; 1
    52b0:	9e a7       	std	Y+46, r25	; 0x2e
    52b2:	8d a7       	std	Y+45, r24	; 0x2d
    52b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    52b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    52b8:	01 97       	sbiw	r24, 0x01	; 1
    52ba:	f1 f7       	brne	.-4      	; 0x52b8 <main+0xdae>
    52bc:	9e a7       	std	Y+46, r25	; 0x2e
    52be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    52c2:	98 a9       	ldd	r25, Y+48	; 0x30
    52c4:	01 97       	sbiw	r24, 0x01	; 1
    52c6:	98 ab       	std	Y+48, r25	; 0x30
    52c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    52cc:	98 a9       	ldd	r25, Y+48	; 0x30
    52ce:	00 97       	sbiw	r24, 0x00	; 0
    52d0:	69 f7       	brne	.-38     	; 0x52ac <main+0xda2>
    52d2:	14 c0       	rjmp	.+40     	; 0x52fc <main+0xdf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d4:	69 a9       	ldd	r22, Y+49	; 0x31
    52d6:	7a a9       	ldd	r23, Y+50	; 0x32
    52d8:	8b a9       	ldd	r24, Y+51	; 0x33
    52da:	9c a9       	ldd	r25, Y+52	; 0x34
    52dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e0:	dc 01       	movw	r26, r24
    52e2:	cb 01       	movw	r24, r22
    52e4:	98 ab       	std	Y+48, r25	; 0x30
    52e6:	8f a7       	std	Y+47, r24	; 0x2f
    52e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    52ea:	98 a9       	ldd	r25, Y+48	; 0x30
    52ec:	9c a7       	std	Y+44, r25	; 0x2c
    52ee:	8b a7       	std	Y+43, r24	; 0x2b
    52f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    52f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    52f4:	01 97       	sbiw	r24, 0x01	; 1
    52f6:	f1 f7       	brne	.-4      	; 0x52f4 <main+0xdea>
    52f8:	9c a7       	std	Y+44, r25	; 0x2c
    52fa:	8b a7       	std	Y+43, r24	; 0x2b
		    _delay_ms(1000);

			SPI_voidTransmitAsynchronous(APP_MOTORS_CONTROL_REQUEST ,NOAct);
    52fc:	25 e7       	ldi	r18, 0x75	; 117
    52fe:	32 e2       	ldi	r19, 0x22	; 34
    5300:	8b eb       	ldi	r24, 0xBB	; 187
    5302:	b9 01       	movw	r22, r18
    5304:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    5308:	80 e0       	ldi	r24, 0x00	; 0
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	a0 e2       	ldi	r26, 0x20	; 32
    530e:	b1 e4       	ldi	r27, 0x41	; 65
    5310:	8f a3       	std	Y+39, r24	; 0x27
    5312:	98 a7       	std	Y+40, r25	; 0x28
    5314:	a9 a7       	std	Y+41, r26	; 0x29
    5316:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5318:	6f a1       	ldd	r22, Y+39	; 0x27
    531a:	78 a5       	ldd	r23, Y+40	; 0x28
    531c:	89 a5       	ldd	r24, Y+41	; 0x29
    531e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5320:	20 e0       	ldi	r18, 0x00	; 0
    5322:	30 e0       	ldi	r19, 0x00	; 0
    5324:	4a e7       	ldi	r20, 0x7A	; 122
    5326:	55 e4       	ldi	r21, 0x45	; 69
    5328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    532c:	dc 01       	movw	r26, r24
    532e:	cb 01       	movw	r24, r22
    5330:	8b a3       	std	Y+35, r24	; 0x23
    5332:	9c a3       	std	Y+36, r25	; 0x24
    5334:	ad a3       	std	Y+37, r26	; 0x25
    5336:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5338:	6b a1       	ldd	r22, Y+35	; 0x23
    533a:	7c a1       	ldd	r23, Y+36	; 0x24
    533c:	8d a1       	ldd	r24, Y+37	; 0x25
    533e:	9e a1       	ldd	r25, Y+38	; 0x26
    5340:	20 e0       	ldi	r18, 0x00	; 0
    5342:	30 e0       	ldi	r19, 0x00	; 0
    5344:	40 e8       	ldi	r20, 0x80	; 128
    5346:	5f e3       	ldi	r21, 0x3F	; 63
    5348:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    534c:	88 23       	and	r24, r24
    534e:	2c f4       	brge	.+10     	; 0x535a <main+0xe50>
		__ticks = 1;
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	9a a3       	std	Y+34, r25	; 0x22
    5356:	89 a3       	std	Y+33, r24	; 0x21
    5358:	3f c0       	rjmp	.+126    	; 0x53d8 <main+0xece>
	else if (__tmp > 65535)
    535a:	6b a1       	ldd	r22, Y+35	; 0x23
    535c:	7c a1       	ldd	r23, Y+36	; 0x24
    535e:	8d a1       	ldd	r24, Y+37	; 0x25
    5360:	9e a1       	ldd	r25, Y+38	; 0x26
    5362:	20 e0       	ldi	r18, 0x00	; 0
    5364:	3f ef       	ldi	r19, 0xFF	; 255
    5366:	4f e7       	ldi	r20, 0x7F	; 127
    5368:	57 e4       	ldi	r21, 0x47	; 71
    536a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    536e:	18 16       	cp	r1, r24
    5370:	4c f5       	brge	.+82     	; 0x53c4 <main+0xeba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5372:	6f a1       	ldd	r22, Y+39	; 0x27
    5374:	78 a5       	ldd	r23, Y+40	; 0x28
    5376:	89 a5       	ldd	r24, Y+41	; 0x29
    5378:	9a a5       	ldd	r25, Y+42	; 0x2a
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	40 e2       	ldi	r20, 0x20	; 32
    5380:	51 e4       	ldi	r21, 0x41	; 65
    5382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5386:	dc 01       	movw	r26, r24
    5388:	cb 01       	movw	r24, r22
    538a:	bc 01       	movw	r22, r24
    538c:	cd 01       	movw	r24, r26
    538e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5392:	dc 01       	movw	r26, r24
    5394:	cb 01       	movw	r24, r22
    5396:	9a a3       	std	Y+34, r25	; 0x22
    5398:	89 a3       	std	Y+33, r24	; 0x21
    539a:	0f c0       	rjmp	.+30     	; 0x53ba <main+0xeb0>
    539c:	80 e9       	ldi	r24, 0x90	; 144
    539e:	91 e0       	ldi	r25, 0x01	; 1
    53a0:	98 a3       	std	Y+32, r25	; 0x20
    53a2:	8f 8f       	std	Y+31, r24	; 0x1f
    53a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53a6:	98 a1       	ldd	r25, Y+32	; 0x20
    53a8:	01 97       	sbiw	r24, 0x01	; 1
    53aa:	f1 f7       	brne	.-4      	; 0x53a8 <main+0xe9e>
    53ac:	98 a3       	std	Y+32, r25	; 0x20
    53ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53b0:	89 a1       	ldd	r24, Y+33	; 0x21
    53b2:	9a a1       	ldd	r25, Y+34	; 0x22
    53b4:	01 97       	sbiw	r24, 0x01	; 1
    53b6:	9a a3       	std	Y+34, r25	; 0x22
    53b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ba:	89 a1       	ldd	r24, Y+33	; 0x21
    53bc:	9a a1       	ldd	r25, Y+34	; 0x22
    53be:	00 97       	sbiw	r24, 0x00	; 0
    53c0:	69 f7       	brne	.-38     	; 0x539c <main+0xe92>
    53c2:	14 c0       	rjmp	.+40     	; 0x53ec <main+0xee2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53c4:	6b a1       	ldd	r22, Y+35	; 0x23
    53c6:	7c a1       	ldd	r23, Y+36	; 0x24
    53c8:	8d a1       	ldd	r24, Y+37	; 0x25
    53ca:	9e a1       	ldd	r25, Y+38	; 0x26
    53cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53d0:	dc 01       	movw	r26, r24
    53d2:	cb 01       	movw	r24, r22
    53d4:	9a a3       	std	Y+34, r25	; 0x22
    53d6:	89 a3       	std	Y+33, r24	; 0x21
    53d8:	89 a1       	ldd	r24, Y+33	; 0x21
    53da:	9a a1       	ldd	r25, Y+34	; 0x22
    53dc:	9e 8f       	std	Y+30, r25	; 0x1e
    53de:	8d 8f       	std	Y+29, r24	; 0x1d
    53e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53e4:	01 97       	sbiw	r24, 0x01	; 1
    53e6:	f1 f7       	brne	.-4      	; 0x53e4 <main+0xeda>
    53e8:	9e 8f       	std	Y+30, r25	; 0x1e
    53ea:	8d 8f       	std	Y+29, r24	; 0x1d
	//	    UART_TransmitString("\r\n inside APP_MOTORS_CONTROL_REQUEST \r\n");
		    _delay_ms(10);
		    SPI_voidTransmitAsynchronous('K', NOAct);
    53ec:	25 e7       	ldi	r18, 0x75	; 117
    53ee:	32 e2       	ldi	r19, 0x22	; 34
    53f0:	8b e4       	ldi	r24, 0x4B	; 75
    53f2:	b9 01       	movw	r22, r18
    53f4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	aa e7       	ldi	r26, 0x7A	; 122
    53fe:	b4 e4       	ldi	r27, 0x44	; 68
    5400:	89 8f       	std	Y+25, r24	; 0x19
    5402:	9a 8f       	std	Y+26, r25	; 0x1a
    5404:	ab 8f       	std	Y+27, r26	; 0x1b
    5406:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5408:	69 8d       	ldd	r22, Y+25	; 0x19
    540a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    540c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    540e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	4a e7       	ldi	r20, 0x7A	; 122
    5416:	55 e4       	ldi	r21, 0x45	; 69
    5418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    541c:	dc 01       	movw	r26, r24
    541e:	cb 01       	movw	r24, r22
    5420:	8d 8b       	std	Y+21, r24	; 0x15
    5422:	9e 8b       	std	Y+22, r25	; 0x16
    5424:	af 8b       	std	Y+23, r26	; 0x17
    5426:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5428:	6d 89       	ldd	r22, Y+21	; 0x15
    542a:	7e 89       	ldd	r23, Y+22	; 0x16
    542c:	8f 89       	ldd	r24, Y+23	; 0x17
    542e:	98 8d       	ldd	r25, Y+24	; 0x18
    5430:	20 e0       	ldi	r18, 0x00	; 0
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	40 e8       	ldi	r20, 0x80	; 128
    5436:	5f e3       	ldi	r21, 0x3F	; 63
    5438:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    543c:	88 23       	and	r24, r24
    543e:	2c f4       	brge	.+10     	; 0x544a <main+0xf40>
		__ticks = 1;
    5440:	81 e0       	ldi	r24, 0x01	; 1
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	9c 8b       	std	Y+20, r25	; 0x14
    5446:	8b 8b       	std	Y+19, r24	; 0x13
    5448:	3f c0       	rjmp	.+126    	; 0x54c8 <main+0xfbe>
	else if (__tmp > 65535)
    544a:	6d 89       	ldd	r22, Y+21	; 0x15
    544c:	7e 89       	ldd	r23, Y+22	; 0x16
    544e:	8f 89       	ldd	r24, Y+23	; 0x17
    5450:	98 8d       	ldd	r25, Y+24	; 0x18
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	3f ef       	ldi	r19, 0xFF	; 255
    5456:	4f e7       	ldi	r20, 0x7F	; 127
    5458:	57 e4       	ldi	r21, 0x47	; 71
    545a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    545e:	18 16       	cp	r1, r24
    5460:	4c f5       	brge	.+82     	; 0x54b4 <main+0xfaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5462:	69 8d       	ldd	r22, Y+25	; 0x19
    5464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    546a:	20 e0       	ldi	r18, 0x00	; 0
    546c:	30 e0       	ldi	r19, 0x00	; 0
    546e:	40 e2       	ldi	r20, 0x20	; 32
    5470:	51 e4       	ldi	r21, 0x41	; 65
    5472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5476:	dc 01       	movw	r26, r24
    5478:	cb 01       	movw	r24, r22
    547a:	bc 01       	movw	r22, r24
    547c:	cd 01       	movw	r24, r26
    547e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5482:	dc 01       	movw	r26, r24
    5484:	cb 01       	movw	r24, r22
    5486:	9c 8b       	std	Y+20, r25	; 0x14
    5488:	8b 8b       	std	Y+19, r24	; 0x13
    548a:	0f c0       	rjmp	.+30     	; 0x54aa <main+0xfa0>
    548c:	80 e9       	ldi	r24, 0x90	; 144
    548e:	91 e0       	ldi	r25, 0x01	; 1
    5490:	9a 8b       	std	Y+18, r25	; 0x12
    5492:	89 8b       	std	Y+17, r24	; 0x11
    5494:	89 89       	ldd	r24, Y+17	; 0x11
    5496:	9a 89       	ldd	r25, Y+18	; 0x12
    5498:	01 97       	sbiw	r24, 0x01	; 1
    549a:	f1 f7       	brne	.-4      	; 0x5498 <main+0xf8e>
    549c:	9a 8b       	std	Y+18, r25	; 0x12
    549e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54a0:	8b 89       	ldd	r24, Y+19	; 0x13
    54a2:	9c 89       	ldd	r25, Y+20	; 0x14
    54a4:	01 97       	sbiw	r24, 0x01	; 1
    54a6:	9c 8b       	std	Y+20, r25	; 0x14
    54a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54aa:	8b 89       	ldd	r24, Y+19	; 0x13
    54ac:	9c 89       	ldd	r25, Y+20	; 0x14
    54ae:	00 97       	sbiw	r24, 0x00	; 0
    54b0:	69 f7       	brne	.-38     	; 0x548c <main+0xf82>
    54b2:	1b c0       	rjmp	.+54     	; 0x54ea <main+0xfe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54b4:	6d 89       	ldd	r22, Y+21	; 0x15
    54b6:	7e 89       	ldd	r23, Y+22	; 0x16
    54b8:	8f 89       	ldd	r24, Y+23	; 0x17
    54ba:	98 8d       	ldd	r25, Y+24	; 0x18
    54bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c0:	dc 01       	movw	r26, r24
    54c2:	cb 01       	movw	r24, r22
    54c4:	9c 8b       	std	Y+20, r25	; 0x14
    54c6:	8b 8b       	std	Y+19, r24	; 0x13
    54c8:	8b 89       	ldd	r24, Y+19	; 0x13
    54ca:	9c 89       	ldd	r25, Y+20	; 0x14
    54cc:	98 8b       	std	Y+16, r25	; 0x10
    54ce:	8f 87       	std	Y+15, r24	; 0x0f
    54d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    54d2:	98 89       	ldd	r25, Y+16	; 0x10
    54d4:	01 97       	sbiw	r24, 0x01	; 1
    54d6:	f1 f7       	brne	.-4      	; 0x54d4 <main+0xfca>
    54d8:	98 8b       	std	Y+16, r25	; 0x10
    54da:	8f 87       	std	Y+15, r24	; 0x0f
    54dc:	06 c0       	rjmp	.+12     	; 0x54ea <main+0xfe0>
		    _delay_ms(1000);
		}
		else
		{
			SPI_voidTransmitAsynchronous(0x36 , Act0);
    54de:	2c e5       	ldi	r18, 0x5C	; 92
    54e0:	32 e2       	ldi	r19, 0x22	; 34
    54e2:	86 e3       	ldi	r24, 0x36	; 54
    54e4:	b9 01       	movw	r22, r18
    54e6:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SPI_voidTransmitAsynchronous>
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	a0 e2       	ldi	r26, 0x20	; 32
    54f0:	b1 e4       	ldi	r27, 0x41	; 65
    54f2:	8b 87       	std	Y+11, r24	; 0x0b
    54f4:	9c 87       	std	Y+12, r25	; 0x0c
    54f6:	ad 87       	std	Y+13, r26	; 0x0d
    54f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    54fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    54fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5500:	9e 85       	ldd	r25, Y+14	; 0x0e
    5502:	20 e0       	ldi	r18, 0x00	; 0
    5504:	30 e0       	ldi	r19, 0x00	; 0
    5506:	4a e7       	ldi	r20, 0x7A	; 122
    5508:	55 e4       	ldi	r21, 0x45	; 69
    550a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    550e:	dc 01       	movw	r26, r24
    5510:	cb 01       	movw	r24, r22
    5512:	8f 83       	std	Y+7, r24	; 0x07
    5514:	98 87       	std	Y+8, r25	; 0x08
    5516:	a9 87       	std	Y+9, r26	; 0x09
    5518:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    551a:	6f 81       	ldd	r22, Y+7	; 0x07
    551c:	78 85       	ldd	r23, Y+8	; 0x08
    551e:	89 85       	ldd	r24, Y+9	; 0x09
    5520:	9a 85       	ldd	r25, Y+10	; 0x0a
    5522:	20 e0       	ldi	r18, 0x00	; 0
    5524:	30 e0       	ldi	r19, 0x00	; 0
    5526:	40 e8       	ldi	r20, 0x80	; 128
    5528:	5f e3       	ldi	r21, 0x3F	; 63
    552a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    552e:	88 23       	and	r24, r24
    5530:	2c f4       	brge	.+10     	; 0x553c <main+0x1032>
		__ticks = 1;
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	9e 83       	std	Y+6, r25	; 0x06
    5538:	8d 83       	std	Y+5, r24	; 0x05
    553a:	40 c0       	rjmp	.+128    	; 0x55bc <main+0x10b2>
	else if (__tmp > 65535)
    553c:	6f 81       	ldd	r22, Y+7	; 0x07
    553e:	78 85       	ldd	r23, Y+8	; 0x08
    5540:	89 85       	ldd	r24, Y+9	; 0x09
    5542:	9a 85       	ldd	r25, Y+10	; 0x0a
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	3f ef       	ldi	r19, 0xFF	; 255
    5548:	4f e7       	ldi	r20, 0x7F	; 127
    554a:	57 e4       	ldi	r21, 0x47	; 71
    554c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5550:	18 16       	cp	r1, r24
    5552:	54 f5       	brge	.+84     	; 0x55a8 <main+0x109e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5554:	6b 85       	ldd	r22, Y+11	; 0x0b
    5556:	7c 85       	ldd	r23, Y+12	; 0x0c
    5558:	8d 85       	ldd	r24, Y+13	; 0x0d
    555a:	9e 85       	ldd	r25, Y+14	; 0x0e
    555c:	20 e0       	ldi	r18, 0x00	; 0
    555e:	30 e0       	ldi	r19, 0x00	; 0
    5560:	40 e2       	ldi	r20, 0x20	; 32
    5562:	51 e4       	ldi	r21, 0x41	; 65
    5564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	bc 01       	movw	r22, r24
    556e:	cd 01       	movw	r24, r26
    5570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5574:	dc 01       	movw	r26, r24
    5576:	cb 01       	movw	r24, r22
    5578:	9e 83       	std	Y+6, r25	; 0x06
    557a:	8d 83       	std	Y+5, r24	; 0x05
    557c:	0f c0       	rjmp	.+30     	; 0x559c <main+0x1092>
    557e:	80 e9       	ldi	r24, 0x90	; 144
    5580:	91 e0       	ldi	r25, 0x01	; 1
    5582:	9c 83       	std	Y+4, r25	; 0x04
    5584:	8b 83       	std	Y+3, r24	; 0x03
    5586:	8b 81       	ldd	r24, Y+3	; 0x03
    5588:	9c 81       	ldd	r25, Y+4	; 0x04
    558a:	01 97       	sbiw	r24, 0x01	; 1
    558c:	f1 f7       	brne	.-4      	; 0x558a <main+0x1080>
    558e:	9c 83       	std	Y+4, r25	; 0x04
    5590:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5592:	8d 81       	ldd	r24, Y+5	; 0x05
    5594:	9e 81       	ldd	r25, Y+6	; 0x06
    5596:	01 97       	sbiw	r24, 0x01	; 1
    5598:	9e 83       	std	Y+6, r25	; 0x06
    559a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    559c:	8d 81       	ldd	r24, Y+5	; 0x05
    559e:	9e 81       	ldd	r25, Y+6	; 0x06
    55a0:	00 97       	sbiw	r24, 0x00	; 0
    55a2:	69 f7       	brne	.-38     	; 0x557e <main+0x1074>
    55a4:	0c 94 a0 22 	jmp	0x4540	; 0x4540 <main+0x36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55a8:	6f 81       	ldd	r22, Y+7	; 0x07
    55aa:	78 85       	ldd	r23, Y+8	; 0x08
    55ac:	89 85       	ldd	r24, Y+9	; 0x09
    55ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    55b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55b4:	dc 01       	movw	r26, r24
    55b6:	cb 01       	movw	r24, r22
    55b8:	9e 83       	std	Y+6, r25	; 0x06
    55ba:	8d 83       	std	Y+5, r24	; 0x05
    55bc:	8d 81       	ldd	r24, Y+5	; 0x05
    55be:	9e 81       	ldd	r25, Y+6	; 0x06
    55c0:	9a 83       	std	Y+2, r25	; 0x02
    55c2:	89 83       	std	Y+1, r24	; 0x01
    55c4:	89 81       	ldd	r24, Y+1	; 0x01
    55c6:	9a 81       	ldd	r25, Y+2	; 0x02
    55c8:	01 97       	sbiw	r24, 0x01	; 1
    55ca:	f1 f7       	brne	.-4      	; 0x55c8 <main+0x10be>
    55cc:	9a 83       	std	Y+2, r25	; 0x02
    55ce:	89 83       	std	Y+1, r24	; 0x01
    55d0:	0c 94 a0 22 	jmp	0x4540	; 0x4540 <main+0x36>

000055d4 <__udivmodhi4>:
    55d4:	aa 1b       	sub	r26, r26
    55d6:	bb 1b       	sub	r27, r27
    55d8:	51 e1       	ldi	r21, 0x11	; 17
    55da:	07 c0       	rjmp	.+14     	; 0x55ea <__udivmodhi4_ep>

000055dc <__udivmodhi4_loop>:
    55dc:	aa 1f       	adc	r26, r26
    55de:	bb 1f       	adc	r27, r27
    55e0:	a6 17       	cp	r26, r22
    55e2:	b7 07       	cpc	r27, r23
    55e4:	10 f0       	brcs	.+4      	; 0x55ea <__udivmodhi4_ep>
    55e6:	a6 1b       	sub	r26, r22
    55e8:	b7 0b       	sbc	r27, r23

000055ea <__udivmodhi4_ep>:
    55ea:	88 1f       	adc	r24, r24
    55ec:	99 1f       	adc	r25, r25
    55ee:	5a 95       	dec	r21
    55f0:	a9 f7       	brne	.-22     	; 0x55dc <__udivmodhi4_loop>
    55f2:	80 95       	com	r24
    55f4:	90 95       	com	r25
    55f6:	bc 01       	movw	r22, r24
    55f8:	cd 01       	movw	r24, r26
    55fa:	08 95       	ret

000055fc <__udivmodsi4>:
    55fc:	a1 e2       	ldi	r26, 0x21	; 33
    55fe:	1a 2e       	mov	r1, r26
    5600:	aa 1b       	sub	r26, r26
    5602:	bb 1b       	sub	r27, r27
    5604:	fd 01       	movw	r30, r26
    5606:	0d c0       	rjmp	.+26     	; 0x5622 <__udivmodsi4_ep>

00005608 <__udivmodsi4_loop>:
    5608:	aa 1f       	adc	r26, r26
    560a:	bb 1f       	adc	r27, r27
    560c:	ee 1f       	adc	r30, r30
    560e:	ff 1f       	adc	r31, r31
    5610:	a2 17       	cp	r26, r18
    5612:	b3 07       	cpc	r27, r19
    5614:	e4 07       	cpc	r30, r20
    5616:	f5 07       	cpc	r31, r21
    5618:	20 f0       	brcs	.+8      	; 0x5622 <__udivmodsi4_ep>
    561a:	a2 1b       	sub	r26, r18
    561c:	b3 0b       	sbc	r27, r19
    561e:	e4 0b       	sbc	r30, r20
    5620:	f5 0b       	sbc	r31, r21

00005622 <__udivmodsi4_ep>:
    5622:	66 1f       	adc	r22, r22
    5624:	77 1f       	adc	r23, r23
    5626:	88 1f       	adc	r24, r24
    5628:	99 1f       	adc	r25, r25
    562a:	1a 94       	dec	r1
    562c:	69 f7       	brne	.-38     	; 0x5608 <__udivmodsi4_loop>
    562e:	60 95       	com	r22
    5630:	70 95       	com	r23
    5632:	80 95       	com	r24
    5634:	90 95       	com	r25
    5636:	9b 01       	movw	r18, r22
    5638:	ac 01       	movw	r20, r24
    563a:	bd 01       	movw	r22, r26
    563c:	cf 01       	movw	r24, r30
    563e:	08 95       	ret

00005640 <__prologue_saves__>:
    5640:	2f 92       	push	r2
    5642:	3f 92       	push	r3
    5644:	4f 92       	push	r4
    5646:	5f 92       	push	r5
    5648:	6f 92       	push	r6
    564a:	7f 92       	push	r7
    564c:	8f 92       	push	r8
    564e:	9f 92       	push	r9
    5650:	af 92       	push	r10
    5652:	bf 92       	push	r11
    5654:	cf 92       	push	r12
    5656:	df 92       	push	r13
    5658:	ef 92       	push	r14
    565a:	ff 92       	push	r15
    565c:	0f 93       	push	r16
    565e:	1f 93       	push	r17
    5660:	cf 93       	push	r28
    5662:	df 93       	push	r29
    5664:	cd b7       	in	r28, 0x3d	; 61
    5666:	de b7       	in	r29, 0x3e	; 62
    5668:	ca 1b       	sub	r28, r26
    566a:	db 0b       	sbc	r29, r27
    566c:	0f b6       	in	r0, 0x3f	; 63
    566e:	f8 94       	cli
    5670:	de bf       	out	0x3e, r29	; 62
    5672:	0f be       	out	0x3f, r0	; 63
    5674:	cd bf       	out	0x3d, r28	; 61
    5676:	09 94       	ijmp

00005678 <__epilogue_restores__>:
    5678:	2a 88       	ldd	r2, Y+18	; 0x12
    567a:	39 88       	ldd	r3, Y+17	; 0x11
    567c:	48 88       	ldd	r4, Y+16	; 0x10
    567e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5680:	6e 84       	ldd	r6, Y+14	; 0x0e
    5682:	7d 84       	ldd	r7, Y+13	; 0x0d
    5684:	8c 84       	ldd	r8, Y+12	; 0x0c
    5686:	9b 84       	ldd	r9, Y+11	; 0x0b
    5688:	aa 84       	ldd	r10, Y+10	; 0x0a
    568a:	b9 84       	ldd	r11, Y+9	; 0x09
    568c:	c8 84       	ldd	r12, Y+8	; 0x08
    568e:	df 80       	ldd	r13, Y+7	; 0x07
    5690:	ee 80       	ldd	r14, Y+6	; 0x06
    5692:	fd 80       	ldd	r15, Y+5	; 0x05
    5694:	0c 81       	ldd	r16, Y+4	; 0x04
    5696:	1b 81       	ldd	r17, Y+3	; 0x03
    5698:	aa 81       	ldd	r26, Y+2	; 0x02
    569a:	b9 81       	ldd	r27, Y+1	; 0x01
    569c:	ce 0f       	add	r28, r30
    569e:	d1 1d       	adc	r29, r1
    56a0:	0f b6       	in	r0, 0x3f	; 63
    56a2:	f8 94       	cli
    56a4:	de bf       	out	0x3e, r29	; 62
    56a6:	0f be       	out	0x3f, r0	; 63
    56a8:	cd bf       	out	0x3d, r28	; 61
    56aa:	ed 01       	movw	r28, r26
    56ac:	08 95       	ret

000056ae <atoi>:
    56ae:	fc 01       	movw	r30, r24
    56b0:	88 27       	eor	r24, r24
    56b2:	99 27       	eor	r25, r25
    56b4:	e8 94       	clt
    56b6:	21 91       	ld	r18, Z+
    56b8:	20 32       	cpi	r18, 0x20	; 32
    56ba:	e9 f3       	breq	.-6      	; 0x56b6 <atoi+0x8>
    56bc:	29 30       	cpi	r18, 0x09	; 9
    56be:	10 f0       	brcs	.+4      	; 0x56c4 <atoi+0x16>
    56c0:	2e 30       	cpi	r18, 0x0E	; 14
    56c2:	c8 f3       	brcs	.-14     	; 0x56b6 <atoi+0x8>
    56c4:	2b 32       	cpi	r18, 0x2B	; 43
    56c6:	41 f0       	breq	.+16     	; 0x56d8 <atoi+0x2a>
    56c8:	2d 32       	cpi	r18, 0x2D	; 45
    56ca:	39 f4       	brne	.+14     	; 0x56da <atoi+0x2c>
    56cc:	68 94       	set
    56ce:	04 c0       	rjmp	.+8      	; 0x56d8 <atoi+0x2a>
    56d0:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__mulhi_const_10>
    56d4:	82 0f       	add	r24, r18
    56d6:	91 1d       	adc	r25, r1
    56d8:	21 91       	ld	r18, Z+
    56da:	20 53       	subi	r18, 0x30	; 48
    56dc:	2a 30       	cpi	r18, 0x0A	; 10
    56de:	c0 f3       	brcs	.-16     	; 0x56d0 <atoi+0x22>
    56e0:	1e f4       	brtc	.+6      	; 0x56e8 <atoi+0x3a>
    56e2:	90 95       	com	r25
    56e4:	81 95       	neg	r24
    56e6:	9f 4f       	sbci	r25, 0xFF	; 255
    56e8:	08 95       	ret

000056ea <__mulhi_const_10>:
    56ea:	7a e0       	ldi	r23, 0x0A	; 10
    56ec:	97 9f       	mul	r25, r23
    56ee:	90 2d       	mov	r25, r0
    56f0:	87 9f       	mul	r24, r23
    56f2:	80 2d       	mov	r24, r0
    56f4:	91 0d       	add	r25, r1
    56f6:	11 24       	eor	r1, r1
    56f8:	08 95       	ret

000056fa <_exit>:
    56fa:	f8 94       	cli

000056fc <__stop_program>:
    56fc:	ff cf       	rjmp	.-2      	; 0x56fc <__stop_program>
