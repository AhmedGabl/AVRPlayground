
HW_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  00003cda  00003d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008001ce  008001ce  00003edc  2**0
                  ALLOC
  3 .stab         00003b10  00000000  00000000  00003edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023c9  00000000  00000000  000079ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00009db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  00009f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  0000a1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000cacc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  0000e106  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000f484  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  0000f684  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  0000f98a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__vector_1>
       8:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__vector_2>
       c:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__vector_3>
      10:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_4>
      14:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_5>
      18:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__vector_10>
      2c:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 1c 	call	0x3950	; 0x3950 <main>
      8a:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e6       	ldi	r22, 0x62	; 98
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e6 59       	subi	r30, 0x96	; 150
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <WDT_voidEnable>:
 * Description: Enables the Watchdog Timer (WDT) with the specified overflow time.
 * Parameters:
 *   - copy_u8Time: Time for WDT overflow, should be one of the WDT_TIME_X_X_MS options.
 */
void WDT_voidEnable(u8 copy_u8Time)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <WDT_voidEnable+0x6>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8Time)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3b 83       	std	Y+3, r19	; 0x03
     f04:	2a 83       	std	Y+2, r18	; 0x02
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	91 05       	cpc	r25, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <WDT_voidEnable+0x24>
     f10:	71 c0       	rjmp	.+226    	; 0xff4 <WDT_voidEnable+0x106>
     f12:	2a 81       	ldd	r18, Y+2	; 0x02
     f14:	3b 81       	ldd	r19, Y+3	; 0x03
     f16:	25 30       	cpi	r18, 0x05	; 5
     f18:	31 05       	cpc	r19, r1
     f1a:	8c f4       	brge	.+34     	; 0xf3e <WDT_voidEnable+0x50>
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	91 05       	cpc	r25, r1
     f24:	d9 f1       	breq	.+118    	; 0xf9c <WDT_voidEnable+0xae>
     f26:	2a 81       	ldd	r18, Y+2	; 0x02
     f28:	3b 81       	ldd	r19, Y+3	; 0x03
     f2a:	23 30       	cpi	r18, 0x03	; 3
     f2c:	31 05       	cpc	r19, r1
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <WDT_voidEnable+0x44>
     f30:	4b c0       	rjmp	.+150    	; 0xfc8 <WDT_voidEnable+0xda>
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	d1 f0       	breq	.+52     	; 0xf70 <WDT_voidEnable+0x82>
     f3c:	c8 c0       	rjmp	.+400    	; 0x10ce <WDT_voidEnable+0x1e0>
     f3e:	2a 81       	ldd	r18, Y+2	; 0x02
     f40:	3b 81       	ldd	r19, Y+3	; 0x03
     f42:	26 30       	cpi	r18, 0x06	; 6
     f44:	31 05       	cpc	r19, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <WDT_voidEnable+0x5c>
     f48:	81 c0       	rjmp	.+258    	; 0x104c <WDT_voidEnable+0x15e>
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	86 30       	cpi	r24, 0x06	; 6
     f50:	91 05       	cpc	r25, r1
     f52:	0c f4       	brge	.+2      	; 0xf56 <WDT_voidEnable+0x68>
     f54:	65 c0       	rjmp	.+202    	; 0x1020 <WDT_voidEnable+0x132>
     f56:	2a 81       	ldd	r18, Y+2	; 0x02
     f58:	3b 81       	ldd	r19, Y+3	; 0x03
     f5a:	27 30       	cpi	r18, 0x07	; 7
     f5c:	31 05       	cpc	r19, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <WDT_voidEnable+0x74>
     f60:	8b c0       	rjmp	.+278    	; 0x1078 <WDT_voidEnable+0x18a>
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	9b 81       	ldd	r25, Y+3	; 0x03
     f66:	88 30       	cpi	r24, 0x08	; 8
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <WDT_voidEnable+0x80>
     f6c:	9b c0       	rjmp	.+310    	; 0x10a4 <WDT_voidEnable+0x1b6>
     f6e:	af c0       	rjmp	.+350    	; 0x10ce <WDT_voidEnable+0x1e0>
    {
    // Select overflow time as 16.3ms
    case WDT_TIME_16_3_MS:
        CLR_BIT(WDTCR, WDP0);
     f70:	a1 e4       	ldi	r26, 0x41	; 65
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e1 e4       	ldi	r30, 0x41	; 65
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8e 7f       	andi	r24, 0xFE	; 254
     f7c:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
     f7e:	a1 e4       	ldi	r26, 0x41	; 65
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e1 e4       	ldi	r30, 0x41	; 65
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8d 7f       	andi	r24, 0xFD	; 253
     f8a:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
     f8c:	a1 e4       	ldi	r26, 0x41	; 65
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e1 e4       	ldi	r30, 0x41	; 65
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8b 7f       	andi	r24, 0xFB	; 251
     f98:	8c 93       	st	X, r24
     f9a:	99 c0       	rjmp	.+306    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 32.5ms
    case WDT_TIME_32_5_MS:
        SET_BIT(WDTCR, WDP0);
     f9c:	a1 e4       	ldi	r26, 0x41	; 65
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e1 e4       	ldi	r30, 0x41	; 65
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	81 60       	ori	r24, 0x01	; 1
     fa8:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
     faa:	a1 e4       	ldi	r26, 0x41	; 65
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e1 e4       	ldi	r30, 0x41	; 65
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
     fb8:	a1 e4       	ldi	r26, 0x41	; 65
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e4       	ldi	r30, 0x41	; 65
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8b 7f       	andi	r24, 0xFB	; 251
     fc4:	8c 93       	st	X, r24
     fc6:	83 c0       	rjmp	.+262    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 65ms
    case WDT_TIME_65_MS:
        CLR_BIT(WDTCR, WDP0);
     fc8:	a1 e4       	ldi	r26, 0x41	; 65
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e4       	ldi	r30, 0x41	; 65
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
     fd6:	a1 e4       	ldi	r26, 0x41	; 65
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e1 e4       	ldi	r30, 0x41	; 65
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
     fe4:	a1 e4       	ldi	r26, 0x41	; 65
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e1 e4       	ldi	r30, 0x41	; 65
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8b 7f       	andi	r24, 0xFB	; 251
     ff0:	8c 93       	st	X, r24
     ff2:	6d c0       	rjmp	.+218    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.13s
    case WDT_TIME_0_13_S:
        SET_BIT(WDTCR, WDP0);
     ff4:	a1 e4       	ldi	r26, 0x41	; 65
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e1 e4       	ldi	r30, 0x41	; 65
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	81 60       	ori	r24, 0x01	; 1
    1000:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1002:	a1 e4       	ldi	r26, 0x41	; 65
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e1 e4       	ldi	r30, 0x41	; 65
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	82 60       	ori	r24, 0x02	; 2
    100e:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    1010:	a1 e4       	ldi	r26, 0x41	; 65
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e1 e4       	ldi	r30, 0x41	; 65
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8b 7f       	andi	r24, 0xFB	; 251
    101c:	8c 93       	st	X, r24
    101e:	57 c0       	rjmp	.+174    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.26s
    case WDT_TIME_0_26_S:
        CLR_BIT(WDTCR, WDP0);
    1020:	a1 e4       	ldi	r26, 0x41	; 65
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e1 e4       	ldi	r30, 0x41	; 65
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    102e:	a1 e4       	ldi	r26, 0x41	; 65
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e4       	ldi	r30, 0x41	; 65
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8d 7f       	andi	r24, 0xFD	; 253
    103a:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    103c:	a1 e4       	ldi	r26, 0x41	; 65
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e1 e4       	ldi	r30, 0x41	; 65
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	84 60       	ori	r24, 0x04	; 4
    1048:	8c 93       	st	X, r24
    104a:	41 c0       	rjmp	.+130    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.52s
    case WDT_TIME_0_52_S:
        SET_BIT(WDTCR, WDP0);
    104c:	a1 e4       	ldi	r26, 0x41	; 65
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e1 e4       	ldi	r30, 0x41	; 65
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    105a:	a1 e4       	ldi	r26, 0x41	; 65
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e1 e4       	ldi	r30, 0x41	; 65
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8d 7f       	andi	r24, 0xFD	; 253
    1066:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    1068:	a1 e4       	ldi	r26, 0x41	; 65
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e1 e4       	ldi	r30, 0x41	; 65
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	84 60       	ori	r24, 0x04	; 4
    1074:	8c 93       	st	X, r24
    1076:	2b c0       	rjmp	.+86     	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 1s
    case WDT_TIME_1_S:
        CLR_BIT(WDTCR, WDP0);
    1078:	a1 e4       	ldi	r26, 0x41	; 65
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e1 e4       	ldi	r30, 0x41	; 65
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8e 7f       	andi	r24, 0xFE	; 254
    1084:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1086:	a1 e4       	ldi	r26, 0x41	; 65
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e1 e4       	ldi	r30, 0x41	; 65
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    1094:	a1 e4       	ldi	r26, 0x41	; 65
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e1 e4       	ldi	r30, 0x41	; 65
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	8c 93       	st	X, r24
    10a2:	15 c0       	rjmp	.+42     	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 2.1s
    case WDT_TIME_2_1_S:
        SET_BIT(WDTCR, WDP0);
    10a4:	a1 e4       	ldi	r26, 0x41	; 65
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e1 e4       	ldi	r30, 0x41	; 65
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    10b2:	a1 e4       	ldi	r26, 0x41	; 65
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e4       	ldi	r30, 0x41	; 65
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    10c0:	a1 e4       	ldi	r26, 0x41	; 65
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e1 e4       	ldi	r30, 0x41	; 65
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	84 60       	ori	r24, 0x04	; 4
    10cc:	8c 93       	st	X, r24

    default:
        break;
    }
    //enable watch dog
    SET_BIT(WDTCR , WDE);
    10ce:	a1 e4       	ldi	r26, 0x41	; 65
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e1 e4       	ldi	r30, 0x41	; 65
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 60       	ori	r24, 0x08	; 8
    10da:	8c 93       	st	X, r24
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <WDT_voidDisable>:
/*
 * Function: WDT_voidDisable
 * Description: Disables the Watchdog Timer (WDT).
 */
void WDT_voidDisable(void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE) | (1<<WDE);
    10f0:	e1 e4       	ldi	r30, 0x41	; 65
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	88 e1       	ldi	r24, 0x18	; 24
    10f6:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
    10f8:	e1 e4       	ldi	r30, 0x41	; 65
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	10 82       	st	Z, r1
}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <TMR2_voidSetDelay_ms_usingCTC+0x6>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
    1112:	e3 e4       	ldi	r30, 0x43	; 67
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	89 ef       	ldi	r24, 0xF9	; 249
    1118:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	cc 01       	movw	r24, r24
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	80 93 d8 01 	sts	0x01D8, r24
    1128:	90 93 d9 01 	sts	0x01D9, r25
    112c:	a0 93 da 01 	sts	0x01DA, r26
    1130:	b0 93 db 01 	sts	0x01DB, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
#if TMR2_MODE == TMR2_FAST_PWM_MODE

	if ((100 >= copy_u8DutyCycle)) {
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	85 36       	cpi	r24, 0x65	; 101
    114e:	e0 f4       	brcc	.+56     	; 0x1188 <TMR2_voidSetDutyCycleForPWM+0x4a>
		OCR2 = 0;
		else
		OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;

#elif TMR2_PWM_MODE == TMR2_INVERTING
		copy_u8DutyCycle = 100 - copy_u8DutyCycle;
    1150:	94 e6       	ldi	r25, 0x64	; 100
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	29 2f       	mov	r18, r25
    1156:	28 1b       	sub	r18, r24
    1158:	82 2f       	mov	r24, r18
    115a:	89 83       	std	Y+1, r24	; 0x01
		if (copy_u8DutyCycle == 0)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	88 23       	and	r24, r24
    1160:	21 f4       	brne	.+8      	; 0x116a <TMR2_voidSetDutyCycleForPWM+0x2c>
			OCR2 = 0;
    1162:	e3 e4       	ldi	r30, 0x43	; 67
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	10 82       	st	Z, r1
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <TMR2_voidSetDutyCycleForPWM+0x4a>
		else
			OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;
    116a:	e3 e4       	ldi	r30, 0x43	; 67
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	98 2f       	mov	r25, r24
    1176:	88 27       	eor	r24, r24
    1178:	24 e6       	ldi	r18, 0x64	; 100
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	b9 01       	movw	r22, r18
    117e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__udivmodhi4>
    1182:	cb 01       	movw	r24, r22
    1184:	81 50       	subi	r24, 0x01	; 1
    1186:	80 83       	st	Z, r24
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);

#elif TMR2_MODE == TMR2_FAST_PWM_MODE
	// Select Fast PWM mode
	SET_BIT(TCCR2, WGM20);
    1198:	a5 e4       	ldi	r26, 0x45	; 69
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e5 e4       	ldi	r30, 0x45	; 69
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	80 64       	ori	r24, 0x40	; 64
    11a4:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
    11a6:	a5 e4       	ldi	r26, 0x45	; 69
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e4       	ldi	r30, 0x45	; 69
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	88 60       	ori	r24, 0x08	; 8
    11b2:	8c 93       	st	X, r24

#if TMR2_PWM_MODE == TMR2_INVERTING
	SET_BIT(TCCR2, COM20);
    11b4:	a5 e4       	ldi	r26, 0x45	; 69
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e4       	ldi	r30, 0x45	; 69
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 61       	ori	r24, 0x10	; 16
    11c0:	8c 93       	st	X, r24
	SET_BIT(TCCR2, COM21);
    11c2:	a5 e4       	ldi	r26, 0x45	; 69
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e5 e4       	ldi	r30, 0x45	; 69
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 62       	ori	r24, 0x20	; 32
    11ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    11de:	a5 e4       	ldi	r26, 0x45	; 69
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e4       	ldi	r30, 0x45	; 69
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    11ec:	a5 e4       	ldi	r26, 0x45	; 69
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e4       	ldi	r30, 0x45	; 69
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	82 60       	ori	r24, 0x02	; 2
    11f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    11fa:	a5 e4       	ldi	r26, 0x45	; 69
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e4       	ldi	r30, 0x45	; 69
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8b 7f       	andi	r24, 0xFB	; 251
    1206:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    1216:	a5 e4       	ldi	r26, 0x45	; 69
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e5 e4       	ldi	r30, 0x45	; 69
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8e 7f       	andi	r24, 0xFE	; 254
    1222:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    1224:	a5 e4       	ldi	r26, 0x45	; 69
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e4       	ldi	r30, 0x45	; 69
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8d 7f       	andi	r24, 0xFD	; 253
    1230:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    1232:	a5 e4       	ldi	r26, 0x45	; 69
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e4       	ldi	r30, 0x45	; 69
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8b 7f       	andi	r24, 0xFB	; 251
    123e:	8c 93       	st	X, r24
}
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <TMR2_voidSetCallBackOVF+0x6>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	31 f0       	breq	.+12     	; 0x1268 <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	90 93 cf 01 	sts	0x01CF, r25
    1264:	80 93 ce 01 	sts	0x01CE, r24
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <TMR2_voidSetCallBackCTC+0x6>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	31 f0       	breq	.+12     	; 0x1294 <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	90 93 d1 01 	sts	0x01D1, r25
    1290:	80 93 d0 01 	sts	0x01D0, r24
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    12c8:	80 91 d2 01 	lds	r24, 0x01D2
    12cc:	90 91 d3 01 	lds	r25, 0x01D3
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	90 93 d3 01 	sts	0x01D3, r25
    12d6:	80 93 d2 01 	sts	0x01D2, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    12da:	80 91 d2 01 	lds	r24, 0x01D2
    12de:	90 91 d3 01 	lds	r25, 0x01D3
    12e2:	23 e0       	ldi	r18, 0x03	; 3
    12e4:	81 3d       	cpi	r24, 0xD1	; 209
    12e6:	92 07       	cpc	r25, r18
    12e8:	99 f4       	brne	.+38     	; 0x1310 <__vector_5+0x72>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    12ea:	e4 e4       	ldi	r30, 0x44	; 68
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	81 e7       	ldi	r24, 0x71	; 113
    12f0:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    12f2:	10 92 d3 01 	sts	0x01D3, r1
    12f6:	10 92 d2 01 	sts	0x01D2, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    12fa:	80 91 ce 01 	lds	r24, 0x01CE
    12fe:	90 91 cf 01 	lds	r25, 0x01CF
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	29 f0       	breq	.+10     	; 0x1310 <__vector_5+0x72>
			TMR2_privatePtrToCAllBackOVF();
    1306:	e0 91 ce 01 	lds	r30, 0x01CE
    130a:	f0 91 cf 01 	lds	r31, 0x01CF
    130e:	09 95       	icall
		}
	}
}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1360:	80 91 d4 01 	lds	r24, 0x01D4
    1364:	90 91 d5 01 	lds	r25, 0x01D5
    1368:	a0 91 d6 01 	lds	r26, 0x01D6
    136c:	b0 91 d7 01 	lds	r27, 0x01D7
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	a1 1d       	adc	r26, r1
    1374:	b1 1d       	adc	r27, r1
    1376:	80 93 d4 01 	sts	0x01D4, r24
    137a:	90 93 d5 01 	sts	0x01D5, r25
    137e:	a0 93 d6 01 	sts	0x01D6, r26
    1382:	b0 93 d7 01 	sts	0x01D7, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1386:	20 91 d8 01 	lds	r18, 0x01D8
    138a:	30 91 d9 01 	lds	r19, 0x01D9
    138e:	40 91 da 01 	lds	r20, 0x01DA
    1392:	50 91 db 01 	lds	r21, 0x01DB
    1396:	80 91 d4 01 	lds	r24, 0x01D4
    139a:	90 91 d5 01 	lds	r25, 0x01D5
    139e:	a0 91 d6 01 	lds	r26, 0x01D6
    13a2:	b0 91 d7 01 	lds	r27, 0x01D7
    13a6:	28 17       	cp	r18, r24
    13a8:	39 07       	cpc	r19, r25
    13aa:	4a 07       	cpc	r20, r26
    13ac:	5b 07       	cpc	r21, r27
    13ae:	99 f4       	brne	.+38     	; 0x13d6 <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    13b0:	10 92 d4 01 	sts	0x01D4, r1
    13b4:	10 92 d5 01 	sts	0x01D5, r1
    13b8:	10 92 d6 01 	sts	0x01D6, r1
    13bc:	10 92 d7 01 	sts	0x01D7, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    13c0:	80 91 d0 01 	lds	r24, 0x01D0
    13c4:	90 91 d1 01 	lds	r25, 0x01D1
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    13cc:	e0 91 d0 01 	lds	r30, 0x01D0
    13d0:	f0 91 d1 01 	lds	r31, 0x01D1
    13d4:	09 95       	icall
		}
	}
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    1408:	e3 e4       	ldi	r30, 0x43	; 67
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	80 83       	st	Z, r24
}
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    142a:	06 e4       	ldi	r16, 0x46	; 70
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	9c 01       	movw	r18, r24
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	80 e9       	ldi	r24, 0x90	; 144
    143a:	90 ed       	ldi	r25, 0xD0	; 208
    143c:	a3 e0       	ldi	r26, 0x03	; 3
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__udivmodsi4>
    1448:	da 01       	movw	r26, r20
    144a:	c9 01       	movw	r24, r18
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f8 01       	movw	r30, r16
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    146c:	00 d0       	rcall	.+0      	; 0x146e <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	69 83       	std	Y+1, r22	; 0x01
    1474:	7a 83       	std	Y+2, r23	; 0x02
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    147a:	69 81       	ldd	r22, Y+1	; 0x01
    147c:	7a 81       	ldd	r23, Y+2	; 0x02
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	48 ec       	ldi	r20, 0xC8	; 200
    1488:	52 e4       	ldi	r21, 0x42	; 66
    148a:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    148e:	18 16       	cp	r1, r24
    1490:	0c f4       	brge	.+2      	; 0x1494 <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    1492:	48 c0       	rjmp	.+144    	; 0x1524 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    1494:	69 81       	ldd	r22, Y+1	; 0x01
    1496:	7a 81       	ldd	r23, Y+2	; 0x02
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    14a8:	88 23       	and	r24, r24
    14aa:	29 f4       	brne	.+10     	; 0x14b6 <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    14ac:	ea e4       	ldi	r30, 0x4A	; 74
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	11 82       	std	Z+1, r1	; 0x01
    14b2:	10 82       	st	Z, r1
    14b4:	37 c0       	rjmp	.+110    	; 0x1524 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    14b6:	0a e4       	ldi	r16, 0x4A	; 74
    14b8:	10 e0       	ldi	r17, 0x00	; 0
    14ba:	e6 e4       	ldi	r30, 0x46	; 70
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	cc 01       	movw	r24, r24
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	29 81       	ldd	r18, Y+1	; 0x01
    14dc:	3a 81       	ldd	r19, Y+2	; 0x02
    14de:	4b 81       	ldd	r20, Y+3	; 0x03
    14e0:	5c 81       	ldd	r21, Y+4	; 0x04
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	48 ec       	ldi	r20, 0xC8	; 200
    14f4:	52 e4       	ldi	r21, 0x42	; 66
    14f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	f8 01       	movw	r30, r16
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	08 95       	ret

00001536 <TMR1_voidInit>:


void TMR1_voidInit(void) {
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    153e:	af e4       	ldi	r26, 0x4F	; 79
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ef e4       	ldi	r30, 0x4F	; 79
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8e 7f       	andi	r24, 0xFE	; 254
    154a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    154c:	af e4       	ldi	r26, 0x4F	; 79
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ef e4       	ldi	r30, 0x4F	; 79
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	82 60       	ori	r24, 0x02	; 2
    1558:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    155a:	ae e4       	ldi	r26, 0x4E	; 78
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ee e4       	ldi	r30, 0x4E	; 78
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 60       	ori	r24, 0x08	; 8
    1566:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1568:	ae e4       	ldi	r26, 0x4E	; 78
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ee e4       	ldi	r30, 0x4E	; 78
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 61       	ori	r24, 0x10	; 16
    1574:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    1576:	af e4       	ldi	r26, 0x4F	; 79
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	ef e4       	ldi	r30, 0x4F	; 79
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8f 7b       	andi	r24, 0xBF	; 191
    1582:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1584:	af e4       	ldi	r26, 0x4F	; 79
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	ef e4       	ldi	r30, 0x4F	; 79
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 68       	ori	r24, 0x80	; 128
    1590:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
#endif
	//TMR1_voidSetFrequencyMode14FastPWM(50);

#endif
}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <TMR1_voidSetCompareMatchValueA+0x6>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    15a6:	ea e4       	ldi	r30, 0x4A	; 74
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    15c4:	ae e4       	ldi	r26, 0x4E	; 78
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	ee e4       	ldi	r30, 0x4E	; 78
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	81 60       	ori	r24, 0x01	; 1
    15d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    15d2:	ae e4       	ldi	r26, 0x4E	; 78
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ee e4       	ldi	r30, 0x4E	; 78
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	82 60       	ori	r24, 0x02	; 2
    15de:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    15e0:	ae e4       	ldi	r26, 0x4E	; 78
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ee e4       	ldi	r30, 0x4E	; 78
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8b 7f       	andi	r24, 0xFB	; 251
    15ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    15fc:	ae e4       	ldi	r26, 0x4E	; 78
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ee e4       	ldi	r30, 0x4E	; 78
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8e 7f       	andi	r24, 0xFE	; 254
    1608:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    160a:	ae e4       	ldi	r26, 0x4E	; 78
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ee e4       	ldi	r30, 0x4E	; 78
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8d 7f       	andi	r24, 0xFD	; 253
    1616:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    1618:	ae e4       	ldi	r26, 0x4E	; 78
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ee e4       	ldi	r30, 0x4E	; 78
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8b 7f       	andi	r24, 0xFB	; 251
    1624:	8c 93       	st	X, r24
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    163a:	ec e5       	ldi	r30, 0x5C	; 92
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	89 ef       	ldi	r24, 0xF9	; 249
    1640:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	cc 01       	movw	r24, r24
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	80 93 e6 01 	sts	0x01E6, r24
    1650:	90 93 e7 01 	sts	0x01E7, r25
    1654:	a0 93 e8 01 	sts	0x01E8, r26
    1658:	b0 93 e9 01 	sts	0x01E9, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	85 36       	cpi	r24, 0x65	; 101
    1676:	d0 f4       	brcc	.+52     	; 0x16ac <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    1678:	ec e5       	ldi	r30, 0x5C	; 92
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	48 2f       	mov	r20, r24
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	ca 01       	movw	r24, r20
    1684:	9c 01       	movw	r18, r24
    1686:	22 0f       	add	r18, r18
    1688:	33 1f       	adc	r19, r19
    168a:	c9 01       	movw	r24, r18
    168c:	96 95       	lsr	r25
    168e:	98 2f       	mov	r25, r24
    1690:	88 27       	eor	r24, r24
    1692:	97 95       	ror	r25
    1694:	87 95       	ror	r24
    1696:	82 1b       	sub	r24, r18
    1698:	93 0b       	sbc	r25, r19
    169a:	84 0f       	add	r24, r20
    169c:	95 1f       	adc	r25, r21
    169e:	24 e6       	ldi	r18, 0x64	; 100
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	b9 01       	movw	r22, r18
    16a4:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__udivmodhi4>
    16a8:	cb 01       	movw	r24, r22
    16aa:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    16bc:	a3 e5       	ldi	r26, 0x53	; 83
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e3 e5       	ldi	r30, 0x53	; 83
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 64       	ori	r24, 0x40	; 64
    16c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    16ca:	a3 e5       	ldi	r26, 0x53	; 83
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e3 e5       	ldi	r30, 0x53	; 83
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	87 7f       	andi	r24, 0xF7	; 247
    16d6:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    16d8:	a3 e5       	ldi	r26, 0x53	; 83
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e3 e5       	ldi	r30, 0x53	; 83
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7e       	andi	r24, 0xEF	; 239
    16e4:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    16e6:	a3 e5       	ldi	r26, 0x53	; 83
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e3 e5       	ldi	r30, 0x53	; 83
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 62       	ori	r24, 0x20	; 32
    16f2:	8c 93       	st	X, r24
#endif

#endif
}
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    1702:	a3 e5       	ldi	r26, 0x53	; 83
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e3 e5       	ldi	r30, 0x53	; 83
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	81 60       	ori	r24, 0x01	; 1
    170e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1710:	a3 e5       	ldi	r26, 0x53	; 83
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e3 e5       	ldi	r30, 0x53	; 83
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	82 60       	ori	r24, 0x02	; 2
    171c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    171e:	a3 e5       	ldi	r26, 0x53	; 83
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e3 e5       	ldi	r30, 0x53	; 83
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8b 7f       	andi	r24, 0xFB	; 251
    172a:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    173a:	a3 e5       	ldi	r26, 0x53	; 83
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 e5       	ldi	r30, 0x53	; 83
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1748:	a3 e5       	ldi	r26, 0x53	; 83
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e3 e5       	ldi	r30, 0x53	; 83
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8d 7f       	andi	r24, 0xFD	; 253
    1754:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1756:	a3 e5       	ldi	r26, 0x53	; 83
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e3 e5       	ldi	r30, 0x53	; 83
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8b 7f       	andi	r24, 0xFB	; 251
    1762:	8c 93       	st	X, r24
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <TMR0_voidSetCallBackOVF+0x6>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	31 f0       	breq	.+12     	; 0x178c <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	90 93 dd 01 	sts	0x01DD, r25
    1788:	80 93 dc 01 	sts	0x01DC, r24
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <TMR0_voidSetCallBackCTC+0x6>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	31 f0       	breq	.+12     	; 0x17b8 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	90 93 df 01 	sts	0x01DF, r25
    17b4:	80 93 de 01 	sts	0x01DE, r24
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    17ec:	80 91 e0 01 	lds	r24, 0x01E0
    17f0:	90 91 e1 01 	lds	r25, 0x01E1
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	90 93 e1 01 	sts	0x01E1, r25
    17fa:	80 93 e0 01 	sts	0x01E0, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    17fe:	80 91 e0 01 	lds	r24, 0x01E0
    1802:	90 91 e1 01 	lds	r25, 0x01E1
    1806:	23 e0       	ldi	r18, 0x03	; 3
    1808:	81 3d       	cpi	r24, 0xD1	; 209
    180a:	92 07       	cpc	r25, r18
    180c:	99 f4       	brne	.+38     	; 0x1834 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    180e:	e2 e5       	ldi	r30, 0x52	; 82
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	81 e7       	ldi	r24, 0x71	; 113
    1814:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    1816:	10 92 e1 01 	sts	0x01E1, r1
    181a:	10 92 e0 01 	sts	0x01E0, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    181e:	80 91 dc 01 	lds	r24, 0x01DC
    1822:	90 91 dd 01 	lds	r25, 0x01DD
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	29 f0       	breq	.+10     	; 0x1834 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    182a:	e0 91 dc 01 	lds	r30, 0x01DC
    182e:	f0 91 dd 01 	lds	r31, 0x01DD
    1832:	09 95       	icall
		}
	}
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    185a:	1f 92       	push	r1
    185c:	0f 92       	push	r0
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	0f 92       	push	r0
    1862:	11 24       	eor	r1, r1
    1864:	2f 93       	push	r18
    1866:	3f 93       	push	r19
    1868:	4f 93       	push	r20
    186a:	5f 93       	push	r21
    186c:	6f 93       	push	r22
    186e:	7f 93       	push	r23
    1870:	8f 93       	push	r24
    1872:	9f 93       	push	r25
    1874:	af 93       	push	r26
    1876:	bf 93       	push	r27
    1878:	ef 93       	push	r30
    187a:	ff 93       	push	r31
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1884:	80 91 e2 01 	lds	r24, 0x01E2
    1888:	90 91 e3 01 	lds	r25, 0x01E3
    188c:	a0 91 e4 01 	lds	r26, 0x01E4
    1890:	b0 91 e5 01 	lds	r27, 0x01E5
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	a1 1d       	adc	r26, r1
    1898:	b1 1d       	adc	r27, r1
    189a:	80 93 e2 01 	sts	0x01E2, r24
    189e:	90 93 e3 01 	sts	0x01E3, r25
    18a2:	a0 93 e4 01 	sts	0x01E4, r26
    18a6:	b0 93 e5 01 	sts	0x01E5, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    18aa:	20 91 e6 01 	lds	r18, 0x01E6
    18ae:	30 91 e7 01 	lds	r19, 0x01E7
    18b2:	40 91 e8 01 	lds	r20, 0x01E8
    18b6:	50 91 e9 01 	lds	r21, 0x01E9
    18ba:	80 91 e2 01 	lds	r24, 0x01E2
    18be:	90 91 e3 01 	lds	r25, 0x01E3
    18c2:	a0 91 e4 01 	lds	r26, 0x01E4
    18c6:	b0 91 e5 01 	lds	r27, 0x01E5
    18ca:	28 17       	cp	r18, r24
    18cc:	39 07       	cpc	r19, r25
    18ce:	4a 07       	cpc	r20, r26
    18d0:	5b 07       	cpc	r21, r27
    18d2:	99 f4       	brne	.+38     	; 0x18fa <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    18d4:	10 92 e2 01 	sts	0x01E2, r1
    18d8:	10 92 e3 01 	sts	0x01E3, r1
    18dc:	10 92 e4 01 	sts	0x01E4, r1
    18e0:	10 92 e5 01 	sts	0x01E5, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    18e4:	80 91 de 01 	lds	r24, 0x01DE
    18e8:	90 91 df 01 	lds	r25, 0x01DF
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	29 f0       	breq	.+10     	; 0x18fa <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    18f0:	e0 91 de 01 	lds	r30, 0x01DE
    18f4:	f0 91 df 01 	lds	r31, 0x01DF
    18f8:	09 95       	icall
		}
	}
}
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	ff 91       	pop	r31
    1900:	ef 91       	pop	r30
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	7f 91       	pop	r23
    190c:	6f 91       	pop	r22
    190e:	5f 91       	pop	r21
    1910:	4f 91       	pop	r20
    1912:	3f 91       	pop	r19
    1914:	2f 91       	pop	r18
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	0f 90       	pop	r0
    191c:	1f 90       	pop	r1
    191e:	18 95       	reti

00001920 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	0f 92       	push	r0
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    192c:	ec e5       	ldi	r30, 0x5C	; 92
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	80 83       	st	Z, r24
}
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <Port_Init+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <Port_Init+0x8>
    1944:	00 d0       	rcall	.+0      	; 0x1946 <Port_Init+0xa>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	9c 83       	std	Y+4, r25	; 0x04
    194c:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    194e:	1a 82       	std	Y+2, r1	; 0x02
    1950:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
    1952:	1a 82       	std	Y+2, r1	; 0x02
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	ea c1       	rjmp	.+980    	; 0x1d2c <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    1958:	29 81       	ldd	r18, Y+1	; 0x01
    195a:	3a 81       	ldd	r19, Y+2	; 0x02
    195c:	c9 01       	movw	r24, r18
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	28 0f       	add	r18, r24
    1964:	39 1f       	adc	r19, r25
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	fc 01       	movw	r30, r24
    196c:	e2 0f       	add	r30, r18
    196e:	f3 1f       	adc	r31, r19
    1970:	80 81       	ld	r24, Z
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3e 83       	std	Y+6, r19	; 0x06
    1978:	2d 83       	std	Y+5, r18	; 0x05
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	9e 81       	ldd	r25, Y+6	; 0x06
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	09 f4       	brne	.+2      	; 0x1986 <Port_Init+0x4a>
    1984:	85 c0       	rjmp	.+266    	; 0x1a90 <Port_Init+0x154>
    1986:	2d 81       	ldd	r18, Y+5	; 0x05
    1988:	3e 81       	ldd	r19, Y+6	; 0x06
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <Port_Init+0x5e>
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	71 f0       	breq	.+28     	; 0x19b4 <Port_Init+0x78>
    1998:	c4 c1       	rjmp	.+904    	; 0x1d22 <Port_Init+0x3e6>
    199a:	2d 81       	ldd	r18, Y+5	; 0x05
    199c:	3e 81       	ldd	r19, Y+6	; 0x06
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <Port_Init+0x6a>
    19a4:	e3 c0       	rjmp	.+454    	; 0x1b6c <Port_Init+0x230>
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <Port_Init+0x76>
    19b0:	4b c1       	rjmp	.+662    	; 0x1c48 <Port_Init+0x30c>
    19b2:	b7 c1       	rjmp	.+878    	; 0x1d22 <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    19b4:	29 81       	ldd	r18, Y+1	; 0x01
    19b6:	3a 81       	ldd	r19, Y+2	; 0x02
    19b8:	c9 01       	movw	r24, r18
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	28 0f       	add	r18, r24
    19c0:	39 1f       	adc	r19, r25
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	fc 01       	movw	r30, r24
    19c8:	e2 0f       	add	r30, r18
    19ca:	f3 1f       	adc	r31, r19
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	01 f5       	brne	.+64     	; 0x1a12 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    19d2:	aa e3       	ldi	r26, 0x3A	; 58
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ea e3       	ldi	r30, 0x3A	; 58
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	29 81       	ldd	r18, Y+1	; 0x01
    19e0:	3a 81       	ldd	r19, Y+2	; 0x02
    19e2:	c9 01       	movw	r24, r18
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	28 0f       	add	r18, r24
    19ea:	39 1f       	adc	r19, r25
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	fc 01       	movw	r30, r24
    19f2:	e2 0f       	add	r30, r18
    19f4:	f3 1f       	adc	r31, r19
    19f6:	81 81       	ldd	r24, Z+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <Port_Init+0xcc>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <Port_Init+0xc8>
    1a0c:	84 2b       	or	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	88 c1       	rjmp	.+784    	; 0x1d22 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1a12:	aa e3       	ldi	r26, 0x3A	; 58
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ea e3       	ldi	r30, 0x3A	; 58
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	c9 01       	movw	r24, r18
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	28 0f       	add	r18, r24
    1a2a:	39 1f       	adc	r19, r25
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	fc 01       	movw	r30, r24
    1a32:	e2 0f       	add	r30, r18
    1a34:	f3 1f       	adc	r31, r19
    1a36:	81 81       	ldd	r24, Z+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <Port_Init+0x10a>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	2a 95       	dec	r18
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <Port_Init+0x106>
    1a4a:	80 95       	com	r24
    1a4c:	84 23       	and	r24, r20
    1a4e:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
    1a50:	ab e3       	ldi	r26, 0x3B	; 59
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	eb e3       	ldi	r30, 0x3B	; 59
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	29 81       	ldd	r18, Y+1	; 0x01
    1a5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a60:	c9 01       	movw	r24, r18
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	28 0f       	add	r18, r24
    1a68:	39 1f       	adc	r19, r25
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	fc 01       	movw	r30, r24
    1a70:	e2 0f       	add	r30, r18
    1a72:	f3 1f       	adc	r31, r19
    1a74:	81 81       	ldd	r24, Z+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <Port_Init+0x14a>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <Port_Init+0x146>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	49 c1       	rjmp	.+658    	; 0x1d22 <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1a90:	29 81       	ldd	r18, Y+1	; 0x01
    1a92:	3a 81       	ldd	r19, Y+2	; 0x02
    1a94:	c9 01       	movw	r24, r18
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	28 0f       	add	r18, r24
    1a9c:	39 1f       	adc	r19, r25
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	e2 0f       	add	r30, r18
    1aa6:	f3 1f       	adc	r31, r19
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	01 f5       	brne	.+64     	; 0x1aee <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
    1aae:	a7 e3       	ldi	r26, 0x37	; 55
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e7 e3       	ldi	r30, 0x37	; 55
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	29 81       	ldd	r18, Y+1	; 0x01
    1abc:	3a 81       	ldd	r19, Y+2	; 0x02
    1abe:	c9 01       	movw	r24, r18
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	28 0f       	add	r18, r24
    1ac6:	39 1f       	adc	r19, r25
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	fc 01       	movw	r30, r24
    1ace:	e2 0f       	add	r30, r18
    1ad0:	f3 1f       	adc	r31, r19
    1ad2:	81 81       	ldd	r24, Z+1	; 0x01
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <Port_Init+0x1a8>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <Port_Init+0x1a4>
    1ae8:	84 2b       	or	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	1a c1       	rjmp	.+564    	; 0x1d22 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1aee:	a7 e3       	ldi	r26, 0x37	; 55
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e7 e3       	ldi	r30, 0x37	; 55
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	48 2f       	mov	r20, r24
    1afa:	29 81       	ldd	r18, Y+1	; 0x01
    1afc:	3a 81       	ldd	r19, Y+2	; 0x02
    1afe:	c9 01       	movw	r24, r18
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	28 0f       	add	r18, r24
    1b06:	39 1f       	adc	r19, r25
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e2 0f       	add	r30, r18
    1b10:	f3 1f       	adc	r31, r19
    1b12:	81 81       	ldd	r24, Z+1	; 0x01
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <Port_Init+0x1e6>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	2a 95       	dec	r18
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <Port_Init+0x1e2>
    1b26:	80 95       	com	r24
    1b28:	84 23       	and	r24, r20
    1b2a:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    1b2c:	a8 e3       	ldi	r26, 0x38	; 56
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e8 e3       	ldi	r30, 0x38	; 56
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	29 81       	ldd	r18, Y+1	; 0x01
    1b3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b3c:	c9 01       	movw	r24, r18
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	28 0f       	add	r18, r24
    1b44:	39 1f       	adc	r19, r25
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	e2 0f       	add	r30, r18
    1b4e:	f3 1f       	adc	r31, r19
    1b50:	81 81       	ldd	r24, Z+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <Port_Init+0x226>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <Port_Init+0x222>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	db c0       	rjmp	.+438    	; 0x1d22 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1b6c:	29 81       	ldd	r18, Y+1	; 0x01
    1b6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b70:	c9 01       	movw	r24, r18
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	28 0f       	add	r18, r24
    1b78:	39 1f       	adc	r19, r25
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e2 0f       	add	r30, r18
    1b82:	f3 1f       	adc	r31, r19
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	01 f5       	brne	.+64     	; 0x1bca <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1b8a:	a4 e3       	ldi	r26, 0x34	; 52
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e4 e3       	ldi	r30, 0x34	; 52
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	29 81       	ldd	r18, Y+1	; 0x01
    1b98:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9a:	c9 01       	movw	r24, r18
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	28 0f       	add	r18, r24
    1ba2:	39 1f       	adc	r19, r25
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	fc 01       	movw	r30, r24
    1baa:	e2 0f       	add	r30, r18
    1bac:	f3 1f       	adc	r31, r19
    1bae:	81 81       	ldd	r24, Z+1	; 0x01
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <Port_Init+0x284>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <Port_Init+0x280>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	ac c0       	rjmp	.+344    	; 0x1d22 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1bca:	a4 e3       	ldi	r26, 0x34	; 52
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e4 e3       	ldi	r30, 0x34	; 52
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	29 81       	ldd	r18, Y+1	; 0x01
    1bd8:	3a 81       	ldd	r19, Y+2	; 0x02
    1bda:	c9 01       	movw	r24, r18
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	28 0f       	add	r18, r24
    1be2:	39 1f       	adc	r19, r25
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	fc 01       	movw	r30, r24
    1bea:	e2 0f       	add	r30, r18
    1bec:	f3 1f       	adc	r31, r19
    1bee:	81 81       	ldd	r24, Z+1	; 0x01
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <Port_Init+0x2c2>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	2a 95       	dec	r18
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <Port_Init+0x2be>
    1c02:	80 95       	com	r24
    1c04:	84 23       	and	r24, r20
    1c06:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    1c08:	a5 e3       	ldi	r26, 0x35	; 53
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e3       	ldi	r30, 0x35	; 53
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	29 81       	ldd	r18, Y+1	; 0x01
    1c16:	3a 81       	ldd	r19, Y+2	; 0x02
    1c18:	c9 01       	movw	r24, r18
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	28 0f       	add	r18, r24
    1c20:	39 1f       	adc	r19, r25
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	fc 01       	movw	r30, r24
    1c28:	e2 0f       	add	r30, r18
    1c2a:	f3 1f       	adc	r31, r19
    1c2c:	81 81       	ldd	r24, Z+1	; 0x01
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <Port_Init+0x302>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <Port_Init+0x2fe>
    1c42:	84 2b       	or	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	6d c0       	rjmp	.+218    	; 0x1d22 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1c48:	29 81       	ldd	r18, Y+1	; 0x01
    1c4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c4c:	c9 01       	movw	r24, r18
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	28 0f       	add	r18, r24
    1c54:	39 1f       	adc	r19, r25
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e2 0f       	add	r30, r18
    1c5e:	f3 1f       	adc	r31, r19
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	01 f5       	brne	.+64     	; 0x1ca6 <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1c66:	a1 e3       	ldi	r26, 0x31	; 49
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e1 e3       	ldi	r30, 0x31	; 49
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	29 81       	ldd	r18, Y+1	; 0x01
    1c74:	3a 81       	ldd	r19, Y+2	; 0x02
    1c76:	c9 01       	movw	r24, r18
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	28 0f       	add	r18, r24
    1c7e:	39 1f       	adc	r19, r25
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	81 81       	ldd	r24, Z+1	; 0x01
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <Port_Init+0x360>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <Port_Init+0x35c>
    1ca0:	84 2b       	or	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	3e c0       	rjmp	.+124    	; 0x1d22 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1ca6:	a1 e3       	ldi	r26, 0x31	; 49
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e1 e3       	ldi	r30, 0x31	; 49
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	28 0f       	add	r18, r24
    1cbe:	39 1f       	adc	r19, r25
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e2 0f       	add	r30, r18
    1cc8:	f3 1f       	adc	r31, r19
    1cca:	81 81       	ldd	r24, Z+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <Port_Init+0x39e>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	2a 95       	dec	r18
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <Port_Init+0x39a>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    1ce4:	a2 e3       	ldi	r26, 0x32	; 50
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e2 e3       	ldi	r30, 0x32	; 50
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	29 81       	ldd	r18, Y+1	; 0x01
    1cf2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf4:	c9 01       	movw	r24, r18
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	28 0f       	add	r18, r24
    1cfc:	39 1f       	adc	r19, r25
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	81 81       	ldd	r24, Z+1	; 0x01
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <Port_Init+0x3de>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <Port_Init+0x3da>
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	80 32       	cpi	r24, 0x20	; 32
    1d32:	91 05       	cpc	r25, r1
    1d34:	0c f4       	brge	.+2      	; 0x1d38 <Port_Init+0x3fc>
    1d36:	10 ce       	rjmp	.-992    	; 0x1958 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    1d38:	26 96       	adiw	r28, 0x06	; 6
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <ICU_voidInit>:
#include "../../../utils/STD_TYPES.h"

volatile static u16 Private_u16OnPeriod;
volatile static u16 Private_u16OffPeriod;

void ICU_voidInit(void) {
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62

    // Select mode = Normal mode
    CLR_BIT(TCCR1A, WGM10);
    1d52:	af e4       	ldi	r26, 0x4F	; 79
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ef e4       	ldi	r30, 0x4F	; 79
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8e 7f       	andi	r24, 0xFE	; 254
    1d5e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A, WGM11);
    1d60:	af e4       	ldi	r26, 0x4F	; 79
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	ef e4       	ldi	r30, 0x4F	; 79
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	8d 7f       	andi	r24, 0xFD	; 253
    1d6c:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, WGM12);
    1d6e:	ae e4       	ldi	r26, 0x4E	; 78
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ee e4       	ldi	r30, 0x4E	; 78
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	87 7f       	andi	r24, 0xF7	; 247
    1d7a:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, WGM13);
    1d7c:	ae e4       	ldi	r26, 0x4E	; 78
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ee e4       	ldi	r30, 0x4E	; 78
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 7e       	andi	r24, 0xEF	; 239
    1d88:	8c 93       	st	X, r24
#if ICU_STARTING_EDGE == ICU_RISING_EDGE
    // Select ICU Edge RISING edge
    SET_BIT(TCCR1B, ICES1);
#else
    // Select ICU Edge falling edge
    CLR_BIT(TCCR1B, ICES1);
    1d8a:	ae e4       	ldi	r26, 0x4E	; 78
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ee e4       	ldi	r30, 0x4E	; 78
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8f 7b       	andi	r24, 0xBF	; 191
    1d96:	8c 93       	st	X, r24
#endif

    // Enable interrupt
    SET_BIT(TIMSK, TICIE1);
    1d98:	a9 e5       	ldi	r26, 0x59	; 89
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e9 e5       	ldi	r30, 0x59	; 89
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 62       	ori	r24, 0x20	; 32
    1da4:	8c 93       	st	X, r24

    // Select Prescaler Value = 64
    SET_BIT(TCCR1B, CS10);
    1da6:	ae e4       	ldi	r26, 0x4E	; 78
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ee e4       	ldi	r30, 0x4E	; 78
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	81 60       	ori	r24, 0x01	; 1
    1db2:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, CS11);
    1db4:	ae e4       	ldi	r26, 0x4E	; 78
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	ee e4       	ldi	r30, 0x4E	; 78
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 60       	ori	r24, 0x02	; 2
    1dc0:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, CS12);
    1dc2:	ae e4       	ldi	r26, 0x4E	; 78
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	ee e4       	ldi	r30, 0x4E	; 78
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8b 7f       	andi	r24, 0xFB	; 251
    1dce:	8c 93       	st	X, r24
}
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <ICU_voidGetDutyCycle>:

void ICU_voidGetDutyCycle(u8* copy_pu8Duty) {
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <ICU_voidGetDutyCycle+0xe>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01
    if (copy_pu8Duty != NULL) {
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	39 f1       	breq	.+78     	; 0x1e42 <ICU_voidGetDutyCycle+0x6c>
  //  	LCD_PutString(" D ");
        *copy_pu8Duty = ((u32) Private_u16OnPeriod * 100) / (Private_u16OnPeriod + Private_u16OffPeriod);
    1df4:	80 91 ee 01 	lds	r24, 0x01EE
    1df8:	90 91 ef 01 	lds	r25, 0x01EF
    1dfc:	cc 01       	movw	r24, r24
    1dfe:	a0 e0       	ldi	r26, 0x00	; 0
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	24 e6       	ldi	r18, 0x64	; 100
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__mulsi3>
    1e12:	7b 01       	movw	r14, r22
    1e14:	8c 01       	movw	r16, r24
    1e16:	20 91 ee 01 	lds	r18, 0x01EE
    1e1a:	30 91 ef 01 	lds	r19, 0x01EF
    1e1e:	80 91 f0 01 	lds	r24, 0x01F0
    1e22:	90 91 f1 01 	lds	r25, 0x01F1
    1e26:	82 0f       	add	r24, r18
    1e28:	93 1f       	adc	r25, r19
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	c8 01       	movw	r24, r16
    1e32:	b7 01       	movw	r22, r14
    1e34:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__udivmodsi4>
    1e38:	da 01       	movw	r26, r20
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e40:	80 83       	st	Z, r24
    }
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	08 95       	ret

00001e54 <ICU_voidGetFrequency>:

void ICU_voidGetFrequency(u32* copy_pu32Frequency_hz) {
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <ICU_voidGetFrequency+0x6>
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    if (copy_pu32Frequency_hz != NULL) {
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	e9 f0       	breq	.+58     	; 0x1ea4 <ICU_voidGetFrequency+0x50>
  //  	LCD_PutString(" F ");
        *copy_pu32Frequency_hz = 1000000UL / (Private_u16OnPeriod + Private_u16OffPeriod);
    1e6a:	20 91 ee 01 	lds	r18, 0x01EE
    1e6e:	30 91 ef 01 	lds	r19, 0x01EF
    1e72:	80 91 f0 01 	lds	r24, 0x01F0
    1e76:	90 91 f1 01 	lds	r25, 0x01F1
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	9c 01       	movw	r18, r24
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	80 e4       	ldi	r24, 0x40	; 64
    1e86:	92 e4       	ldi	r25, 0x42	; 66
    1e88:	af e0       	ldi	r26, 0x0F	; 15
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__udivmodsi4>
    1e94:	da 01       	movw	r26, r20
    1e96:	c9 01       	movw	r24, r18
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
    }
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <__vector_6>:

// ISR for ICU
void __vector_6(void) __attribute__((signal));
void __vector_6(void) {
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	2f 93       	push	r18
    1eba:	3f 93       	push	r19
    1ebc:	4f 93       	push	r20
    1ebe:	5f 93       	push	r21
    1ec0:	8f 93       	push	r24
    1ec2:	9f 93       	push	r25
    1ec4:	af 93       	push	r26
    1ec6:	bf 93       	push	r27
    1ec8:	ef 93       	push	r30
    1eca:	ff 93       	push	r31
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    static u8 Local_u8EdgeFlag = ICU_STARTING_EDGE;
    static u16 Local_u16OldValue = 0;
    static u16 Local_u16CounterValue = 0;


    Local_u16CounterValue = ICR1;
    1ed4:	e6 e4       	ldi	r30, 0x46	; 70
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	91 81       	ldd	r25, Z+1	; 0x01
    1edc:	90 93 eb 01 	sts	0x01EB, r25
    1ee0:	80 93 ea 01 	sts	0x01EA, r24

    if (Local_u8EdgeFlag == ICU_RISING_EDGE) {
    1ee4:	80 91 cd 01 	lds	r24, 0x01CD
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	f9 f4       	brne	.+62     	; 0x1f2a <__vector_6+0x7c>
        Local_u8EdgeFlag = ICU_FALLING_EDGE;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	80 93 cd 01 	sts	0x01CD, r24
        CLR_BIT(TCCR1B, ICES1);
    1ef2:	ae e4       	ldi	r26, 0x4E	; 78
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ee e4       	ldi	r30, 0x4E	; 78
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8f 7b       	andi	r24, 0xBF	; 191
    1efe:	8c 93       	st	X, r24
        Private_u16OffPeriod = (Local_u16CounterValue - Local_u16OldValue) * 4;
    1f00:	20 91 ea 01 	lds	r18, 0x01EA
    1f04:	30 91 eb 01 	lds	r19, 0x01EB
    1f08:	80 91 ec 01 	lds	r24, 0x01EC
    1f0c:	90 91 ed 01 	lds	r25, 0x01ED
    1f10:	a9 01       	movw	r20, r18
    1f12:	48 1b       	sub	r20, r24
    1f14:	59 0b       	sbc	r21, r25
    1f16:	ca 01       	movw	r24, r20
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	90 93 f1 01 	sts	0x01F1, r25
    1f24:	80 93 f0 01 	sts	0x01F0, r24
    1f28:	1e c0       	rjmp	.+60     	; 0x1f66 <__vector_6+0xb8>
    } else {
        Local_u8EdgeFlag = ICU_RISING_EDGE;
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	80 93 cd 01 	sts	0x01CD, r24
        SET_BIT(TCCR1B, ICES1);
    1f30:	ae e4       	ldi	r26, 0x4E	; 78
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ee e4       	ldi	r30, 0x4E	; 78
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 64       	ori	r24, 0x40	; 64
    1f3c:	8c 93       	st	X, r24
        Private_u16OnPeriod = (Local_u16CounterValue - Local_u16OldValue) * 4;
    1f3e:	20 91 ea 01 	lds	r18, 0x01EA
    1f42:	30 91 eb 01 	lds	r19, 0x01EB
    1f46:	80 91 ec 01 	lds	r24, 0x01EC
    1f4a:	90 91 ed 01 	lds	r25, 0x01ED
    1f4e:	a9 01       	movw	r20, r18
    1f50:	48 1b       	sub	r20, r24
    1f52:	59 0b       	sbc	r21, r25
    1f54:	ca 01       	movw	r24, r20
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	90 93 ef 01 	sts	0x01EF, r25
    1f62:	80 93 ee 01 	sts	0x01EE, r24
    }

    Local_u16OldValue = ICR1;
    1f66:	e6 e4       	ldi	r30, 0x46	; 70
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	90 93 ed 01 	sts	0x01ED, r25
    1f72:	80 93 ec 01 	sts	0x01EC, r24
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	5f 91       	pop	r21
    1f88:	4f 91       	pop	r20
    1f8a:	3f 91       	pop	r19
    1f8c:	2f 91       	pop	r18
    1f8e:	0f 90       	pop	r0
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	0f 90       	pop	r0
    1f94:	1f 90       	pop	r1
    1f96:	18 95       	reti

00001f98 <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    1fa0:	af e5       	ldi	r26, 0x5F	; 95
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	ef e5       	ldi	r30, 0x5F	; 95
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 68       	ori	r24, 0x80	; 128
    1fac:	8c 93       	st	X, r24
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <GI_voidDisable>:

void GI_voidDisable(void)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    1fbc:	af e5       	ldi	r26, 0x5F	; 95
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	ef e5       	ldi	r30, 0x5F	; 95
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 77       	andi	r24, 0x7F	; 127
    1fc8:	8c 93       	st	X, r24
}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	28 97       	sbiw	r28, 0x08	; 8
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	38 87       	std	Y+8, r19	; 0x08
    1ff0:	2f 83       	std	Y+7, r18	; 0x07
    1ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff4:	98 85       	ldd	r25, Y+8	; 0x08
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <EXTI_voidInit+0x2e>
    1ffc:	5a c0       	rjmp	.+180    	; 0x20b2 <EXTI_voidInit+0xe2>
    1ffe:	2f 81       	ldd	r18, Y+7	; 0x07
    2000:	38 85       	ldd	r19, Y+8	; 0x08
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	09 f4       	brne	.+2      	; 0x200a <EXTI_voidInit+0x3a>
    2008:	a3 c0       	rjmp	.+326    	; 0x2150 <EXTI_voidInit+0x180>
    200a:	8f 81       	ldd	r24, Y+7	; 0x07
    200c:	98 85       	ldd	r25, Y+8	; 0x08
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	09 f0       	breq	.+2      	; 0x2014 <EXTI_voidInit+0x44>
    2012:	b3 c0       	rjmp	.+358    	; 0x217a <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3e 83       	std	Y+6, r19	; 0x06
    201c:	2d 83       	std	Y+5, r18	; 0x05
    201e:	8d 81       	ldd	r24, Y+5	; 0x05
    2020:	9e 81       	ldd	r25, Y+6	; 0x06
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	91 05       	cpc	r25, r1
    2026:	39 f1       	breq	.+78     	; 0x2076 <EXTI_voidInit+0xa6>
    2028:	2d 81       	ldd	r18, Y+5	; 0x05
    202a:	3e 81       	ldd	r19, Y+6	; 0x06
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	99 f0       	breq	.+38     	; 0x2058 <EXTI_voidInit+0x88>
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	9e 81       	ldd	r25, Y+6	; 0x06
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	69 f1       	breq	.+90     	; 0x2094 <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    203a:	a5 e5       	ldi	r26, 0x55	; 85
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e5 e5       	ldi	r30, 0x55	; 85
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	81 60       	ori	r24, 0x01	; 1
    2046:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    2048:	a5 e5       	ldi	r26, 0x55	; 85
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e5 e5       	ldi	r30, 0x55	; 85
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	82 60       	ori	r24, 0x02	; 2
    2054:	8c 93       	st	X, r24
    2056:	91 c0       	rjmp	.+290    	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    2058:	a5 e5       	ldi	r26, 0x55	; 85
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e5 e5       	ldi	r30, 0x55	; 85
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	8e 7f       	andi	r24, 0xFE	; 254
    2064:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    2066:	a5 e5       	ldi	r26, 0x55	; 85
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e5 e5       	ldi	r30, 0x55	; 85
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	82 60       	ori	r24, 0x02	; 2
    2072:	8c 93       	st	X, r24
    2074:	82 c0       	rjmp	.+260    	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    2076:	a5 e5       	ldi	r26, 0x55	; 85
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e5 e5       	ldi	r30, 0x55	; 85
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	81 60       	ori	r24, 0x01	; 1
    2082:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    2084:	a5 e5       	ldi	r26, 0x55	; 85
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e5 e5       	ldi	r30, 0x55	; 85
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8d 7f       	andi	r24, 0xFD	; 253
    2090:	8c 93       	st	X, r24
    2092:	73 c0       	rjmp	.+230    	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    2094:	a5 e5       	ldi	r26, 0x55	; 85
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e5 e5       	ldi	r30, 0x55	; 85
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	8e 7f       	andi	r24, 0xFE	; 254
    20a0:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    20a2:	a5 e5       	ldi	r26, 0x55	; 85
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e5 e5       	ldi	r30, 0x55	; 85
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	8d 7f       	andi	r24, 0xFD	; 253
    20ae:	8c 93       	st	X, r24
    20b0:	64 c0       	rjmp	.+200    	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	3c 83       	std	Y+4, r19	; 0x04
    20ba:	2b 83       	std	Y+3, r18	; 0x03
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	91 05       	cpc	r25, r1
    20c4:	39 f1       	breq	.+78     	; 0x2114 <EXTI_voidInit+0x144>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	99 f0       	breq	.+38     	; 0x20f6 <EXTI_voidInit+0x126>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	69 f1       	breq	.+90     	; 0x2132 <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    20d8:	a5 e5       	ldi	r26, 0x55	; 85
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e5 e5       	ldi	r30, 0x55	; 85
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	84 60       	ori	r24, 0x04	; 4
    20e4:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    20e6:	a5 e5       	ldi	r26, 0x55	; 85
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e5 e5       	ldi	r30, 0x55	; 85
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	88 60       	ori	r24, 0x08	; 8
    20f2:	8c 93       	st	X, r24
    20f4:	42 c0       	rjmp	.+132    	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    20f6:	a5 e5       	ldi	r26, 0x55	; 85
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e5 e5       	ldi	r30, 0x55	; 85
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	8b 7f       	andi	r24, 0xFB	; 251
    2102:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    2104:	a5 e5       	ldi	r26, 0x55	; 85
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e5 e5       	ldi	r30, 0x55	; 85
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	88 60       	ori	r24, 0x08	; 8
    2110:	8c 93       	st	X, r24
    2112:	33 c0       	rjmp	.+102    	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    2114:	a5 e5       	ldi	r26, 0x55	; 85
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e5 e5       	ldi	r30, 0x55	; 85
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	84 60       	ori	r24, 0x04	; 4
    2120:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    2122:	a5 e5       	ldi	r26, 0x55	; 85
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e5 e5       	ldi	r30, 0x55	; 85
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	87 7f       	andi	r24, 0xF7	; 247
    212e:	8c 93       	st	X, r24
    2130:	24 c0       	rjmp	.+72     	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    2132:	a5 e5       	ldi	r26, 0x55	; 85
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e5 e5       	ldi	r30, 0x55	; 85
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8b 7f       	andi	r24, 0xFB	; 251
    213e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    2140:	a5 e5       	ldi	r26, 0x55	; 85
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e5 e5       	ldi	r30, 0x55	; 85
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	87 7f       	andi	r24, 0xF7	; 247
    214c:	8c 93       	st	X, r24
    214e:	15 c0       	rjmp	.+42     	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	91 05       	cpc	r25, r1
    215a:	41 f0       	breq	.+16     	; 0x216c <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    215c:	a4 e5       	ldi	r26, 0x54	; 84
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e4 e5       	ldi	r30, 0x54	; 84
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 64       	ori	r24, 0x40	; 64
    2168:	8c 93       	st	X, r24
    216a:	07 c0       	rjmp	.+14     	; 0x217a <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    216c:	a4 e5       	ldi	r26, 0x54	; 84
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e4 e5       	ldi	r30, 0x54	; 84
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	8f 7b       	andi	r24, 0xBF	; 191
    2178:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    217a:	28 96       	adiw	r28, 0x08	; 8
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <EXTI_voidEnable+0x6>
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3b 83       	std	Y+3, r19	; 0x03
    21a2:	2a 83       	std	Y+2, r18	; 0x02
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	91 05       	cpc	r25, r1
    21ac:	89 f0       	breq	.+34     	; 0x21d0 <EXTI_voidEnable+0x44>
    21ae:	2a 81       	ldd	r18, Y+2	; 0x02
    21b0:	3b 81       	ldd	r19, Y+3	; 0x03
    21b2:	22 30       	cpi	r18, 0x02	; 2
    21b4:	31 05       	cpc	r19, r1
    21b6:	a1 f0       	breq	.+40     	; 0x21e0 <EXTI_voidEnable+0x54>
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	b9 f4       	brne	.+46     	; 0x21ee <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    21c0:	ab e5       	ldi	r26, 0x5B	; 91
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	eb e5       	ldi	r30, 0x5B	; 91
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 64       	ori	r24, 0x40	; 64
    21cc:	8c 93       	st	X, r24
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    21d0:	ab e5       	ldi	r26, 0x5B	; 91
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	eb e5       	ldi	r30, 0x5B	; 91
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	80 68       	ori	r24, 0x80	; 128
    21dc:	8c 93       	st	X, r24
    21de:	07 c0       	rjmp	.+14     	; 0x21ee <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    21e0:	ab e5       	ldi	r26, 0x5B	; 91
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	eb e5       	ldi	r30, 0x5B	; 91
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 62       	ori	r24, 0x20	; 32
    21ec:	8c 93       	st	X, r24
        break;
    }
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <EXTI_voidDisable+0x6>
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	3b 83       	std	Y+3, r19	; 0x03
    2210:	2a 83       	std	Y+2, r18	; 0x02
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	9b 81       	ldd	r25, Y+3	; 0x03
    2216:	81 30       	cpi	r24, 0x01	; 1
    2218:	91 05       	cpc	r25, r1
    221a:	89 f0       	breq	.+34     	; 0x223e <EXTI_voidDisable+0x44>
    221c:	2a 81       	ldd	r18, Y+2	; 0x02
    221e:	3b 81       	ldd	r19, Y+3	; 0x03
    2220:	22 30       	cpi	r18, 0x02	; 2
    2222:	31 05       	cpc	r19, r1
    2224:	a1 f0       	breq	.+40     	; 0x224e <EXTI_voidDisable+0x54>
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	9b 81       	ldd	r25, Y+3	; 0x03
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	b9 f4       	brne	.+46     	; 0x225c <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    222e:	ab e5       	ldi	r26, 0x5B	; 91
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	eb e5       	ldi	r30, 0x5B	; 91
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	8f 7b       	andi	r24, 0xBF	; 191
    223a:	8c 93       	st	X, r24
    223c:	0f c0       	rjmp	.+30     	; 0x225c <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    223e:	ab e5       	ldi	r26, 0x5B	; 91
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	eb e5       	ldi	r30, 0x5B	; 91
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8f 77       	andi	r24, 0x7F	; 127
    224a:	8c 93       	st	X, r24
    224c:	07 c0       	rjmp	.+14     	; 0x225c <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    224e:	ab e5       	ldi	r26, 0x5B	; 91
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	eb e5       	ldi	r30, 0x5B	; 91
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8f 7d       	andi	r24, 0xDF	; 223
    225a:	8c 93       	st	X, r24
        break;
    }
}
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <EXTRI_voidSetCallBackINT+0x6>
    226e:	00 d0       	rcall	.+0      	; 0x2270 <EXTRI_voidSetCallBackINT+0x8>
    2270:	0f 92       	push	r0
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	7b 83       	std	Y+3, r23	; 0x03
    227a:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	39 f1       	breq	.+78     	; 0x22d2 <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	3d 83       	std	Y+5, r19	; 0x05
    228c:	2c 83       	std	Y+4, r18	; 0x04
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	9d 81       	ldd	r25, Y+5	; 0x05
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	91 05       	cpc	r25, r1
    2296:	81 f0       	breq	.+32     	; 0x22b8 <EXTRI_voidSetCallBackINT+0x50>
    2298:	2c 81       	ldd	r18, Y+4	; 0x04
    229a:	3d 81       	ldd	r19, Y+5	; 0x05
    229c:	22 30       	cpi	r18, 0x02	; 2
    229e:	31 05       	cpc	r19, r1
    22a0:	91 f0       	breq	.+36     	; 0x22c6 <EXTRI_voidSetCallBackINT+0x5e>
    22a2:	8c 81       	ldd	r24, Y+4	; 0x04
    22a4:	9d 81       	ldd	r25, Y+5	; 0x05
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	a1 f4       	brne	.+40     	; 0x22d2 <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	90 93 f3 01 	sts	0x01F3, r25
    22b2:	80 93 f2 01 	sts	0x01F2, r24
    22b6:	0d c0       	rjmp	.+26     	; 0x22d2 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	9b 81       	ldd	r25, Y+3	; 0x03
    22bc:	90 93 f5 01 	sts	0x01F5, r25
    22c0:	80 93 f4 01 	sts	0x01F4, r24
    22c4:	06 c0       	rjmp	.+12     	; 0x22d2 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	90 93 f7 01 	sts	0x01F7, r25
    22ce:	80 93 f6 01 	sts	0x01F6, r24
            break;
        default:
            break;
        }
    }
}
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    22e2:	1f 92       	push	r1
    22e4:	0f 92       	push	r0
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	0f 92       	push	r0
    22ea:	11 24       	eor	r1, r1
    22ec:	2f 93       	push	r18
    22ee:	3f 93       	push	r19
    22f0:	4f 93       	push	r20
    22f2:	5f 93       	push	r21
    22f4:	6f 93       	push	r22
    22f6:	7f 93       	push	r23
    22f8:	8f 93       	push	r24
    22fa:	9f 93       	push	r25
    22fc:	af 93       	push	r26
    22fe:	bf 93       	push	r27
    2300:	ef 93       	push	r30
    2302:	ff 93       	push	r31
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    230c:	80 91 f2 01 	lds	r24, 0x01F2
    2310:	90 91 f3 01 	lds	r25, 0x01F3
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	29 f0       	breq	.+10     	; 0x2322 <__vector_1+0x40>
        private_pCallBackINT0();
    2318:	e0 91 f2 01 	lds	r30, 0x01F2
    231c:	f0 91 f3 01 	lds	r31, 0x01F3
    2320:	09 95       	icall
    }
}
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	ff 91       	pop	r31
    2328:	ef 91       	pop	r30
    232a:	bf 91       	pop	r27
    232c:	af 91       	pop	r26
    232e:	9f 91       	pop	r25
    2330:	8f 91       	pop	r24
    2332:	7f 91       	pop	r23
    2334:	6f 91       	pop	r22
    2336:	5f 91       	pop	r21
    2338:	4f 91       	pop	r20
    233a:	3f 91       	pop	r19
    233c:	2f 91       	pop	r18
    233e:	0f 90       	pop	r0
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	0f 90       	pop	r0
    2344:	1f 90       	pop	r1
    2346:	18 95       	reti

00002348 <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    2348:	1f 92       	push	r1
    234a:	0f 92       	push	r0
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	0f 92       	push	r0
    2350:	11 24       	eor	r1, r1
    2352:	2f 93       	push	r18
    2354:	3f 93       	push	r19
    2356:	4f 93       	push	r20
    2358:	5f 93       	push	r21
    235a:	6f 93       	push	r22
    235c:	7f 93       	push	r23
    235e:	8f 93       	push	r24
    2360:	9f 93       	push	r25
    2362:	af 93       	push	r26
    2364:	bf 93       	push	r27
    2366:	ef 93       	push	r30
    2368:	ff 93       	push	r31
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    2372:	80 91 f4 01 	lds	r24, 0x01F4
    2376:	90 91 f5 01 	lds	r25, 0x01F5
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	29 f0       	breq	.+10     	; 0x2388 <__vector_2+0x40>
        private_pCallBackINT1();
    237e:	e0 91 f4 01 	lds	r30, 0x01F4
    2382:	f0 91 f5 01 	lds	r31, 0x01F5
    2386:	09 95       	icall
    }
}
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	ff 91       	pop	r31
    238e:	ef 91       	pop	r30
    2390:	bf 91       	pop	r27
    2392:	af 91       	pop	r26
    2394:	9f 91       	pop	r25
    2396:	8f 91       	pop	r24
    2398:	7f 91       	pop	r23
    239a:	6f 91       	pop	r22
    239c:	5f 91       	pop	r21
    239e:	4f 91       	pop	r20
    23a0:	3f 91       	pop	r19
    23a2:	2f 91       	pop	r18
    23a4:	0f 90       	pop	r0
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	0f 90       	pop	r0
    23aa:	1f 90       	pop	r1
    23ac:	18 95       	reti

000023ae <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    23ae:	1f 92       	push	r1
    23b0:	0f 92       	push	r0
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	0f 92       	push	r0
    23b6:	11 24       	eor	r1, r1
    23b8:	2f 93       	push	r18
    23ba:	3f 93       	push	r19
    23bc:	4f 93       	push	r20
    23be:	5f 93       	push	r21
    23c0:	6f 93       	push	r22
    23c2:	7f 93       	push	r23
    23c4:	8f 93       	push	r24
    23c6:	9f 93       	push	r25
    23c8:	af 93       	push	r26
    23ca:	bf 93       	push	r27
    23cc:	ef 93       	push	r30
    23ce:	ff 93       	push	r31
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    23d8:	80 91 f6 01 	lds	r24, 0x01F6
    23dc:	90 91 f7 01 	lds	r25, 0x01F7
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	29 f0       	breq	.+10     	; 0x23ee <__vector_3+0x40>
        private_pCallBackINT2();
    23e4:	e0 91 f6 01 	lds	r30, 0x01F6
    23e8:	f0 91 f7 01 	lds	r31, 0x01F7
    23ec:	09 95       	icall
    }
}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	ff 91       	pop	r31
    23f4:	ef 91       	pop	r30
    23f6:	bf 91       	pop	r27
    23f8:	af 91       	pop	r26
    23fa:	9f 91       	pop	r25
    23fc:	8f 91       	pop	r24
    23fe:	7f 91       	pop	r23
    2400:	6f 91       	pop	r22
    2402:	5f 91       	pop	r21
    2404:	4f 91       	pop	r20
    2406:	3f 91       	pop	r19
    2408:	2f 91       	pop	r18
    240a:	0f 90       	pop	r0
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	0f 90       	pop	r0
    2410:	1f 90       	pop	r1
    2412:	18 95       	reti

00002414 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	00 d0       	rcall	.+0      	; 0x241a <Dio_WriteChannel+0x6>
    241a:	00 d0       	rcall	.+0      	; 0x241c <Dio_WriteChannel+0x8>
    241c:	0f 92       	push	r0
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	8a 83       	std	Y+2, r24	; 0x02
    2424:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	86 95       	lsr	r24
    242a:	86 95       	lsr	r24
    242c:	86 95       	lsr	r24
    242e:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	3d 83       	std	Y+5, r19	; 0x05
    2438:	2c 83       	std	Y+4, r18	; 0x04
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	9d 81       	ldd	r25, Y+5	; 0x05
    243e:	81 30       	cpi	r24, 0x01	; 1
    2440:	91 05       	cpc	r25, r1
    2442:	09 f4       	brne	.+2      	; 0x2446 <Dio_WriteChannel+0x32>
    2444:	43 c0       	rjmp	.+134    	; 0x24cc <Dio_WriteChannel+0xb8>
    2446:	2c 81       	ldd	r18, Y+4	; 0x04
    2448:	3d 81       	ldd	r19, Y+5	; 0x05
    244a:	22 30       	cpi	r18, 0x02	; 2
    244c:	31 05       	cpc	r19, r1
    244e:	2c f4       	brge	.+10     	; 0x245a <Dio_WriteChannel+0x46>
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	9d 81       	ldd	r25, Y+5	; 0x05
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	71 f0       	breq	.+28     	; 0x2474 <Dio_WriteChannel+0x60>
    2458:	ce c0       	rjmp	.+412    	; 0x25f6 <Dio_WriteChannel+0x1e2>
    245a:	2c 81       	ldd	r18, Y+4	; 0x04
    245c:	3d 81       	ldd	r19, Y+5	; 0x05
    245e:	22 30       	cpi	r18, 0x02	; 2
    2460:	31 05       	cpc	r19, r1
    2462:	09 f4       	brne	.+2      	; 0x2466 <Dio_WriteChannel+0x52>
    2464:	65 c0       	rjmp	.+202    	; 0x2530 <Dio_WriteChannel+0x11c>
    2466:	8c 81       	ldd	r24, Y+4	; 0x04
    2468:	9d 81       	ldd	r25, Y+5	; 0x05
    246a:	83 30       	cpi	r24, 0x03	; 3
    246c:	91 05       	cpc	r25, r1
    246e:	09 f4       	brne	.+2      	; 0x2472 <Dio_WriteChannel+0x5e>
    2470:	91 c0       	rjmp	.+290    	; 0x2594 <Dio_WriteChannel+0x180>
    2472:	c1 c0       	rjmp	.+386    	; 0x25f6 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	a1 f4       	brne	.+40     	; 0x24a2 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    247a:	ab e3       	ldi	r26, 0x3B	; 59
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	eb e3       	ldi	r30, 0x3B	; 59
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	48 2f       	mov	r20, r24
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	02 2e       	mov	r0, r18
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <Dio_WriteChannel+0x84>
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	0a 94       	dec	r0
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <Dio_WriteChannel+0x80>
    249c:	84 2b       	or	r24, r20
    249e:	8c 93       	st	X, r24
    24a0:	aa c0       	rjmp	.+340    	; 0x25f6 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    24a2:	ab e3       	ldi	r26, 0x3B	; 59
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	eb e3       	ldi	r30, 0x3B	; 59
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	48 2f       	mov	r20, r24
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 2e       	mov	r0, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <Dio_WriteChannel+0xac>
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <Dio_WriteChannel+0xa8>
    24c4:	80 95       	com	r24
    24c6:	84 23       	and	r24, r20
    24c8:	8c 93       	st	X, r24
    24ca:	95 c0       	rjmp	.+298    	; 0x25f6 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	b9 f4       	brne	.+46     	; 0x2500 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    24d2:	a8 e3       	ldi	r26, 0x38	; 56
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e8 e3       	ldi	r30, 0x38	; 56
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	48 2f       	mov	r20, r24
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9c 01       	movw	r18, r24
    24e6:	27 70       	andi	r18, 0x07	; 7
    24e8:	30 70       	andi	r19, 0x00	; 0
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	02 2e       	mov	r0, r18
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <Dio_WriteChannel+0xe2>
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0a 94       	dec	r0
    24f8:	e2 f7       	brpl	.-8      	; 0x24f2 <Dio_WriteChannel+0xde>
    24fa:	84 2b       	or	r24, r20
    24fc:	8c 93       	st	X, r24
    24fe:	7b c0       	rjmp	.+246    	; 0x25f6 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    2500:	a8 e3       	ldi	r26, 0x38	; 56
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e8 e3       	ldi	r30, 0x38	; 56
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	48 2f       	mov	r20, r24
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9c 01       	movw	r18, r24
    2514:	27 70       	andi	r18, 0x07	; 7
    2516:	30 70       	andi	r19, 0x00	; 0
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	02 2e       	mov	r0, r18
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <Dio_WriteChannel+0x110>
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	0a 94       	dec	r0
    2526:	e2 f7       	brpl	.-8      	; 0x2520 <Dio_WriteChannel+0x10c>
    2528:	80 95       	com	r24
    252a:	84 23       	and	r24, r20
    252c:	8c 93       	st	X, r24
    252e:	63 c0       	rjmp	.+198    	; 0x25f6 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	81 30       	cpi	r24, 0x01	; 1
    2534:	b9 f4       	brne	.+46     	; 0x2564 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    2536:	a5 e3       	ldi	r26, 0x35	; 53
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e5 e3       	ldi	r30, 0x35	; 53
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	48 2f       	mov	r20, r24
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 01       	movw	r18, r24
    254a:	27 70       	andi	r18, 0x07	; 7
    254c:	30 70       	andi	r19, 0x00	; 0
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	02 2e       	mov	r0, r18
    2554:	02 c0       	rjmp	.+4      	; 0x255a <Dio_WriteChannel+0x146>
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	0a 94       	dec	r0
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <Dio_WriteChannel+0x142>
    255e:	84 2b       	or	r24, r20
    2560:	8c 93       	st	X, r24
    2562:	49 c0       	rjmp	.+146    	; 0x25f6 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    2564:	a5 e3       	ldi	r26, 0x35	; 53
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e5 e3       	ldi	r30, 0x35	; 53
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	48 2f       	mov	r20, r24
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9c 01       	movw	r18, r24
    2578:	27 70       	andi	r18, 0x07	; 7
    257a:	30 70       	andi	r19, 0x00	; 0
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	02 2e       	mov	r0, r18
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <Dio_WriteChannel+0x174>
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	0a 94       	dec	r0
    258a:	e2 f7       	brpl	.-8      	; 0x2584 <Dio_WriteChannel+0x170>
    258c:	80 95       	com	r24
    258e:	84 23       	and	r24, r20
    2590:	8c 93       	st	X, r24
    2592:	31 c0       	rjmp	.+98     	; 0x25f6 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	b9 f4       	brne	.+46     	; 0x25c8 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    259a:	a2 e3       	ldi	r26, 0x32	; 50
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e2 e3       	ldi	r30, 0x32	; 50
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	48 2f       	mov	r20, r24
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 01       	movw	r18, r24
    25ae:	27 70       	andi	r18, 0x07	; 7
    25b0:	30 70       	andi	r19, 0x00	; 0
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	02 2e       	mov	r0, r18
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <Dio_WriteChannel+0x1aa>
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	0a 94       	dec	r0
    25c0:	e2 f7       	brpl	.-8      	; 0x25ba <Dio_WriteChannel+0x1a6>
    25c2:	84 2b       	or	r24, r20
    25c4:	8c 93       	st	X, r24
    25c6:	17 c0       	rjmp	.+46     	; 0x25f6 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    25c8:	a2 e3       	ldi	r26, 0x32	; 50
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e2 e3       	ldi	r30, 0x32	; 50
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	48 2f       	mov	r20, r24
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9c 01       	movw	r18, r24
    25dc:	27 70       	andi	r18, 0x07	; 7
    25de:	30 70       	andi	r19, 0x00	; 0
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	02 2e       	mov	r0, r18
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <Dio_WriteChannel+0x1d8>
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	0a 94       	dec	r0
    25ee:	e2 f7       	brpl	.-8      	; 0x25e8 <Dio_WriteChannel+0x1d4>
    25f0:	80 95       	com	r24
    25f2:	84 23       	and	r24, r20
    25f4:	8c 93       	st	X, r24
		}
		break;
	}
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <Dio_ReadChannel+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <Dio_ReadChannel+0x8>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	86 95       	lsr	r24
    261a:	86 95       	lsr	r24
    261c:	86 95       	lsr	r24
    261e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	3d 83       	std	Y+5, r19	; 0x05
    2628:	2c 83       	std	Y+4, r18	; 0x04
    262a:	4c 81       	ldd	r20, Y+4	; 0x04
    262c:	5d 81       	ldd	r21, Y+5	; 0x05
    262e:	41 30       	cpi	r20, 0x01	; 1
    2630:	51 05       	cpc	r21, r1
    2632:	49 f1       	breq	.+82     	; 0x2686 <Dio_ReadChannel+0x80>
    2634:	8c 81       	ldd	r24, Y+4	; 0x04
    2636:	9d 81       	ldd	r25, Y+5	; 0x05
    2638:	82 30       	cpi	r24, 0x02	; 2
    263a:	91 05       	cpc	r25, r1
    263c:	34 f4       	brge	.+12     	; 0x264a <Dio_ReadChannel+0x44>
    263e:	2c 81       	ldd	r18, Y+4	; 0x04
    2640:	3d 81       	ldd	r19, Y+5	; 0x05
    2642:	21 15       	cp	r18, r1
    2644:	31 05       	cpc	r19, r1
    2646:	69 f0       	breq	.+26     	; 0x2662 <Dio_ReadChannel+0x5c>
    2648:	59 c0       	rjmp	.+178    	; 0x26fc <Dio_ReadChannel+0xf6>
    264a:	4c 81       	ldd	r20, Y+4	; 0x04
    264c:	5d 81       	ldd	r21, Y+5	; 0x05
    264e:	42 30       	cpi	r20, 0x02	; 2
    2650:	51 05       	cpc	r21, r1
    2652:	69 f1       	breq	.+90     	; 0x26ae <Dio_ReadChannel+0xa8>
    2654:	8c 81       	ldd	r24, Y+4	; 0x04
    2656:	9d 81       	ldd	r25, Y+5	; 0x05
    2658:	83 30       	cpi	r24, 0x03	; 3
    265a:	91 05       	cpc	r25, r1
    265c:	09 f4       	brne	.+2      	; 0x2660 <Dio_ReadChannel+0x5a>
    265e:	3b c0       	rjmp	.+118    	; 0x26d6 <Dio_ReadChannel+0xd0>
    2660:	4d c0       	rjmp	.+154    	; 0x26fc <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2662:	e9 e3       	ldi	r30, 0x39	; 57
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	88 2f       	mov	r24, r24
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a9 01       	movw	r20, r18
    2674:	02 c0       	rjmp	.+4      	; 0x267a <Dio_ReadChannel+0x74>
    2676:	55 95       	asr	r21
    2678:	47 95       	ror	r20
    267a:	8a 95       	dec	r24
    267c:	e2 f7       	brpl	.-8      	; 0x2676 <Dio_ReadChannel+0x70>
    267e:	ca 01       	movw	r24, r20
    2680:	81 70       	andi	r24, 0x01	; 1
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	3b c0       	rjmp	.+118    	; 0x26fc <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    2686:	e6 e3       	ldi	r30, 0x36	; 54
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	87 70       	andi	r24, 0x07	; 7
    2698:	90 70       	andi	r25, 0x00	; 0
    269a:	a9 01       	movw	r20, r18
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <Dio_ReadChannel+0x9c>
    269e:	55 95       	asr	r21
    26a0:	47 95       	ror	r20
    26a2:	8a 95       	dec	r24
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <Dio_ReadChannel+0x98>
    26a6:	ca 01       	movw	r24, r20
    26a8:	81 70       	andi	r24, 0x01	; 1
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	27 c0       	rjmp	.+78     	; 0x26fc <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    26ae:	e3 e3       	ldi	r30, 0x33	; 51
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	87 70       	andi	r24, 0x07	; 7
    26c0:	90 70       	andi	r25, 0x00	; 0
    26c2:	a9 01       	movw	r20, r18
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <Dio_ReadChannel+0xc4>
    26c6:	55 95       	asr	r21
    26c8:	47 95       	ror	r20
    26ca:	8a 95       	dec	r24
    26cc:	e2 f7       	brpl	.-8      	; 0x26c6 <Dio_ReadChannel+0xc0>
    26ce:	ca 01       	movw	r24, r20
    26d0:	81 70       	andi	r24, 0x01	; 1
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	13 c0       	rjmp	.+38     	; 0x26fc <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    26d6:	e0 e3       	ldi	r30, 0x30	; 48
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	87 70       	andi	r24, 0x07	; 7
    26e8:	90 70       	andi	r25, 0x00	; 0
    26ea:	a9 01       	movw	r20, r18
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <Dio_ReadChannel+0xec>
    26ee:	55 95       	asr	r21
    26f0:	47 95       	ror	r20
    26f2:	8a 95       	dec	r24
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <Dio_ReadChannel+0xe8>
    26f6:	ca 01       	movw	r24, r20
    26f8:	81 70       	andi	r24, 0x01	; 1
    26fa:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	00 d0       	rcall	.+0      	; 0x2714 <Dio_FlipChannel+0x6>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <Dio_FlipChannel+0x8>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	86 95       	lsr	r24
    2720:	86 95       	lsr	r24
    2722:	86 95       	lsr	r24
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	3c 83       	std	Y+4, r19	; 0x04
    272a:	2b 83       	std	Y+3, r18	; 0x03
    272c:	4b 81       	ldd	r20, Y+3	; 0x03
    272e:	5c 81       	ldd	r21, Y+4	; 0x04
    2730:	41 30       	cpi	r20, 0x01	; 1
    2732:	51 05       	cpc	r21, r1
    2734:	09 f4       	brne	.+2      	; 0x2738 <Dio_FlipChannel+0x2a>
    2736:	3c c0       	rjmp	.+120    	; 0x27b0 <Dio_FlipChannel+0xa2>
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	82 30       	cpi	r24, 0x02	; 2
    273e:	91 05       	cpc	r25, r1
    2740:	34 f4       	brge	.+12     	; 0x274e <Dio_FlipChannel+0x40>
    2742:	2b 81       	ldd	r18, Y+3	; 0x03
    2744:	3c 81       	ldd	r19, Y+4	; 0x04
    2746:	21 15       	cp	r18, r1
    2748:	31 05       	cpc	r19, r1
    274a:	71 f0       	breq	.+28     	; 0x2768 <Dio_FlipChannel+0x5a>
    274c:	ab c0       	rjmp	.+342    	; 0x28a4 <Dio_FlipChannel+0x196>
    274e:	4b 81       	ldd	r20, Y+3	; 0x03
    2750:	5c 81       	ldd	r21, Y+4	; 0x04
    2752:	42 30       	cpi	r20, 0x02	; 2
    2754:	51 05       	cpc	r21, r1
    2756:	09 f4       	brne	.+2      	; 0x275a <Dio_FlipChannel+0x4c>
    2758:	54 c0       	rjmp	.+168    	; 0x2802 <Dio_FlipChannel+0xf4>
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	83 30       	cpi	r24, 0x03	; 3
    2760:	91 05       	cpc	r25, r1
    2762:	09 f4       	brne	.+2      	; 0x2766 <Dio_FlipChannel+0x58>
    2764:	77 c0       	rjmp	.+238    	; 0x2854 <Dio_FlipChannel+0x146>
    2766:	9e c0       	rjmp	.+316    	; 0x28a4 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    2768:	ab e3       	ldi	r26, 0x3B	; 59
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	eb e3       	ldi	r30, 0x3B	; 59
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	48 2f       	mov	r20, r24
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <Dio_FlipChannel+0x76>
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	2a 95       	dec	r18
    2786:	e2 f7       	brpl	.-8      	; 0x2780 <Dio_FlipChannel+0x72>
    2788:	84 27       	eor	r24, r20
    278a:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    278c:	eb e3       	ldi	r30, 0x3B	; 59
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	a9 01       	movw	r20, r18
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <Dio_FlipChannel+0x96>
    27a0:	55 95       	asr	r21
    27a2:	47 95       	ror	r20
    27a4:	8a 95       	dec	r24
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <Dio_FlipChannel+0x92>
    27a8:	ca 01       	movw	r24, r20
    27aa:	81 70       	andi	r24, 0x01	; 1
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	7a c0       	rjmp	.+244    	; 0x28a4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    27b0:	a8 e3       	ldi	r26, 0x38	; 56
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e8 e3       	ldi	r30, 0x38	; 56
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	48 2f       	mov	r20, r24
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9c 01       	movw	r18, r24
    27c4:	27 70       	andi	r18, 0x07	; 7
    27c6:	30 70       	andi	r19, 0x00	; 0
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <Dio_FlipChannel+0xc4>
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	2a 95       	dec	r18
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <Dio_FlipChannel+0xc0>
    27d6:	84 27       	eor	r24, r20
    27d8:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    27da:	e8 e3       	ldi	r30, 0x38	; 56
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	87 70       	andi	r24, 0x07	; 7
    27ec:	90 70       	andi	r25, 0x00	; 0
    27ee:	a9 01       	movw	r20, r18
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <Dio_FlipChannel+0xe8>
    27f2:	55 95       	asr	r21
    27f4:	47 95       	ror	r20
    27f6:	8a 95       	dec	r24
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <Dio_FlipChannel+0xe4>
    27fa:	ca 01       	movw	r24, r20
    27fc:	81 70       	andi	r24, 0x01	; 1
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	51 c0       	rjmp	.+162    	; 0x28a4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    2802:	a5 e3       	ldi	r26, 0x35	; 53
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e5 e3       	ldi	r30, 0x35	; 53
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	48 2f       	mov	r20, r24
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9c 01       	movw	r18, r24
    2816:	27 70       	andi	r18, 0x07	; 7
    2818:	30 70       	andi	r19, 0x00	; 0
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <Dio_FlipChannel+0x116>
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	2a 95       	dec	r18
    2826:	e2 f7       	brpl	.-8      	; 0x2820 <Dio_FlipChannel+0x112>
    2828:	84 27       	eor	r24, r20
    282a:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    282c:	e5 e3       	ldi	r30, 0x35	; 53
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	87 70       	andi	r24, 0x07	; 7
    283e:	90 70       	andi	r25, 0x00	; 0
    2840:	a9 01       	movw	r20, r18
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <Dio_FlipChannel+0x13a>
    2844:	55 95       	asr	r21
    2846:	47 95       	ror	r20
    2848:	8a 95       	dec	r24
    284a:	e2 f7       	brpl	.-8      	; 0x2844 <Dio_FlipChannel+0x136>
    284c:	ca 01       	movw	r24, r20
    284e:	81 70       	andi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	28 c0       	rjmp	.+80     	; 0x28a4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    2854:	a2 e3       	ldi	r26, 0x32	; 50
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e2 e3       	ldi	r30, 0x32	; 50
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	48 2f       	mov	r20, r24
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9c 01       	movw	r18, r24
    2868:	27 70       	andi	r18, 0x07	; 7
    286a:	30 70       	andi	r19, 0x00	; 0
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <Dio_FlipChannel+0x168>
    2872:	88 0f       	add	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	2a 95       	dec	r18
    2878:	e2 f7       	brpl	.-8      	; 0x2872 <Dio_FlipChannel+0x164>
    287a:	84 27       	eor	r24, r20
    287c:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    287e:	e2 e3       	ldi	r30, 0x32	; 50
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	88 2f       	mov	r24, r24
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	87 70       	andi	r24, 0x07	; 7
    2890:	90 70       	andi	r25, 0x00	; 0
    2892:	a9 01       	movw	r20, r18
    2894:	02 c0       	rjmp	.+4      	; 0x289a <Dio_FlipChannel+0x18c>
    2896:	55 95       	asr	r21
    2898:	47 95       	ror	r20
    289a:	8a 95       	dec	r24
    289c:	e2 f7       	brpl	.-8      	; 0x2896 <Dio_FlipChannel+0x188>
    289e:	ca 01       	movw	r24, r20
    28a0:	81 70       	andi	r24, 0x01	; 1
    28a2:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <Dio_WritePort+0x6>
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <Dio_WritePort+0x8>
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	3c 83       	std	Y+4, r19	; 0x04
    28cc:	2b 83       	std	Y+3, r18	; 0x03
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	91 05       	cpc	r25, r1
    28d6:	d1 f0       	breq	.+52     	; 0x290c <Dio_WritePort+0x58>
    28d8:	2b 81       	ldd	r18, Y+3	; 0x03
    28da:	3c 81       	ldd	r19, Y+4	; 0x04
    28dc:	22 30       	cpi	r18, 0x02	; 2
    28de:	31 05       	cpc	r19, r1
    28e0:	2c f4       	brge	.+10     	; 0x28ec <Dio_WritePort+0x38>
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	61 f0       	breq	.+24     	; 0x2902 <Dio_WritePort+0x4e>
    28ea:	1e c0       	rjmp	.+60     	; 0x2928 <Dio_WritePort+0x74>
    28ec:	2b 81       	ldd	r18, Y+3	; 0x03
    28ee:	3c 81       	ldd	r19, Y+4	; 0x04
    28f0:	22 30       	cpi	r18, 0x02	; 2
    28f2:	31 05       	cpc	r19, r1
    28f4:	81 f0       	breq	.+32     	; 0x2916 <Dio_WritePort+0x62>
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	83 30       	cpi	r24, 0x03	; 3
    28fc:	91 05       	cpc	r25, r1
    28fe:	81 f0       	breq	.+32     	; 0x2920 <Dio_WritePort+0x6c>
    2900:	13 c0       	rjmp	.+38     	; 0x2928 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    2902:	eb e3       	ldi	r30, 0x3B	; 59
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	80 83       	st	Z, r24
    290a:	0e c0       	rjmp	.+28     	; 0x2928 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    290c:	e8 e3       	ldi	r30, 0x38	; 56
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	80 83       	st	Z, r24
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    2916:	e5 e3       	ldi	r30, 0x35	; 53
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	80 83       	st	Z, r24
    291e:	04 c0       	rjmp	.+8      	; 0x2928 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    2920:	e2 e3       	ldi	r30, 0x32	; 50
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	80 83       	st	Z, r24
		break;
	}
}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <LCD_SendData>:
#include "avr/delay.h"

static u8 current_pos = 0;


void LCD_SendData(u8 data) {
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	e9 97       	sbiw	r28, 0x39	; 57
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	89 af       	std	Y+57, r24	; 0x39
    Dio_WriteChannel(RS, STD_HIGH);
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	61 e0       	ldi	r22, 0x01	; 1
    2950:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>

    // Send data through D4-D7 pins
    Dio_WriteChannel(D4, GET_BIT(data, 4));
    2954:	89 ad       	ldd	r24, Y+57	; 0x39
    2956:	82 95       	swap	r24
    2958:	8f 70       	andi	r24, 0x0F	; 15
    295a:	98 2f       	mov	r25, r24
    295c:	91 70       	andi	r25, 0x01	; 1
    295e:	88 e0       	ldi	r24, 0x08	; 8
    2960:	69 2f       	mov	r22, r25
    2962:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(data, 5));
    2966:	89 ad       	ldd	r24, Y+57	; 0x39
    2968:	82 95       	swap	r24
    296a:	86 95       	lsr	r24
    296c:	87 70       	andi	r24, 0x07	; 7
    296e:	98 2f       	mov	r25, r24
    2970:	91 70       	andi	r25, 0x01	; 1
    2972:	89 e0       	ldi	r24, 0x09	; 9
    2974:	69 2f       	mov	r22, r25
    2976:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(data, 6));
    297a:	89 ad       	ldd	r24, Y+57	; 0x39
    297c:	82 95       	swap	r24
    297e:	86 95       	lsr	r24
    2980:	86 95       	lsr	r24
    2982:	83 70       	andi	r24, 0x03	; 3
    2984:	98 2f       	mov	r25, r24
    2986:	91 70       	andi	r25, 0x01	; 1
    2988:	8a e0       	ldi	r24, 0x0A	; 10
    298a:	69 2f       	mov	r22, r25
    298c:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(data, 7));
    2990:	89 ad       	ldd	r24, Y+57	; 0x39
    2992:	98 2f       	mov	r25, r24
    2994:	99 1f       	adc	r25, r25
    2996:	99 27       	eor	r25, r25
    2998:	99 1f       	adc	r25, r25
    299a:	8c e0       	ldi	r24, 0x0C	; 12
    299c:	69 2f       	mov	r22, r25
    299e:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    29a2:	82 e0       	ldi	r24, 0x02	; 2
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e8       	ldi	r26, 0x80	; 128
    29b0:	bf e3       	ldi	r27, 0x3F	; 63
    29b2:	8d ab       	std	Y+53, r24	; 0x35
    29b4:	9e ab       	std	Y+54, r25	; 0x36
    29b6:	af ab       	std	Y+55, r26	; 0x37
    29b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	6d a9       	ldd	r22, Y+53	; 0x35
    29bc:	7e a9       	ldd	r23, Y+54	; 0x36
    29be:	8f a9       	ldd	r24, Y+55	; 0x37
    29c0:	98 ad       	ldd	r25, Y+56	; 0x38
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a e7       	ldi	r20, 0x7A	; 122
    29c8:	55 e4       	ldi	r21, 0x45	; 69
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	89 ab       	std	Y+49, r24	; 0x31
    29d4:	9a ab       	std	Y+50, r25	; 0x32
    29d6:	ab ab       	std	Y+51, r26	; 0x33
    29d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29da:	69 a9       	ldd	r22, Y+49	; 0x31
    29dc:	7a a9       	ldd	r23, Y+50	; 0x32
    29de:	8b a9       	ldd	r24, Y+51	; 0x33
    29e0:	9c a9       	ldd	r25, Y+52	; 0x34
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <LCD_SendData+0xc6>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	98 ab       	std	Y+48, r25	; 0x30
    29f8:	8f a7       	std	Y+47, r24	; 0x2f
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <LCD_SendData+0x144>
	else if (__tmp > 65535)
    29fc:	69 a9       	ldd	r22, Y+49	; 0x31
    29fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2a00:	8b a9       	ldd	r24, Y+51	; 0x33
    2a02:	9c a9       	ldd	r25, Y+52	; 0x34
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <LCD_SendData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	6d a9       	ldd	r22, Y+53	; 0x35
    2a16:	7e a9       	ldd	r23, Y+54	; 0x36
    2a18:	8f a9       	ldd	r24, Y+55	; 0x37
    2a1a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	98 ab       	std	Y+48, r25	; 0x30
    2a3a:	8f a7       	std	Y+47, r24	; 0x2f
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_SendData+0x126>
    2a3e:	80 e9       	ldi	r24, 0x90	; 144
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	9e a7       	std	Y+46, r25	; 0x2e
    2a44:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a46:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a48:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_SendData+0x114>
    2a4e:	9e a7       	std	Y+46, r25	; 0x2e
    2a50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a54:	98 a9       	ldd	r25, Y+48	; 0x30
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	98 ab       	std	Y+48, r25	; 0x30
    2a5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <LCD_SendData+0x108>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <LCD_SendData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	69 a9       	ldd	r22, Y+49	; 0x31
    2a68:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	98 ab       	std	Y+48, r25	; 0x30
    2a78:	8f a7       	std	Y+47, r24	; 0x2f
    2a7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a7e:	9c a7       	std	Y+44, r25	; 0x2c
    2a80:	8b a7       	std	Y+43, r24	; 0x2b
    2a82:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a84:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_SendData+0x150>
    2a8a:	9c a7       	std	Y+44, r25	; 0x2c
    2a8c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e8       	ldi	r26, 0x80	; 128
    2a9c:	bf e3       	ldi	r27, 0x3F	; 63
    2a9e:	8f a3       	std	Y+39, r24	; 0x27
    2aa0:	98 a7       	std	Y+40, r25	; 0x28
    2aa2:	a9 a7       	std	Y+41, r26	; 0x29
    2aa4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa6:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa8:	78 a5       	ldd	r23, Y+40	; 0x28
    2aaa:	89 a5       	ldd	r24, Y+41	; 0x29
    2aac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a e7       	ldi	r20, 0x7A	; 122
    2ab4:	55 e4       	ldi	r21, 0x45	; 69
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8b a3       	std	Y+35, r24	; 0x23
    2ac0:	9c a3       	std	Y+36, r25	; 0x24
    2ac2:	ad a3       	std	Y+37, r26	; 0x25
    2ac4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    2aca:	8d a1       	ldd	r24, Y+37	; 0x25
    2acc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e8       	ldi	r20, 0x80	; 128
    2ad4:	5f e3       	ldi	r21, 0x3F	; 63
    2ad6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ada:	88 23       	and	r24, r24
    2adc:	2c f4       	brge	.+10     	; 0x2ae8 <LCD_SendData+0x1b2>
		__ticks = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9a a3       	std	Y+34, r25	; 0x22
    2ae4:	89 a3       	std	Y+33, r24	; 0x21
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <LCD_SendData+0x230>
	else if (__tmp > 65535)
    2ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    2aea:	7c a1       	ldd	r23, Y+36	; 0x24
    2aec:	8d a1       	ldd	r24, Y+37	; 0x25
    2aee:	9e a1       	ldd	r25, Y+38	; 0x26
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	3f ef       	ldi	r19, 0xFF	; 255
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	57 e4       	ldi	r21, 0x47	; 71
    2af8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	4c f5       	brge	.+82     	; 0x2b52 <LCD_SendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b00:	6f a1       	ldd	r22, Y+39	; 0x27
    2b02:	78 a5       	ldd	r23, Y+40	; 0x28
    2b04:	89 a5       	ldd	r24, Y+41	; 0x29
    2b06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e2       	ldi	r20, 0x20	; 32
    2b0e:	51 e4       	ldi	r21, 0x41	; 65
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9a a3       	std	Y+34, r25	; 0x22
    2b26:	89 a3       	std	Y+33, r24	; 0x21
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <LCD_SendData+0x212>
    2b2a:	80 e9       	ldi	r24, 0x90	; 144
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	98 a3       	std	Y+32, r25	; 0x20
    2b30:	8f 8f       	std	Y+31, r24	; 0x1f
    2b32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b34:	98 a1       	ldd	r25, Y+32	; 0x20
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_SendData+0x200>
    2b3a:	98 a3       	std	Y+32, r25	; 0x20
    2b3c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b40:	9a a1       	ldd	r25, Y+34	; 0x22
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	9a a3       	std	Y+34, r25	; 0x22
    2b46:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b48:	89 a1       	ldd	r24, Y+33	; 0x21
    2b4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	69 f7       	brne	.-38     	; 0x2b2a <LCD_SendData+0x1f4>
    2b50:	14 c0       	rjmp	.+40     	; 0x2b7a <LCD_SendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	6b a1       	ldd	r22, Y+35	; 0x23
    2b54:	7c a1       	ldd	r23, Y+36	; 0x24
    2b56:	8d a1       	ldd	r24, Y+37	; 0x25
    2b58:	9e a1       	ldd	r25, Y+38	; 0x26
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9a a3       	std	Y+34, r25	; 0x22
    2b64:	89 a3       	std	Y+33, r24	; 0x21
    2b66:	89 a1       	ldd	r24, Y+33	; 0x21
    2b68:	9a a1       	ldd	r25, Y+34	; 0x22
    2b6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b6c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_SendData+0x23c>
    2b76:	9e 8f       	std	Y+30, r25	; 0x1e
    2b78:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    // Send the lower 4 bits
    Dio_WriteChannel(D4, GET_BIT(data, 0));
    2b7a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b7c:	98 2f       	mov	r25, r24
    2b7e:	91 70       	andi	r25, 0x01	; 1
    2b80:	88 e0       	ldi	r24, 0x08	; 8
    2b82:	69 2f       	mov	r22, r25
    2b84:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(data, 1));
    2b88:	89 ad       	ldd	r24, Y+57	; 0x39
    2b8a:	86 95       	lsr	r24
    2b8c:	98 2f       	mov	r25, r24
    2b8e:	91 70       	andi	r25, 0x01	; 1
    2b90:	89 e0       	ldi	r24, 0x09	; 9
    2b92:	69 2f       	mov	r22, r25
    2b94:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(data, 2));
    2b98:	89 ad       	ldd	r24, Y+57	; 0x39
    2b9a:	86 95       	lsr	r24
    2b9c:	86 95       	lsr	r24
    2b9e:	98 2f       	mov	r25, r24
    2ba0:	91 70       	andi	r25, 0x01	; 1
    2ba2:	8a e0       	ldi	r24, 0x0A	; 10
    2ba4:	69 2f       	mov	r22, r25
    2ba6:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(data, 3));
    2baa:	89 ad       	ldd	r24, Y+57	; 0x39
    2bac:	86 95       	lsr	r24
    2bae:	86 95       	lsr	r24
    2bb0:	86 95       	lsr	r24
    2bb2:	98 2f       	mov	r25, r24
    2bb4:	91 70       	andi	r25, 0x01	; 1
    2bb6:	8c e0       	ldi	r24, 0x0C	; 12
    2bb8:	69 2f       	mov	r22, r25
    2bba:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e8       	ldi	r26, 0x80	; 128
    2bcc:	bf e3       	ldi	r27, 0x3F	; 63
    2bce:	89 8f       	std	Y+25, r24	; 0x19
    2bd0:	9a 8f       	std	Y+26, r25	; 0x1a
    2bd2:	ab 8f       	std	Y+27, r26	; 0x1b
    2bd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a e7       	ldi	r20, 0x7A	; 122
    2be4:	55 e4       	ldi	r21, 0x45	; 69
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	8d 8b       	std	Y+21, r24	; 0x15
    2bf0:	9e 8b       	std	Y+22, r25	; 0x16
    2bf2:	af 8b       	std	Y+23, r26	; 0x17
    2bf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	2c f4       	brge	.+10     	; 0x2c18 <LCD_SendData+0x2e2>
		__ticks = 1;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c 8b       	std	Y+20, r25	; 0x14
    2c14:	8b 8b       	std	Y+19, r24	; 0x13
    2c16:	3f c0       	rjmp	.+126    	; 0x2c96 <LCD_SendData+0x360>
	else if (__tmp > 65535)
    2c18:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	3f ef       	ldi	r19, 0xFF	; 255
    2c24:	4f e7       	ldi	r20, 0x7F	; 127
    2c26:	57 e4       	ldi	r21, 0x47	; 71
    2c28:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c2c:	18 16       	cp	r1, r24
    2c2e:	4c f5       	brge	.+82     	; 0x2c82 <LCD_SendData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c30:	69 8d       	ldd	r22, Y+25	; 0x19
    2c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e2       	ldi	r20, 0x20	; 32
    2c3e:	51 e4       	ldi	r21, 0x41	; 65
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9c 8b       	std	Y+20, r25	; 0x14
    2c56:	8b 8b       	std	Y+19, r24	; 0x13
    2c58:	0f c0       	rjmp	.+30     	; 0x2c78 <LCD_SendData+0x342>
    2c5a:	80 e9       	ldi	r24, 0x90	; 144
    2c5c:	91 e0       	ldi	r25, 0x01	; 1
    2c5e:	9a 8b       	std	Y+18, r25	; 0x12
    2c60:	89 8b       	std	Y+17, r24	; 0x11
    2c62:	89 89       	ldd	r24, Y+17	; 0x11
    2c64:	9a 89       	ldd	r25, Y+18	; 0x12
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_SendData+0x330>
    2c6a:	9a 8b       	std	Y+18, r25	; 0x12
    2c6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c70:	9c 89       	ldd	r25, Y+20	; 0x14
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9c 8b       	std	Y+20, r25	; 0x14
    2c76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c78:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	69 f7       	brne	.-38     	; 0x2c5a <LCD_SendData+0x324>
    2c80:	14 c0       	rjmp	.+40     	; 0x2caa <LCD_SendData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c82:	6d 89       	ldd	r22, Y+21	; 0x15
    2c84:	7e 89       	ldd	r23, Y+22	; 0x16
    2c86:	8f 89       	ldd	r24, Y+23	; 0x17
    2c88:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9c 8b       	std	Y+20, r25	; 0x14
    2c94:	8b 8b       	std	Y+19, r24	; 0x13
    2c96:	8b 89       	ldd	r24, Y+19	; 0x13
    2c98:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9a:	98 8b       	std	Y+16, r25	; 0x10
    2c9c:	8f 87       	std	Y+15, r24	; 0x0f
    2c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca0:	98 89       	ldd	r25, Y+16	; 0x10
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_SendData+0x36c>
    2ca6:	98 8b       	std	Y+16, r25	; 0x10
    2ca8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    2caa:	82 e0       	ldi	r24, 0x02	; 2
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	a0 e8       	ldi	r26, 0x80	; 128
    2cb8:	bf e3       	ldi	r27, 0x3F	; 63
    2cba:	8b 87       	std	Y+11, r24	; 0x0b
    2cbc:	9c 87       	std	Y+12, r25	; 0x0c
    2cbe:	ad 87       	std	Y+13, r26	; 0x0d
    2cc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	4a e7       	ldi	r20, 0x7A	; 122
    2cd0:	55 e4       	ldi	r21, 0x45	; 69
    2cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	8f 83       	std	Y+7, r24	; 0x07
    2cdc:	98 87       	std	Y+8, r25	; 0x08
    2cde:	a9 87       	std	Y+9, r26	; 0x09
    2ce0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce4:	78 85       	ldd	r23, Y+8	; 0x08
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e8       	ldi	r20, 0x80	; 128
    2cf0:	5f e3       	ldi	r21, 0x3F	; 63
    2cf2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2cf6:	88 23       	and	r24, r24
    2cf8:	2c f4       	brge	.+10     	; 0x2d04 <LCD_SendData+0x3ce>
		__ticks = 1;
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	9e 83       	std	Y+6, r25	; 0x06
    2d00:	8d 83       	std	Y+5, r24	; 0x05
    2d02:	3f c0       	rjmp	.+126    	; 0x2d82 <LCD_SendData+0x44c>
	else if (__tmp > 65535)
    2d04:	6f 81       	ldd	r22, Y+7	; 0x07
    2d06:	78 85       	ldd	r23, Y+8	; 0x08
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	4f e7       	ldi	r20, 0x7F	; 127
    2d12:	57 e4       	ldi	r21, 0x47	; 71
    2d14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d18:	18 16       	cp	r1, r24
    2d1a:	4c f5       	brge	.+82     	; 0x2d6e <LCD_SendData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e2       	ldi	r20, 0x20	; 32
    2d2a:	51 e4       	ldi	r21, 0x41	; 65
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
    2d44:	0f c0       	rjmp	.+30     	; 0x2d64 <LCD_SendData+0x42e>
    2d46:	80 e9       	ldi	r24, 0x90	; 144
    2d48:	91 e0       	ldi	r25, 0x01	; 1
    2d4a:	9c 83       	std	Y+4, r25	; 0x04
    2d4c:	8b 83       	std	Y+3, r24	; 0x03
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <LCD_SendData+0x41c>
    2d56:	9c 83       	std	Y+4, r25	; 0x04
    2d58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	9e 81       	ldd	r25, Y+6	; 0x06
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	69 f7       	brne	.-38     	; 0x2d46 <LCD_SendData+0x410>
    2d6c:	14 c0       	rjmp	.+40     	; 0x2d96 <LCD_SendData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d70:	78 85       	ldd	r23, Y+8	; 0x08
    2d72:	89 85       	ldd	r24, Y+9	; 0x09
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9e 83       	std	Y+6, r25	; 0x06
    2d80:	8d 83       	std	Y+5, r24	; 0x05
    2d82:	8d 81       	ldd	r24, Y+5	; 0x05
    2d84:	9e 81       	ldd	r25, Y+6	; 0x06
    2d86:	9a 83       	std	Y+2, r25	; 0x02
    2d88:	89 83       	std	Y+1, r24	; 0x01
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <LCD_SendData+0x458>
    2d92:	9a 83       	std	Y+2, r25	; 0x02
    2d94:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    2d96:	e9 96       	adiw	r28, 0x39	; 57
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <LCD_SendCMD>:

void LCD_SendCMD(u8 command) {
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	e9 97       	sbiw	r28, 0x39	; 57
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	89 af       	std	Y+57, r24	; 0x39
    Dio_WriteChannel(RS, STD_LOW);
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>

    // Send command through D4-D7 pins
    Dio_WriteChannel(D4, GET_BIT(command, 4));
    2dc6:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc8:	82 95       	swap	r24
    2dca:	8f 70       	andi	r24, 0x0F	; 15
    2dcc:	98 2f       	mov	r25, r24
    2dce:	91 70       	andi	r25, 0x01	; 1
    2dd0:	88 e0       	ldi	r24, 0x08	; 8
    2dd2:	69 2f       	mov	r22, r25
    2dd4:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(command, 5));
    2dd8:	89 ad       	ldd	r24, Y+57	; 0x39
    2dda:	82 95       	swap	r24
    2ddc:	86 95       	lsr	r24
    2dde:	87 70       	andi	r24, 0x07	; 7
    2de0:	98 2f       	mov	r25, r24
    2de2:	91 70       	andi	r25, 0x01	; 1
    2de4:	89 e0       	ldi	r24, 0x09	; 9
    2de6:	69 2f       	mov	r22, r25
    2de8:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(command, 6));
    2dec:	89 ad       	ldd	r24, Y+57	; 0x39
    2dee:	82 95       	swap	r24
    2df0:	86 95       	lsr	r24
    2df2:	86 95       	lsr	r24
    2df4:	83 70       	andi	r24, 0x03	; 3
    2df6:	98 2f       	mov	r25, r24
    2df8:	91 70       	andi	r25, 0x01	; 1
    2dfa:	8a e0       	ldi	r24, 0x0A	; 10
    2dfc:	69 2f       	mov	r22, r25
    2dfe:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(command, 7));
    2e02:	89 ad       	ldd	r24, Y+57	; 0x39
    2e04:	98 2f       	mov	r25, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	99 27       	eor	r25, r25
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	8c e0       	ldi	r24, 0x0C	; 12
    2e0e:	69 2f       	mov	r22, r25
    2e10:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    2e14:	82 e0       	ldi	r24, 0x02	; 2
    2e16:	61 e0       	ldi	r22, 0x01	; 1
    2e18:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 e8       	ldi	r26, 0x80	; 128
    2e22:	bf e3       	ldi	r27, 0x3F	; 63
    2e24:	8d ab       	std	Y+53, r24	; 0x35
    2e26:	9e ab       	std	Y+54, r25	; 0x36
    2e28:	af ab       	std	Y+55, r26	; 0x37
    2e2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e30:	8f a9       	ldd	r24, Y+55	; 0x37
    2e32:	98 ad       	ldd	r25, Y+56	; 0x38
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a e7       	ldi	r20, 0x7A	; 122
    2e3a:	55 e4       	ldi	r21, 0x45	; 69
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	89 ab       	std	Y+49, r24	; 0x31
    2e46:	9a ab       	std	Y+50, r25	; 0x32
    2e48:	ab ab       	std	Y+51, r26	; 0x33
    2e4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e50:	8b a9       	ldd	r24, Y+51	; 0x33
    2e52:	9c a9       	ldd	r25, Y+52	; 0x34
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <LCD_SendCMD+0xc6>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	98 ab       	std	Y+48, r25	; 0x30
    2e6a:	8f a7       	std	Y+47, r24	; 0x2f
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <LCD_SendCMD+0x144>
	else if (__tmp > 65535)
    2e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e70:	7a a9       	ldd	r23, Y+50	; 0x32
    2e72:	8b a9       	ldd	r24, Y+51	; 0x33
    2e74:	9c a9       	ldd	r25, Y+52	; 0x34
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <LCD_SendCMD+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	6d a9       	ldd	r22, Y+53	; 0x35
    2e88:	7e a9       	ldd	r23, Y+54	; 0x36
    2e8a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e8c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	98 ab       	std	Y+48, r25	; 0x30
    2eac:	8f a7       	std	Y+47, r24	; 0x2f
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_SendCMD+0x126>
    2eb0:	80 e9       	ldi	r24, 0x90	; 144
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
    2eb4:	9e a7       	std	Y+46, r25	; 0x2e
    2eb6:	8d a7       	std	Y+45, r24	; 0x2d
    2eb8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eba:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_SendCMD+0x114>
    2ec0:	9e a7       	std	Y+46, r25	; 0x2e
    2ec2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	98 ab       	std	Y+48, r25	; 0x30
    2ecc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LCD_SendCMD+0x108>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <LCD_SendCMD+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eda:	7a a9       	ldd	r23, Y+50	; 0x32
    2edc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ede:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	98 ab       	std	Y+48, r25	; 0x30
    2eea:	8f a7       	std	Y+47, r24	; 0x2f
    2eec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eee:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef0:	9c a7       	std	Y+44, r25	; 0x2c
    2ef2:	8b a7       	std	Y+43, r24	; 0x2b
    2ef4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ef6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_SendCMD+0x150>
    2efc:	9c a7       	std	Y+44, r25	; 0x2c
    2efe:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    2f00:	82 e0       	ldi	r24, 0x02	; 2
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 e8       	ldi	r26, 0x80	; 128
    2f0e:	bf e3       	ldi	r27, 0x3F	; 63
    2f10:	8f a3       	std	Y+39, r24	; 0x27
    2f12:	98 a7       	std	Y+40, r25	; 0x28
    2f14:	a9 a7       	std	Y+41, r26	; 0x29
    2f16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	6f a1       	ldd	r22, Y+39	; 0x27
    2f1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	4a e7       	ldi	r20, 0x7A	; 122
    2f26:	55 e4       	ldi	r21, 0x45	; 69
    2f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	8b a3       	std	Y+35, r24	; 0x23
    2f32:	9c a3       	std	Y+36, r25	; 0x24
    2f34:	ad a3       	std	Y+37, r26	; 0x25
    2f36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f38:	6b a1       	ldd	r22, Y+35	; 0x23
    2f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <LCD_SendCMD+0x1b2>
		__ticks = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9a a3       	std	Y+34, r25	; 0x22
    2f56:	89 a3       	std	Y+33, r24	; 0x21
    2f58:	3f c0       	rjmp	.+126    	; 0x2fd8 <LCD_SendCMD+0x230>
	else if (__tmp > 65535)
    2f5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f60:	9e a1       	ldd	r25, Y+38	; 0x26
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	4c f5       	brge	.+82     	; 0x2fc4 <LCD_SendCMD+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	6f a1       	ldd	r22, Y+39	; 0x27
    2f74:	78 a5       	ldd	r23, Y+40	; 0x28
    2f76:	89 a5       	ldd	r24, Y+41	; 0x29
    2f78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9a a3       	std	Y+34, r25	; 0x22
    2f98:	89 a3       	std	Y+33, r24	; 0x21
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <LCD_SendCMD+0x212>
    2f9c:	80 e9       	ldi	r24, 0x90	; 144
    2f9e:	91 e0       	ldi	r25, 0x01	; 1
    2fa0:	98 a3       	std	Y+32, r25	; 0x20
    2fa2:	8f 8f       	std	Y+31, r24	; 0x1f
    2fa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fa6:	98 a1       	ldd	r25, Y+32	; 0x20
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <LCD_SendCMD+0x200>
    2fac:	98 a3       	std	Y+32, r25	; 0x20
    2fae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	9a a3       	std	Y+34, r25	; 0x22
    2fb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	89 a1       	ldd	r24, Y+33	; 0x21
    2fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <LCD_SendCMD+0x1f4>
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <LCD_SendCMD+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fca:	9e a1       	ldd	r25, Y+38	; 0x26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9a a3       	std	Y+34, r25	; 0x22
    2fd6:	89 a3       	std	Y+33, r24	; 0x21
    2fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fda:	9a a1       	ldd	r25, Y+34	; 0x22
    2fdc:	9e 8f       	std	Y+30, r25	; 0x1e
    2fde:	8d 8f       	std	Y+29, r24	; 0x1d
    2fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fe2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <LCD_SendCMD+0x23c>
    2fe8:	9e 8f       	std	Y+30, r25	; 0x1e
    2fea:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    // Send the lower 4 bits of the command
    Dio_WriteChannel(D4, GET_BIT(command, 0));
    2fec:	89 ad       	ldd	r24, Y+57	; 0x39
    2fee:	98 2f       	mov	r25, r24
    2ff0:	91 70       	andi	r25, 0x01	; 1
    2ff2:	88 e0       	ldi	r24, 0x08	; 8
    2ff4:	69 2f       	mov	r22, r25
    2ff6:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(command, 1));
    2ffa:	89 ad       	ldd	r24, Y+57	; 0x39
    2ffc:	86 95       	lsr	r24
    2ffe:	98 2f       	mov	r25, r24
    3000:	91 70       	andi	r25, 0x01	; 1
    3002:	89 e0       	ldi	r24, 0x09	; 9
    3004:	69 2f       	mov	r22, r25
    3006:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(command, 2));
    300a:	89 ad       	ldd	r24, Y+57	; 0x39
    300c:	86 95       	lsr	r24
    300e:	86 95       	lsr	r24
    3010:	98 2f       	mov	r25, r24
    3012:	91 70       	andi	r25, 0x01	; 1
    3014:	8a e0       	ldi	r24, 0x0A	; 10
    3016:	69 2f       	mov	r22, r25
    3018:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(command, 3));
    301c:	89 ad       	ldd	r24, Y+57	; 0x39
    301e:	86 95       	lsr	r24
    3020:	86 95       	lsr	r24
    3022:	86 95       	lsr	r24
    3024:	98 2f       	mov	r25, r24
    3026:	91 70       	andi	r25, 0x01	; 1
    3028:	8c e0       	ldi	r24, 0x0C	; 12
    302a:	69 2f       	mov	r22, r25
    302c:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	61 e0       	ldi	r22, 0x01	; 1
    3034:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e8       	ldi	r26, 0x80	; 128
    303e:	bf e3       	ldi	r27, 0x3F	; 63
    3040:	89 8f       	std	Y+25, r24	; 0x19
    3042:	9a 8f       	std	Y+26, r25	; 0x1a
    3044:	ab 8f       	std	Y+27, r26	; 0x1b
    3046:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	69 8d       	ldd	r22, Y+25	; 0x19
    304a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a e7       	ldi	r20, 0x7A	; 122
    3056:	55 e4       	ldi	r21, 0x45	; 69
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8d 8b       	std	Y+21, r24	; 0x15
    3062:	9e 8b       	std	Y+22, r25	; 0x16
    3064:	af 8b       	std	Y+23, r26	; 0x17
    3066:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3068:	6d 89       	ldd	r22, Y+21	; 0x15
    306a:	7e 89       	ldd	r23, Y+22	; 0x16
    306c:	8f 89       	ldd	r24, Y+23	; 0x17
    306e:	98 8d       	ldd	r25, Y+24	; 0x18
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <LCD_SendCMD+0x2e2>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9c 8b       	std	Y+20, r25	; 0x14
    3086:	8b 8b       	std	Y+19, r24	; 0x13
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <LCD_SendCMD+0x360>
	else if (__tmp > 65535)
    308a:	6d 89       	ldd	r22, Y+21	; 0x15
    308c:	7e 89       	ldd	r23, Y+22	; 0x16
    308e:	8f 89       	ldd	r24, Y+23	; 0x17
    3090:	98 8d       	ldd	r25, Y+24	; 0x18
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <LCD_SendCMD+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	69 8d       	ldd	r22, Y+25	; 0x19
    30a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9c 8b       	std	Y+20, r25	; 0x14
    30c8:	8b 8b       	std	Y+19, r24	; 0x13
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <LCD_SendCMD+0x342>
    30cc:	80 e9       	ldi	r24, 0x90	; 144
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	9a 8b       	std	Y+18, r25	; 0x12
    30d2:	89 8b       	std	Y+17, r24	; 0x11
    30d4:	89 89       	ldd	r24, Y+17	; 0x11
    30d6:	9a 89       	ldd	r25, Y+18	; 0x12
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_SendCMD+0x330>
    30dc:	9a 8b       	std	Y+18, r25	; 0x12
    30de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8b 89       	ldd	r24, Y+19	; 0x13
    30e2:	9c 89       	ldd	r25, Y+20	; 0x14
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9c 8b       	std	Y+20, r25	; 0x14
    30e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8b 89       	ldd	r24, Y+19	; 0x13
    30ec:	9c 89       	ldd	r25, Y+20	; 0x14
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <LCD_SendCMD+0x324>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <LCD_SendCMD+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6d 89       	ldd	r22, Y+21	; 0x15
    30f6:	7e 89       	ldd	r23, Y+22	; 0x16
    30f8:	8f 89       	ldd	r24, Y+23	; 0x17
    30fa:	98 8d       	ldd	r25, Y+24	; 0x18
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9c 8b       	std	Y+20, r25	; 0x14
    3106:	8b 8b       	std	Y+19, r24	; 0x13
    3108:	8b 89       	ldd	r24, Y+19	; 0x13
    310a:	9c 89       	ldd	r25, Y+20	; 0x14
    310c:	98 8b       	std	Y+16, r25	; 0x10
    310e:	8f 87       	std	Y+15, r24	; 0x0f
    3110:	8f 85       	ldd	r24, Y+15	; 0x0f
    3112:	98 89       	ldd	r25, Y+16	; 0x10
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_SendCMD+0x36c>
    3118:	98 8b       	std	Y+16, r25	; 0x10
    311a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	0e 94 0a 12 	call	0x2414	; 0x2414 <Dio_WriteChannel>
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	a0 e8       	ldi	r26, 0x80	; 128
    312a:	bf e3       	ldi	r27, 0x3F	; 63
    312c:	8b 87       	std	Y+11, r24	; 0x0b
    312e:	9c 87       	std	Y+12, r25	; 0x0c
    3130:	ad 87       	std	Y+13, r26	; 0x0d
    3132:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3134:	6b 85       	ldd	r22, Y+11	; 0x0b
    3136:	7c 85       	ldd	r23, Y+12	; 0x0c
    3138:	8d 85       	ldd	r24, Y+13	; 0x0d
    313a:	9e 85       	ldd	r25, Y+14	; 0x0e
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	4a e7       	ldi	r20, 0x7A	; 122
    3142:	55 e4       	ldi	r21, 0x45	; 69
    3144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	8f 83       	std	Y+7, r24	; 0x07
    314e:	98 87       	std	Y+8, r25	; 0x08
    3150:	a9 87       	std	Y+9, r26	; 0x09
    3152:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3154:	6f 81       	ldd	r22, Y+7	; 0x07
    3156:	78 85       	ldd	r23, Y+8	; 0x08
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	40 e8       	ldi	r20, 0x80	; 128
    3162:	5f e3       	ldi	r21, 0x3F	; 63
    3164:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3168:	88 23       	and	r24, r24
    316a:	2c f4       	brge	.+10     	; 0x3176 <LCD_SendCMD+0x3ce>
		__ticks = 1;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
    3174:	3f c0       	rjmp	.+126    	; 0x31f4 <LCD_SendCMD+0x44c>
	else if (__tmp > 65535)
    3176:	6f 81       	ldd	r22, Y+7	; 0x07
    3178:	78 85       	ldd	r23, Y+8	; 0x08
    317a:	89 85       	ldd	r24, Y+9	; 0x09
    317c:	9a 85       	ldd	r25, Y+10	; 0x0a
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	3f ef       	ldi	r19, 0xFF	; 255
    3182:	4f e7       	ldi	r20, 0x7F	; 127
    3184:	57 e4       	ldi	r21, 0x47	; 71
    3186:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    318a:	18 16       	cp	r1, r24
    318c:	4c f5       	brge	.+82     	; 0x31e0 <LCD_SendCMD+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3190:	7c 85       	ldd	r23, Y+12	; 0x0c
    3192:	8d 85       	ldd	r24, Y+13	; 0x0d
    3194:	9e 85       	ldd	r25, Y+14	; 0x0e
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e2       	ldi	r20, 0x20	; 32
    319c:	51 e4       	ldi	r21, 0x41	; 65
    319e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9e 83       	std	Y+6, r25	; 0x06
    31b4:	8d 83       	std	Y+5, r24	; 0x05
    31b6:	0f c0       	rjmp	.+30     	; 0x31d6 <LCD_SendCMD+0x42e>
    31b8:	80 e9       	ldi	r24, 0x90	; 144
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	9c 83       	std	Y+4, r25	; 0x04
    31be:	8b 83       	std	Y+3, r24	; 0x03
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <LCD_SendCMD+0x41c>
    31c8:	9c 83       	std	Y+4, r25	; 0x04
    31ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31cc:	8d 81       	ldd	r24, Y+5	; 0x05
    31ce:	9e 81       	ldd	r25, Y+6	; 0x06
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	9e 81       	ldd	r25, Y+6	; 0x06
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	69 f7       	brne	.-38     	; 0x31b8 <LCD_SendCMD+0x410>
    31de:	14 c0       	rjmp	.+40     	; 0x3208 <LCD_SendCMD+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e0:	6f 81       	ldd	r22, Y+7	; 0x07
    31e2:	78 85       	ldd	r23, Y+8	; 0x08
    31e4:	89 85       	ldd	r24, Y+9	; 0x09
    31e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	9e 81       	ldd	r25, Y+6	; 0x06
    31f8:	9a 83       	std	Y+2, r25	; 0x02
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <LCD_SendCMD+0x458>
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    3208:	e9 96       	adiw	r28, 0x39	; 57
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
    3214:	cf 91       	pop	r28
    3216:	df 91       	pop	r29
    3218:	08 95       	ret

0000321a <LCD_Init>:

// Initializes the LCD module by setting various display and cursor settings
void LCD_Init(void) {
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	c6 54       	subi	r28, 0x46	; 70
    3228:	d0 40       	sbci	r29, 0x00	; 0
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	fe 01       	movw	r30, r28
    3236:	ed 5b       	subi	r30, 0xBD	; 189
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a8 e4       	ldi	r26, 0x48	; 72
    3240:	b2 e4       	ldi	r27, 0x42	; 66
    3242:	80 83       	st	Z, r24
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	a2 83       	std	Z+2, r26	; 0x02
    3248:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324a:	8e 01       	movw	r16, r28
    324c:	01 5c       	subi	r16, 0xC1	; 193
    324e:	1f 4f       	sbci	r17, 0xFF	; 255
    3250:	fe 01       	movw	r30, r28
    3252:	ed 5b       	subi	r30, 0xBD	; 189
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	60 81       	ld	r22, Z
    3258:	71 81       	ldd	r23, Z+1	; 0x01
    325a:	82 81       	ldd	r24, Z+2	; 0x02
    325c:	93 81       	ldd	r25, Z+3	; 0x03
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	4a e7       	ldi	r20, 0x7A	; 122
    3264:	55 e4       	ldi	r21, 0x45	; 69
    3266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	f8 01       	movw	r30, r16
    3270:	80 83       	st	Z, r24
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	a2 83       	std	Z+2, r26	; 0x02
    3276:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3278:	fe 01       	movw	r30, r28
    327a:	ff 96       	adiw	r30, 0x3f	; 63
    327c:	60 81       	ld	r22, Z
    327e:	71 81       	ldd	r23, Z+1	; 0x01
    3280:	82 81       	ldd	r24, Z+2	; 0x02
    3282:	93 81       	ldd	r25, Z+3	; 0x03
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e8       	ldi	r20, 0x80	; 128
    328a:	5f e3       	ldi	r21, 0x3F	; 63
    328c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3290:	88 23       	and	r24, r24
    3292:	2c f4       	brge	.+10     	; 0x329e <LCD_Init+0x84>
		__ticks = 1;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	9e af       	std	Y+62, r25	; 0x3e
    329a:	8d af       	std	Y+61, r24	; 0x3d
    329c:	46 c0       	rjmp	.+140    	; 0x332a <LCD_Init+0x110>
	else if (__tmp > 65535)
    329e:	fe 01       	movw	r30, r28
    32a0:	ff 96       	adiw	r30, 0x3f	; 63
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	64 f5       	brge	.+88     	; 0x3312 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	fe 01       	movw	r30, r28
    32bc:	ed 5b       	subi	r30, 0xBD	; 189
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	60 81       	ld	r22, Z
    32c2:	71 81       	ldd	r23, Z+1	; 0x01
    32c4:	82 81       	ldd	r24, Z+2	; 0x02
    32c6:	93 81       	ldd	r25, Z+3	; 0x03
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e2       	ldi	r20, 0x20	; 32
    32ce:	51 e4       	ldi	r21, 0x41	; 65
    32d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	9e af       	std	Y+62, r25	; 0x3e
    32e6:	8d af       	std	Y+61, r24	; 0x3d
    32e8:	0f c0       	rjmp	.+30     	; 0x3308 <LCD_Init+0xee>
    32ea:	80 e9       	ldi	r24, 0x90	; 144
    32ec:	91 e0       	ldi	r25, 0x01	; 1
    32ee:	9c af       	std	Y+60, r25	; 0x3c
    32f0:	8b af       	std	Y+59, r24	; 0x3b
    32f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    32f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <LCD_Init+0xdc>
    32fa:	9c af       	std	Y+60, r25	; 0x3c
    32fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3300:	9e ad       	ldd	r25, Y+62	; 0x3e
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	9e af       	std	Y+62, r25	; 0x3e
    3306:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3308:	8d ad       	ldd	r24, Y+61	; 0x3d
    330a:	9e ad       	ldd	r25, Y+62	; 0x3e
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	69 f7       	brne	.-38     	; 0x32ea <LCD_Init+0xd0>
    3310:	16 c0       	rjmp	.+44     	; 0x333e <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3312:	fe 01       	movw	r30, r28
    3314:	ff 96       	adiw	r30, 0x3f	; 63
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	9e af       	std	Y+62, r25	; 0x3e
    3328:	8d af       	std	Y+61, r24	; 0x3d
    332a:	8d ad       	ldd	r24, Y+61	; 0x3d
    332c:	9e ad       	ldd	r25, Y+62	; 0x3e
    332e:	9a af       	std	Y+58, r25	; 0x3a
    3330:	89 af       	std	Y+57, r24	; 0x39
    3332:	89 ad       	ldd	r24, Y+57	; 0x39
    3334:	9a ad       	ldd	r25, Y+58	; 0x3a
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <LCD_Init+0x11c>
    333a:	9a af       	std	Y+58, r25	; 0x3a
    333c:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(50);  // Wait for the LCD to power up

    // Setting the display mode and cursor settings
    LCD_SendCMD(LCD_CURSOR_HOME);
    333e:	82 e0       	ldi	r24, 0x02	; 2
    3340:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    LCD_SendCMD(LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    3344:	88 e2       	ldi	r24, 0x28	; 40
    3346:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	a0 e8       	ldi	r26, 0x80	; 128
    3350:	bf e3       	ldi	r27, 0x3F	; 63
    3352:	8d ab       	std	Y+53, r24	; 0x35
    3354:	9e ab       	std	Y+54, r25	; 0x36
    3356:	af ab       	std	Y+55, r26	; 0x37
    3358:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335a:	6d a9       	ldd	r22, Y+53	; 0x35
    335c:	7e a9       	ldd	r23, Y+54	; 0x36
    335e:	8f a9       	ldd	r24, Y+55	; 0x37
    3360:	98 ad       	ldd	r25, Y+56	; 0x38
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	4a e7       	ldi	r20, 0x7A	; 122
    3368:	55 e4       	ldi	r21, 0x45	; 69
    336a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	89 ab       	std	Y+49, r24	; 0x31
    3374:	9a ab       	std	Y+50, r25	; 0x32
    3376:	ab ab       	std	Y+51, r26	; 0x33
    3378:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    337a:	69 a9       	ldd	r22, Y+49	; 0x31
    337c:	7a a9       	ldd	r23, Y+50	; 0x32
    337e:	8b a9       	ldd	r24, Y+51	; 0x33
    3380:	9c a9       	ldd	r25, Y+52	; 0x34
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e8       	ldi	r20, 0x80	; 128
    3388:	5f e3       	ldi	r21, 0x3F	; 63
    338a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    338e:	88 23       	and	r24, r24
    3390:	2c f4       	brge	.+10     	; 0x339c <LCD_Init+0x182>
		__ticks = 1;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	98 ab       	std	Y+48, r25	; 0x30
    3398:	8f a7       	std	Y+47, r24	; 0x2f
    339a:	3f c0       	rjmp	.+126    	; 0x341a <LCD_Init+0x200>
	else if (__tmp > 65535)
    339c:	69 a9       	ldd	r22, Y+49	; 0x31
    339e:	7a a9       	ldd	r23, Y+50	; 0x32
    33a0:	8b a9       	ldd	r24, Y+51	; 0x33
    33a2:	9c a9       	ldd	r25, Y+52	; 0x34
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	3f ef       	ldi	r19, 0xFF	; 255
    33a8:	4f e7       	ldi	r20, 0x7F	; 127
    33aa:	57 e4       	ldi	r21, 0x47	; 71
    33ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33b0:	18 16       	cp	r1, r24
    33b2:	4c f5       	brge	.+82     	; 0x3406 <LCD_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b4:	6d a9       	ldd	r22, Y+53	; 0x35
    33b6:	7e a9       	ldd	r23, Y+54	; 0x36
    33b8:	8f a9       	ldd	r24, Y+55	; 0x37
    33ba:	98 ad       	ldd	r25, Y+56	; 0x38
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e2       	ldi	r20, 0x20	; 32
    33c2:	51 e4       	ldi	r21, 0x41	; 65
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	98 ab       	std	Y+48, r25	; 0x30
    33da:	8f a7       	std	Y+47, r24	; 0x2f
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <LCD_Init+0x1e2>
    33de:	80 e9       	ldi	r24, 0x90	; 144
    33e0:	91 e0       	ldi	r25, 0x01	; 1
    33e2:	9e a7       	std	Y+46, r25	; 0x2e
    33e4:	8d a7       	std	Y+45, r24	; 0x2d
    33e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    33e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <LCD_Init+0x1d0>
    33ee:	9e a7       	std	Y+46, r25	; 0x2e
    33f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    33f4:	98 a9       	ldd	r25, Y+48	; 0x30
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	98 ab       	std	Y+48, r25	; 0x30
    33fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	69 f7       	brne	.-38     	; 0x33de <LCD_Init+0x1c4>
    3404:	14 c0       	rjmp	.+40     	; 0x342e <LCD_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3406:	69 a9       	ldd	r22, Y+49	; 0x31
    3408:	7a a9       	ldd	r23, Y+50	; 0x32
    340a:	8b a9       	ldd	r24, Y+51	; 0x33
    340c:	9c a9       	ldd	r25, Y+52	; 0x34
    340e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	98 ab       	std	Y+48, r25	; 0x30
    3418:	8f a7       	std	Y+47, r24	; 0x2f
    341a:	8f a5       	ldd	r24, Y+47	; 0x2f
    341c:	98 a9       	ldd	r25, Y+48	; 0x30
    341e:	9c a7       	std	Y+44, r25	; 0x2c
    3420:	8b a7       	std	Y+43, r24	; 0x2b
    3422:	8b a5       	ldd	r24, Y+43	; 0x2b
    3424:	9c a5       	ldd	r25, Y+44	; 0x2c
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <LCD_Init+0x20c>
    342a:	9c a7       	std	Y+44, r25	; 0x2c
    342c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);

    LCD_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_ON_BLOCK_CURSOR_ON);
    342e:	8f e0       	ldi	r24, 0x0F	; 15
    3430:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	a0 e8       	ldi	r26, 0x80	; 128
    343a:	bf e3       	ldi	r27, 0x3F	; 63
    343c:	8f a3       	std	Y+39, r24	; 0x27
    343e:	98 a7       	std	Y+40, r25	; 0x28
    3440:	a9 a7       	std	Y+41, r26	; 0x29
    3442:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3444:	6f a1       	ldd	r22, Y+39	; 0x27
    3446:	78 a5       	ldd	r23, Y+40	; 0x28
    3448:	89 a5       	ldd	r24, Y+41	; 0x29
    344a:	9a a5       	ldd	r25, Y+42	; 0x2a
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	4a e7       	ldi	r20, 0x7A	; 122
    3452:	55 e4       	ldi	r21, 0x45	; 69
    3454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	8b a3       	std	Y+35, r24	; 0x23
    345e:	9c a3       	std	Y+36, r25	; 0x24
    3460:	ad a3       	std	Y+37, r26	; 0x25
    3462:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3464:	6b a1       	ldd	r22, Y+35	; 0x23
    3466:	7c a1       	ldd	r23, Y+36	; 0x24
    3468:	8d a1       	ldd	r24, Y+37	; 0x25
    346a:	9e a1       	ldd	r25, Y+38	; 0x26
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e8       	ldi	r20, 0x80	; 128
    3472:	5f e3       	ldi	r21, 0x3F	; 63
    3474:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3478:	88 23       	and	r24, r24
    347a:	2c f4       	brge	.+10     	; 0x3486 <LCD_Init+0x26c>
		__ticks = 1;
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	9a a3       	std	Y+34, r25	; 0x22
    3482:	89 a3       	std	Y+33, r24	; 0x21
    3484:	3f c0       	rjmp	.+126    	; 0x3504 <LCD_Init+0x2ea>
	else if (__tmp > 65535)
    3486:	6b a1       	ldd	r22, Y+35	; 0x23
    3488:	7c a1       	ldd	r23, Y+36	; 0x24
    348a:	8d a1       	ldd	r24, Y+37	; 0x25
    348c:	9e a1       	ldd	r25, Y+38	; 0x26
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	3f ef       	ldi	r19, 0xFF	; 255
    3492:	4f e7       	ldi	r20, 0x7F	; 127
    3494:	57 e4       	ldi	r21, 0x47	; 71
    3496:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    349a:	18 16       	cp	r1, r24
    349c:	4c f5       	brge	.+82     	; 0x34f0 <LCD_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349e:	6f a1       	ldd	r22, Y+39	; 0x27
    34a0:	78 a5       	ldd	r23, Y+40	; 0x28
    34a2:	89 a5       	ldd	r24, Y+41	; 0x29
    34a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e2       	ldi	r20, 0x20	; 32
    34ac:	51 e4       	ldi	r21, 0x41	; 65
    34ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	bc 01       	movw	r22, r24
    34b8:	cd 01       	movw	r24, r26
    34ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	9a a3       	std	Y+34, r25	; 0x22
    34c4:	89 a3       	std	Y+33, r24	; 0x21
    34c6:	0f c0       	rjmp	.+30     	; 0x34e6 <LCD_Init+0x2cc>
    34c8:	80 e9       	ldi	r24, 0x90	; 144
    34ca:	91 e0       	ldi	r25, 0x01	; 1
    34cc:	98 a3       	std	Y+32, r25	; 0x20
    34ce:	8f 8f       	std	Y+31, r24	; 0x1f
    34d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34d2:	98 a1       	ldd	r25, Y+32	; 0x20
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <LCD_Init+0x2ba>
    34d8:	98 a3       	std	Y+32, r25	; 0x20
    34da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34dc:	89 a1       	ldd	r24, Y+33	; 0x21
    34de:	9a a1       	ldd	r25, Y+34	; 0x22
    34e0:	01 97       	sbiw	r24, 0x01	; 1
    34e2:	9a a3       	std	Y+34, r25	; 0x22
    34e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e6:	89 a1       	ldd	r24, Y+33	; 0x21
    34e8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	69 f7       	brne	.-38     	; 0x34c8 <LCD_Init+0x2ae>
    34ee:	14 c0       	rjmp	.+40     	; 0x3518 <LCD_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f0:	6b a1       	ldd	r22, Y+35	; 0x23
    34f2:	7c a1       	ldd	r23, Y+36	; 0x24
    34f4:	8d a1       	ldd	r24, Y+37	; 0x25
    34f6:	9e a1       	ldd	r25, Y+38	; 0x26
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	9a a3       	std	Y+34, r25	; 0x22
    3502:	89 a3       	std	Y+33, r24	; 0x21
    3504:	89 a1       	ldd	r24, Y+33	; 0x21
    3506:	9a a1       	ldd	r25, Y+34	; 0x22
    3508:	9e 8f       	std	Y+30, r25	; 0x1e
    350a:	8d 8f       	std	Y+29, r24	; 0x1d
    350c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    350e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	f1 f7       	brne	.-4      	; 0x3510 <LCD_Init+0x2f6>
    3514:	9e 8f       	std	Y+30, r25	; 0x1e
    3516:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    LCD_SendCMD(LCD_CLEAR_COMMAND);
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	a0 e0       	ldi	r26, 0x00	; 0
    3524:	b0 e4       	ldi	r27, 0x40	; 64
    3526:	89 8f       	std	Y+25, r24	; 0x19
    3528:	9a 8f       	std	Y+26, r25	; 0x1a
    352a:	ab 8f       	std	Y+27, r26	; 0x1b
    352c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352e:	69 8d       	ldd	r22, Y+25	; 0x19
    3530:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	4a e7       	ldi	r20, 0x7A	; 122
    353c:	55 e4       	ldi	r21, 0x45	; 69
    353e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	8d 8b       	std	Y+21, r24	; 0x15
    3548:	9e 8b       	std	Y+22, r25	; 0x16
    354a:	af 8b       	std	Y+23, r26	; 0x17
    354c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    354e:	6d 89       	ldd	r22, Y+21	; 0x15
    3550:	7e 89       	ldd	r23, Y+22	; 0x16
    3552:	8f 89       	ldd	r24, Y+23	; 0x17
    3554:	98 8d       	ldd	r25, Y+24	; 0x18
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e8       	ldi	r20, 0x80	; 128
    355c:	5f e3       	ldi	r21, 0x3F	; 63
    355e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3562:	88 23       	and	r24, r24
    3564:	2c f4       	brge	.+10     	; 0x3570 <LCD_Init+0x356>
		__ticks = 1;
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	9c 8b       	std	Y+20, r25	; 0x14
    356c:	8b 8b       	std	Y+19, r24	; 0x13
    356e:	3f c0       	rjmp	.+126    	; 0x35ee <LCD_Init+0x3d4>
	else if (__tmp > 65535)
    3570:	6d 89       	ldd	r22, Y+21	; 0x15
    3572:	7e 89       	ldd	r23, Y+22	; 0x16
    3574:	8f 89       	ldd	r24, Y+23	; 0x17
    3576:	98 8d       	ldd	r25, Y+24	; 0x18
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	3f ef       	ldi	r19, 0xFF	; 255
    357c:	4f e7       	ldi	r20, 0x7F	; 127
    357e:	57 e4       	ldi	r21, 0x47	; 71
    3580:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3584:	18 16       	cp	r1, r24
    3586:	4c f5       	brge	.+82     	; 0x35da <LCD_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3588:	69 8d       	ldd	r22, Y+25	; 0x19
    358a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    358c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    358e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e2       	ldi	r20, 0x20	; 32
    3596:	51 e4       	ldi	r21, 0x41	; 65
    3598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	bc 01       	movw	r22, r24
    35a2:	cd 01       	movw	r24, r26
    35a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	9c 8b       	std	Y+20, r25	; 0x14
    35ae:	8b 8b       	std	Y+19, r24	; 0x13
    35b0:	0f c0       	rjmp	.+30     	; 0x35d0 <LCD_Init+0x3b6>
    35b2:	80 e9       	ldi	r24, 0x90	; 144
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	9a 8b       	std	Y+18, r25	; 0x12
    35b8:	89 8b       	std	Y+17, r24	; 0x11
    35ba:	89 89       	ldd	r24, Y+17	; 0x11
    35bc:	9a 89       	ldd	r25, Y+18	; 0x12
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	f1 f7       	brne	.-4      	; 0x35be <LCD_Init+0x3a4>
    35c2:	9a 8b       	std	Y+18, r25	; 0x12
    35c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c6:	8b 89       	ldd	r24, Y+19	; 0x13
    35c8:	9c 89       	ldd	r25, Y+20	; 0x14
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	9c 8b       	std	Y+20, r25	; 0x14
    35ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d0:	8b 89       	ldd	r24, Y+19	; 0x13
    35d2:	9c 89       	ldd	r25, Y+20	; 0x14
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	69 f7       	brne	.-38     	; 0x35b2 <LCD_Init+0x398>
    35d8:	14 c0       	rjmp	.+40     	; 0x3602 <LCD_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35da:	6d 89       	ldd	r22, Y+21	; 0x15
    35dc:	7e 89       	ldd	r23, Y+22	; 0x16
    35de:	8f 89       	ldd	r24, Y+23	; 0x17
    35e0:	98 8d       	ldd	r25, Y+24	; 0x18
    35e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	9c 8b       	std	Y+20, r25	; 0x14
    35ec:	8b 8b       	std	Y+19, r24	; 0x13
    35ee:	8b 89       	ldd	r24, Y+19	; 0x13
    35f0:	9c 89       	ldd	r25, Y+20	; 0x14
    35f2:	98 8b       	std	Y+16, r25	; 0x10
    35f4:	8f 87       	std	Y+15, r24	; 0x0f
    35f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f8:	98 89       	ldd	r25, Y+16	; 0x10
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	f1 f7       	brne	.-4      	; 0x35fa <LCD_Init+0x3e0>
    35fe:	98 8b       	std	Y+16, r25	; 0x10
    3600:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);

    LCD_SendCMD(LCD_ENTRY_MODE_INC_SHIFT_OFF);
    3602:	86 e0       	ldi	r24, 0x06	; 6
    3604:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a0 e8       	ldi	r26, 0x80	; 128
    360e:	bf e3       	ldi	r27, 0x3F	; 63
    3610:	8b 87       	std	Y+11, r24	; 0x0b
    3612:	9c 87       	std	Y+12, r25	; 0x0c
    3614:	ad 87       	std	Y+13, r26	; 0x0d
    3616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3618:	6b 85       	ldd	r22, Y+11	; 0x0b
    361a:	7c 85       	ldd	r23, Y+12	; 0x0c
    361c:	8d 85       	ldd	r24, Y+13	; 0x0d
    361e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	4a e7       	ldi	r20, 0x7A	; 122
    3626:	55 e4       	ldi	r21, 0x45	; 69
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	8f 83       	std	Y+7, r24	; 0x07
    3632:	98 87       	std	Y+8, r25	; 0x08
    3634:	a9 87       	std	Y+9, r26	; 0x09
    3636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3638:	6f 81       	ldd	r22, Y+7	; 0x07
    363a:	78 85       	ldd	r23, Y+8	; 0x08
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    364c:	88 23       	and	r24, r24
    364e:	2c f4       	brge	.+10     	; 0x365a <LCD_Init+0x440>
		__ticks = 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	3f c0       	rjmp	.+126    	; 0x36d8 <LCD_Init+0x4be>
	else if (__tmp > 65535)
    365a:	6f 81       	ldd	r22, Y+7	; 0x07
    365c:	78 85       	ldd	r23, Y+8	; 0x08
    365e:	89 85       	ldd	r24, Y+9	; 0x09
    3660:	9a 85       	ldd	r25, Y+10	; 0x0a
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	4c f5       	brge	.+82     	; 0x36c4 <LCD_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3672:	6b 85       	ldd	r22, Y+11	; 0x0b
    3674:	7c 85       	ldd	r23, Y+12	; 0x0c
    3676:	8d 85       	ldd	r24, Y+13	; 0x0d
    3678:	9e 85       	ldd	r25, Y+14	; 0x0e
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e2       	ldi	r20, 0x20	; 32
    3680:	51 e4       	ldi	r21, 0x41	; 65
    3682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9e 83       	std	Y+6, r25	; 0x06
    3698:	8d 83       	std	Y+5, r24	; 0x05
    369a:	0f c0       	rjmp	.+30     	; 0x36ba <LCD_Init+0x4a0>
    369c:	80 e9       	ldi	r24, 0x90	; 144
    369e:	91 e0       	ldi	r25, 0x01	; 1
    36a0:	9c 83       	std	Y+4, r25	; 0x04
    36a2:	8b 83       	std	Y+3, r24	; 0x03
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	9c 81       	ldd	r25, Y+4	; 0x04
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	f1 f7       	brne	.-4      	; 0x36a8 <LCD_Init+0x48e>
    36ac:	9c 83       	std	Y+4, r25	; 0x04
    36ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	9e 83       	std	Y+6, r25	; 0x06
    36b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	69 f7       	brne	.-38     	; 0x369c <LCD_Init+0x482>
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <LCD_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c4:	6f 81       	ldd	r22, Y+7	; 0x07
    36c6:	78 85       	ldd	r23, Y+8	; 0x08
    36c8:	89 85       	ldd	r24, Y+9	; 0x09
    36ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	9e 83       	std	Y+6, r25	; 0x06
    36d6:	8d 83       	std	Y+5, r24	; 0x05
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	9a 83       	std	Y+2, r25	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <LCD_Init+0x4ca>
    36e8:	9a 83       	std	Y+2, r25	; 0x02
    36ea:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);

    LCD_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    36ec:	8c e0       	ldi	r24, 0x0C	; 12
    36ee:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>

//    LCD_SendCMD(LCD_DDRAM_START);  // Set the cursor to the start of the Display Data RAM (DDRAM)
}
    36f2:	ca 5b       	subi	r28, 0xBA	; 186
    36f4:	df 4f       	sbci	r29, 0xFF	; 255
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	cf 91       	pop	r28
    3702:	df 91       	pop	r29
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
    3708:	08 95       	ret

0000370a <LCD_CLR>:

// Clears the LCD display
void LCD_CLR(void) {
    370a:	df 93       	push	r29
    370c:	cf 93       	push	r28
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCMD(0x01);
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    //current_pos = 0;
}
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <LCD_PutChar>:

// Displays a character on the LCD
void LCD_PutChar(const u8 character) {
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	0f 92       	push	r0
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(character);
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_SendData>
 //   current_pos++;
}
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <LCD_PutString>:

// Displays a text string on the LCD
void LCD_PutString(const u8 *str) {
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	00 d0       	rcall	.+0      	; 0x373e <LCD_PutString+0x6>
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	0a c0       	rjmp	.+20     	; 0x375c <LCD_PutString+0x24>
    while (*str) {
        LCD_PutChar(*str);
    3748:	e9 81       	ldd	r30, Y+1	; 0x01
    374a:	fa 81       	ldd	r31, Y+2	; 0x02
    374c:	80 81       	ld	r24, Z
    374e:	0e 94 8f 1b 	call	0x371e	; 0x371e <LCD_PutChar>
        str++;
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	9a 81       	ldd	r25, Y+2	; 0x02
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	9a 83       	std	Y+2, r25	; 0x02
    375a:	89 83       	std	Y+1, r24	; 0x01
 //   current_pos++;
}

// Displays a text string on the LCD
void LCD_PutString(const u8 *str) {
    while (*str) {
    375c:	e9 81       	ldd	r30, Y+1	; 0x01
    375e:	fa 81       	ldd	r31, Y+2	; 0x02
    3760:	80 81       	ld	r24, Z
    3762:	88 23       	and	r24, r24
    3764:	89 f7       	brne	.-30     	; 0x3748 <LCD_PutString+0x10>
        LCD_PutChar(*str);
        str++;
    }
}
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <LCD_PutChar_at_X_Y>:

// Displays a character at a specific position on the LCD
void LCD_PutChar_at_X_Y(u8 data, u8 row, u8 col) {
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <LCD_PutChar_at_X_Y+0x6>
    3776:	0f 92       	push	r0
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	89 83       	std	Y+1, r24	; 0x01
    377e:	6a 83       	std	Y+2, r22	; 0x02
    3780:	4b 83       	std	Y+3, r20	; 0x03
    LCD_GoTo(row, col);
    3782:	8a 81       	ldd	r24, Y+2	; 0x02
    3784:	6b 81       	ldd	r22, Y+3	; 0x03
    3786:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_GoTo>
    LCD_SendData(data);
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_SendData>
}
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	08 95       	ret

0000379c <LCD_PutString_at_X_Y>:

// Displays a string at a specific position on the LCD
void LCD_PutString_at_X_Y(u8 *data, u8 row, u8 col) {
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	00 d0       	rcall	.+0      	; 0x37a2 <LCD_PutString_at_X_Y+0x6>
    37a2:	00 d0       	rcall	.+0      	; 0x37a4 <LCD_PutString_at_X_Y+0x8>
    37a4:	cd b7       	in	r28, 0x3d	; 61
    37a6:	de b7       	in	r29, 0x3e	; 62
    37a8:	9a 83       	std	Y+2, r25	; 0x02
    37aa:	89 83       	std	Y+1, r24	; 0x01
    37ac:	6b 83       	std	Y+3, r22	; 0x03
    37ae:	4c 83       	std	Y+4, r20	; 0x04
    LCD_GoTo(row, col);
    37b0:	8b 81       	ldd	r24, Y+3	; 0x03
    37b2:	6c 81       	ldd	r22, Y+4	; 0x04
    37b4:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_GoTo>
    LCD_PutString(data);
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_PutString>
}
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	08 95       	ret

000037ce <LCD_PutInt>:

// Displays an integer value on the LCD
void LCD_PutInt(u32 Number) {
    37ce:	df 93       	push	r29
    37d0:	cf 93       	push	r28
    37d2:	00 d0       	rcall	.+0      	; 0x37d4 <LCD_PutInt+0x6>
    37d4:	00 d0       	rcall	.+0      	; 0x37d6 <LCD_PutInt+0x8>
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	69 83       	std	Y+1, r22	; 0x01
    37dc:	7a 83       	std	Y+2, r23	; 0x02
    37de:	8b 83       	std	Y+3, r24	; 0x03
    37e0:	9c 83       	std	Y+4, r25	; 0x04
	if(Number == 0 )
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	9a 81       	ldd	r25, Y+2	; 0x02
    37e6:	ab 81       	ldd	r26, Y+3	; 0x03
    37e8:	bc 81       	ldd	r27, Y+4	; 0x04
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	a1 05       	cpc	r26, r1
    37ee:	b1 05       	cpc	r27, r1
    37f0:	19 f1       	breq	.+70     	; 0x3838 <LCD_PutInt+0x6a>
	return ;
	else
	LCD_PutInt(Number/10);
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	9a 81       	ldd	r25, Y+2	; 0x02
    37f6:	ab 81       	ldd	r26, Y+3	; 0x03
    37f8:	bc 81       	ldd	r27, Y+4	; 0x04
    37fa:	2a e0       	ldi	r18, 0x0A	; 10
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e0       	ldi	r20, 0x00	; 0
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	bc 01       	movw	r22, r24
    3804:	cd 01       	movw	r24, r26
    3806:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__udivmodsi4>
    380a:	da 01       	movw	r26, r20
    380c:	c9 01       	movw	r24, r18
    380e:	bc 01       	movw	r22, r24
    3810:	cd 01       	movw	r24, r26
    3812:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_PutInt>
	LCD_PutChar((Number%10)+0x30);
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	9a 81       	ldd	r25, Y+2	; 0x02
    381a:	ab 81       	ldd	r26, Y+3	; 0x03
    381c:	bc 81       	ldd	r27, Y+4	; 0x04
    381e:	2a e0       	ldi	r18, 0x0A	; 10
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e0       	ldi	r20, 0x00	; 0
    3824:	50 e0       	ldi	r21, 0x00	; 0
    3826:	bc 01       	movw	r22, r24
    3828:	cd 01       	movw	r24, r26
    382a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__udivmodsi4>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	80 5d       	subi	r24, 0xD0	; 208
    3834:	0e 94 8f 1b 	call	0x371e	; 0x371e <LCD_PutChar>
}
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	08 95       	ret

00003846 <LCD_PutCustomChar>:

// Displays a custom character at a specific row and column on the LCD
void LCD_PutCustomChar(u8 row, u8 col, u8 *CustomCharacter, u8 MemPos) {
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	27 97       	sbiw	r28, 0x07	; 7
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	8b 83       	std	Y+3, r24	; 0x03
    385c:	6c 83       	std	Y+4, r22	; 0x04
    385e:	5e 83       	std	Y+6, r21	; 0x06
    3860:	4d 83       	std	Y+5, r20	; 0x05
    3862:	2f 83       	std	Y+7, r18	; 0x07
    LCD_SendCMD(LCD_CGRAM_START + (MemPos * 8));
    3864:	8f 81       	ldd	r24, Y+7	; 0x07
    3866:	88 2f       	mov	r24, r24
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	08 96       	adiw	r24, 0x08	; 8
    386c:	88 0f       	add	r24, r24
    386e:	99 1f       	adc	r25, r25
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    for (int i = 0; i < 8; i++) {
    387c:	1a 82       	std	Y+2, r1	; 0x02
    387e:	19 82       	std	Y+1, r1	; 0x01
    3880:	0f c0       	rjmp	.+30     	; 0x38a0 <LCD_PutCustomChar+0x5a>
        LCD_SendData(CustomCharacter[i]);
    3882:	29 81       	ldd	r18, Y+1	; 0x01
    3884:	3a 81       	ldd	r19, Y+2	; 0x02
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	9e 81       	ldd	r25, Y+6	; 0x06
    388a:	fc 01       	movw	r30, r24
    388c:	e2 0f       	add	r30, r18
    388e:	f3 1f       	adc	r31, r19
    3890:	80 81       	ld	r24, Z
    3892:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_SendData>
}

// Displays a custom character at a specific row and column on the LCD
void LCD_PutCustomChar(u8 row, u8 col, u8 *CustomCharacter, u8 MemPos) {
    LCD_SendCMD(LCD_CGRAM_START + (MemPos * 8));
    for (int i = 0; i < 8; i++) {
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	9a 81       	ldd	r25, Y+2	; 0x02
    389a:	01 96       	adiw	r24, 0x01	; 1
    389c:	9a 83       	std	Y+2, r25	; 0x02
    389e:	89 83       	std	Y+1, r24	; 0x01
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	9a 81       	ldd	r25, Y+2	; 0x02
    38a4:	88 30       	cpi	r24, 0x08	; 8
    38a6:	91 05       	cpc	r25, r1
    38a8:	64 f3       	brlt	.-40     	; 0x3882 <LCD_PutCustomChar+0x3c>
        LCD_SendData(CustomCharacter[i]);
    }
    LCD_PutChar_at_X_Y(MemPos, row, col);
    38aa:	8f 81       	ldd	r24, Y+7	; 0x07
    38ac:	6b 81       	ldd	r22, Y+3	; 0x03
    38ae:	4c 81       	ldd	r20, Y+4	; 0x04
    38b0:	0e 94 b8 1b 	call	0x3770	; 0x3770 <LCD_PutChar_at_X_Y>
}
    38b4:	27 96       	adiw	r28, 0x07	; 7
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <LCD_GoTo>:

// Moves the cursor to a specified row and column on the LCD
void LCD_GoTo(u8 row, u8 col) {
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <LCD_GoTo+0x6>
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <LCD_GoTo+0x8>
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	6a 83       	std	Y+2, r22	; 0x02
    col--;
    38d6:	8a 81       	ldd	r24, Y+2	; 0x02
    38d8:	81 50       	subi	r24, 0x01	; 1
    38da:	8a 83       	std	Y+2, r24	; 0x02
    switch (row) {
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	28 2f       	mov	r18, r24
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	3c 83       	std	Y+4, r19	; 0x04
    38e4:	2b 83       	std	Y+3, r18	; 0x03
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ea:	82 30       	cpi	r24, 0x02	; 2
    38ec:	91 05       	cpc	r25, r1
    38ee:	d9 f0       	breq	.+54     	; 0x3926 <LCD_GoTo+0x60>
    38f0:	2b 81       	ldd	r18, Y+3	; 0x03
    38f2:	3c 81       	ldd	r19, Y+4	; 0x04
    38f4:	23 30       	cpi	r18, 0x03	; 3
    38f6:	31 05       	cpc	r19, r1
    38f8:	34 f4       	brge	.+12     	; 0x3906 <LCD_GoTo+0x40>
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	9c 81       	ldd	r25, Y+4	; 0x04
    38fe:	81 30       	cpi	r24, 0x01	; 1
    3900:	91 05       	cpc	r25, r1
    3902:	61 f0       	breq	.+24     	; 0x391c <LCD_GoTo+0x56>
    3904:	1e c0       	rjmp	.+60     	; 0x3942 <LCD_GoTo+0x7c>
    3906:	2b 81       	ldd	r18, Y+3	; 0x03
    3908:	3c 81       	ldd	r19, Y+4	; 0x04
    390a:	23 30       	cpi	r18, 0x03	; 3
    390c:	31 05       	cpc	r19, r1
    390e:	81 f0       	breq	.+32     	; 0x3930 <LCD_GoTo+0x6a>
    3910:	8b 81       	ldd	r24, Y+3	; 0x03
    3912:	9c 81       	ldd	r25, Y+4	; 0x04
    3914:	84 30       	cpi	r24, 0x04	; 4
    3916:	91 05       	cpc	r25, r1
    3918:	81 f0       	breq	.+32     	; 0x393a <LCD_GoTo+0x74>
    391a:	13 c0       	rjmp	.+38     	; 0x3942 <LCD_GoTo+0x7c>
        case ROW1:
            LCD_SendCMD(0x80 + col);
    391c:	8a 81       	ldd	r24, Y+2	; 0x02
    391e:	80 58       	subi	r24, 0x80	; 128
    3920:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    3924:	0e c0       	rjmp	.+28     	; 0x3942 <LCD_GoTo+0x7c>
            break;
        case ROW2://C0
            LCD_SendCMD(0xC0 + col);
    3926:	8a 81       	ldd	r24, Y+2	; 0x02
    3928:	80 54       	subi	r24, 0x40	; 64
    392a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    392e:	09 c0       	rjmp	.+18     	; 0x3942 <LCD_GoTo+0x7c>
            break;
        case ROW3:
            LCD_SendCMD(0x94 + col);
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	8c 56       	subi	r24, 0x6C	; 108
    3934:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
    3938:	04 c0       	rjmp	.+8      	; 0x3942 <LCD_GoTo+0x7c>
            break;
        case ROW4://D4
            LCD_SendCMD(0xD4 + col);
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	8c 52       	subi	r24, 0x2C	; 44
    393e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LCD_SendCMD>
            break;
        default:
            break;
    }
}
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	08 95       	ret

00003950 <main>:
#include "MCAL/PORT/PORT.h"
#include "MCAL/PORT/PORT_cnf.h"
#include "avr/delay.h"
#include "HAL/LCD/LCD.h"

int main() {
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	6f 97       	sbiw	r28, 0x1f	; 31
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61

	u8 duty ; u16 freq;
	Port_Init(pin_cfg);
    3964:	8a e6       	ldi	r24, 0x6A	; 106
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	0e 94 9e 0c 	call	0x193c	; 0x193c <Port_Init>

	LCD_Init();
    396c:	0e 94 0d 19 	call	0x321a	; 0x321a <LCD_Init>
	GI_voidEnable();
    3970:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GI_voidEnable>

	ICU_voidInit();
    3974:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <ICU_voidInit>
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	a0 ea       	ldi	r26, 0xA0	; 160
    397e:	b1 e4       	ldi	r27, 0x41	; 65
    3980:	89 8f       	std	Y+25, r24	; 0x19
    3982:	9a 8f       	std	Y+26, r25	; 0x1a
    3984:	ab 8f       	std	Y+27, r26	; 0x1b
    3986:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3988:	69 8d       	ldd	r22, Y+25	; 0x19
    398a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    398c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    398e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	4a e7       	ldi	r20, 0x7A	; 122
    3996:	55 e4       	ldi	r21, 0x45	; 69
    3998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	8d 8b       	std	Y+21, r24	; 0x15
    39a2:	9e 8b       	std	Y+22, r25	; 0x16
    39a4:	af 8b       	std	Y+23, r26	; 0x17
    39a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39a8:	6d 89       	ldd	r22, Y+21	; 0x15
    39aa:	7e 89       	ldd	r23, Y+22	; 0x16
    39ac:	8f 89       	ldd	r24, Y+23	; 0x17
    39ae:	98 8d       	ldd	r25, Y+24	; 0x18
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e8       	ldi	r20, 0x80	; 128
    39b6:	5f e3       	ldi	r21, 0x3F	; 63
    39b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39bc:	88 23       	and	r24, r24
    39be:	2c f4       	brge	.+10     	; 0x39ca <main+0x7a>
		__ticks = 1;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9c 8b       	std	Y+20, r25	; 0x14
    39c6:	8b 8b       	std	Y+19, r24	; 0x13
    39c8:	3f c0       	rjmp	.+126    	; 0x3a48 <main+0xf8>
	else if (__tmp > 65535)
    39ca:	6d 89       	ldd	r22, Y+21	; 0x15
    39cc:	7e 89       	ldd	r23, Y+22	; 0x16
    39ce:	8f 89       	ldd	r24, Y+23	; 0x17
    39d0:	98 8d       	ldd	r25, Y+24	; 0x18
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	3f ef       	ldi	r19, 0xFF	; 255
    39d6:	4f e7       	ldi	r20, 0x7F	; 127
    39d8:	57 e4       	ldi	r21, 0x47	; 71
    39da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39de:	18 16       	cp	r1, r24
    39e0:	4c f5       	brge	.+82     	; 0x3a34 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e2:	69 8d       	ldd	r22, Y+25	; 0x19
    39e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e2       	ldi	r20, 0x20	; 32
    39f0:	51 e4       	ldi	r21, 0x41	; 65
    39f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9c 8b       	std	Y+20, r25	; 0x14
    3a08:	8b 8b       	std	Y+19, r24	; 0x13
    3a0a:	0f c0       	rjmp	.+30     	; 0x3a2a <main+0xda>
    3a0c:	80 e9       	ldi	r24, 0x90	; 144
    3a0e:	91 e0       	ldi	r25, 0x01	; 1
    3a10:	9a 8b       	std	Y+18, r25	; 0x12
    3a12:	89 8b       	std	Y+17, r24	; 0x11
    3a14:	89 89       	ldd	r24, Y+17	; 0x11
    3a16:	9a 89       	ldd	r25, Y+18	; 0x12
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <main+0xc8>
    3a1c:	9a 8b       	std	Y+18, r25	; 0x12
    3a1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a20:	8b 89       	ldd	r24, Y+19	; 0x13
    3a22:	9c 89       	ldd	r25, Y+20	; 0x14
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	9c 8b       	std	Y+20, r25	; 0x14
    3a28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	69 f7       	brne	.-38     	; 0x3a0c <main+0xbc>
    3a32:	14 c0       	rjmp	.+40     	; 0x3a5c <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a34:	6d 89       	ldd	r22, Y+21	; 0x15
    3a36:	7e 89       	ldd	r23, Y+22	; 0x16
    3a38:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	9c 8b       	std	Y+20, r25	; 0x14
    3a46:	8b 8b       	std	Y+19, r24	; 0x13
    3a48:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4c:	98 8b       	std	Y+16, r25	; 0x10
    3a4e:	8f 87       	std	Y+15, r24	; 0x0f
    3a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a52:	98 89       	ldd	r25, Y+16	; 0x10
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <main+0x104>
    3a58:	98 8b       	std	Y+16, r25	; 0x10
    3a5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	ICU_voidGetDutyCycle(&duty);
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	4d 96       	adiw	r24, 0x1d	; 29
    3a60:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <ICU_voidGetDutyCycle>

	ICU_voidGetFrequency(&freq);
    3a64:	ce 01       	movw	r24, r28
    3a66:	4e 96       	adiw	r24, 0x1e	; 30
    3a68:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <ICU_voidGetFrequency>

	LCD_PutInt(duty);
    3a6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a6e:	88 2f       	mov	r24, r24
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	a0 e0       	ldi	r26, 0x00	; 0
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_PutInt>
	LCD_PutString("F");
    3a7e:	80 e6       	ldi	r24, 0x60	; 96
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_PutString>
	LCD_PutInt(freq);
    3a86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a8a:	cc 01       	movw	r24, r24
    3a8c:	a0 e0       	ldi	r26, 0x00	; 0
    3a8e:	b0 e0       	ldi	r27, 0x00	; 0
    3a90:	bc 01       	movw	r22, r24
    3a92:	cd 01       	movw	r24, r26
    3a94:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_PutInt>
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	a0 e2       	ldi	r26, 0x20	; 32
    3a9e:	b1 e4       	ldi	r27, 0x41	; 65
    3aa0:	8b 87       	std	Y+11, r24	; 0x0b
    3aa2:	9c 87       	std	Y+12, r25	; 0x0c
    3aa4:	ad 87       	std	Y+13, r26	; 0x0d
    3aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	4a e7       	ldi	r20, 0x7A	; 122
    3ab6:	55 e4       	ldi	r21, 0x45	; 69
    3ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	8f 83       	std	Y+7, r24	; 0x07
    3ac2:	98 87       	std	Y+8, r25	; 0x08
    3ac4:	a9 87       	std	Y+9, r26	; 0x09
    3ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aca:	78 85       	ldd	r23, Y+8	; 0x08
    3acc:	89 85       	ldd	r24, Y+9	; 0x09
    3ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e8       	ldi	r20, 0x80	; 128
    3ad6:	5f e3       	ldi	r21, 0x3F	; 63
    3ad8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3adc:	88 23       	and	r24, r24
    3ade:	2c f4       	brge	.+10     	; 0x3aea <main+0x19a>
		__ticks = 1;
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	9e 83       	std	Y+6, r25	; 0x06
    3ae6:	8d 83       	std	Y+5, r24	; 0x05
    3ae8:	3f c0       	rjmp	.+126    	; 0x3b68 <main+0x218>
	else if (__tmp > 65535)
    3aea:	6f 81       	ldd	r22, Y+7	; 0x07
    3aec:	78 85       	ldd	r23, Y+8	; 0x08
    3aee:	89 85       	ldd	r24, Y+9	; 0x09
    3af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	3f ef       	ldi	r19, 0xFF	; 255
    3af6:	4f e7       	ldi	r20, 0x7F	; 127
    3af8:	57 e4       	ldi	r21, 0x47	; 71
    3afa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3afe:	18 16       	cp	r1, r24
    3b00:	4c f5       	brge	.+82     	; 0x3b54 <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e2       	ldi	r20, 0x20	; 32
    3b10:	51 e4       	ldi	r21, 0x41	; 65
    3b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	9e 83       	std	Y+6, r25	; 0x06
    3b28:	8d 83       	std	Y+5, r24	; 0x05
    3b2a:	0f c0       	rjmp	.+30     	; 0x3b4a <main+0x1fa>
    3b2c:	80 e9       	ldi	r24, 0x90	; 144
    3b2e:	91 e0       	ldi	r25, 0x01	; 1
    3b30:	9c 83       	std	Y+4, r25	; 0x04
    3b32:	8b 83       	std	Y+3, r24	; 0x03
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	9c 81       	ldd	r25, Y+4	; 0x04
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	f1 f7       	brne	.-4      	; 0x3b38 <main+0x1e8>
    3b3c:	9c 83       	std	Y+4, r25	; 0x04
    3b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	9e 81       	ldd	r25, Y+6	; 0x06
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	9e 83       	std	Y+6, r25	; 0x06
    3b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	69 f7       	brne	.-38     	; 0x3b2c <main+0x1dc>
    3b52:	14 c0       	rjmp	.+40     	; 0x3b7c <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b54:	6f 81       	ldd	r22, Y+7	; 0x07
    3b56:	78 85       	ldd	r23, Y+8	; 0x08
    3b58:	89 85       	ldd	r24, Y+9	; 0x09
    3b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	9e 83       	std	Y+6, r25	; 0x06
    3b66:	8d 83       	std	Y+5, r24	; 0x05
    3b68:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6c:	9a 83       	std	Y+2, r25	; 0x02
    3b6e:	89 83       	std	Y+1, r24	; 0x01
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	9a 81       	ldd	r25, Y+2	; 0x02
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	f1 f7       	brne	.-4      	; 0x3b74 <main+0x224>
    3b78:	9a 83       	std	Y+2, r25	; 0x02
    3b7a:	89 83       	std	Y+1, r24	; 0x01

	while (1)
	{	_delay_ms(10);

		LCD_CLR();
    3b7c:	0e 94 85 1b 	call	0x370a	; 0x370a <LCD_CLR>
		ICU_voidGetDutyCycle(&duty);
    3b80:	ce 01       	movw	r24, r28
    3b82:	4d 96       	adiw	r24, 0x1d	; 29
    3b84:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <ICU_voidGetDutyCycle>

		ICU_voidGetFrequency(&freq);
    3b88:	ce 01       	movw	r24, r28
    3b8a:	4e 96       	adiw	r24, 0x1e	; 30
    3b8c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <ICU_voidGetFrequency>

		LCD_PutInt(duty);
    3b90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b92:	88 2f       	mov	r24, r24
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	a0 e0       	ldi	r26, 0x00	; 0
    3b98:	b0 e0       	ldi	r27, 0x00	; 0
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_PutInt>
		LCD_PutString("F");
    3ba2:	80 e6       	ldi	r24, 0x60	; 96
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_PutString>
		LCD_PutInt(freq);
    3baa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3bae:	cc 01       	movw	r24, r24
    3bb0:	a0 e0       	ldi	r26, 0x00	; 0
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_PutInt>
    3bbc:	6d cf       	rjmp	.-294    	; 0x3a98 <main+0x148>

00003bbe <__mulsi3>:
    3bbe:	62 9f       	mul	r22, r18
    3bc0:	d0 01       	movw	r26, r0
    3bc2:	73 9f       	mul	r23, r19
    3bc4:	f0 01       	movw	r30, r0
    3bc6:	82 9f       	mul	r24, r18
    3bc8:	e0 0d       	add	r30, r0
    3bca:	f1 1d       	adc	r31, r1
    3bcc:	64 9f       	mul	r22, r20
    3bce:	e0 0d       	add	r30, r0
    3bd0:	f1 1d       	adc	r31, r1
    3bd2:	92 9f       	mul	r25, r18
    3bd4:	f0 0d       	add	r31, r0
    3bd6:	83 9f       	mul	r24, r19
    3bd8:	f0 0d       	add	r31, r0
    3bda:	74 9f       	mul	r23, r20
    3bdc:	f0 0d       	add	r31, r0
    3bde:	65 9f       	mul	r22, r21
    3be0:	f0 0d       	add	r31, r0
    3be2:	99 27       	eor	r25, r25
    3be4:	72 9f       	mul	r23, r18
    3be6:	b0 0d       	add	r27, r0
    3be8:	e1 1d       	adc	r30, r1
    3bea:	f9 1f       	adc	r31, r25
    3bec:	63 9f       	mul	r22, r19
    3bee:	b0 0d       	add	r27, r0
    3bf0:	e1 1d       	adc	r30, r1
    3bf2:	f9 1f       	adc	r31, r25
    3bf4:	bd 01       	movw	r22, r26
    3bf6:	cf 01       	movw	r24, r30
    3bf8:	11 24       	eor	r1, r1
    3bfa:	08 95       	ret

00003bfc <__udivmodhi4>:
    3bfc:	aa 1b       	sub	r26, r26
    3bfe:	bb 1b       	sub	r27, r27
    3c00:	51 e1       	ldi	r21, 0x11	; 17
    3c02:	07 c0       	rjmp	.+14     	; 0x3c12 <__udivmodhi4_ep>

00003c04 <__udivmodhi4_loop>:
    3c04:	aa 1f       	adc	r26, r26
    3c06:	bb 1f       	adc	r27, r27
    3c08:	a6 17       	cp	r26, r22
    3c0a:	b7 07       	cpc	r27, r23
    3c0c:	10 f0       	brcs	.+4      	; 0x3c12 <__udivmodhi4_ep>
    3c0e:	a6 1b       	sub	r26, r22
    3c10:	b7 0b       	sbc	r27, r23

00003c12 <__udivmodhi4_ep>:
    3c12:	88 1f       	adc	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	5a 95       	dec	r21
    3c18:	a9 f7       	brne	.-22     	; 0x3c04 <__udivmodhi4_loop>
    3c1a:	80 95       	com	r24
    3c1c:	90 95       	com	r25
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	08 95       	ret

00003c24 <__udivmodsi4>:
    3c24:	a1 e2       	ldi	r26, 0x21	; 33
    3c26:	1a 2e       	mov	r1, r26
    3c28:	aa 1b       	sub	r26, r26
    3c2a:	bb 1b       	sub	r27, r27
    3c2c:	fd 01       	movw	r30, r26
    3c2e:	0d c0       	rjmp	.+26     	; 0x3c4a <__udivmodsi4_ep>

00003c30 <__udivmodsi4_loop>:
    3c30:	aa 1f       	adc	r26, r26
    3c32:	bb 1f       	adc	r27, r27
    3c34:	ee 1f       	adc	r30, r30
    3c36:	ff 1f       	adc	r31, r31
    3c38:	a2 17       	cp	r26, r18
    3c3a:	b3 07       	cpc	r27, r19
    3c3c:	e4 07       	cpc	r30, r20
    3c3e:	f5 07       	cpc	r31, r21
    3c40:	20 f0       	brcs	.+8      	; 0x3c4a <__udivmodsi4_ep>
    3c42:	a2 1b       	sub	r26, r18
    3c44:	b3 0b       	sbc	r27, r19
    3c46:	e4 0b       	sbc	r30, r20
    3c48:	f5 0b       	sbc	r31, r21

00003c4a <__udivmodsi4_ep>:
    3c4a:	66 1f       	adc	r22, r22
    3c4c:	77 1f       	adc	r23, r23
    3c4e:	88 1f       	adc	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	1a 94       	dec	r1
    3c54:	69 f7       	brne	.-38     	; 0x3c30 <__udivmodsi4_loop>
    3c56:	60 95       	com	r22
    3c58:	70 95       	com	r23
    3c5a:	80 95       	com	r24
    3c5c:	90 95       	com	r25
    3c5e:	9b 01       	movw	r18, r22
    3c60:	ac 01       	movw	r20, r24
    3c62:	bd 01       	movw	r22, r26
    3c64:	cf 01       	movw	r24, r30
    3c66:	08 95       	ret

00003c68 <__prologue_saves__>:
    3c68:	2f 92       	push	r2
    3c6a:	3f 92       	push	r3
    3c6c:	4f 92       	push	r4
    3c6e:	5f 92       	push	r5
    3c70:	6f 92       	push	r6
    3c72:	7f 92       	push	r7
    3c74:	8f 92       	push	r8
    3c76:	9f 92       	push	r9
    3c78:	af 92       	push	r10
    3c7a:	bf 92       	push	r11
    3c7c:	cf 92       	push	r12
    3c7e:	df 92       	push	r13
    3c80:	ef 92       	push	r14
    3c82:	ff 92       	push	r15
    3c84:	0f 93       	push	r16
    3c86:	1f 93       	push	r17
    3c88:	cf 93       	push	r28
    3c8a:	df 93       	push	r29
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	ca 1b       	sub	r28, r26
    3c92:	db 0b       	sbc	r29, r27
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	de bf       	out	0x3e, r29	; 62
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	cd bf       	out	0x3d, r28	; 61
    3c9e:	09 94       	ijmp

00003ca0 <__epilogue_restores__>:
    3ca0:	2a 88       	ldd	r2, Y+18	; 0x12
    3ca2:	39 88       	ldd	r3, Y+17	; 0x11
    3ca4:	48 88       	ldd	r4, Y+16	; 0x10
    3ca6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ca8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3caa:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cac:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cae:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cb2:	b9 84       	ldd	r11, Y+9	; 0x09
    3cb4:	c8 84       	ldd	r12, Y+8	; 0x08
    3cb6:	df 80       	ldd	r13, Y+7	; 0x07
    3cb8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cba:	fd 80       	ldd	r15, Y+5	; 0x05
    3cbc:	0c 81       	ldd	r16, Y+4	; 0x04
    3cbe:	1b 81       	ldd	r17, Y+3	; 0x03
    3cc0:	aa 81       	ldd	r26, Y+2	; 0x02
    3cc2:	b9 81       	ldd	r27, Y+1	; 0x01
    3cc4:	ce 0f       	add	r28, r30
    3cc6:	d1 1d       	adc	r29, r1
    3cc8:	0f b6       	in	r0, 0x3f	; 63
    3cca:	f8 94       	cli
    3ccc:	de bf       	out	0x3e, r29	; 62
    3cce:	0f be       	out	0x3f, r0	; 63
    3cd0:	cd bf       	out	0x3d, r28	; 61
    3cd2:	ed 01       	movw	r28, r26
    3cd4:	08 95       	ret

00003cd6 <_exit>:
    3cd6:	f8 94       	cli

00003cd8 <__stop_program>:
    3cd8:	ff cf       	rjmp	.-2      	; 0x3cd8 <__stop_program>
