

#include <avr/io.h>
#include "FreeRTOS.h"
#include "task.h"
#include "FreeRTOSConfig.h"

#ifndef NULL
#define NULL (void *)0
#endif


/* Define Tasks Priorities */
#define  MOTOR_On_PRIORITY (0)
#define  MOTOR_DIR_PRIORITY (3)
#define  ButtonOn_PRIORITY (2)

void MOTOR_ON_Intro_code(void*pvParamter);
void MOTOR_DIR_Intro_code(void*pvParamter);

void ButtonIntro_code (void * pvParamter) ;
/*Create Task Handles Create */
xTaskHandle Task1Hand = NULL;
xTaskHandle Task2Hand = NULL;
xTaskHandle Task3Hand = NULL;

char flag = 0 ,Onflag =0 ;

int main(void)
{
	DDRA = 0x03 ;
	DDRB =0x00;
	PORTB |=0x01;
	xTaskCreate(MOTOR_DIR_Intro_code,(const signed char *)"Task1",85,NULL,MOTOR_DIR_PRIORITY,&Task1Hand);

	xTaskCreate(ButtonIntro_code,(const signed char *)"Task2",85,NULL,ButtonOn_PRIORITY,&Task2Hand);

	xTaskCreate(MOTOR_ON_Intro_code,(const signed char *)"Task3",85,NULL,MOTOR_On_PRIORITY,&Task3Hand);

	/*start Scheduler */
	vTaskStartScheduler();

	/*Never Enter Here */
	return 0;
}

/*Task1 Code */
void MOTOR_ON_Intro_code(void*pvParamter)
{

	//vTaskDelay(200);
	while(1){
		if (Onflag == 1)
		{
			PORTA = 0x03;
			/*Send Task in Blocked Queue for 200 Ticks */
			//Onflag = 0;
		}

	}

}

/*Task1 Code */
void MOTOR_DIR_Intro_code(void*pvParamter)
{

	vTaskDelete(&Task3Hand);
	while(1){
		vTaskDelay(200);
		if (flag == 1)
		{

			PORTA ^= 0x01;
			/*Send Task in Blocked Queue for 200 Ticks */
			flag = 0;
		}

	}

}

void ButtonIntro_code (void * pvParamter)
{

	while(1)
	{
		vTaskDelay(100);
		if ( ( (PINB >> 0) & 0x01 ) == 0 )
		{
			flag = 1 ;
			Onflag = 1 ;

		}

	}
}
















