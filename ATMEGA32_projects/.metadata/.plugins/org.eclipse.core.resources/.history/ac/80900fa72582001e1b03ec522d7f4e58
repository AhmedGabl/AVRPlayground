/*
 * HICU_program.c
 *
 *  Created on: Nov 13, 2023
 *      Author: AhmedAbogabl
 */

#include "../includes/HICU_interface.h"
#include "../includes/HICU_registers.h"
#include "../../../utils/BIT_MATH.h"
#include "../../../utils/STD_TYPES.h"

volatile static u16 Private_u16OnPeriod;
volatile static u16 Private_u16OffPeriod;

volatile static u16 Local_u16OldValue = 0;

void ICU_voidInit(void) {
	//select mode = Normal mode
	CLR_BIT(TCCR1A, WGM10);
	CLR_BIT(TCCR1A, WGM11);
	CLR_BIT(TCCR1B, WGM12);
	CLR_BIT(TCCR1B, WGM13);

	//select ICU Edge falling edge
	CLR_BIT(TCCR1B, ICES1);

	//enable interrupt
	SET_BIT(TIMSK, TICIE1);

	//Select Prescaler Value = 64  void ICU_voidStart(void);

	SET_BIT(TCCR1B, CS10);
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);
}

void ICU_voidGetDutyCycle(u8* copy_pu8Duty) {
	if (copy_pu8Duty != NULL) {
		*copy_pu8Duty = ((u32) Private_u16OnPeriod * 100)
				/ (Private_u16OnPeriod + Private_u16OffPeriod);
	}
}
void ICU_voidGetFrequency(u32* copy_pu32Frequency_hz) {
	if (copy_pu32Frequency_hz != NULL) {
		*copy_pu32Frequency_hz = 1000000UL
				/ (Private_u16OnPeriod + Private_u16OffPeriod);
	}
}

// ISR for timer0 output compare match
void __vector_6(void) __attribute__((signal));
void __vector_6(void) {
	static u8 Local_u8EdgeCounter = 0;
	Local_u8EdgeCounter++;

	switch (Local_u8EdgeCounter) {
	case 1: //dummy
		//select ICU Edge rising edge
		SET_BIT(TCCR1B, ICES1);
		Local_u16OldValue = ICR1;
		break;
	case 2:		//off period
		Private_u16OffPeriod = (ICR1 - Local_u16OldValue)*4;

		Local_u16OldValue = ICR1;

		//select ICU Edge Falling edge
		CLR_BIT(TCCR1B, ICES1);
		break;
	case 3:
		Private_u16OnPeriod =  (ICR1 - Local_u16OldValue)*4;
		//select ICU Edge rising edge
		SET_BIT(TCCR1B, ICES1);
		Local_u8EdgeCounter=1;
		Local_u16OldValue = ICR1;
		break;
	default:
		break;
	}
}
