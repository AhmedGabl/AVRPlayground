
ADAS_WheelHubMotors_LaneDetection_SPI_SLAVE_GIVE_MTR_CTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003018  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000340  00800060  00003018  000030ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008003a0  008003a0  000033ec  2**0
                  ALLOC
  3 .stab         00003e10  00000000  00000000  000033ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b50  00000000  00000000  000071fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000a120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000c732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000dc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000ef0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000f0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fe0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_4>
      14:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__vector_10>
      2c:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_11>
      30:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__vector_12>
      34:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 17 	call	0x2eba	; 0x2eba <main>
      8a:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e3       	ldi	r26, 0x31	; 49
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e3       	ldi	r24, 0x31	; 49
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e3       	ldi	r22, 0x31	; 49
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

0000084a <__lesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e7 5c       	subi	r30, 0xC7	; 199
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Scheduler>:

Task OS_Tasks[OS_NUMBER_OF_TASKS];

u32 TickCount = 0;

void Scheduler(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
    for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
     ef4:	19 82       	std	Y+1, r1	; 0x01
     ef6:	7d c0       	rjmp	.+250    	; 0xff2 <Scheduler+0x108>
        if ((OS_Tasks[i].State == OS_TASK_READY)) {
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	c9 01       	movw	r24, r18
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	82 1b       	sub	r24, r18
     f0e:	93 0b       	sbc	r25, r19
     f10:	fc 01       	movw	r30, r24
     f12:	e3 53       	subi	r30, 0x33	; 51
     f14:	fc 4f       	sbci	r31, 0xFC	; 252
     f16:	80 81       	ld	r24, Z
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <Scheduler+0x34>
     f1c:	67 c0       	rjmp	.+206    	; 0xfec <Scheduler+0x102>
            if (OS_Tasks[i].InitialDelay == 0) {
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	c9 01       	movw	r24, r18
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	82 1b       	sub	r24, r18
     f34:	93 0b       	sbc	r25, r19
     f36:	fc 01       	movw	r30, r24
     f38:	e5 53       	subi	r30, 0x35	; 53
     f3a:	fc 4f       	sbci	r31, 0xFC	; 252
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	b1 f5       	brne	.+108    	; 0xfae <Scheduler+0xc4>
                OS_Tasks[i].InitialDelay = OS_Tasks[i].Periodicity - 1;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	48 2f       	mov	r20, r24
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	c9 01       	movw	r24, r18
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	82 1b       	sub	r24, r18
     f5e:	93 0b       	sbc	r25, r19
     f60:	fc 01       	movw	r30, r24
     f62:	e6 53       	subi	r30, 0x36	; 54
     f64:	fc 4f       	sbci	r31, 0xFC	; 252
     f66:	80 81       	ld	r24, Z
     f68:	28 2f       	mov	r18, r24
     f6a:	21 50       	subi	r18, 0x01	; 1
     f6c:	ca 01       	movw	r24, r20
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	84 1b       	sub	r24, r20
     f7c:	95 0b       	sbc	r25, r21
     f7e:	fc 01       	movw	r30, r24
     f80:	e5 53       	subi	r30, 0x35	; 53
     f82:	fc 4f       	sbci	r31, 0xFC	; 252
     f84:	20 83       	st	Z, r18
                OS_Tasks[i].Fptr();
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	c9 01       	movw	r24, r18
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	82 1b       	sub	r24, r18
     f9c:	93 0b       	sbc	r25, r19
     f9e:	fc 01       	movw	r30, r24
     fa0:	e1 53       	subi	r30, 0x31	; 49
     fa2:	fc 4f       	sbci	r31, 0xFC	; 252
     fa4:	01 90       	ld	r0, Z+
     fa6:	f0 81       	ld	r31, Z
     fa8:	e0 2d       	mov	r30, r0
     faa:	09 95       	icall
     fac:	1f c0       	rjmp	.+62     	; 0xfec <Scheduler+0x102>
            } else {
                OS_Tasks[i].InitialDelay--;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	c9 01       	movw	r24, r18
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	82 1b       	sub	r24, r18
     fc4:	93 0b       	sbc	r25, r19
     fc6:	fc 01       	movw	r30, r24
     fc8:	e5 53       	subi	r30, 0x35	; 53
     fca:	fc 4f       	sbci	r31, 0xFC	; 252
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	41 50       	subi	r20, 0x01	; 1
     fd2:	c9 01       	movw	r24, r18
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	82 1b       	sub	r24, r18
     fe2:	93 0b       	sbc	r25, r19
     fe4:	fc 01       	movw	r30, r24
     fe6:	e5 53       	subi	r30, 0x35	; 53
     fe8:	fc 4f       	sbci	r31, 0xFC	; 252
     fea:	40 83       	st	Z, r20
Task OS_Tasks[OS_NUMBER_OF_TASKS];

u32 TickCount = 0;

void Scheduler(void) {
    for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	82 30       	cpi	r24, 0x02	; 2
     ff6:	08 f4       	brcc	.+2      	; 0xffa <Scheduler+0x110>
     ff8:	7f cf       	rjmp	.-258    	; 0xef8 <Scheduler+0xe>
            } else {
                OS_Tasks[i].InitialDelay--;
            }
        }
    }
    TickCount++;
     ffa:	80 91 a0 03 	lds	r24, 0x03A0
     ffe:	90 91 a1 03 	lds	r25, 0x03A1
    1002:	a0 91 a2 03 	lds	r26, 0x03A2
    1006:	b0 91 a3 03 	lds	r27, 0x03A3
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	a1 1d       	adc	r26, r1
    100e:	b1 1d       	adc	r27, r1
    1010:	80 93 a0 03 	sts	0x03A0, r24
    1014:	90 93 a1 03 	sts	0x03A1, r25
    1018:	a0 93 a2 03 	sts	0x03A2, r26
    101c:	b0 93 a3 03 	sts	0x03A3, r27
}
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <OS_voidCreateTask>:

/*
 * OS_voidCreateTask
 */
void OS_voidCreateTask(u8 Copy_u8ID, u16 Copy_u8Periodicity, u16 Copy_u8InitialDelay, void (*ptr)(void)) {
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	27 97       	sbiw	r28, 0x07	; 7
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	7b 83       	std	Y+3, r23	; 0x03
    1040:	6a 83       	std	Y+2, r22	; 0x02
    1042:	5d 83       	std	Y+5, r21	; 0x05
    1044:	4c 83       	std	Y+4, r20	; 0x04
    1046:	3f 83       	std	Y+7, r19	; 0x07
    1048:	2e 83       	std	Y+6, r18	; 0x06
    OS_Tasks[Copy_u8ID].Fptr = ptr;
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	c9 01       	movw	r24, r18
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	82 1b       	sub	r24, r18
    1060:	93 0b       	sbc	r25, r19
    1062:	fc 01       	movw	r30, r24
    1064:	e1 53       	subi	r30, 0x31	; 49
    1066:	fc 4f       	sbci	r31, 0xFC	; 252
    1068:	8e 81       	ldd	r24, Y+6	; 0x06
    106a:	9f 81       	ldd	r25, Y+7	; 0x07
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    OS_Tasks[Copy_u8ID].InitialDelay = Copy_u8InitialDelay;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4c 81       	ldd	r20, Y+4	; 0x04
    1078:	c9 01       	movw	r24, r18
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	82 1b       	sub	r24, r18
    1088:	93 0b       	sbc	r25, r19
    108a:	fc 01       	movw	r30, r24
    108c:	e5 53       	subi	r30, 0x35	; 53
    108e:	fc 4f       	sbci	r31, 0xFC	; 252
    1090:	40 83       	st	Z, r20
    OS_Tasks[Copy_u8ID].Periodicity = Copy_u8Periodicity;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4a 81       	ldd	r20, Y+2	; 0x02
    109a:	c9 01       	movw	r24, r18
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	82 1b       	sub	r24, r18
    10aa:	93 0b       	sbc	r25, r19
    10ac:	fc 01       	movw	r30, r24
    10ae:	e6 53       	subi	r30, 0x36	; 54
    10b0:	fc 4f       	sbci	r31, 0xFC	; 252
    10b2:	40 83       	st	Z, r20
    OS_Tasks[Copy_u8ID].State = OS_TASK_READY;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	c9 01       	movw	r24, r18
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	82 1b       	sub	r24, r18
    10ca:	93 0b       	sbc	r25, r19
    10cc:	fc 01       	movw	r30, r24
    10ce:	e3 53       	subi	r30, 0x33	; 51
    10d0:	fc 4f       	sbci	r31, 0xFC	; 252
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	80 83       	st	Z, r24
    OS_Tasks[Copy_u8ID].TaskID = Copy_u8ID;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	c9 01       	movw	r24, r18
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	82 1b       	sub	r24, r18
    10ec:	93 0b       	sbc	r25, r19
    10ee:	fc 01       	movw	r30, r24
    10f0:	e4 53       	subi	r30, 0x34	; 52
    10f2:	fc 4f       	sbci	r31, 0xFC	; 252
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	80 83       	st	Z, r24
}
    10f8:	27 96       	adiw	r28, 0x07	; 7
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <OS_voidDeleteTask>:

/*
 * OS_voidDeleteTask
 */
void OS_voidDeleteTask(u8 Copy_u8ID) {
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	0f 92       	push	r0
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	89 83       	std	Y+1, r24	; 0x01
    OS_Tasks[Copy_u8ID].State = OS_TASK_DELETED;
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	c9 01       	movw	r24, r18
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	82 1b       	sub	r24, r18
    112c:	93 0b       	sbc	r25, r19
    112e:	fc 01       	movw	r30, r24
    1130:	e3 53       	subi	r30, 0x33	; 51
    1132:	fc 4f       	sbci	r31, 0xFC	; 252
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	80 83       	st	Z, r24
}
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <OS_voidSuspendTask>:

/*
 * OS_voidSuspendTask
 */
void OS_voidSuspendTask(u8 Copy_u8ID, u8 Copy_u8SuspendTime) {
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <OS_voidSuspendTask+0x6>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02
    OS_Tasks[Copy_u8ID].State = OS_TASK_SUSPENDED;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	c9 01       	movw	r24, r18
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	82 1b       	sub	r24, r18
    1164:	93 0b       	sbc	r25, r19
    1166:	fc 01       	movw	r30, r24
    1168:	e3 53       	subi	r30, 0x33	; 51
    116a:	fc 4f       	sbci	r31, 0xFC	; 252
    116c:	10 82       	st	Z, r1
    OS_Tasks[Copy_u8ID].SuspendTime = Copy_u8SuspendTime + TickCount;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	80 91 a0 03 	lds	r24, 0x03A0
    1178:	90 91 a1 03 	lds	r25, 0x03A1
    117c:	a0 91 a2 03 	lds	r26, 0x03A2
    1180:	b0 91 a3 03 	lds	r27, 0x03A3
    1184:	98 2f       	mov	r25, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	49 2f       	mov	r20, r25
    118a:	48 0f       	add	r20, r24
    118c:	c9 01       	movw	r24, r18
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	82 1b       	sub	r24, r18
    119c:	93 0b       	sbc	r25, r19
    119e:	fc 01       	movw	r30, r24
    11a0:	e2 53       	subi	r30, 0x32	; 50
    11a2:	fc 4f       	sbci	r31, 0xFC	; 252
    11a4:	40 83       	st	Z, r20
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <OS_voidStartScheduler>:

/*
 * OS_voidStartScheduler
 */
void OS_voidStartScheduler(void) {
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    // Initialize Timer/Counter 2
    TMR2_voidInit();
    11b8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <TMR2_voidInit>

    // Start Timer/Counter 2
    TMR2_voidStart();
    11bc:	0e 94 c1 0a 	call	0x1582	; 0x1582 <TMR2_voidStart>

    // Set a callback function to be called on Timer/Counter 2 overflow
    TMR2_voidSetCallBackOVF(Scheduler);
    11c0:	85 e7       	ldi	r24, 0x75	; 117
    11c2:	97 e0       	ldi	r25, 0x07	; 7
    11c4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <TMR2_voidSetCallBackOVF>
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <OS_voidResumeTask>:

/*
 * OS_voidResumeTask
 */
void OS_voidResumeTask(u8 Copy_u8ID) {
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
    OS_Tasks[Copy_u8ID].State = OS_TASK_READY;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	c9 01       	movw	r24, r18
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	82 1b       	sub	r24, r18
    11f0:	93 0b       	sbc	r25, r19
    11f2:	fc 01       	movw	r30, r24
    11f4:	e3 53       	subi	r30, 0x33	; 51
    11f6:	fc 4f       	sbci	r31, 0xFC	; 252
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	80 83       	st	Z, r24
}
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <OS_u8GetTaskState>:

/*
 * OS_u8GetTaskState
 */
u8 OS_u8GetTaskState(u8 Copy_u8ID) {
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
    return OS_Tasks[Copy_u8ID].State;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	c9 01       	movw	r24, r18
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	82 1b       	sub	r24, r18
    1226:	93 0b       	sbc	r25, r19
    1228:	fc 01       	movw	r30, r24
    122a:	e3 53       	subi	r30, 0x33	; 51
    122c:	fc 4f       	sbci	r31, 0xFC	; 252
    122e:	80 81       	ld	r24, Z
}
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <UART_Init>:
static void(*UART_RX_Fptr)(u8 RXdata)=NULL;
//static void(*UART_TX_Fptr)(void)=NULL;


void UART_Init(void)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	//baud rate 9600
	UBRRL= (1000000/(2*((BAUDRATE))))-1;
    1240:	e9 e2       	ldi	r30, 0x29	; 41
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	83 e3       	ldi	r24, 0x33	; 51
    1246:	80 83       	st	Z, r24

	//normal speed
	CLR_BIT(UCSRA,U2X);
    1248:	ab e2       	ldi	r26, 0x2B	; 43
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e2       	ldi	r30, 0x2B	; 43
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	8d 7f       	andi	r24, 0xFD	; 253
    1254:	8c 93       	st	X, r24


	//frame (stop ,data ,parity) 1 STOP NO PARITY 8 DATA

	// ENABLE RX TX
	SET_BIT(UCSRB,RXEN);
    1256:	aa e2       	ldi	r26, 0x2A	; 42
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	ea e2       	ldi	r30, 0x2A	; 42
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 61       	ori	r24, 0x10	; 16
    1262:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    1264:	aa e2       	ldi	r26, 0x2A	; 42
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ea e2       	ldi	r30, 0x2A	; 42
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 60       	ori	r24, 0x08	; 8
    1270:	8c 93       	st	X, r24
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <UART_Send>:

void UART_Send(u8 data)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA,UDRE));
    1284:	eb e2       	ldi	r30, 0x2B	; 43
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	82 95       	swap	r24
    128c:	86 95       	lsr	r24
    128e:	87 70       	andi	r24, 0x07	; 7
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	81 70       	andi	r24, 0x01	; 1
    1296:	90 70       	andi	r25, 0x00	; 0
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	a1 f3       	breq	.-24     	; 0x1284 <UART_Send+0xc>
	UDR=data;
    129c:	ec e2       	ldi	r30, 0x2C	; 44
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	80 83       	st	Z, r24
}
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <UART_SendNoBlock>:

void UART_SendNoBlock(u8 data)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    12b8:	ec e2       	ldi	r30, 0x2C	; 44
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	80 83       	st	Z, r24
}
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <UART_ReceiveNoBlock>:

u8 UART_ReceiveNoBlock(void)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    12d0:	ec e2       	ldi	r30, 0x2C	; 44
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <UART_Receive>:




u8 UART_Receive(void)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC));
    12e4:	eb e2       	ldi	r30, 0x2B	; 43
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	88 23       	and	r24, r24
    12ec:	dc f7       	brge	.-10     	; 0x12e4 <UART_Receive+0x8>
	return UDR;
    12ee:	ec e2       	ldi	r30, 0x2C	; 44
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <UART_ReceivePerodic>:


u8 UART_ReceivePerodic(u8*pdata)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <UART_ReceivePerodic+0x6>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(UCSRA,RXC))
    130a:	eb e2       	ldi	r30, 0x2B	; 43
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	88 23       	and	r24, r24
    1312:	4c f4       	brge	.+18     	; 0x1326 <UART_ReceivePerodic+0x2c>
	{

		*pdata=UDR;
    1314:	ec e2       	ldi	r30, 0x2C	; 44
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	e9 81       	ldd	r30, Y+1	; 0x01
    131c:	fa 81       	ldd	r31, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
		return 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	8b 83       	std	Y+3, r24	; 0x03
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <UART_ReceivePerodic+0x2e>
	}
	return 0;
    1326:	1b 82       	std	Y+3, r1	; 0x03
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <UART_TransmitString>:



void UART_TransmitString(const char* str) {
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <UART_TransmitString+0x6>
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	9b 83       	std	Y+3, r25	; 0x03
    1344:	8a 83       	std	Y+2, r24	; 0x02
    // Iterate over each character in the string until the null terminator is reached
    for (u8 i = 0; str[i] != '\0'; i++) {
    1346:	19 82       	std	Y+1, r1	; 0x01
    1348:	0e c0       	rjmp	.+28     	; 0x1366 <UART_TransmitString+0x30>
    	UART_Send(str[i]); // Transmit each character
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	9b 81       	ldd	r25, Y+3	; 0x03
    1354:	fc 01       	movw	r30, r24
    1356:	e2 0f       	add	r30, r18
    1358:	f3 1f       	adc	r31, r19
    135a:	80 81       	ld	r24, Z
    135c:	0e 94 3c 09 	call	0x1278	; 0x1278 <UART_Send>



void UART_TransmitString(const char* str) {
    // Iterate over each character in the string until the null terminator is reached
    for (u8 i = 0; str[i] != '\0'; i++) {
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	8f 5f       	subi	r24, 0xFF	; 255
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	9b 81       	ldd	r25, Y+3	; 0x03
    1370:	fc 01       	movw	r30, r24
    1372:	e2 0f       	add	r30, r18
    1374:	f3 1f       	adc	r31, r19
    1376:	80 81       	ld	r24, Z
    1378:	88 23       	and	r24, r24
    137a:	39 f7       	brne	.-50     	; 0x134a <UART_TransmitString+0x14>
    	UART_Send(str[i]); // Transmit each character
    }
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <UART_ReceiveNumber>:


// Function to receive a number over UART, terminated by '\r' (Enter key)
int UART_ReceiveNumber() {
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	6a 97       	sbiw	r28, 0x1a	; 26
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    char rxBuffer[20];  // A buffer to store received characters
    int rxIndex = 0;    // Index for the buffer
    139c:	1e 82       	std	Y+6, r1	; 0x06
    139e:	1d 82       	std	Y+5, r1	; 0x05
    char receivedChar;
    u8 endOfNumber = 0;
    13a0:	1b 82       	std	Y+3, r1	; 0x03
    13a2:	29 c0       	rjmp	.+82     	; 0x13f6 <UART_ReceiveNumber+0x6e>

    // Read characters until Enter ('\r') is received
    while (!endOfNumber) {
        while (!GET_BIT(UCSRA, 7));  // Wait for a character to be received
    13a4:	eb e2       	ldi	r30, 0x2B	; 43
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 23       	and	r24, r24
    13ac:	dc f7       	brge	.-10     	; 0x13a4 <UART_ReceiveNumber+0x1c>
        receivedChar = UDR;          // Read the received character
    13ae:	ec e2       	ldi	r30, 0x2C	; 44
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8c 83       	std	Y+4, r24	; 0x04

        if (receivedChar == '\r' || receivedChar == '\n') {
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	8d 30       	cpi	r24, 0x0D	; 13
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <UART_ReceiveNumber+0x3a>
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	8a 30       	cpi	r24, 0x0A	; 10
    13c0:	19 f4       	brne	.+6      	; 0x13c8 <UART_ReceiveNumber+0x40>
            // If Enter key is received, mark the end of the number
            endOfNumber = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	17 c0       	rjmp	.+46     	; 0x13f6 <UART_ReceiveNumber+0x6e>
        } else {
            // Store the character in the buffer
            rxBuffer[rxIndex] = receivedChar;
    13c8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ca:	3e 81       	ldd	r19, Y+6	; 0x06
    13cc:	ce 01       	movw	r24, r28
    13ce:	07 96       	adiw	r24, 0x07	; 7
    13d0:	fc 01       	movw	r30, r24
    13d2:	e2 0f       	add	r30, r18
    13d4:	f3 1f       	adc	r31, r19
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	80 83       	st	Z, r24
            rxIndex++;
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05

            // Check if the buffer is full (adjust the buffer size as needed)
            if (rxIndex >= sizeof(rxBuffer)) {
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	84 31       	cpi	r24, 0x14	; 20
    13ea:	91 05       	cpc	r25, r1
    13ec:	20 f0       	brcs	.+8      	; 0x13f6 <UART_ReceiveNumber+0x6e>
                rxIndex = sizeof(rxBuffer) - 1;
    13ee:	83 e1       	ldi	r24, 0x13	; 19
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    int rxIndex = 0;    // Index for the buffer
    char receivedChar;
    u8 endOfNumber = 0;

    // Read characters until Enter ('\r') is received
    while (!endOfNumber) {
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 23       	and	r24, r24
    13fa:	a1 f2       	breq	.-88     	; 0x13a4 <UART_ReceiveNumber+0x1c>
            }
        }
    }

    // Null-terminate the string in the buffer
    rxBuffer[rxIndex] = '\0';
    13fc:	2d 81       	ldd	r18, Y+5	; 0x05
    13fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1400:	ce 01       	movw	r24, r28
    1402:	07 96       	adiw	r24, 0x07	; 7
    1404:	fc 01       	movw	r30, r24
    1406:	e2 0f       	add	r30, r18
    1408:	f3 1f       	adc	r31, r19
    140a:	10 82       	st	Z, r1

    // Convert the received string to an integer
    int receivedNumber = atoi(rxBuffer);
    140c:	ce 01       	movw	r24, r28
    140e:	07 96       	adiw	r24, 0x07	; 7
    1410:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <atoi>
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01

    return receivedNumber;
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    141c:	6a 96       	adiw	r28, 0x1a	; 26
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <UART_RX_InterruptEnable>:
/*
 * interrupt
 */

void UART_RX_InterruptEnable(void)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    1436:	aa e2       	ldi	r26, 0x2A	; 42
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ea e2       	ldi	r30, 0x2A	; 42
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	80 68       	ori	r24, 0x80	; 128
    1442:	8c 93       	st	X, r24
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <UART_RX_InterruptDisable>:

void UART_RX_InterruptDisable(void)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
    1452:	aa e2       	ldi	r26, 0x2A	; 42
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ea e2       	ldi	r30, 0x2A	; 42
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 77       	andi	r24, 0x7F	; 127
    145e:	8c 93       	st	X, r24
}
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <UART_RX_SetCallBack>:
//{
//	CLR_BIT(UCSRB,TXCIE);
//}

void UART_RX_SetCallBack(void (*LocalFptr)(u8))
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <UART_RX_SetCallBack+0x6>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	90 93 a5 03 	sts	0x03A5, r25
    147c:	80 93 a4 03 	sts	0x03A4, r24
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <__vector_13>:
//}


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr != NULL)
    14b4:	80 91 a4 03 	lds	r24, 0x03A4
    14b8:	90 91 a5 03 	lds	r25, 0x03A5
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	41 f0       	breq	.+16     	; 0x14d0 <__vector_13+0x46>
	{
		UART_RX_Fptr(UDR);
    14c0:	e0 91 a4 03 	lds	r30, 0x03A4
    14c4:	f0 91 a5 03 	lds	r31, 0x03A5
    14c8:	ac e2       	ldi	r26, 0x2C	; 44
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	8c 91       	ld	r24, X
    14ce:	09 95       	icall
	}
}
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <TMR2_voidSetDelay_ms_usingCTC+0x6>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
    1504:	e3 e4       	ldi	r30, 0x43	; 67
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	89 ef       	ldi	r24, 0xF9	; 249
    150a:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	cc 01       	movw	r24, r24
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	80 93 b0 03 	sts	0x03B0, r24
    151a:	90 93 b1 03 	sts	0x03B1, r25
    151e:	a0 93 b2 03 	sts	0x03B2, r26
    1522:	b0 93 b3 03 	sts	0x03B3, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	// Enable Output Compare Match Interrupt (OCI)
	SET_BIT(TIMSK, OCIE2);

#elif TMR2_MODE == TMR2_NORMAL_MODE
	// Select normal mode
	CLR_BIT(TCCR2, WGM20);
    154c:	a5 e4       	ldi	r26, 0x45	; 69
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e5 e4       	ldi	r30, 0x45	; 69
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 7b       	andi	r24, 0xBF	; 191
    1558:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM21);
    155a:	a5 e4       	ldi	r26, 0x45	; 69
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e5 e4       	ldi	r30, 0x45	; 69
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	87 7f       	andi	r24, 0xF7	; 247
    1566:	8c 93       	st	X, r24
	// Initialize timer with a preload value
	TCNT2 = TMR2_PRELOAD_VALUE;
    1568:	e4 e4       	ldi	r30, 0x44	; 68
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	10 82       	st	Z, r1
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);
    156e:	a9 e5       	ldi	r26, 0x59	; 89
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 e5       	ldi	r30, 0x59	; 89
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 64       	ori	r24, 0x40	; 64
    157a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    158a:	a5 e4       	ldi	r26, 0x45	; 69
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e4       	ldi	r30, 0x45	; 69
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	81 60       	ori	r24, 0x01	; 1
    1596:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    1598:	a5 e4       	ldi	r26, 0x45	; 69
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e5 e4       	ldi	r30, 0x45	; 69
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	82 60       	ori	r24, 0x02	; 2
    15a4:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    15a6:	a5 e4       	ldi	r26, 0x45	; 69
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e5 e4       	ldi	r30, 0x45	; 69
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	8b 7f       	andi	r24, 0xFB	; 251
    15b2:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    15c2:	a5 e4       	ldi	r26, 0x45	; 69
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e4       	ldi	r30, 0x45	; 69
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8e 7f       	andi	r24, 0xFE	; 254
    15ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    15d0:	a5 e4       	ldi	r26, 0x45	; 69
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e4       	ldi	r30, 0x45	; 69
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8d 7f       	andi	r24, 0xFD	; 253
    15dc:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    15de:	a5 e4       	ldi	r26, 0x45	; 69
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e4       	ldi	r30, 0x45	; 69
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8b 7f       	andi	r24, 0xFB	; 251
    15ea:	8c 93       	st	X, r24
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <TMR2_voidSetCallBackOVF+0x6>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	31 f0       	breq	.+12     	; 0x1614 <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	90 93 a7 03 	sts	0x03A7, r25
    1610:	80 93 a6 03 	sts	0x03A6, r24
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <TMR2_voidSetCallBackCTC+0x6>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	31 f0       	breq	.+12     	; 0x1640 <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	90 93 a9 03 	sts	0x03A9, r25
    163c:	80 93 a8 03 	sts	0x03A8, r24
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    164a:	1f 92       	push	r1
    164c:	0f 92       	push	r0
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	0f 92       	push	r0
    1652:	11 24       	eor	r1, r1
    1654:	2f 93       	push	r18
    1656:	3f 93       	push	r19
    1658:	4f 93       	push	r20
    165a:	5f 93       	push	r21
    165c:	6f 93       	push	r22
    165e:	7f 93       	push	r23
    1660:	8f 93       	push	r24
    1662:	9f 93       	push	r25
    1664:	af 93       	push	r26
    1666:	bf 93       	push	r27
    1668:	ef 93       	push	r30
    166a:	ff 93       	push	r31
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    1674:	80 91 aa 03 	lds	r24, 0x03AA
    1678:	90 91 ab 03 	lds	r25, 0x03AB
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	90 93 ab 03 	sts	0x03AB, r25
    1682:	80 93 aa 03 	sts	0x03AA, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    1686:	80 91 aa 03 	lds	r24, 0x03AA
    168a:	90 91 ab 03 	lds	r25, 0x03AB
    168e:	86 30       	cpi	r24, 0x06	; 6
    1690:	91 05       	cpc	r25, r1
    1692:	91 f4       	brne	.+36     	; 0x16b8 <__vector_5+0x6e>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    1694:	e4 e4       	ldi	r30, 0x44	; 68
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	10 82       	st	Z, r1
		// Clear the counter
		local_u16ovCounter = 0;
    169a:	10 92 ab 03 	sts	0x03AB, r1
    169e:	10 92 aa 03 	sts	0x03AA, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    16a2:	80 91 a6 03 	lds	r24, 0x03A6
    16a6:	90 91 a7 03 	lds	r25, 0x03A7
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <__vector_5+0x6e>
			TMR2_privatePtrToCAllBackOVF();
    16ae:	e0 91 a6 03 	lds	r30, 0x03A6
    16b2:	f0 91 a7 03 	lds	r31, 0x03A7
    16b6:	09 95       	icall
		}
	}
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	7f 91       	pop	r23
    16ca:	6f 91       	pop	r22
    16cc:	5f 91       	pop	r21
    16ce:	4f 91       	pop	r20
    16d0:	3f 91       	pop	r19
    16d2:	2f 91       	pop	r18
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	0f 90       	pop	r0
    16da:	1f 90       	pop	r1
    16dc:	18 95       	reti

000016de <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1708:	80 91 ac 03 	lds	r24, 0x03AC
    170c:	90 91 ad 03 	lds	r25, 0x03AD
    1710:	a0 91 ae 03 	lds	r26, 0x03AE
    1714:	b0 91 af 03 	lds	r27, 0x03AF
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	a1 1d       	adc	r26, r1
    171c:	b1 1d       	adc	r27, r1
    171e:	80 93 ac 03 	sts	0x03AC, r24
    1722:	90 93 ad 03 	sts	0x03AD, r25
    1726:	a0 93 ae 03 	sts	0x03AE, r26
    172a:	b0 93 af 03 	sts	0x03AF, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    172e:	20 91 b0 03 	lds	r18, 0x03B0
    1732:	30 91 b1 03 	lds	r19, 0x03B1
    1736:	40 91 b2 03 	lds	r20, 0x03B2
    173a:	50 91 b3 03 	lds	r21, 0x03B3
    173e:	80 91 ac 03 	lds	r24, 0x03AC
    1742:	90 91 ad 03 	lds	r25, 0x03AD
    1746:	a0 91 ae 03 	lds	r26, 0x03AE
    174a:	b0 91 af 03 	lds	r27, 0x03AF
    174e:	28 17       	cp	r18, r24
    1750:	39 07       	cpc	r19, r25
    1752:	4a 07       	cpc	r20, r26
    1754:	5b 07       	cpc	r21, r27
    1756:	99 f4       	brne	.+38     	; 0x177e <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1758:	10 92 ac 03 	sts	0x03AC, r1
    175c:	10 92 ad 03 	sts	0x03AD, r1
    1760:	10 92 ae 03 	sts	0x03AE, r1
    1764:	10 92 af 03 	sts	0x03AF, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    1768:	80 91 a8 03 	lds	r24, 0x03A8
    176c:	90 91 a9 03 	lds	r25, 0x03A9
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	29 f0       	breq	.+10     	; 0x177e <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    1774:	e0 91 a8 03 	lds	r30, 0x03A8
    1778:	f0 91 a9 03 	lds	r31, 0x03A9
    177c:	09 95       	icall
		}
	}
}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    17b0:	e3 e4       	ldi	r30, 0x43	; 67
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	80 83       	st	Z, r24
}
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    17d2:	06 e4       	ldi	r16, 0x46	; 70
    17d4:	10 e0       	ldi	r17, 0x00	; 0
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	9c 01       	movw	r18, r24
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	80 e9       	ldi	r24, 0x90	; 144
    17e2:	90 ed       	ldi	r25, 0xD0	; 208
    17e4:	a3 e0       	ldi	r26, 0x03	; 3
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <__udivmodsi4>
    17f0:	da 01       	movw	r26, r20
    17f2:	c9 01       	movw	r24, r18
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f8 01       	movw	r30, r16
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	69 83       	std	Y+1, r22	; 0x01
    181c:	7a 83       	std	Y+2, r23	; 0x02
    181e:	8b 83       	std	Y+3, r24	; 0x03
    1820:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    1822:	69 81       	ldd	r22, Y+1	; 0x01
    1824:	7a 81       	ldd	r23, Y+2	; 0x02
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	48 ec       	ldi	r20, 0xC8	; 200
    1830:	52 e4       	ldi	r21, 0x42	; 66
    1832:	0e 94 25 04 	call	0x84a	; 0x84a <__lesf2>
    1836:	18 16       	cp	r1, r24
    1838:	0c f4       	brge	.+2      	; 0x183c <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    183a:	48 c0       	rjmp	.+144    	; 0x18cc <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    183c:	69 81       	ldd	r22, Y+1	; 0x01
    183e:	7a 81       	ldd	r23, Y+2	; 0x02
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1850:	88 23       	and	r24, r24
    1852:	29 f4       	brne	.+10     	; 0x185e <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    1854:	ea e4       	ldi	r30, 0x4A	; 74
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	11 82       	std	Z+1, r1	; 0x01
    185a:	10 82       	st	Z, r1
    185c:	37 c0       	rjmp	.+110    	; 0x18cc <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    185e:	0a e4       	ldi	r16, 0x4A	; 74
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	e6 e4       	ldi	r30, 0x46	; 70
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	cc 01       	movw	r24, r24
    186e:	a0 e0       	ldi	r26, 0x00	; 0
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	29 81       	ldd	r18, Y+1	; 0x01
    1884:	3a 81       	ldd	r19, Y+2	; 0x02
    1886:	4b 81       	ldd	r20, Y+3	; 0x03
    1888:	5c 81       	ldd	r21, Y+4	; 0x04
    188a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	bc 01       	movw	r22, r24
    1894:	cd 01       	movw	r24, r26
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	48 ec       	ldi	r20, 0xC8	; 200
    189c:	52 e4       	ldi	r21, 0x42	; 66
    189e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	bc 01       	movw	r22, r24
    18bc:	cd 01       	movw	r24, r26
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	f8 01       	movw	r30, r16
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	08 95       	ret

000018de <TMR1_voidInit>:


void TMR1_voidInit(void) {
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    18e6:	af e4       	ldi	r26, 0x4F	; 79
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	ef e4       	ldi	r30, 0x4F	; 79
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8e 7f       	andi	r24, 0xFE	; 254
    18f2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    18f4:	af e4       	ldi	r26, 0x4F	; 79
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	ef e4       	ldi	r30, 0x4F	; 79
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	82 60       	ori	r24, 0x02	; 2
    1900:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1902:	ae e4       	ldi	r26, 0x4E	; 78
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ee e4       	ldi	r30, 0x4E	; 78
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	88 60       	ori	r24, 0x08	; 8
    190e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1910:	ae e4       	ldi	r26, 0x4E	; 78
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ee e4       	ldi	r30, 0x4E	; 78
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 61       	ori	r24, 0x10	; 16
    191c:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    191e:	af e4       	ldi	r26, 0x4F	; 79
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ef e4       	ldi	r30, 0x4F	; 79
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	8f 7b       	andi	r24, 0xBF	; 191
    192a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    192c:	af e4       	ldi	r26, 0x4F	; 79
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	ef e4       	ldi	r30, 0x4F	; 79
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 68       	ori	r24, 0x80	; 128
    1938:	8c 93       	st	X, r24
#elif TMR1_PWM_MODE == TMR1_INVERTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
	TMR1_voidSetFrequencyMode14FastPWM(50);
    193a:	82 e3       	ldi	r24, 0x32	; 50
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <TMR1_voidSetFrequencyMode14FastPWM>

#endif
}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <TMR1_voidSetCompareMatchValueA+0x6>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	9a 83       	std	Y+2, r25	; 0x02
    1954:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    1956:	ea e4       	ldi	r30, 0x4A	; 74
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	80 83       	st	Z, r24
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    1974:	ae e4       	ldi	r26, 0x4E	; 78
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ee e4       	ldi	r30, 0x4E	; 78
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	81 60       	ori	r24, 0x01	; 1
    1980:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1982:	ae e4       	ldi	r26, 0x4E	; 78
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	ee e4       	ldi	r30, 0x4E	; 78
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	82 60       	ori	r24, 0x02	; 2
    198e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    1990:	ae e4       	ldi	r26, 0x4E	; 78
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ee e4       	ldi	r30, 0x4E	; 78
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8b 7f       	andi	r24, 0xFB	; 251
    199c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    19ac:	ae e4       	ldi	r26, 0x4E	; 78
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ee e4       	ldi	r30, 0x4E	; 78
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8e 7f       	andi	r24, 0xFE	; 254
    19b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    19ba:	ae e4       	ldi	r26, 0x4E	; 78
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	ee e4       	ldi	r30, 0x4E	; 78
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	8d 7f       	andi	r24, 0xFD	; 253
    19c6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    19c8:	ae e4       	ldi	r26, 0x4E	; 78
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ee e4       	ldi	r30, 0x4E	; 78
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8b 7f       	andi	r24, 0xFB	; 251
    19d4:	8c 93       	st	X, r24
}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    19ea:	ec e5       	ldi	r30, 0x5C	; 92
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	89 ef       	ldi	r24, 0xF9	; 249
    19f0:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
    19f6:	cc 01       	movw	r24, r24
    19f8:	a0 e0       	ldi	r26, 0x00	; 0
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	80 93 be 03 	sts	0x03BE, r24
    1a00:	90 93 bf 03 	sts	0x03BF, r25
    1a04:	a0 93 c0 03 	sts	0x03C0, r26
    1a08:	b0 93 c1 03 	sts	0x03C1, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	85 36       	cpi	r24, 0x65	; 101
    1a26:	d0 f4       	brcc	.+52     	; 0x1a5c <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    1a28:	ec e5       	ldi	r30, 0x5C	; 92
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	48 2f       	mov	r20, r24
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	ca 01       	movw	r24, r20
    1a34:	9c 01       	movw	r18, r24
    1a36:	22 0f       	add	r18, r18
    1a38:	33 1f       	adc	r19, r19
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	96 95       	lsr	r25
    1a3e:	98 2f       	mov	r25, r24
    1a40:	88 27       	eor	r24, r24
    1a42:	97 95       	ror	r25
    1a44:	87 95       	ror	r24
    1a46:	82 1b       	sub	r24, r18
    1a48:	93 0b       	sbc	r25, r19
    1a4a:	84 0f       	add	r24, r20
    1a4c:	95 1f       	adc	r25, r21
    1a4e:	24 e6       	ldi	r18, 0x64	; 100
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	b9 01       	movw	r22, r18
    1a54:	0e 94 77 17 	call	0x2eee	; 0x2eee <__udivmodhi4>
    1a58:	cb 01       	movw	r24, r22
    1a5a:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    1a6c:	a3 e5       	ldi	r26, 0x53	; 83
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e3 e5       	ldi	r30, 0x53	; 83
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	80 64       	ori	r24, 0x40	; 64
    1a78:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    1a7a:	a3 e5       	ldi	r26, 0x53	; 83
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e3 e5       	ldi	r30, 0x53	; 83
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	87 7f       	andi	r24, 0xF7	; 247
    1a86:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    1a88:	a3 e5       	ldi	r26, 0x53	; 83
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e3 e5       	ldi	r30, 0x53	; 83
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	8f 7e       	andi	r24, 0xEF	; 239
    1a94:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    1a96:	a3 e5       	ldi	r26, 0x53	; 83
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e3 e5       	ldi	r30, 0x53	; 83
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	80 62       	ori	r24, 0x20	; 32
    1aa2:	8c 93       	st	X, r24
#endif

#endif
}
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    1ab2:	a3 e5       	ldi	r26, 0x53	; 83
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e3 e5       	ldi	r30, 0x53	; 83
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	81 60       	ori	r24, 0x01	; 1
    1abe:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1ac0:	a3 e5       	ldi	r26, 0x53	; 83
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e3 e5       	ldi	r30, 0x53	; 83
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	82 60       	ori	r24, 0x02	; 2
    1acc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1ace:	a3 e5       	ldi	r26, 0x53	; 83
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e3 e5       	ldi	r30, 0x53	; 83
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8b 7f       	andi	r24, 0xFB	; 251
    1ada:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    1aea:	a3 e5       	ldi	r26, 0x53	; 83
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e3 e5       	ldi	r30, 0x53	; 83
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	8e 7f       	andi	r24, 0xFE	; 254
    1af6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1af8:	a3 e5       	ldi	r26, 0x53	; 83
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e3 e5       	ldi	r30, 0x53	; 83
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8d 7f       	andi	r24, 0xFD	; 253
    1b04:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1b06:	a3 e5       	ldi	r26, 0x53	; 83
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e3 e5       	ldi	r30, 0x53	; 83
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8b 7f       	andi	r24, 0xFB	; 251
    1b12:	8c 93       	st	X, r24
}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <TMR0_voidSetCallBackOVF+0x6>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	90 93 b5 03 	sts	0x03B5, r25
    1b38:	80 93 b4 03 	sts	0x03B4, r24
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <TMR0_voidSetCallBackCTC+0x6>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	31 f0       	breq	.+12     	; 0x1b68 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	90 93 b7 03 	sts	0x03B7, r25
    1b64:	80 93 b6 03 	sts	0x03B6, r24
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    1b9c:	80 91 b8 03 	lds	r24, 0x03B8
    1ba0:	90 91 b9 03 	lds	r25, 0x03B9
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	90 93 b9 03 	sts	0x03B9, r25
    1baa:	80 93 b8 03 	sts	0x03B8, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    1bae:	80 91 b8 03 	lds	r24, 0x03B8
    1bb2:	90 91 b9 03 	lds	r25, 0x03B9
    1bb6:	23 e0       	ldi	r18, 0x03	; 3
    1bb8:	81 3d       	cpi	r24, 0xD1	; 209
    1bba:	92 07       	cpc	r25, r18
    1bbc:	99 f4       	brne	.+38     	; 0x1be4 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    1bbe:	e2 e5       	ldi	r30, 0x52	; 82
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	81 e7       	ldi	r24, 0x71	; 113
    1bc4:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    1bc6:	10 92 b9 03 	sts	0x03B9, r1
    1bca:	10 92 b8 03 	sts	0x03B8, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    1bce:	80 91 b4 03 	lds	r24, 0x03B4
    1bd2:	90 91 b5 03 	lds	r25, 0x03B5
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	29 f0       	breq	.+10     	; 0x1be4 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    1bda:	e0 91 b4 03 	lds	r30, 0x03B4
    1bde:	f0 91 b5 03 	lds	r31, 0x03B5
    1be2:	09 95       	icall
		}
	}
}
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	ff 91       	pop	r31
    1bea:	ef 91       	pop	r30
    1bec:	bf 91       	pop	r27
    1bee:	af 91       	pop	r26
    1bf0:	9f 91       	pop	r25
    1bf2:	8f 91       	pop	r24
    1bf4:	7f 91       	pop	r23
    1bf6:	6f 91       	pop	r22
    1bf8:	5f 91       	pop	r21
    1bfa:	4f 91       	pop	r20
    1bfc:	3f 91       	pop	r19
    1bfe:	2f 91       	pop	r18
    1c00:	0f 90       	pop	r0
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	0f 90       	pop	r0
    1c06:	1f 90       	pop	r1
    1c08:	18 95       	reti

00001c0a <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1c0a:	1f 92       	push	r1
    1c0c:	0f 92       	push	r0
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	0f 92       	push	r0
    1c12:	11 24       	eor	r1, r1
    1c14:	2f 93       	push	r18
    1c16:	3f 93       	push	r19
    1c18:	4f 93       	push	r20
    1c1a:	5f 93       	push	r21
    1c1c:	6f 93       	push	r22
    1c1e:	7f 93       	push	r23
    1c20:	8f 93       	push	r24
    1c22:	9f 93       	push	r25
    1c24:	af 93       	push	r26
    1c26:	bf 93       	push	r27
    1c28:	ef 93       	push	r30
    1c2a:	ff 93       	push	r31
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1c34:	80 91 ba 03 	lds	r24, 0x03BA
    1c38:	90 91 bb 03 	lds	r25, 0x03BB
    1c3c:	a0 91 bc 03 	lds	r26, 0x03BC
    1c40:	b0 91 bd 03 	lds	r27, 0x03BD
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	a1 1d       	adc	r26, r1
    1c48:	b1 1d       	adc	r27, r1
    1c4a:	80 93 ba 03 	sts	0x03BA, r24
    1c4e:	90 93 bb 03 	sts	0x03BB, r25
    1c52:	a0 93 bc 03 	sts	0x03BC, r26
    1c56:	b0 93 bd 03 	sts	0x03BD, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1c5a:	20 91 be 03 	lds	r18, 0x03BE
    1c5e:	30 91 bf 03 	lds	r19, 0x03BF
    1c62:	40 91 c0 03 	lds	r20, 0x03C0
    1c66:	50 91 c1 03 	lds	r21, 0x03C1
    1c6a:	80 91 ba 03 	lds	r24, 0x03BA
    1c6e:	90 91 bb 03 	lds	r25, 0x03BB
    1c72:	a0 91 bc 03 	lds	r26, 0x03BC
    1c76:	b0 91 bd 03 	lds	r27, 0x03BD
    1c7a:	28 17       	cp	r18, r24
    1c7c:	39 07       	cpc	r19, r25
    1c7e:	4a 07       	cpc	r20, r26
    1c80:	5b 07       	cpc	r21, r27
    1c82:	99 f4       	brne	.+38     	; 0x1caa <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1c84:	10 92 ba 03 	sts	0x03BA, r1
    1c88:	10 92 bb 03 	sts	0x03BB, r1
    1c8c:	10 92 bc 03 	sts	0x03BC, r1
    1c90:	10 92 bd 03 	sts	0x03BD, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    1c94:	80 91 b6 03 	lds	r24, 0x03B6
    1c98:	90 91 b7 03 	lds	r25, 0x03B7
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	29 f0       	breq	.+10     	; 0x1caa <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    1ca0:	e0 91 b6 03 	lds	r30, 0x03B6
    1ca4:	f0 91 b7 03 	lds	r31, 0x03B7
    1ca8:	09 95       	icall
		}
	}
}
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	ff 91       	pop	r31
    1cb0:	ef 91       	pop	r30
    1cb2:	bf 91       	pop	r27
    1cb4:	af 91       	pop	r26
    1cb6:	9f 91       	pop	r25
    1cb8:	8f 91       	pop	r24
    1cba:	7f 91       	pop	r23
    1cbc:	6f 91       	pop	r22
    1cbe:	5f 91       	pop	r21
    1cc0:	4f 91       	pop	r20
    1cc2:	3f 91       	pop	r19
    1cc4:	2f 91       	pop	r18
    1cc6:	0f 90       	pop	r0
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	0f 90       	pop	r0
    1ccc:	1f 90       	pop	r1
    1cce:	18 95       	reti

00001cd0 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    1cdc:	ec e5       	ldi	r30, 0x5C	; 92
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	80 83       	st	Z, r24
}
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <SPI_voidInit>:
#include "../includes/SPI_config.h"

static void (*private_pCallBackSPI)(u8) = NULL;


void SPI_voidInit(void){
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPI->SPCR,SPR0);
	CLR_BIT(SPI->SPCR,SPR1);
	CLR_BIT(SPI->SPSR,SPI2X);
	//select slave
	#elif SPI_MODE == SPI_SLAVE
	CLR_BIT(SPI->SPCR,MSTR);
    1cf4:	ad e2       	ldi	r26, 0x2D	; 45
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	ed e2       	ldi	r30, 0x2D	; 45
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8f 7e       	andi	r24, 0xEF	; 239
    1d00:	8c 93       	st	X, r24
	#endif

	//select LSB
	SET_BIT(SPI->SPCR,DORD);
    1d02:	ad e2       	ldi	r26, 0x2D	; 45
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	ed e2       	ldi	r30, 0x2D	; 45
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 62       	ori	r24, 0x20	; 32
    1d0e:	8c 93       	st	X, r24

	//select clk polarity falling  select rising sample

	SET_BIT(SPI->SPCR,CPOL);//polarity
    1d10:	ad e2       	ldi	r26, 0x2D	; 45
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	ed e2       	ldi	r30, 0x2D	; 45
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	88 60       	ori	r24, 0x08	; 8
    1d1c:	8c 93       	st	X, r24
	SET_BIT(SPI->SPCR,CPHA);//phase
    1d1e:	ad e2       	ldi	r26, 0x2D	; 45
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	ed e2       	ldi	r30, 0x2D	; 45
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	84 60       	ori	r24, 0x04	; 4
    1d2a:	8c 93       	st	X, r24


	//enable
	SET_BIT(SPI->SPCR,SPE);
    1d2c:	ad e2       	ldi	r26, 0x2D	; 45
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	ed e2       	ldi	r30, 0x2D	; 45
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 64       	ori	r24, 0x40	; 64
    1d38:	8c 93       	st	X, r24
}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <SPI_voidTransieve>:


void SPI_voidTransieve(u8 copy_u8TXdata , u8* copy_pu8_RXdata){
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <SPI_voidTransieve+0x6>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	7b 83       	std	Y+3, r23	; 0x03
    1d50:	6a 83       	std	Y+2, r22	; 0x02

	//Disable SPI Interrrupt
	CLR_BIT(SPI->SPCR,SPIE);
    1d52:	ad e2       	ldi	r26, 0x2D	; 45
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ed e2       	ldi	r30, 0x2D	; 45
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8f 77       	andi	r24, 0x7F	; 127
    1d5e:	8c 93       	st	X, r24
	if(copy_pu8_RXdata != NULL){
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	e1 f0       	breq	.+56     	; 0x1da0 <SPI_voidTransieve+0x60>
		while(1 == GET_BIT(SPI->SPSR,WCOL));
    1d68:	ed e2       	ldi	r30, 0x2D	; 45
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	81 81       	ldd	r24, Z+1	; 0x01
    1d6e:	82 95       	swap	r24
    1d70:	86 95       	lsr	r24
    1d72:	86 95       	lsr	r24
    1d74:	83 70       	andi	r24, 0x03	; 3
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	81 70       	andi	r24, 0x01	; 1
    1d7c:	90 70       	andi	r25, 0x00	; 0
    1d7e:	88 23       	and	r24, r24
    1d80:	99 f7       	brne	.-26     	; 0x1d68 <SPI_voidTransieve+0x28>
		SPI->SPDR = copy_u8TXdata;
    1d82:	ed e2       	ldi	r30, 0x2D	; 45
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	82 83       	std	Z+2, r24	; 0x02
		//Budy wait
		while(0 == GET_BIT(SPI->SPSR,SPIF));
    1d8a:	ed e2       	ldi	r30, 0x2D	; 45
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	81 81       	ldd	r24, Z+1	; 0x01
    1d90:	88 23       	and	r24, r24
    1d92:	dc f7       	brge	.-10     	; 0x1d8a <SPI_voidTransieve+0x4a>
	* copy_pu8_RXdata =  SPI->SPDR;
    1d94:	ed e2       	ldi	r30, 0x2D	; 45
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d9e:	80 83       	st	Z, r24
	}
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <SPI_voidTransmitAsynchronous>:


void SPI_voidTransmitAsynchronous(u8 copy_u8TxData, void(*ptrToFun)(u8 copy_u8RxData)){
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <SPI_voidTransmitAsynchronous+0x6>
    1db2:	0f 92       	push	r0
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	7b 83       	std	Y+3, r23	; 0x03
    1dbc:	6a 83       	std	Y+2, r22	; 0x02
	if(ptrToFun != NULL)
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	f1 f0       	breq	.+60     	; 0x1e02 <SPI_voidTransmitAsynchronous+0x56>
	{
		//Enable SPI Interrrupt
		SET_BIT(SPI->SPCR,SPIE);
    1dc6:	ad e2       	ldi	r26, 0x2D	; 45
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	ed e2       	ldi	r30, 0x2D	; 45
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 68       	ori	r24, 0x80	; 128
    1dd2:	8c 93       	st	X, r24
			//set call back
		private_pCallBackSPI = ptrToFun ;
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	90 93 c3 03 	sts	0x03C3, r25
    1ddc:	80 93 c2 03 	sts	0x03C2, r24
		//check collision
		while(1 == GET_BIT(SPI->SPSR,WCOL));
    1de0:	ed e2       	ldi	r30, 0x2D	; 45
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	81 81       	ldd	r24, Z+1	; 0x01
    1de6:	82 95       	swap	r24
    1de8:	86 95       	lsr	r24
    1dea:	86 95       	lsr	r24
    1dec:	83 70       	andi	r24, 0x03	; 3
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	81 70       	andi	r24, 0x01	; 1
    1df4:	90 70       	andi	r25, 0x00	; 0
    1df6:	88 23       	and	r24, r24
    1df8:	99 f7       	brne	.-26     	; 0x1de0 <SPI_voidTransmitAsynchronous+0x34>
				SPI->SPDR = copy_u8TxData;
    1dfa:	ed e2       	ldi	r30, 0x2D	; 45
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	82 83       	std	Z+2, r24	; 0x02
	}
}
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <__vector_12>:


// ISR for timer0 output compare match
void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    1e0e:	1f 92       	push	r1
    1e10:	0f 92       	push	r0
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	0f 92       	push	r0
    1e16:	11 24       	eor	r1, r1
    1e18:	2f 93       	push	r18
    1e1a:	3f 93       	push	r19
    1e1c:	4f 93       	push	r20
    1e1e:	5f 93       	push	r21
    1e20:	6f 93       	push	r22
    1e22:	7f 93       	push	r23
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	af 93       	push	r26
    1e2a:	bf 93       	push	r27
    1e2c:	ef 93       	push	r30
    1e2e:	ff 93       	push	r31
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
	if (private_pCallBackSPI != NULL) {
    1e38:	80 91 c2 03 	lds	r24, 0x03C2
    1e3c:	90 91 c3 03 	lds	r25, 0x03C3
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	49 f0       	breq	.+18     	; 0x1e56 <__vector_12+0x48>
		private_pCallBackSPI(SPI->SPDR);
    1e44:	e0 91 c2 03 	lds	r30, 0x03C2
    1e48:	f0 91 c3 03 	lds	r31, 0x03C3
    1e4c:	ad e2       	ldi	r26, 0x2D	; 45
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	12 96       	adiw	r26, 0x02	; 2
    1e52:	8c 91       	ld	r24, X
    1e54:	09 95       	icall
	}
}
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	ff 91       	pop	r31
    1e5c:	ef 91       	pop	r30
    1e5e:	bf 91       	pop	r27
    1e60:	af 91       	pop	r26
    1e62:	9f 91       	pop	r25
    1e64:	8f 91       	pop	r24
    1e66:	7f 91       	pop	r23
    1e68:	6f 91       	pop	r22
    1e6a:	5f 91       	pop	r21
    1e6c:	4f 91       	pop	r20
    1e6e:	3f 91       	pop	r19
    1e70:	2f 91       	pop	r18
    1e72:	0f 90       	pop	r0
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	0f 90       	pop	r0
    1e78:	1f 90       	pop	r1
    1e7a:	18 95       	reti

00001e7c <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <Port_Init+0x6>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <Port_Init+0x8>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <Port_Init+0xa>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    1e8e:	1a 82       	std	Y+2, r1	; 0x02
    1e90:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i < 32; i++) {
    1e92:	1a 82       	std	Y+2, r1	; 0x02
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	72 c1       	rjmp	.+740    	; 0x217c <Port_Init+0x300>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    1e98:	29 81       	ldd	r18, Y+1	; 0x01
    1e9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e9c:	c9 01       	movw	r24, r18
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	28 0f       	add	r18, r24
    1ea4:	39 1f       	adc	r19, r25
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	fc 01       	movw	r30, r24
    1eac:	e2 0f       	add	r30, r18
    1eae:	f3 1f       	adc	r31, r19
    1eb0:	80 81       	ld	r24, Z
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	3e 83       	std	Y+6, r19	; 0x06
    1eb8:	2d 83       	std	Y+5, r18	; 0x05
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <Port_Init+0x4a>
    1ec4:	67 c0       	rjmp	.+206    	; 0x1f94 <Port_Init+0x118>
    1ec6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ec8:	3e 81       	ldd	r19, Y+6	; 0x06
    1eca:	22 30       	cpi	r18, 0x02	; 2
    1ecc:	31 05       	cpc	r19, r1
    1ece:	2c f4       	brge	.+10     	; 0x1eda <Port_Init+0x5e>
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	71 f0       	breq	.+28     	; 0x1ef4 <Port_Init+0x78>
    1ed8:	4c c1       	rjmp	.+664    	; 0x2172 <Port_Init+0x2f6>
    1eda:	2d 81       	ldd	r18, Y+5	; 0x05
    1edc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ede:	22 30       	cpi	r18, 0x02	; 2
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <Port_Init+0x6a>
    1ee4:	a7 c0       	rjmp	.+334    	; 0x2034 <Port_Init+0x1b8>
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	83 30       	cpi	r24, 0x03	; 3
    1eec:	91 05       	cpc	r25, r1
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <Port_Init+0x76>
    1ef0:	f1 c0       	rjmp	.+482    	; 0x20d4 <Port_Init+0x258>
    1ef2:	3f c1       	rjmp	.+638    	; 0x2172 <Port_Init+0x2f6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1ef4:	29 81       	ldd	r18, Y+1	; 0x01
    1ef6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef8:	c9 01       	movw	r24, r18
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	28 0f       	add	r18, r24
    1f00:	39 1f       	adc	r19, r25
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	fc 01       	movw	r30, r24
    1f08:	e2 0f       	add	r30, r18
    1f0a:	f3 1f       	adc	r31, r19
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	01 f5       	brne	.+64     	; 0x1f52 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1f12:	aa e3       	ldi	r26, 0x3A	; 58
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ea e3       	ldi	r30, 0x3A	; 58
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	29 81       	ldd	r18, Y+1	; 0x01
    1f20:	3a 81       	ldd	r19, Y+2	; 0x02
    1f22:	c9 01       	movw	r24, r18
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	28 0f       	add	r18, r24
    1f2a:	39 1f       	adc	r19, r25
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	fc 01       	movw	r30, r24
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	81 81       	ldd	r24, Z+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <Port_Init+0xcc>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <Port_Init+0xc8>
    1f4c:	84 2b       	or	r24, r20
    1f4e:	8c 93       	st	X, r24
    1f50:	10 c1       	rjmp	.+544    	; 0x2172 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1f52:	aa e3       	ldi	r26, 0x3A	; 58
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ea e3       	ldi	r30, 0x3A	; 58
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	29 81       	ldd	r18, Y+1	; 0x01
    1f60:	3a 81       	ldd	r19, Y+2	; 0x02
    1f62:	c9 01       	movw	r24, r18
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	28 0f       	add	r18, r24
    1f6a:	39 1f       	adc	r19, r25
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	fc 01       	movw	r30, r24
    1f72:	e2 0f       	add	r30, r18
    1f74:	f3 1f       	adc	r31, r19
    1f76:	81 81       	ldd	r24, Z+1	; 0x01
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 2e       	mov	r0, r18
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <Port_Init+0x10c>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <Port_Init+0x108>
    1f8c:	80 95       	com	r24
    1f8e:	84 23       	and	r24, r20
    1f90:	8c 93       	st	X, r24
    1f92:	ef c0       	rjmp	.+478    	; 0x2172 <Port_Init+0x2f6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1f94:	29 81       	ldd	r18, Y+1	; 0x01
    1f96:	3a 81       	ldd	r19, Y+2	; 0x02
    1f98:	c9 01       	movw	r24, r18
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	28 0f       	add	r18, r24
    1fa0:	39 1f       	adc	r19, r25
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	e2 0f       	add	r30, r18
    1faa:	f3 1f       	adc	r31, r19
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	01 f5       	brne	.+64     	; 0x1ff2 <Port_Init+0x176>
				SET_BIT(DDRB, pin_cfg[i].pin);
    1fb2:	a7 e3       	ldi	r26, 0x37	; 55
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e7 e3       	ldi	r30, 0x37	; 55
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	48 2f       	mov	r20, r24
    1fbe:	29 81       	ldd	r18, Y+1	; 0x01
    1fc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	28 0f       	add	r18, r24
    1fca:	39 1f       	adc	r19, r25
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	e2 0f       	add	r30, r18
    1fd4:	f3 1f       	adc	r31, r19
    1fd6:	81 81       	ldd	r24, Z+1	; 0x01
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	02 2e       	mov	r0, r18
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <Port_Init+0x16c>
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	0a 94       	dec	r0
    1fea:	e2 f7       	brpl	.-8      	; 0x1fe4 <Port_Init+0x168>
    1fec:	84 2b       	or	r24, r20
    1fee:	8c 93       	st	X, r24
    1ff0:	c0 c0       	rjmp	.+384    	; 0x2172 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1ff2:	a7 e3       	ldi	r26, 0x37	; 55
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e7 e3       	ldi	r30, 0x37	; 55
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	29 81       	ldd	r18, Y+1	; 0x01
    2000:	3a 81       	ldd	r19, Y+2	; 0x02
    2002:	c9 01       	movw	r24, r18
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	28 0f       	add	r18, r24
    200a:	39 1f       	adc	r19, r25
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	fc 01       	movw	r30, r24
    2012:	e2 0f       	add	r30, r18
    2014:	f3 1f       	adc	r31, r19
    2016:	81 81       	ldd	r24, Z+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	02 2e       	mov	r0, r18
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <Port_Init+0x1ac>
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	0a 94       	dec	r0
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <Port_Init+0x1a8>
    202c:	80 95       	com	r24
    202e:	84 23       	and	r24, r20
    2030:	8c 93       	st	X, r24
    2032:	9f c0       	rjmp	.+318    	; 0x2172 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    2034:	29 81       	ldd	r18, Y+1	; 0x01
    2036:	3a 81       	ldd	r19, Y+2	; 0x02
    2038:	c9 01       	movw	r24, r18
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	28 0f       	add	r18, r24
    2040:	39 1f       	adc	r19, r25
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	fc 01       	movw	r30, r24
    2048:	e2 0f       	add	r30, r18
    204a:	f3 1f       	adc	r31, r19
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	01 f5       	brne	.+64     	; 0x2092 <Port_Init+0x216>
				SET_BIT(DDRC, pin_cfg[i].pin);
    2052:	a4 e3       	ldi	r26, 0x34	; 52
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e4 e3       	ldi	r30, 0x34	; 52
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	48 2f       	mov	r20, r24
    205e:	29 81       	ldd	r18, Y+1	; 0x01
    2060:	3a 81       	ldd	r19, Y+2	; 0x02
    2062:	c9 01       	movw	r24, r18
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	28 0f       	add	r18, r24
    206a:	39 1f       	adc	r19, r25
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	fc 01       	movw	r30, r24
    2072:	e2 0f       	add	r30, r18
    2074:	f3 1f       	adc	r31, r19
    2076:	81 81       	ldd	r24, Z+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <Port_Init+0x20c>
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <Port_Init+0x208>
    208c:	84 2b       	or	r24, r20
    208e:	8c 93       	st	X, r24
    2090:	70 c0       	rjmp	.+224    	; 0x2172 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    2092:	a4 e3       	ldi	r26, 0x34	; 52
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e4 e3       	ldi	r30, 0x34	; 52
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	29 81       	ldd	r18, Y+1	; 0x01
    20a0:	3a 81       	ldd	r19, Y+2	; 0x02
    20a2:	c9 01       	movw	r24, r18
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	28 0f       	add	r18, r24
    20aa:	39 1f       	adc	r19, r25
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	fc 01       	movw	r30, r24
    20b2:	e2 0f       	add	r30, r18
    20b4:	f3 1f       	adc	r31, r19
    20b6:	81 81       	ldd	r24, Z+1	; 0x01
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	02 2e       	mov	r0, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <Port_Init+0x24c>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	0a 94       	dec	r0
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <Port_Init+0x248>
    20cc:	80 95       	com	r24
    20ce:	84 23       	and	r24, r20
    20d0:	8c 93       	st	X, r24
    20d2:	4f c0       	rjmp	.+158    	; 0x2172 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    20d4:	29 81       	ldd	r18, Y+1	; 0x01
    20d6:	3a 81       	ldd	r19, Y+2	; 0x02
    20d8:	c9 01       	movw	r24, r18
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	28 0f       	add	r18, r24
    20e0:	39 1f       	adc	r19, r25
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	fc 01       	movw	r30, r24
    20e8:	e2 0f       	add	r30, r18
    20ea:	f3 1f       	adc	r31, r19
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	01 f5       	brne	.+64     	; 0x2132 <Port_Init+0x2b6>
				SET_BIT(DDRD, pin_cfg[i].pin);
    20f2:	a1 e3       	ldi	r26, 0x31	; 49
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e1 e3       	ldi	r30, 0x31	; 49
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	48 2f       	mov	r20, r24
    20fe:	29 81       	ldd	r18, Y+1	; 0x01
    2100:	3a 81       	ldd	r19, Y+2	; 0x02
    2102:	c9 01       	movw	r24, r18
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	28 0f       	add	r18, r24
    210a:	39 1f       	adc	r19, r25
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	fc 01       	movw	r30, r24
    2112:	e2 0f       	add	r30, r18
    2114:	f3 1f       	adc	r31, r19
    2116:	81 81       	ldd	r24, Z+1	; 0x01
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <Port_Init+0x2ac>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <Port_Init+0x2a8>
    212c:	84 2b       	or	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	20 c0       	rjmp	.+64     	; 0x2172 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    2132:	a1 e3       	ldi	r26, 0x31	; 49
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e1 e3       	ldi	r30, 0x31	; 49
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	48 2f       	mov	r20, r24
    213e:	29 81       	ldd	r18, Y+1	; 0x01
    2140:	3a 81       	ldd	r19, Y+2	; 0x02
    2142:	c9 01       	movw	r24, r18
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	28 0f       	add	r18, r24
    214a:	39 1f       	adc	r19, r25
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	fc 01       	movw	r30, r24
    2152:	e2 0f       	add	r30, r18
    2154:	f3 1f       	adc	r31, r19
    2156:	81 81       	ldd	r24, Z+1	; 0x01
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	02 2e       	mov	r0, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <Port_Init+0x2ec>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <Port_Init+0x2e8>
    216c:	80 95       	com	r24
    216e:	84 23       	and	r24, r20
    2170:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i=0; i < 32; i++) {
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	80 32       	cpi	r24, 0x20	; 32
    2182:	91 05       	cpc	r25, r1
    2184:	0c f4       	brge	.+2      	; 0x2188 <Port_Init+0x30c>
    2186:	88 ce       	rjmp	.-752    	; 0x1e98 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    2188:	26 96       	adiw	r28, 0x06	; 6
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    21a2:	af e5       	ldi	r26, 0x5F	; 95
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	ef e5       	ldi	r30, 0x5F	; 95
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 68       	ori	r24, 0x80	; 128
    21ae:	8c 93       	st	X, r24
}
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <GI_voidDisable>:

void GI_voidDisable(void)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    21be:	af e5       	ldi	r26, 0x5F	; 95
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	ef e5       	ldi	r30, 0x5F	; 95
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 77       	andi	r24, 0x7F	; 127
    21ca:	8c 93       	st	X, r24
}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <Dio_WriteChannel+0x6>
    21d8:	00 d0       	rcall	.+0      	; 0x21da <Dio_WriteChannel+0x8>
    21da:	0f 92       	push	r0
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	8a 83       	std	Y+2, r24	; 0x02
    21e2:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	86 95       	lsr	r24
    21e8:	86 95       	lsr	r24
    21ea:	86 95       	lsr	r24
    21ec:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	3d 83       	std	Y+5, r19	; 0x05
    21f6:	2c 83       	std	Y+4, r18	; 0x04
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	9d 81       	ldd	r25, Y+5	; 0x05
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	91 05       	cpc	r25, r1
    2200:	09 f4       	brne	.+2      	; 0x2204 <Dio_WriteChannel+0x32>
    2202:	43 c0       	rjmp	.+134    	; 0x228a <Dio_WriteChannel+0xb8>
    2204:	2c 81       	ldd	r18, Y+4	; 0x04
    2206:	3d 81       	ldd	r19, Y+5	; 0x05
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	31 05       	cpc	r19, r1
    220c:	2c f4       	brge	.+10     	; 0x2218 <Dio_WriteChannel+0x46>
    220e:	8c 81       	ldd	r24, Y+4	; 0x04
    2210:	9d 81       	ldd	r25, Y+5	; 0x05
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	71 f0       	breq	.+28     	; 0x2232 <Dio_WriteChannel+0x60>
    2216:	ce c0       	rjmp	.+412    	; 0x23b4 <Dio_WriteChannel+0x1e2>
    2218:	2c 81       	ldd	r18, Y+4	; 0x04
    221a:	3d 81       	ldd	r19, Y+5	; 0x05
    221c:	22 30       	cpi	r18, 0x02	; 2
    221e:	31 05       	cpc	r19, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <Dio_WriteChannel+0x52>
    2222:	65 c0       	rjmp	.+202    	; 0x22ee <Dio_WriteChannel+0x11c>
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	9d 81       	ldd	r25, Y+5	; 0x05
    2228:	83 30       	cpi	r24, 0x03	; 3
    222a:	91 05       	cpc	r25, r1
    222c:	09 f4       	brne	.+2      	; 0x2230 <Dio_WriteChannel+0x5e>
    222e:	91 c0       	rjmp	.+290    	; 0x2352 <Dio_WriteChannel+0x180>
    2230:	c1 c0       	rjmp	.+386    	; 0x23b4 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	a1 f4       	brne	.+40     	; 0x2260 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    2238:	ab e3       	ldi	r26, 0x3B	; 59
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	eb e3       	ldi	r30, 0x3B	; 59
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	48 2f       	mov	r20, r24
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	02 2e       	mov	r0, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <Dio_WriteChannel+0x84>
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	0a 94       	dec	r0
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <Dio_WriteChannel+0x80>
    225a:	84 2b       	or	r24, r20
    225c:	8c 93       	st	X, r24
    225e:	aa c0       	rjmp	.+340    	; 0x23b4 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    2260:	ab e3       	ldi	r26, 0x3B	; 59
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	eb e3       	ldi	r30, 0x3B	; 59
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	48 2f       	mov	r20, r24
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	02 2e       	mov	r0, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <Dio_WriteChannel+0xac>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	0a 94       	dec	r0
    2280:	e2 f7       	brpl	.-8      	; 0x227a <Dio_WriteChannel+0xa8>
    2282:	80 95       	com	r24
    2284:	84 23       	and	r24, r20
    2286:	8c 93       	st	X, r24
    2288:	95 c0       	rjmp	.+298    	; 0x23b4 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	81 30       	cpi	r24, 0x01	; 1
    228e:	b9 f4       	brne	.+46     	; 0x22be <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    2290:	a8 e3       	ldi	r26, 0x38	; 56
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e8 e3       	ldi	r30, 0x38	; 56
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	48 2f       	mov	r20, r24
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9c 01       	movw	r18, r24
    22a4:	27 70       	andi	r18, 0x07	; 7
    22a6:	30 70       	andi	r19, 0x00	; 0
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	02 2e       	mov	r0, r18
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <Dio_WriteChannel+0xe2>
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	0a 94       	dec	r0
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <Dio_WriteChannel+0xde>
    22b8:	84 2b       	or	r24, r20
    22ba:	8c 93       	st	X, r24
    22bc:	7b c0       	rjmp	.+246    	; 0x23b4 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    22be:	a8 e3       	ldi	r26, 0x38	; 56
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e8 e3       	ldi	r30, 0x38	; 56
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	48 2f       	mov	r20, r24
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9c 01       	movw	r18, r24
    22d2:	27 70       	andi	r18, 0x07	; 7
    22d4:	30 70       	andi	r19, 0x00	; 0
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	02 2e       	mov	r0, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <Dio_WriteChannel+0x110>
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	0a 94       	dec	r0
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <Dio_WriteChannel+0x10c>
    22e6:	80 95       	com	r24
    22e8:	84 23       	and	r24, r20
    22ea:	8c 93       	st	X, r24
    22ec:	63 c0       	rjmp	.+198    	; 0x23b4 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	b9 f4       	brne	.+46     	; 0x2322 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    22f4:	a5 e3       	ldi	r26, 0x35	; 53
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e5 e3       	ldi	r30, 0x35	; 53
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	48 2f       	mov	r20, r24
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	88 2f       	mov	r24, r24
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 01       	movw	r18, r24
    2308:	27 70       	andi	r18, 0x07	; 7
    230a:	30 70       	andi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <Dio_WriteChannel+0x146>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <Dio_WriteChannel+0x142>
    231c:	84 2b       	or	r24, r20
    231e:	8c 93       	st	X, r24
    2320:	49 c0       	rjmp	.+146    	; 0x23b4 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    2322:	a5 e3       	ldi	r26, 0x35	; 53
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e5 e3       	ldi	r30, 0x35	; 53
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	48 2f       	mov	r20, r24
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9c 01       	movw	r18, r24
    2336:	27 70       	andi	r18, 0x07	; 7
    2338:	30 70       	andi	r19, 0x00	; 0
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 2e       	mov	r0, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <Dio_WriteChannel+0x174>
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	0a 94       	dec	r0
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <Dio_WriteChannel+0x170>
    234a:	80 95       	com	r24
    234c:	84 23       	and	r24, r20
    234e:	8c 93       	st	X, r24
    2350:	31 c0       	rjmp	.+98     	; 0x23b4 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	b9 f4       	brne	.+46     	; 0x2386 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    2358:	a2 e3       	ldi	r26, 0x32	; 50
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e2 e3       	ldi	r30, 0x32	; 50
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	48 2f       	mov	r20, r24
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9c 01       	movw	r18, r24
    236c:	27 70       	andi	r18, 0x07	; 7
    236e:	30 70       	andi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <Dio_WriteChannel+0x1aa>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <Dio_WriteChannel+0x1a6>
    2380:	84 2b       	or	r24, r20
    2382:	8c 93       	st	X, r24
    2384:	17 c0       	rjmp	.+46     	; 0x23b4 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    2386:	a2 e3       	ldi	r26, 0x32	; 50
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e2 e3       	ldi	r30, 0x32	; 50
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	48 2f       	mov	r20, r24
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9c 01       	movw	r18, r24
    239a:	27 70       	andi	r18, 0x07	; 7
    239c:	30 70       	andi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <Dio_WriteChannel+0x1d8>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <Dio_WriteChannel+0x1d4>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	8c 93       	st	X, r24
		}
		break;
	}
}
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <Dio_ReadChannel+0x6>
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <Dio_ReadChannel+0x8>
    23cc:	0f 92       	push	r0
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	86 95       	lsr	r24
    23d8:	86 95       	lsr	r24
    23da:	86 95       	lsr	r24
    23dc:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	3d 83       	std	Y+5, r19	; 0x05
    23e6:	2c 83       	std	Y+4, r18	; 0x04
    23e8:	4c 81       	ldd	r20, Y+4	; 0x04
    23ea:	5d 81       	ldd	r21, Y+5	; 0x05
    23ec:	41 30       	cpi	r20, 0x01	; 1
    23ee:	51 05       	cpc	r21, r1
    23f0:	49 f1       	breq	.+82     	; 0x2444 <Dio_ReadChannel+0x80>
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	9d 81       	ldd	r25, Y+5	; 0x05
    23f6:	82 30       	cpi	r24, 0x02	; 2
    23f8:	91 05       	cpc	r25, r1
    23fa:	34 f4       	brge	.+12     	; 0x2408 <Dio_ReadChannel+0x44>
    23fc:	2c 81       	ldd	r18, Y+4	; 0x04
    23fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2400:	21 15       	cp	r18, r1
    2402:	31 05       	cpc	r19, r1
    2404:	69 f0       	breq	.+26     	; 0x2420 <Dio_ReadChannel+0x5c>
    2406:	59 c0       	rjmp	.+178    	; 0x24ba <Dio_ReadChannel+0xf6>
    2408:	4c 81       	ldd	r20, Y+4	; 0x04
    240a:	5d 81       	ldd	r21, Y+5	; 0x05
    240c:	42 30       	cpi	r20, 0x02	; 2
    240e:	51 05       	cpc	r21, r1
    2410:	69 f1       	breq	.+90     	; 0x246c <Dio_ReadChannel+0xa8>
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	83 30       	cpi	r24, 0x03	; 3
    2418:	91 05       	cpc	r25, r1
    241a:	09 f4       	brne	.+2      	; 0x241e <Dio_ReadChannel+0x5a>
    241c:	3b c0       	rjmp	.+118    	; 0x2494 <Dio_ReadChannel+0xd0>
    241e:	4d c0       	rjmp	.+154    	; 0x24ba <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2420:	e9 e3       	ldi	r30, 0x39	; 57
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	a9 01       	movw	r20, r18
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <Dio_ReadChannel+0x74>
    2434:	55 95       	asr	r21
    2436:	47 95       	ror	r20
    2438:	8a 95       	dec	r24
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <Dio_ReadChannel+0x70>
    243c:	ca 01       	movw	r24, r20
    243e:	81 70       	andi	r24, 0x01	; 1
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	3b c0       	rjmp	.+118    	; 0x24ba <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    2444:	e6 e3       	ldi	r30, 0x36	; 54
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	87 70       	andi	r24, 0x07	; 7
    2456:	90 70       	andi	r25, 0x00	; 0
    2458:	a9 01       	movw	r20, r18
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <Dio_ReadChannel+0x9c>
    245c:	55 95       	asr	r21
    245e:	47 95       	ror	r20
    2460:	8a 95       	dec	r24
    2462:	e2 f7       	brpl	.-8      	; 0x245c <Dio_ReadChannel+0x98>
    2464:	ca 01       	movw	r24, r20
    2466:	81 70       	andi	r24, 0x01	; 1
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	27 c0       	rjmp	.+78     	; 0x24ba <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    246c:	e3 e3       	ldi	r30, 0x33	; 51
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	87 70       	andi	r24, 0x07	; 7
    247e:	90 70       	andi	r25, 0x00	; 0
    2480:	a9 01       	movw	r20, r18
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <Dio_ReadChannel+0xc4>
    2484:	55 95       	asr	r21
    2486:	47 95       	ror	r20
    2488:	8a 95       	dec	r24
    248a:	e2 f7       	brpl	.-8      	; 0x2484 <Dio_ReadChannel+0xc0>
    248c:	ca 01       	movw	r24, r20
    248e:	81 70       	andi	r24, 0x01	; 1
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	13 c0       	rjmp	.+38     	; 0x24ba <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    2494:	e0 e3       	ldi	r30, 0x30	; 48
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	87 70       	andi	r24, 0x07	; 7
    24a6:	90 70       	andi	r25, 0x00	; 0
    24a8:	a9 01       	movw	r20, r18
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <Dio_ReadChannel+0xec>
    24ac:	55 95       	asr	r21
    24ae:	47 95       	ror	r20
    24b0:	8a 95       	dec	r24
    24b2:	e2 f7       	brpl	.-8      	; 0x24ac <Dio_ReadChannel+0xe8>
    24b4:	ca 01       	movw	r24, r20
    24b6:	81 70       	andi	r24, 0x01	; 1
    24b8:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <Dio_FlipChannel+0x6>
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <Dio_FlipChannel+0x8>
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	86 95       	lsr	r24
    24de:	86 95       	lsr	r24
    24e0:	86 95       	lsr	r24
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	3c 83       	std	Y+4, r19	; 0x04
    24e8:	2b 83       	std	Y+3, r18	; 0x03
    24ea:	4b 81       	ldd	r20, Y+3	; 0x03
    24ec:	5c 81       	ldd	r21, Y+4	; 0x04
    24ee:	41 30       	cpi	r20, 0x01	; 1
    24f0:	51 05       	cpc	r21, r1
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <Dio_FlipChannel+0x2a>
    24f4:	3c c0       	rjmp	.+120    	; 0x256e <Dio_FlipChannel+0xa2>
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	82 30       	cpi	r24, 0x02	; 2
    24fc:	91 05       	cpc	r25, r1
    24fe:	34 f4       	brge	.+12     	; 0x250c <Dio_FlipChannel+0x40>
    2500:	2b 81       	ldd	r18, Y+3	; 0x03
    2502:	3c 81       	ldd	r19, Y+4	; 0x04
    2504:	21 15       	cp	r18, r1
    2506:	31 05       	cpc	r19, r1
    2508:	71 f0       	breq	.+28     	; 0x2526 <Dio_FlipChannel+0x5a>
    250a:	ab c0       	rjmp	.+342    	; 0x2662 <Dio_FlipChannel+0x196>
    250c:	4b 81       	ldd	r20, Y+3	; 0x03
    250e:	5c 81       	ldd	r21, Y+4	; 0x04
    2510:	42 30       	cpi	r20, 0x02	; 2
    2512:	51 05       	cpc	r21, r1
    2514:	09 f4       	brne	.+2      	; 0x2518 <Dio_FlipChannel+0x4c>
    2516:	54 c0       	rjmp	.+168    	; 0x25c0 <Dio_FlipChannel+0xf4>
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	83 30       	cpi	r24, 0x03	; 3
    251e:	91 05       	cpc	r25, r1
    2520:	09 f4       	brne	.+2      	; 0x2524 <Dio_FlipChannel+0x58>
    2522:	77 c0       	rjmp	.+238    	; 0x2612 <Dio_FlipChannel+0x146>
    2524:	9e c0       	rjmp	.+316    	; 0x2662 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    2526:	ab e3       	ldi	r26, 0x3B	; 59
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	eb e3       	ldi	r30, 0x3B	; 59
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	48 2f       	mov	r20, r24
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <Dio_FlipChannel+0x76>
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	2a 95       	dec	r18
    2544:	e2 f7       	brpl	.-8      	; 0x253e <Dio_FlipChannel+0x72>
    2546:	84 27       	eor	r24, r20
    2548:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    254a:	eb e3       	ldi	r30, 0x3B	; 59
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a9 01       	movw	r20, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <Dio_FlipChannel+0x96>
    255e:	55 95       	asr	r21
    2560:	47 95       	ror	r20
    2562:	8a 95       	dec	r24
    2564:	e2 f7       	brpl	.-8      	; 0x255e <Dio_FlipChannel+0x92>
    2566:	ca 01       	movw	r24, r20
    2568:	81 70       	andi	r24, 0x01	; 1
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	7a c0       	rjmp	.+244    	; 0x2662 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    256e:	a8 e3       	ldi	r26, 0x38	; 56
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e8 e3       	ldi	r30, 0x38	; 56
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	48 2f       	mov	r20, r24
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9c 01       	movw	r18, r24
    2582:	27 70       	andi	r18, 0x07	; 7
    2584:	30 70       	andi	r19, 0x00	; 0
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <Dio_FlipChannel+0xc4>
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	2a 95       	dec	r18
    2592:	e2 f7       	brpl	.-8      	; 0x258c <Dio_FlipChannel+0xc0>
    2594:	84 27       	eor	r24, r20
    2596:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    2598:	e8 e3       	ldi	r30, 0x38	; 56
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	87 70       	andi	r24, 0x07	; 7
    25aa:	90 70       	andi	r25, 0x00	; 0
    25ac:	a9 01       	movw	r20, r18
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <Dio_FlipChannel+0xe8>
    25b0:	55 95       	asr	r21
    25b2:	47 95       	ror	r20
    25b4:	8a 95       	dec	r24
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <Dio_FlipChannel+0xe4>
    25b8:	ca 01       	movw	r24, r20
    25ba:	81 70       	andi	r24, 0x01	; 1
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	51 c0       	rjmp	.+162    	; 0x2662 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    25c0:	a5 e3       	ldi	r26, 0x35	; 53
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e5 e3       	ldi	r30, 0x35	; 53
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	48 2f       	mov	r20, r24
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	88 2f       	mov	r24, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9c 01       	movw	r18, r24
    25d4:	27 70       	andi	r18, 0x07	; 7
    25d6:	30 70       	andi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <Dio_FlipChannel+0x116>
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	2a 95       	dec	r18
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <Dio_FlipChannel+0x112>
    25e6:	84 27       	eor	r24, r20
    25e8:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    25ea:	e5 e3       	ldi	r30, 0x35	; 53
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	87 70       	andi	r24, 0x07	; 7
    25fc:	90 70       	andi	r25, 0x00	; 0
    25fe:	a9 01       	movw	r20, r18
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <Dio_FlipChannel+0x13a>
    2602:	55 95       	asr	r21
    2604:	47 95       	ror	r20
    2606:	8a 95       	dec	r24
    2608:	e2 f7       	brpl	.-8      	; 0x2602 <Dio_FlipChannel+0x136>
    260a:	ca 01       	movw	r24, r20
    260c:	81 70       	andi	r24, 0x01	; 1
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	28 c0       	rjmp	.+80     	; 0x2662 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    2612:	a2 e3       	ldi	r26, 0x32	; 50
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e2 e3       	ldi	r30, 0x32	; 50
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	48 2f       	mov	r20, r24
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9c 01       	movw	r18, r24
    2626:	27 70       	andi	r18, 0x07	; 7
    2628:	30 70       	andi	r19, 0x00	; 0
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <Dio_FlipChannel+0x168>
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	2a 95       	dec	r18
    2636:	e2 f7       	brpl	.-8      	; 0x2630 <Dio_FlipChannel+0x164>
    2638:	84 27       	eor	r24, r20
    263a:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    263c:	e2 e3       	ldi	r30, 0x32	; 50
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	87 70       	andi	r24, 0x07	; 7
    264e:	90 70       	andi	r25, 0x00	; 0
    2650:	a9 01       	movw	r20, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <Dio_FlipChannel+0x18c>
    2654:	55 95       	asr	r21
    2656:	47 95       	ror	r20
    2658:	8a 95       	dec	r24
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <Dio_FlipChannel+0x188>
    265c:	ca 01       	movw	r24, r20
    265e:	81 70       	andi	r24, 0x01	; 1
    2660:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    2662:	89 81       	ldd	r24, Y+1	; 0x01
}
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <Dio_WritePort+0x6>
    2678:	00 d0       	rcall	.+0      	; 0x267a <Dio_WritePort+0x8>
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	3c 83       	std	Y+4, r19	; 0x04
    268a:	2b 83       	std	Y+3, r18	; 0x03
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	81 30       	cpi	r24, 0x01	; 1
    2692:	91 05       	cpc	r25, r1
    2694:	d1 f0       	breq	.+52     	; 0x26ca <Dio_WritePort+0x58>
    2696:	2b 81       	ldd	r18, Y+3	; 0x03
    2698:	3c 81       	ldd	r19, Y+4	; 0x04
    269a:	22 30       	cpi	r18, 0x02	; 2
    269c:	31 05       	cpc	r19, r1
    269e:	2c f4       	brge	.+10     	; 0x26aa <Dio_WritePort+0x38>
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	61 f0       	breq	.+24     	; 0x26c0 <Dio_WritePort+0x4e>
    26a8:	1e c0       	rjmp	.+60     	; 0x26e6 <Dio_WritePort+0x74>
    26aa:	2b 81       	ldd	r18, Y+3	; 0x03
    26ac:	3c 81       	ldd	r19, Y+4	; 0x04
    26ae:	22 30       	cpi	r18, 0x02	; 2
    26b0:	31 05       	cpc	r19, r1
    26b2:	81 f0       	breq	.+32     	; 0x26d4 <Dio_WritePort+0x62>
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	83 30       	cpi	r24, 0x03	; 3
    26ba:	91 05       	cpc	r25, r1
    26bc:	81 f0       	breq	.+32     	; 0x26de <Dio_WritePort+0x6c>
    26be:	13 c0       	rjmp	.+38     	; 0x26e6 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    26c0:	eb e3       	ldi	r30, 0x3B	; 59
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	80 83       	st	Z, r24
    26c8:	0e c0       	rjmp	.+28     	; 0x26e6 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    26ca:	e8 e3       	ldi	r30, 0x38	; 56
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	80 83       	st	Z, r24
    26d2:	09 c0       	rjmp	.+18     	; 0x26e6 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    26d4:	e5 e3       	ldi	r30, 0x35	; 53
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	80 83       	st	Z, r24
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    26de:	e2 e3       	ldi	r30, 0x32	; 50
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	80 83       	st	Z, r24
		break;
	}
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <ADC_Init>:
 */

#include "../includes/ADC_interface.h"  // Include the ADC interface header file
#include <avr/io.h>         // Include AVR I/O definitions
#include "../../DIO/DIO_interface.h"
void ADC_Init(void) {
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	// Set reference voltage to AVCC with external capacitor at AREF pin
#if ADC_AREF_MODE == ADC_AREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_AREF_MODE == ADC_AVCC
	SET_BIT(ADMUX,REFS0);
    26fc:	a7 e2       	ldi	r26, 0x27	; 39
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e7 e2       	ldi	r30, 0x27	; 39
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	80 64       	ori	r24, 0x40	; 64
    2708:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    270a:	a7 e2       	ldi	r26, 0x27	; 39
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e7 e2       	ldi	r30, 0x27	; 39
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	8f 77       	andi	r24, 0x7F	; 127
    2716:	8c 93       	st	X, r24
#endif

//	ADMUX = (1 << REFS0);

#if 	ADC_RESULT_ADJUSTMENT_MODE ==ADC_LEFT_ADJUST_THE_RESULT
	SET_BIT(ADMUX,ADLAR);
    2718:	a7 e2       	ldi	r26, 0x27	; 39
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e7 e2       	ldi	r30, 0x27	; 39
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	80 62       	ori	r24, 0x20	; 32
    2724:	8c 93       	st	X, r24
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_32
    SET_BIT(ADCSRA,ADPS0);
    CLR_BIT(ADCSRA,ADPS1);
    SET_BIT(ADCSRA,ADPS2);
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_64
    CLR_BIT(ADCSRA,ADPS0);
    2726:	a6 e2       	ldi	r26, 0x26	; 38
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e6 e2       	ldi	r30, 0x26	; 38
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8e 7f       	andi	r24, 0xFE	; 254
    2732:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS1);
    2734:	a6 e2       	ldi	r26, 0x26	; 38
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e6 e2       	ldi	r30, 0x26	; 38
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	82 60       	ori	r24, 0x02	; 2
    2740:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS2);
    2742:	a6 e2       	ldi	r26, 0x26	; 38
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e6 e2       	ldi	r30, 0x26	; 38
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	84 60       	ori	r24, 0x04	; 4
    274e:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS1);
    SET_BIT(ADCSRA,ADPS2);
#endif

    // Enable the ADC
   	     SET_BIT(ADCSRA,ADEN);
    2750:	a6 e2       	ldi	r26, 0x26	; 38
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e6 e2       	ldi	r30, 0x26	; 38
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	80 68       	ori	r24, 0x80	; 128
    275c:	8c 93       	st	X, r24
    //    ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
//	SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);

}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <ADC_ReadChannel>:

u16 ADC_ReadChannel(u8 channel) {
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <ADC_ReadChannel+0x6>
    276a:	0f 92       	push	r0
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	8b 83       	std	Y+3, r24	; 0x03
	u16 result=0;
    2772:	1a 82       	std	Y+2, r1	; 0x02
    2774:	19 82       	std	Y+1, r1	; 0x01
	// Select the ADC channel           0x00000111
                //    0x1111 1000
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
    2776:	a7 e2       	ldi	r26, 0x27	; 39
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e7 e2       	ldi	r30, 0x27	; 39
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	98 2f       	mov	r25, r24
    2782:	98 7f       	andi	r25, 0xF8	; 248
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	87 70       	andi	r24, 0x07	; 7
    2788:	89 2b       	or	r24, r25
    278a:	8c 93       	st	X, r24

    // Start the conversion
    SET_BIT(ADCSRA,ADSC);
    278c:	a6 e2       	ldi	r26, 0x26	; 38
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e6 e2       	ldi	r30, 0x26	; 38
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	80 64       	ori	r24, 0x40	; 64
    2798:	8c 93       	st	X, r24
   // ADCSRA |= (1 << ADSC);

    // Wait for the conversion to complete
    while (ADCSRA & (1 << ADSC));
    279a:	e6 e2       	ldi	r30, 0x26	; 38
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	80 74       	andi	r24, 0x40	; 64
    27a6:	90 70       	andi	r25, 0x00	; 0
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	b9 f7       	brne	.-18     	; 0x279a <ADC_ReadChannel+0x36>

#if ADC_RESULT_ADJUSTMENT_MODE == ADC_LEFT_ADJUST_THE_RESULT
    // Return the ADC result as a 16-bit value (combining ADCL and ADCH)
    result=(ADCL>>6);
    27ac:	e4 e2       	ldi	r30, 0x24	; 36
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	82 95       	swap	r24
    27b4:	86 95       	lsr	r24
    27b6:	86 95       	lsr	r24
    27b8:	83 70       	andi	r24, 0x03	; 3
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	89 83       	std	Y+1, r24	; 0x01
    result|=(ADCH<<2);
    27c2:	e5 e2       	ldi	r30, 0x25	; 37
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	9c 01       	movw	r18, r24
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	9a 81       	ldd	r25, Y+2	; 0x02
    27da:	82 2b       	or	r24, r18
    27dc:	93 2b       	or	r25, r19
    27de:	9a 83       	std	Y+2, r25	; 0x02
    27e0:	89 83       	std	Y+1, r24	; 0x01
    // Return the ADC result as a 16-bit value (combining ADCL and ADCH)
  result = ADCL;
  result|=(ADCH << 8);
    // result = (ADCH<<8) | ADCL;
    #endif
    return result;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <MOTOR_voidInit>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "../WHM/WHM_config.h"
#include "WHM_interface.h"

/* Function to initialize the motor driver */
void MOTOR_voidInit(void) {
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
	TMR0_voidInit();
    27fa:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <TMR0_voidInit>
    Dio_WriteChannel(SPEEDM_EN, STD_LOW);  // Disable speed motor
    27fe:	8b e0       	ldi	r24, 0x0B	; 11
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
    Dio_WriteChannel(STEERINGM_EN, STD_LOW);  // Disable steering motor
    2806:	8b e1       	ldi	r24, 0x1B	; 27
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>

    Dio_WriteChannel(SPEEDM_IN1, STD_LOW);  // Set initial direction for speed motor
    280e:	8a e0       	ldi	r24, 0x0A	; 10
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
    Dio_WriteChannel(SPEEDM_IN2, STD_LOW);
    2816:	89 e0       	ldi	r24, 0x09	; 9
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>

    Dio_WriteChannel(STEERINGM_IN1, STD_LOW);  // Set initial direction for steering motor
    281e:	8c e1       	ldi	r24, 0x1C	; 28
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
    Dio_WriteChannel(STEERINGM_IN2, STD_LOW);
    2826:	8d e1       	ldi	r24, 0x1D	; 29
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
}
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <MOTOR_voidOn>:

/* Function to turn on a DC motor */
void MOTOR_voidOn(u8 Copy_u8Motor, u8 Copy_u8Direction) {
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	00 d0       	rcall	.+0      	; 0x283a <MOTOR_voidOn+0x6>
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	6a 83       	std	Y+2, r22	; 0x02
    if (Copy_u8Motor == SPEED_MOTOR) {
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	88 23       	and	r24, r24
    2846:	c1 f4       	brne	.+48     	; 0x2878 <MOTOR_voidOn+0x44>
		UART_TransmitString("inside On speed  motor \r\n");
    2848:	80 e6       	ldi	r24, 0x60	; 96
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>

        Dio_WriteChannel(SPEEDM_IN1, GET_BIT(Copy_u8Direction, 0));
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	98 2f       	mov	r25, r24
    2854:	91 70       	andi	r25, 0x01	; 1
    2856:	8a e0       	ldi	r24, 0x0A	; 10
    2858:	69 2f       	mov	r22, r25
    285a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
        Dio_WriteChannel(SPEEDM_IN2, GET_BIT(Copy_u8Direction, 1));
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	86 95       	lsr	r24
    2862:	98 2f       	mov	r25, r24
    2864:	91 70       	andi	r25, 0x01	; 1
    2866:	89 e0       	ldi	r24, 0x09	; 9
    2868:	69 2f       	mov	r22, r25
    286a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
        MOTOR_voidControlSpeed(SPEED_MOTOR, INITIAL_SPEED);  // Enable the speed motor
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	6c e3       	ldi	r22, 0x3C	; 60
    2872:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <MOTOR_voidControlSpeed>
    2876:	1a c0       	rjmp	.+52     	; 0x28ac <MOTOR_voidOn+0x78>

    } else if (Copy_u8Motor == STEERING_MOTOR) {
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	81 30       	cpi	r24, 0x01	; 1
    287c:	b9 f4       	brne	.+46     	; 0x28ac <MOTOR_voidOn+0x78>
		UART_TransmitString("inside On steering  motor \r\n");
    287e:	8a e7       	ldi	r24, 0x7A	; 122
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>

    	Dio_WriteChannel(STEERINGM_EN, STD_HIGH);  // Enable the steering motor
    2886:	8b e1       	ldi	r24, 0x1B	; 27
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
        Dio_WriteChannel(STEERINGM_IN1, GET_BIT(Copy_u8Direction, 0));
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	98 2f       	mov	r25, r24
    2892:	91 70       	andi	r25, 0x01	; 1
    2894:	8c e1       	ldi	r24, 0x1C	; 28
    2896:	69 2f       	mov	r22, r25
    2898:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
        Dio_WriteChannel(STEERINGM_IN2, GET_BIT(Copy_u8Direction, 1));
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	86 95       	lsr	r24
    28a0:	98 2f       	mov	r25, r24
    28a2:	91 70       	andi	r25, 0x01	; 1
    28a4:	8d e1       	ldi	r24, 0x1D	; 29
    28a6:	69 2f       	mov	r22, r25
    28a8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
    }
}
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <MOTOR_voidControlSpeed>:

/* Function to control the speed of a DC motor */
void MOTOR_voidControlSpeed(u8 Copy_u8Motor, u8 Copy_u8Speed) {
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <MOTOR_voidControlSpeed+0x6>
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	6a 83       	std	Y+2, r22	; 0x02
    if (Copy_u8Motor == SPEED_MOTOR) {
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	88 23       	and	r24, r24
    28c8:	29 f4       	brne	.+10     	; 0x28d4 <MOTOR_voidControlSpeed+0x1e>
        TMR0_voidSetDutyCycleForPWM(Copy_u8Speed);  // Set PWM Duty Cycle for speed motor
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <TMR0_voidSetDutyCycleForPWM>
        TMR0_voidStart();  // Start Timer0 for PWM operation
    28d0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TMR0_voidStart>
    } else if (Copy_u8Motor == STEERING_MOTOR) {
        // Adjust if steering motor has a different speed control mechanism
        // TMR0_voidSetDutyCycleForPWM(Copy_u8Speed);
        // TMR0_voidStart();
    }
}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <MOTOR_voidOff>:

/* Function to turn off a DC motor */
void MOTOR_voidOff(u8 Copy_u8Motor) {
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	0f 92       	push	r0
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8Motor == SPEED_MOTOR) {
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	88 23       	and	r24, r24
    28ee:	29 f4       	brne	.+10     	; 0x28fa <MOTOR_voidOff+0x1c>
   //     Dio_WriteChannel(SPEEDM_EN, STD_LOW);  // Disable the speed motor
    	MOTOR_voidControlSpeed(SPEED_MOTOR, 0);  // Enable the speed motor
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <MOTOR_voidControlSpeed>
    28f8:	07 c0       	rjmp	.+14     	; 0x2908 <MOTOR_voidOff+0x2a>

    //	TMR0_voidStop();  // Stop Timer0
    } else if (Copy_u8Motor == STEERING_MOTOR) {
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	21 f4       	brne	.+8      	; 0x2908 <MOTOR_voidOff+0x2a>
        Dio_WriteChannel(STEERINGM_EN, STD_LOW);  // Disable the steering motor
    2900:	8b e1       	ldi	r24, 0x1B	; 27
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
        // Stop Timer0 if steering motor uses PWM
        // TMR0_voidStop();
    }
}
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <SRVM_voidOn>:
#include "../../utils/BIT_MATH.h"
#include "../../MCAL/TIMERS/TIMER1/includes/TMR1_interface.h"

static u8 flag = 0;

void SRVM_voidOn(u8 Copy_u8Angle) {
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	00 d0       	rcall	.+0      	; 0x2916 <SRVM_voidOn+0x6>
    2916:	00 d0       	rcall	.+0      	; 0x2918 <SRVM_voidOn+0x8>
    2918:	0f 92       	push	r0
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	8d 83       	std	Y+5, r24	; 0x05
    /* TMR1 init at pwm mode 14 */
    if (flag == 0) {
    2920:	80 91 c4 03 	lds	r24, 0x03C4
    2924:	88 23       	and	r24, r24
    2926:	49 f4       	brne	.+18     	; 0x293a <SRVM_voidOn+0x2a>
        TMR1_voidInit();
    2928:	0e 94 6f 0c 	call	0x18de	; 0x18de <TMR1_voidInit>
        flag = 1;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	80 93 c4 03 	sts	0x03C4, r24
        /* Set pwm fre. = 50 */
        TMR1_voidSetFrequencyMode14FastPWM(50);
    2932:	82 e3       	ldi	r24, 0x32	; 50
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <TMR1_voidSetFrequencyMode14FastPWM>
    }

    /* Set pwm duty cycle between 5 : 10
    depend on desired angle[0 : 180] */
    F32 duty_cycle = (F32)(5.0 + (Copy_u8Angle * (5.0 / 180.0)));
    293a:	8d 81       	ldd	r24, Y+5	; 0x05
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	aa 27       	eor	r26, r26
    2942:	97 fd       	sbrc	r25, 7
    2944:	a0 95       	com	r26
    2946:	ba 2f       	mov	r27, r26
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	29 e3       	ldi	r18, 0x39	; 57
    295a:	3e e8       	ldi	r19, 0x8E	; 142
    295c:	43 ee       	ldi	r20, 0xE3	; 227
    295e:	5c e3       	ldi	r21, 0x3C	; 60
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 ea       	ldi	r20, 0xA0	; 160
    2972:	50 e4       	ldi	r21, 0x40	; 64
    2974:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	ab 83       	std	Y+3, r26	; 0x03
    2982:	bc 83       	std	Y+4, r27	; 0x04
    TMR1_voidSetDutyCycleMode14FastPWM(duty_cycle);
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	9a 81       	ldd	r25, Y+2	; 0x02
    2988:	ab 81       	ldd	r26, Y+3	; 0x03
    298a:	bc 81       	ldd	r27, Y+4	; 0x04
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 05 0c 	call	0x180a	; 0x180a <TMR1_voidSetDutyCycleMode14FastPWM>

    /* TMR1 start */
    TMR1_voidStart();
    2994:	0e 94 b6 0c 	call	0x196c	; 0x196c <TMR1_voidStart>
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <SRVM_voidOff>:

void SRVM_voidOff(void) {
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    /* TMR1 stop */
    TMR1_voidStop();
    29b0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <TMR1_voidStop>
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <BT_Init>:
 *      Author: AhmedAbogabl
 */

#include "../../MCAL/UART/includes/UART_interface.h"

void BT_Init(void (*LocalFptr)(u8)) {
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <BT_Init+0x6>
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	9a 83       	std	Y+2, r25	; 0x02
    29c6:	89 83       	std	Y+1, r24	; 0x01
	UART_Init();
    29c8:	0e 94 1c 09 	call	0x1238	; 0x1238 <UART_Init>
	UART_TransmitString("U To Unlock\r\n");
    29cc:	87 e9       	ldi	r24, 0x97	; 151
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_RX_InterruptEnable();
    29d4:	0e 94 17 0a 	call	0x142e	; 0x142e <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(LocalFptr);
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	0e 94 33 0a 	call	0x1466	; 0x1466 <UART_RX_SetCallBack>

}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <BT_CTL_Options>:

void BT_CTL_Options(void)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
	UART_TransmitString("Ready\r\n");
    29f2:	85 ea       	ldi	r24, 0xA5	; 165
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_TransmitString(" 0-10  SPEED CONTROL\r\n");
    29fa:	8d ea       	ldi	r24, 0xAD	; 173
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_TransmitString(" W  FORWARD\r\n");
    2a02:	84 ec       	ldi	r24, 0xC4	; 196
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_TransmitString(" S  REVERSE\r\n");
    2a0a:	82 ed       	ldi	r24, 0xD2	; 210
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>

	UART_TransmitString(" A  LEFT\r\n");
    2a12:	80 ee       	ldi	r24, 0xE0	; 224
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_TransmitString(" D  RIGHT\r\n");
    2a1a:	8b ee       	ldi	r24, 0xEB	; 235
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_TransmitString(" K  DIRECT\r\n");
    2a22:	87 ef       	ldi	r24, 0xF7	; 247
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>

	UART_TransmitString(" P  BRAKE\r\n");
    2a2a:	84 e0       	ldi	r24, 0x04	; 4
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>

	UART_TransmitString("\r\nAuxiliary functions\r\n");
    2a32:	80 e1       	ldi	r24, 0x10	; 16
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_TransmitString(" L  LANE ASSISTANT\r\n");
    2a3a:	88 e2       	ldi	r24, 0x28	; 40
    2a3c:	91 e0       	ldi	r25, 0x01	; 1
    2a3e:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_TransmitString(" O  Obstacle avoidance\r\n");
    2a42:	8d e3       	ldi	r24, 0x3D	; 61
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
	UART_TransmitString(" I  AUTO PARK\r\n");
    2a4a:	86 e5       	ldi	r24, 0x56	; 86
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
}
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <HW_init>:

u8 VehicleAccess = FALSE;



void HW_init(void) {
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    Port_Init(pin_cfg);
    2a60:	89 e3       	ldi	r24, 0x39	; 57
    2a62:	93 e0       	ldi	r25, 0x03	; 3
    2a64:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <Port_Init>
   // ADC_Init(); //pin 0 and 1  if needed for autopark

    BT_Init(BT);
    2a68:	89 e4       	ldi	r24, 0x49	; 73
    2a6a:	95 e1       	ldi	r25, 0x15	; 21
    2a6c:	0e 94 dd 14 	call	0x29ba	; 0x29ba <BT_Init>
    MOTOR_voidInit();
    2a70:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <MOTOR_voidInit>

    GI_voidEnable();
    2a74:	0e 94 cd 10 	call	0x219a	; 0x219a <GI_voidEnable>
    SPI_voidInit();
    2a78:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_voidInit>

    //pull up
    Dio_WriteChannel(PC_0, STD_HIGH);
    2a7c:	80 e1       	ldi	r24, 0x10	; 16
    2a7e:	61 e0       	ldi	r22, 0x01	; 1
    2a80:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
    Dio_WriteChannel(PC_1, STD_HIGH);
    2a84:	81 e1       	ldi	r24, 0x11	; 17
    2a86:	61 e0       	ldi	r22, 0x01	; 1
    2a88:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <Dio_WriteChannel>
}
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <BT>:

void BT(u8 Rxdata) {
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	0f 92       	push	r0
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    /*Change the State **/
    BT_read_vlaue = Rxdata;
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	80 93 c6 03 	sts	0x03C6, r24
    if((BT_read_vlaue == 'U') && (VEHICLE_state == LOCKED))
    2aa4:	80 91 c6 03 	lds	r24, 0x03C6
    2aa8:	85 35       	cpi	r24, 0x55	; 85
    2aaa:	51 f4       	brne	.+20     	; 0x2ac0 <BT+0x2e>
    2aac:	80 91 9c 03 	lds	r24, 0x039C
    2ab0:	81 30       	cpi	r24, 0x01	; 1
    2ab2:	31 f4       	brne	.+12     	; 0x2ac0 <BT+0x2e>
    {
    	VehicleAccess = TRUE;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	80 93 c7 03 	sts	0x03C7, r24
    	BT_CTL_Options();
    2aba:	0e 94 f5 14 	call	0x29ea	; 0x29ea <BT_CTL_Options>
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <BT+0x32>
    }
    else
    {
    	ButtonState = 0;
    2ac0:	10 92 9d 03 	sts	0x039D, r1
    }
}
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <WHM>:

void WHM(void) {
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <WHM+0x6>
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
   static  u8 speed = 60;
    /* if the Push Button is Pressed */
    if (ButtonState == 0) {
    2ad6:	80 91 9d 03 	lds	r24, 0x039D
    2ada:	88 23       	and	r24, r24
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <WHM+0x14>
    2ade:	be c0       	rjmp	.+380    	; 0x2c5c <WHM+0x190>
        Lane_Asses = 0;
    2ae0:	10 92 c5 03 	sts	0x03C5, r1
        //	BT_read_vlaue = BT_read_vlaue + '0' ;
        switch (BT_read_vlaue) {
    2ae4:	80 91 c6 03 	lds	r24, 0x03C6
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	3a 83       	std	Y+2, r19	; 0x02
    2aee:	29 83       	std	Y+1, r18	; 0x01
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	9a 81       	ldd	r25, Y+2	; 0x02
    2af4:	8c 34       	cpi	r24, 0x4C	; 76
    2af6:	91 05       	cpc	r25, r1
    2af8:	09 f4       	brne	.+2      	; 0x2afc <WHM+0x30>
    2afa:	6c c0       	rjmp	.+216    	; 0x2bd4 <WHM+0x108>
    2afc:	29 81       	ldd	r18, Y+1	; 0x01
    2afe:	3a 81       	ldd	r19, Y+2	; 0x02
    2b00:	2d 34       	cpi	r18, 0x4D	; 77
    2b02:	31 05       	cpc	r19, r1
    2b04:	8c f4       	brge	.+34     	; 0x2b28 <WHM+0x5c>
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	84 34       	cpi	r24, 0x44	; 68
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	a1 f1       	breq	.+104    	; 0x2b78 <WHM+0xac>
    2b10:	29 81       	ldd	r18, Y+1	; 0x01
    2b12:	3a 81       	ldd	r19, Y+2	; 0x02
    2b14:	2b 34       	cpi	r18, 0x4B	; 75
    2b16:	31 05       	cpc	r19, r1
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <WHM+0x50>
    2b1a:	51 c0       	rjmp	.+162    	; 0x2bbe <WHM+0xf2>
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	81 34       	cpi	r24, 0x41	; 65
    2b22:	91 05       	cpc	r25, r1
    2b24:	a9 f1       	breq	.+106    	; 0x2b90 <WHM+0xc4>
    2b26:	61 c0       	rjmp	.+194    	; 0x2bea <WHM+0x11e>
    2b28:	29 81       	ldd	r18, Y+1	; 0x01
    2b2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2b2c:	23 35       	cpi	r18, 0x53	; 83
    2b2e:	31 05       	cpc	r19, r1
    2b30:	b9 f0       	breq	.+46     	; 0x2b60 <WHM+0x94>
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	9a 81       	ldd	r25, Y+2	; 0x02
    2b36:	87 35       	cpi	r24, 0x57	; 87
    2b38:	91 05       	cpc	r25, r1
    2b3a:	31 f0       	breq	.+12     	; 0x2b48 <WHM+0x7c>
    2b3c:	29 81       	ldd	r18, Y+1	; 0x01
    2b3e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b40:	20 35       	cpi	r18, 0x50	; 80
    2b42:	31 05       	cpc	r19, r1
    2b44:	89 f1       	breq	.+98     	; 0x2ba8 <WHM+0xdc>
    2b46:	51 c0       	rjmp	.+162    	; 0x2bea <WHM+0x11e>
        // speed dir options
        case 'W':
          //  LED4();
            MOTOR_voidOn(SPEED_MOTOR, MOTOR_CW);
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
            UART_TransmitString("inside W \r\n");
    2b50:	86 e6       	ldi	r24, 0x66	; 102
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
            ButtonState = 1;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	80 93 9d 03 	sts	0x039D, r24
    2b5e:	88 c0       	rjmp	.+272    	; 0x2c70 <WHM+0x1a4>
            break;
        case 'S':
        //    LED5();
            MOTOR_voidOn(SPEED_MOTOR, MOTOR_CCW);
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	62 e0       	ldi	r22, 0x02	; 2
    2b64:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
            UART_TransmitString("inside S \r\n");
    2b68:	82 e7       	ldi	r24, 0x72	; 114
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
            ButtonState = 1;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	80 93 9d 03 	sts	0x039D, r24
    2b76:	7c c0       	rjmp	.+248    	; 0x2c70 <WHM+0x1a4>
            break;
        // steering direction optinos
        case 'D':
            UART_TransmitString("inside D \r\n");
    2b78:	8e e7       	ldi	r24, 0x7E	; 126
    2b7a:	91 e0       	ldi	r25, 0x01	; 1
    2b7c:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
       //     LED6();
            MOTOR_voidOn(STEERING_MOTOR, MOTOR_CW);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	61 e0       	ldi	r22, 0x01	; 1
    2b84:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
            ButtonState = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	80 93 9d 03 	sts	0x039D, r24
    2b8e:	70 c0       	rjmp	.+224    	; 0x2c70 <WHM+0x1a4>
            break;
        case 'A':
            UART_TransmitString("inside A \r\n");
    2b90:	8a e8       	ldi	r24, 0x8A	; 138
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
         //   LED6();
            MOTOR_voidOn(STEERING_MOTOR, MOTOR_CCW);
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	62 e0       	ldi	r22, 0x02	; 2
    2b9c:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
            ButtonState = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	80 93 9d 03 	sts	0x039D, r24
    2ba6:	64 c0       	rjmp	.+200    	; 0x2c70 <WHM+0x1a4>
            break;
        // stop speed
        case 'P':
            MOTOR_voidOff(SPEED_MOTOR);
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
            UART_TransmitString("inside p \r\n");
    2bae:	86 e9       	ldi	r24, 0x96	; 150
    2bb0:	91 e0       	ldi	r25, 0x01	; 1
    2bb2:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
            ButtonState = 1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	80 93 9d 03 	sts	0x039D, r24
    2bbc:	59 c0       	rjmp	.+178    	; 0x2c70 <WHM+0x1a4>
            break;
        // stopsteering
        case 'K':
            MOTOR_voidOff(STEERING_MOTOR);
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
            UART_TransmitString("inside k \r\n");
    2bc4:	82 ea       	ldi	r24, 0xA2	; 162
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
            ButtonState = 1;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	80 93 9d 03 	sts	0x039D, r24
    2bd2:	4e c0       	rjmp	.+156    	; 0x2c70 <WHM+0x1a4>
            break;
        // lane assistence option
        case 'L':
            Lane_Asses = 1;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	80 93 c5 03 	sts	0x03C5, r24
            ButtonState = 1;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	80 93 9d 03 	sts	0x039D, r24
            UART_TransmitString("inside L \r\n");
    2be0:	8e ea       	ldi	r24, 0xAE	; 174
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
    2be8:	43 c0       	rjmp	.+134    	; 0x2c70 <WHM+0x1a4>
            break;
        default:
            if ((BT_read_vlaue >= '0') && (BT_read_vlaue <= '9')) {
    2bea:	80 91 c6 03 	lds	r24, 0x03C6
    2bee:	80 33       	cpi	r24, 0x30	; 48
    2bf0:	38 f1       	brcs	.+78     	; 0x2c40 <WHM+0x174>
    2bf2:	80 91 c6 03 	lds	r24, 0x03C6
    2bf6:	8a 33       	cpi	r24, 0x3A	; 58
    2bf8:	18 f5       	brcc	.+70     	; 0x2c40 <WHM+0x174>
                speed = (BT_read_vlaue - '0') * 10;
    2bfa:	80 91 c6 03 	lds	r24, 0x03C6
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9c 01       	movw	r18, r24
    2c04:	22 0f       	add	r18, r18
    2c06:	33 1f       	adc	r19, r19
    2c08:	c9 01       	movw	r24, r18
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	82 0f       	add	r24, r18
    2c14:	93 1f       	adc	r25, r19
    2c16:	80 5e       	subi	r24, 0xE0	; 224
    2c18:	80 93 9e 03 	sts	0x039E, r24
                if((speed < 60) && (speed != 0)) speed = 60 ;
    2c1c:	80 91 9e 03 	lds	r24, 0x039E
    2c20:	8c 33       	cpi	r24, 0x3C	; 60
    2c22:	38 f4       	brcc	.+14     	; 0x2c32 <WHM+0x166>
    2c24:	80 91 9e 03 	lds	r24, 0x039E
    2c28:	88 23       	and	r24, r24
    2c2a:	19 f0       	breq	.+6      	; 0x2c32 <WHM+0x166>
    2c2c:	8c e3       	ldi	r24, 0x3C	; 60
    2c2e:	80 93 9e 03 	sts	0x039E, r24
                MOTOR_voidControlSpeed(SPEED_MOTOR, speed);
    2c32:	90 91 9e 03 	lds	r25, 0x039E
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	69 2f       	mov	r22, r25
    2c3a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <MOTOR_voidControlSpeed>
    2c3e:	06 c0       	rjmp	.+12     	; 0x2c4c <WHM+0x180>
            } else {
                MOTOR_voidOff(STEERING_MOTOR);
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
                MOTOR_voidOff(SPEED_MOTOR);
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
            }
            ButtonState = 1;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	80 93 9d 03 	sts	0x039D, r24
            UART_TransmitString("inside default \r\n");
    2c52:	8a eb       	ldi	r24, 0xBA	; 186
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
    2c5a:	0a c0       	rjmp	.+20     	; 0x2c70 <WHM+0x1a4>
            break;
        }
    } else if (Lane_Asses == 1)
    2c5c:	80 91 c5 03 	lds	r24, 0x03C5
    2c60:	81 30       	cpi	r24, 0x01	; 1
    2c62:	31 f4       	brne	.+12     	; 0x2c70 <WHM+0x1a4>
        LaneAssist(speed);
    2c64:	80 91 9e 03 	lds	r24, 0x039E
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LaneAssist>
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <LaneAssist>:



void LaneAssist(u8 Copy_u8NormalSpeed) {
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	0f 92       	push	r0
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	89 83       	std	Y+1, r24	; 0x01
    // set default speed
    UART_TransmitString("inside Lane assistant \r\n");
    2c86:	8c ec       	ldi	r24, 0xCC	; 204
    2c88:	91 e0       	ldi	r25, 0x01	; 1
    2c8a:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>

    //	while (1)
    {
        // if Right Sensor and Left Sensor are at White color then it will call forword function
        if ((Dio_ReadChannel(R_S) == 1) && (Dio_ReadChannel(L_S) == 1)) {
    2c8e:	81 e1       	ldi	r24, 0x11	; 17
    2c90:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_ReadChannel>
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	a1 f4       	brne	.+40     	; 0x2cc0 <LaneAssist+0x46>
    2c98:	80 e1       	ldi	r24, 0x10	; 16
    2c9a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_ReadChannel>
    2c9e:	81 30       	cpi	r24, 0x01	; 1
    2ca0:	79 f4       	brne	.+30     	; 0x2cc0 <LaneAssist+0x46>
            // forward
            UART_TransmitString("inside motor 1  \r\n");
    2ca2:	85 ee       	ldi	r24, 0xE5	; 229
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
            MOTOR_voidOn(SPEED_MOTOR, MOTOR_CW);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	61 e0       	ldi	r22, 0x01	; 1
    2cae:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
            MOTOR_voidOff(STEERING_MOTOR);
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
            MOTOR_voidControlSpeed(SPEED_MOTOR, Copy_u8NormalSpeed);
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	69 81       	ldd	r22, Y+1	; 0x01
    2cbc:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <MOTOR_voidControlSpeed>
        }

        // if Right Sensor is Black and Left Sensor is White then it will call turn Right function
        if ((Dio_ReadChannel(R_S) == 0) && (Dio_ReadChannel(L_S) == 1)) {
    2cc0:	81 e1       	ldi	r24, 0x11	; 17
    2cc2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_ReadChannel>
    2cc6:	88 23       	and	r24, r24
    2cc8:	69 f4       	brne	.+26     	; 0x2ce4 <LaneAssist+0x6a>
    2cca:	80 e1       	ldi	r24, 0x10	; 16
    2ccc:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_ReadChannel>
    2cd0:	81 30       	cpi	r24, 0x01	; 1
    2cd2:	41 f4       	brne	.+16     	; 0x2ce4 <LaneAssist+0x6a>
            // turnRight
            UART_TransmitString("inside motor 2  \r\n");
    2cd4:	88 ef       	ldi	r24, 0xF8	; 248
    2cd6:	91 e0       	ldi	r25, 0x01	; 1
    2cd8:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
    //        MOTOR_voidControlSpeed(SPEED_MOTOR, 10);
            MOTOR_voidOn(STEERING_MOTOR, MOTOR_CCW);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	62 e0       	ldi	r22, 0x02	; 2
    2ce0:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
        }
        // if Right Sensor is White and Left Sensor is Black then it will call turn Left function
        if ((Dio_ReadChannel(R_S) == 1) && (Dio_ReadChannel(L_S) == 0)) {
    2ce4:	81 e1       	ldi	r24, 0x11	; 17
    2ce6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_ReadChannel>
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	69 f4       	brne	.+26     	; 0x2d08 <LaneAssist+0x8e>
    2cee:	80 e1       	ldi	r24, 0x10	; 16
    2cf0:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_ReadChannel>
    2cf4:	88 23       	and	r24, r24
    2cf6:	41 f4       	brne	.+16     	; 0x2d08 <LaneAssist+0x8e>
            // turnLeft
            UART_TransmitString("inside motor 3  \r\n");
    2cf8:	8b e0       	ldi	r24, 0x0B	; 11
    2cfa:	92 e0       	ldi	r25, 0x02	; 2
    2cfc:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
      //      MOTOR_voidControlSpeed(SPEED_MOTOR, 10);
            MOTOR_voidOn(STEERING_MOTOR, MOTOR_CW);
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	61 e0       	ldi	r22, 0x01	; 1
    2d04:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
        }
        // if Right Sensor and Left Sensor are at Black color then it will call Stop function
        if ((Dio_ReadChannel(R_S) == 0) && (Dio_ReadChannel(L_S) == 0)) {
    2d08:	81 e1       	ldi	r24, 0x11	; 17
    2d0a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_ReadChannel>
    2d0e:	88 23       	and	r24, r24
    2d10:	79 f4       	brne	.+30     	; 0x2d30 <LaneAssist+0xb6>
    2d12:	80 e1       	ldi	r24, 0x10	; 16
    2d14:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_ReadChannel>
    2d18:	88 23       	and	r24, r24
    2d1a:	51 f4       	brne	.+20     	; 0x2d30 <LaneAssist+0xb6>
            // Stop
            UART_TransmitString("inside motor 4  \r\n");
    2d1c:	8e e1       	ldi	r24, 0x1E	; 30
    2d1e:	92 e0       	ldi	r25, 0x02	; 2
    2d20:	0e 94 9b 09 	call	0x1336	; 0x1336 <UART_TransmitString>
            MOTOR_voidOff(STEERING_MOTOR);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
            MOTOR_voidOff(SPEED_MOTOR);
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
        }
    }
}
    2d30:	0f 90       	pop	r0
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <AutoPark>:

void AutoPark(void) {
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    // Set default speed
    MOTOR_voidOn(SPEED_MOTOR, MOTOR_CW);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	61 e0       	ldi	r22, 0x01	; 1
    2d44:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
    2d48:	04 c0       	rjmp	.+8      	; 0x2d52 <AutoPark+0x1a>
   // MOTOR_voidControlSpeed(SPEED_MOTOR, 10);

    // Move forward until obstacle is detected in front
    while (ADC_ReadChannel(FRONT_SENSOR) < 100) {
        // Continue moving forward until obstacle is detected
        MOTOR_voidOn(STEERING_MOTOR, MOTOR_CW);
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	61 e0       	ldi	r22, 0x01	; 1
    2d4e:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
    // Set default speed
    MOTOR_voidOn(SPEED_MOTOR, MOTOR_CW);
   // MOTOR_voidControlSpeed(SPEED_MOTOR, 10);

    // Move forward until obstacle is detected in front
    while (ADC_ReadChannel(FRONT_SENSOR) < 100) {
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 b2 13 	call	0x2764	; 0x2764 <ADC_ReadChannel>
    2d5a:	84 36       	cpi	r24, 0x64	; 100
    2d5c:	91 05       	cpc	r25, r1
    2d5e:	ac f3       	brlt	.-22     	; 0x2d4a <AutoPark+0x12>
        // Continue moving forward until obstacle is detected
        MOTOR_voidOn(STEERING_MOTOR, MOTOR_CW);
    }

    // Stop and delay for a while
    MOTOR_voidOff(STEERING_MOTOR);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
    MOTOR_voidOff(SPEED_MOTOR);
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
    Delay_ms(1000);
    2d6c:	68 ee       	ldi	r22, 0xE8	; 232
    2d6e:	73 e0       	ldi	r23, 0x03	; 3
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 f5 16 	call	0x2dea	; 0x2dea <Delay_ms>

    // Turn right until it's clear
    MOTOR_voidOn(STEERING_MOTOR, MOTOR_CCW);
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	62 e0       	ldi	r22, 0x02	; 2
    2d7c:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
    Delay_ms(1000);
    2d80:	68 ee       	ldi	r22, 0xE8	; 232
    2d82:	73 e0       	ldi	r23, 0x03	; 3
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 f5 16 	call	0x2dea	; 0x2dea <Delay_ms>

    // Move backward until obstacle is detected at the back
    MOTOR_voidOn(SPEED_MOTOR, MOTOR_CCW);
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	62 e0       	ldi	r22, 0x02	; 2
    2d90:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
    2d94:	04 c0       	rjmp	.+8      	; 0x2d9e <AutoPark+0x66>
    while (ADC_ReadChannel(BACK_SENSOR) < 100) {
        // Continue moving backward until obstacle is detected
        MOTOR_voidOn(STEERING_MOTOR, MOTOR_CCW);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	62 e0       	ldi	r22, 0x02	; 2
    2d9a:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
    MOTOR_voidOn(STEERING_MOTOR, MOTOR_CCW);
    Delay_ms(1000);

    // Move backward until obstacle is detected at the back
    MOTOR_voidOn(SPEED_MOTOR, MOTOR_CCW);
    while (ADC_ReadChannel(BACK_SENSOR) < 100) {
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 b2 13 	call	0x2764	; 0x2764 <ADC_ReadChannel>
    2da6:	84 36       	cpi	r24, 0x64	; 100
    2da8:	91 05       	cpc	r25, r1
    2daa:	ac f3       	brlt	.-22     	; 0x2d96 <AutoPark+0x5e>
        // Continue moving backward until obstacle is detected
        MOTOR_voidOn(STEERING_MOTOR, MOTOR_CCW);
    }

    // Stop and delay for a while
    MOTOR_voidOff(STEERING_MOTOR);
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
    MOTOR_voidOff(SPEED_MOTOR);
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
    Delay_ms(1000);
    2db8:	68 ee       	ldi	r22, 0xE8	; 232
    2dba:	73 e0       	ldi	r23, 0x03	; 3
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 f5 16 	call	0x2dea	; 0x2dea <Delay_ms>

    // Turn left until it's clear
    MOTOR_voidOn(STEERING_MOTOR, MOTOR_CW);
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
    2dc8:	0e 94 1a 14 	call	0x2834	; 0x2834 <MOTOR_voidOn>
    Delay_ms(1000);
    2dcc:	68 ee       	ldi	r22, 0xE8	; 232
    2dce:	73 e0       	ldi	r23, 0x03	; 3
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 f5 16 	call	0x2dea	; 0x2dea <Delay_ms>

    // Stop and drop steering
    MOTOR_voidOff(STEERING_MOTOR);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
    MOTOR_voidOff(SPEED_MOTOR);
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	0e 94 6f 14 	call	0x28de	; 0x28de <MOTOR_voidOff>
}
    2de4:	cf 91       	pop	r28
    2de6:	df 91       	pop	r29
    2de8:	08 95       	ret

00002dea <Delay_ms>:

void Delay_ms(u32 Copy_u32Time) {
    2dea:	df 93       	push	r29
    2dec:	cf 93       	push	r28
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	2a 97       	sbiw	r28, 0x0a	; 10
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	6f 83       	std	Y+7, r22	; 0x07
    2e00:	78 87       	std	Y+8, r23	; 0x08
    2e02:	89 87       	std	Y+9, r24	; 0x09
    2e04:	9a 87       	std	Y+10, r25	; 0x0a
    for (u32 i = 0; i < Copy_u32Time; i++) {
    2e06:	1b 82       	std	Y+3, r1	; 0x03
    2e08:	1c 82       	std	Y+4, r1	; 0x04
    2e0a:	1d 82       	std	Y+5, r1	; 0x05
    2e0c:	1e 82       	std	Y+6, r1	; 0x06
    2e0e:	19 c0       	rjmp	.+50     	; 0x2e42 <Delay_ms+0x58>
        for (u16 j = 0; j < 1200; j++) {
    2e10:	1a 82       	std	Y+2, r1	; 0x02
    2e12:	19 82       	std	Y+1, r1	; 0x01
    2e14:	05 c0       	rjmp	.+10     	; 0x2e20 <Delay_ms+0x36>
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	9a 83       	std	Y+2, r25	; 0x02
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	24 e0       	ldi	r18, 0x04	; 4
    2e26:	80 3b       	cpi	r24, 0xB0	; 176
    2e28:	92 07       	cpc	r25, r18
    2e2a:	a8 f3       	brcs	.-22     	; 0x2e16 <Delay_ms+0x2c>
    MOTOR_voidOff(STEERING_MOTOR);
    MOTOR_voidOff(SPEED_MOTOR);
}

void Delay_ms(u32 Copy_u32Time) {
    for (u32 i = 0; i < Copy_u32Time; i++) {
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e30:	ad 81       	ldd	r26, Y+5	; 0x05
    2e32:	be 81       	ldd	r27, Y+6	; 0x06
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	a1 1d       	adc	r26, r1
    2e38:	b1 1d       	adc	r27, r1
    2e3a:	8b 83       	std	Y+3, r24	; 0x03
    2e3c:	9c 83       	std	Y+4, r25	; 0x04
    2e3e:	ad 83       	std	Y+5, r26	; 0x05
    2e40:	be 83       	std	Y+6, r27	; 0x06
    2e42:	2b 81       	ldd	r18, Y+3	; 0x03
    2e44:	3c 81       	ldd	r19, Y+4	; 0x04
    2e46:	4d 81       	ldd	r20, Y+5	; 0x05
    2e48:	5e 81       	ldd	r21, Y+6	; 0x06
    2e4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e4c:	98 85       	ldd	r25, Y+8	; 0x08
    2e4e:	a9 85       	ldd	r26, Y+9	; 0x09
    2e50:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e52:	28 17       	cp	r18, r24
    2e54:	39 07       	cpc	r19, r25
    2e56:	4a 07       	cpc	r20, r26
    2e58:	5b 07       	cpc	r21, r27
    2e5a:	d0 f2       	brcs	.-76     	; 0x2e10 <Delay_ms+0x26>
        for (u16 j = 0; j < 1200; j++) {
            // Adjust this loop for the desired delay
        }
    }
}
    2e5c:	2a 96       	adiw	r28, 0x0a	; 10
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <Spi_Router>:
//Spi communication  managemnt
u8 Spi_ResponseOnceFlag = NOT_YET;
u8 Spi_Request = NULL;

void Spi_Router(u8 Copy_u8RxData)
{           // UART_TransmitString("inside SPI_ROUTER \r\n");
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	0f 92       	push	r0
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	89 83       	std	Y+1, r24	; 0x01
//		if(VehicleAccess == TRUE)
//		Spi_Request = APP_VEHICLE_UNLOCKED;
//		Spi_ResponseOnceFlag = NOT_YET;
//	}
//	else
		if(Copy_u8RxData == APP_MOTORS_CONTROL_REQUEST)
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	8b 3b       	cpi	r24, 0xBB	; 187
    2e7e:	39 f4       	brne	.+14     	; 0x2e8e <Spi_Router+0x20>
	{//UART_TransmitString("inside SPI_ROUTER    2\r\n");

     	 GIVE_CONTROL = TRUE;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	80 93 c9 03 	sts	0x03C9, r24
  	   	 Spi_ResponseOnceFlag = NOT_YET;
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	80 93 9f 03 	sts	0x039F, r24
    2e8c:	12 c0       	rjmp	.+36     	; 0x2eb2 <Spi_Router+0x44>
	}
	else if (GIVE_CONTROL == TRUE)
    2e8e:	80 91 c9 03 	lds	r24, 0x03C9
    2e92:	81 30       	cpi	r24, 0x01	; 1
    2e94:	59 f4       	brne	.+22     	; 0x2eac <Spi_Router+0x3e>
	{//UART_TransmitString("inside SPI_ROUTER    3\r\n");

		BT_read_vlaue = Copy_u8RxData;
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	80 93 c6 03 	sts	0x03C6, r24
		ButtonState = 0;
    2e9c:	10 92 9d 03 	sts	0x039D, r1
		GIVE_CONTROL = FALSE;
    2ea0:	10 92 c9 03 	sts	0x03C9, r1
		Spi_ResponseOnceFlag = NOT_YET;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	80 93 9f 03 	sts	0x039F, r24
    2eaa:	03 c0       	rjmp	.+6      	; 0x2eb2 <Spi_Router+0x44>
	}
	else
	{
	//	UART_TransmitString("inside SPI_ROUTER    4\r\n");
		Spi_ResponseOnceFlag = NOT_YET;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	80 93 9f 03 	sts	0x039F, r24
	}
}
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <main>:

int main(void) {
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
	HW_init();
    2ec2:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <HW_init>

	while (1) {
        WHM();
    2ec6:	0e 94 66 15 	call	0x2acc	; 0x2acc <WHM>
        if(Spi_ResponseOnceFlag == NOT_YET)
    2eca:	80 91 9f 03 	lds	r24, 0x039F
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	d1 f7       	brne	.-12     	; 0x2ec6 <main+0xc>
        {
           // UART_TransmitString("inside SPI \r\n");
        	SPI_voidTransmitAsynchronous(Spi_Request,Spi_Router);
    2ed2:	80 91 c8 03 	lds	r24, 0x03C8
    2ed6:	88 2f       	mov	r24, r24
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	27 e3       	ldi	r18, 0x37	; 55
    2edc:	37 e1       	ldi	r19, 0x17	; 23
    2ede:	b9 01       	movw	r22, r18
    2ee0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SPI_voidTransmitAsynchronous>
        	Spi_Request = NULL;
    2ee4:	10 92 c8 03 	sts	0x03C8, r1
        	Spi_ResponseOnceFlag = DONE;
    2ee8:	10 92 9f 03 	sts	0x039F, r1
    2eec:	ec cf       	rjmp	.-40     	; 0x2ec6 <main+0xc>

00002eee <__udivmodhi4>:
    2eee:	aa 1b       	sub	r26, r26
    2ef0:	bb 1b       	sub	r27, r27
    2ef2:	51 e1       	ldi	r21, 0x11	; 17
    2ef4:	07 c0       	rjmp	.+14     	; 0x2f04 <__udivmodhi4_ep>

00002ef6 <__udivmodhi4_loop>:
    2ef6:	aa 1f       	adc	r26, r26
    2ef8:	bb 1f       	adc	r27, r27
    2efa:	a6 17       	cp	r26, r22
    2efc:	b7 07       	cpc	r27, r23
    2efe:	10 f0       	brcs	.+4      	; 0x2f04 <__udivmodhi4_ep>
    2f00:	a6 1b       	sub	r26, r22
    2f02:	b7 0b       	sbc	r27, r23

00002f04 <__udivmodhi4_ep>:
    2f04:	88 1f       	adc	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	5a 95       	dec	r21
    2f0a:	a9 f7       	brne	.-22     	; 0x2ef6 <__udivmodhi4_loop>
    2f0c:	80 95       	com	r24
    2f0e:	90 95       	com	r25
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	08 95       	ret

00002f16 <__udivmodsi4>:
    2f16:	a1 e2       	ldi	r26, 0x21	; 33
    2f18:	1a 2e       	mov	r1, r26
    2f1a:	aa 1b       	sub	r26, r26
    2f1c:	bb 1b       	sub	r27, r27
    2f1e:	fd 01       	movw	r30, r26
    2f20:	0d c0       	rjmp	.+26     	; 0x2f3c <__udivmodsi4_ep>

00002f22 <__udivmodsi4_loop>:
    2f22:	aa 1f       	adc	r26, r26
    2f24:	bb 1f       	adc	r27, r27
    2f26:	ee 1f       	adc	r30, r30
    2f28:	ff 1f       	adc	r31, r31
    2f2a:	a2 17       	cp	r26, r18
    2f2c:	b3 07       	cpc	r27, r19
    2f2e:	e4 07       	cpc	r30, r20
    2f30:	f5 07       	cpc	r31, r21
    2f32:	20 f0       	brcs	.+8      	; 0x2f3c <__udivmodsi4_ep>
    2f34:	a2 1b       	sub	r26, r18
    2f36:	b3 0b       	sbc	r27, r19
    2f38:	e4 0b       	sbc	r30, r20
    2f3a:	f5 0b       	sbc	r31, r21

00002f3c <__udivmodsi4_ep>:
    2f3c:	66 1f       	adc	r22, r22
    2f3e:	77 1f       	adc	r23, r23
    2f40:	88 1f       	adc	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	1a 94       	dec	r1
    2f46:	69 f7       	brne	.-38     	; 0x2f22 <__udivmodsi4_loop>
    2f48:	60 95       	com	r22
    2f4a:	70 95       	com	r23
    2f4c:	80 95       	com	r24
    2f4e:	90 95       	com	r25
    2f50:	9b 01       	movw	r18, r22
    2f52:	ac 01       	movw	r20, r24
    2f54:	bd 01       	movw	r22, r26
    2f56:	cf 01       	movw	r24, r30
    2f58:	08 95       	ret

00002f5a <__prologue_saves__>:
    2f5a:	2f 92       	push	r2
    2f5c:	3f 92       	push	r3
    2f5e:	4f 92       	push	r4
    2f60:	5f 92       	push	r5
    2f62:	6f 92       	push	r6
    2f64:	7f 92       	push	r7
    2f66:	8f 92       	push	r8
    2f68:	9f 92       	push	r9
    2f6a:	af 92       	push	r10
    2f6c:	bf 92       	push	r11
    2f6e:	cf 92       	push	r12
    2f70:	df 92       	push	r13
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	ca 1b       	sub	r28, r26
    2f84:	db 0b       	sbc	r29, r27
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	09 94       	ijmp

00002f92 <__epilogue_restores__>:
    2f92:	2a 88       	ldd	r2, Y+18	; 0x12
    2f94:	39 88       	ldd	r3, Y+17	; 0x11
    2f96:	48 88       	ldd	r4, Y+16	; 0x10
    2f98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fa0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fa2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fa4:	b9 84       	ldd	r11, Y+9	; 0x09
    2fa6:	c8 84       	ldd	r12, Y+8	; 0x08
    2fa8:	df 80       	ldd	r13, Y+7	; 0x07
    2faa:	ee 80       	ldd	r14, Y+6	; 0x06
    2fac:	fd 80       	ldd	r15, Y+5	; 0x05
    2fae:	0c 81       	ldd	r16, Y+4	; 0x04
    2fb0:	1b 81       	ldd	r17, Y+3	; 0x03
    2fb2:	aa 81       	ldd	r26, Y+2	; 0x02
    2fb4:	b9 81       	ldd	r27, Y+1	; 0x01
    2fb6:	ce 0f       	add	r28, r30
    2fb8:	d1 1d       	adc	r29, r1
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	ed 01       	movw	r28, r26
    2fc6:	08 95       	ret

00002fc8 <atoi>:
    2fc8:	fc 01       	movw	r30, r24
    2fca:	88 27       	eor	r24, r24
    2fcc:	99 27       	eor	r25, r25
    2fce:	e8 94       	clt
    2fd0:	21 91       	ld	r18, Z+
    2fd2:	20 32       	cpi	r18, 0x20	; 32
    2fd4:	e9 f3       	breq	.-6      	; 0x2fd0 <atoi+0x8>
    2fd6:	29 30       	cpi	r18, 0x09	; 9
    2fd8:	10 f0       	brcs	.+4      	; 0x2fde <atoi+0x16>
    2fda:	2e 30       	cpi	r18, 0x0E	; 14
    2fdc:	c8 f3       	brcs	.-14     	; 0x2fd0 <atoi+0x8>
    2fde:	2b 32       	cpi	r18, 0x2B	; 43
    2fe0:	41 f0       	breq	.+16     	; 0x2ff2 <atoi+0x2a>
    2fe2:	2d 32       	cpi	r18, 0x2D	; 45
    2fe4:	39 f4       	brne	.+14     	; 0x2ff4 <atoi+0x2c>
    2fe6:	68 94       	set
    2fe8:	04 c0       	rjmp	.+8      	; 0x2ff2 <atoi+0x2a>
    2fea:	0e 94 02 18 	call	0x3004	; 0x3004 <__mulhi_const_10>
    2fee:	82 0f       	add	r24, r18
    2ff0:	91 1d       	adc	r25, r1
    2ff2:	21 91       	ld	r18, Z+
    2ff4:	20 53       	subi	r18, 0x30	; 48
    2ff6:	2a 30       	cpi	r18, 0x0A	; 10
    2ff8:	c0 f3       	brcs	.-16     	; 0x2fea <atoi+0x22>
    2ffa:	1e f4       	brtc	.+6      	; 0x3002 <atoi+0x3a>
    2ffc:	90 95       	com	r25
    2ffe:	81 95       	neg	r24
    3000:	9f 4f       	sbci	r25, 0xFF	; 255
    3002:	08 95       	ret

00003004 <__mulhi_const_10>:
    3004:	7a e0       	ldi	r23, 0x0A	; 10
    3006:	97 9f       	mul	r25, r23
    3008:	90 2d       	mov	r25, r0
    300a:	87 9f       	mul	r24, r23
    300c:	80 2d       	mov	r24, r0
    300e:	91 0d       	add	r25, r1
    3010:	11 24       	eor	r1, r1
    3012:	08 95       	ret

00003014 <_exit>:
    3014:	f8 94       	cli

00003016 <__stop_program>:
    3016:	ff cf       	rjmp	.-2      	; 0x3016 <__stop_program>
