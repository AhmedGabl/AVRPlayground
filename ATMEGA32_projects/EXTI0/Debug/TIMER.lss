
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00003aa6  00003b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000cc  008000cc  00003ba6  2**0
                  ALLOC
  3 .stab         00003390  00000000  00000000  00003ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a97  00000000  00000000  00006f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000089cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ad03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000be04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cd88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cf08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_1>
       8:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_2>
       c:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__vector_10>
      2c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 1c 	call	0x38ae	; 0x38ae <main>
      8a:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TMR0_voidSetDelay_ms_usingCTC>:

static void (*TMR0_privatePtrToCAllBackCTC)(void) = NULL;

volatile static u32 private_ctcCounter;

void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <TMR0_voidSetDelay_ms_usingCTC+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	//under condition tick time 4Micro sec OCR = 249
	OCR0 = 249;
     cac:	ec e5       	ldi	r30, 0x5C	; 92
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	89 ef       	ldi	r24, 0xF9	; 249
     cb2:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	cc 01       	movw	r24, r24
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	80 93 d6 00 	sts	0x00D6, r24
     cc2:	90 93 d7 00 	sts	0x00D7, r25
     cc6:	a0 93 d8 00 	sts	0x00D8, r26
     cca:	b0 93 d9 00 	sts	0x00D9, r27
	//under condition tick time 4Micro sec OCR = 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms/16;

#endif
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <TMR0_voidSetDutyCycleUsingFastPWM>:

void TMR0_voidSetDutyCycleUsingFastPWM(u8 copy_u8DutyCycle) {
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01

	if ((100 >= copy_u8DutyCycle) && (0 <= copy_u8DutyCycle)) {
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	85 36       	cpi	r24, 0x65	; 101
     ce8:	b8 f4       	brcc	.+46     	; 0xd18 <TMR0_voidSetDutyCycleUsingFastPWM+0x40>

		#if TMR0_PWM_MODE == TMR0_NONINVERTING
			if (copy_u8DutyCycle == 0)
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	88 23       	and	r24, r24
     cee:	29 f4       	brne	.+10     	; 0xcfa <TMR0_voidSetDutyCycleUsingFastPWM+0x22>
				OCR0 = 0xFF;
     cf0:	ec e5       	ldi	r30, 0x5C	; 92
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	80 83       	st	Z, r24
     cf8:	0f c0       	rjmp	.+30     	; 0xd18 <TMR0_voidSetDutyCycleUsingFastPWM+0x40>
			else
				OCR0 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;
     cfa:	ec e5       	ldi	r30, 0x5C	; 92
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	98 2f       	mov	r25, r24
     d06:	88 27       	eor	r24, r24
     d08:	24 e6       	ldi	r18, 0x64	; 100
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	b9 01       	movw	r22, r18
     d0e:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__udivmodhi4>
     d12:	cb 01       	movw	r24, r22
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	80 83       	st	Z, r24
			if(copy_u8DutyCycle == 0) OCR0 = 0;
			else OCR0 = (((u16) copy_u8DutyCycle * 256) / 100)-1;
		#endif

	}
}
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <TMR0_voidInit>:

void TMR0_voidInit(void) {
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
//enable overflow
	SET_BIT(TIMSK,TOIE0);

#elif TMR0_MODE == TMR0_FAST_PWM_MODE
//select mode = normal mode
	SET_BIT(TCCR0, WGM00);
     d28:	a3 e5       	ldi	r26, 0x53	; 83
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e3 e5       	ldi	r30, 0x53	; 83
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 64       	ori	r24, 0x40	; 64
     d34:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
     d36:	a3 e5       	ldi	r26, 0x53	; 83
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e3 e5       	ldi	r30, 0x53	; 83
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	88 60       	ori	r24, 0x08	; 8
     d42:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);

#elif TMR0_PWM_MODE== TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
     d44:	a3 e5       	ldi	r26, 0x53	; 83
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e3 e5       	ldi	r30, 0x53	; 83
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 7e       	andi	r24, 0xEF	; 239
     d50:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
     d52:	a3 e5       	ldi	r26, 0x53	; 83
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e3 e5       	ldi	r30, 0x53	; 83
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 62       	ori	r24, 0x20	; 32
     d5e:	8c 93       	st	X, r24
#endif

#endif
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <TMR0_voidStart>:

//TCCR0
void TMR0_voidStart(void) {
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,CS01);
	CLR_BIT(TCCR0,CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
//select prescaler value = 64
	SET_BIT(TCCR0, CS00);
     d6e:	a3 e5       	ldi	r26, 0x53	; 83
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e3 e5       	ldi	r30, 0x53	; 83
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
     d7c:	a3 e5       	ldi	r26, 0x53	; 83
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e3 e5       	ldi	r30, 0x53	; 83
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	82 60       	ori	r24, 0x02	; 2
     d88:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     d8a:	a3 e5       	ldi	r26, 0x53	; 83
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e3 e5       	ldi	r30, 0x53	; 83
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8b 7f       	andi	r24, 0xFB	; 251
     d96:	8c 93       	st	X, r24
//select prescaler value = 1024
	SET_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
#endif
}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <TMR0_voidStop>:
void TMR0_voidStop(void) {
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
     da6:	a3 e5       	ldi	r26, 0x53	; 83
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e3 e5       	ldi	r30, 0x53	; 83
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8e 7f       	andi	r24, 0xFE	; 254
     db2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     db4:	a3 e5       	ldi	r26, 0x53	; 83
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e3 e5       	ldi	r30, 0x53	; 83
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8d 7f       	andi	r24, 0xFD	; 253
     dc0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     dc2:	a3 e5       	ldi	r26, 0x53	; 83
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e3 e5       	ldi	r30, 0x53	; 83
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8b 7f       	andi	r24, 0xFB	; 251
     dce:	8c 93       	st	X, r24
}
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <TMR0_voidSetCallBackOVF>:

///////////////////////*********SET CALLBACK******////////////////////////////
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	00 d0       	rcall	.+0      	; 0xddc <TMR0_voidSetCallBackOVF+0x6>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	31 f0       	breq	.+12     	; 0xdf8 <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	90 93 cd 00 	sts	0x00CD, r25
     df4:	80 93 cc 00 	sts	0x00CC, r24
}
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <TMR0_voidSetCallBackCTC>:

void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <TMR0_voidSetCallBackCTC+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	31 f0       	breq	.+12     	; 0xe24 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	90 93 cf 00 	sts	0x00CF, r25
     e20:	80 93 ce 00 	sts	0x00CE, r24
}
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <__vector_11>:

//////////////////////////////////***************ISR****************/////////////////////////////

//ISR timer0 over flow
void __vector_11(void) __attribute__((signal));
void __vector_11(void) {
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
     e58:	80 91 d0 00 	lds	r24, 0x00D0
     e5c:	90 91 d1 00 	lds	r25, 0x00D1
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	90 93 d1 00 	sts	0x00D1, r25
     e66:	80 93 d0 00 	sts	0x00D0, r24

	if (TMR0_ovCount == local_u16ovCounter) {
     e6a:	80 91 d0 00 	lds	r24, 0x00D0
     e6e:	90 91 d1 00 	lds	r25, 0x00D1
     e72:	23 e0       	ldi	r18, 0x03	; 3
     e74:	81 3d       	cpi	r24, 0xD1	; 209
     e76:	92 07       	cpc	r25, r18
     e78:	99 f4       	brne	.+38     	; 0xea0 <__vector_11+0x72>

		//reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
     e7a:	e2 e5       	ldi	r30, 0x52	; 82
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	81 e7       	ldi	r24, 0x71	; 113
     e80:	80 83       	st	Z, r24
		//clear counter
		local_u16ovCounter = 0;
     e82:	10 92 d1 00 	sts	0x00D1, r1
     e86:	10 92 d0 00 	sts	0x00D0, r1

		//call action
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
     e8a:	80 91 cc 00 	lds	r24, 0x00CC
     e8e:	90 91 cd 00 	lds	r25, 0x00CD
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	29 f0       	breq	.+10     	; 0xea0 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
     e96:	e0 91 cc 00 	lds	r30, 0x00CC
     e9a:	f0 91 cd 00 	lds	r31, 0x00CD
     e9e:	09 95       	icall
		}

	}
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_10>:

//
//ISR timer0 outcompare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void) {
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
     ef0:	80 91 d2 00 	lds	r24, 0x00D2
     ef4:	90 91 d3 00 	lds	r25, 0x00D3
     ef8:	a0 91 d4 00 	lds	r26, 0x00D4
     efc:	b0 91 d5 00 	lds	r27, 0x00D5
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	a1 1d       	adc	r26, r1
     f04:	b1 1d       	adc	r27, r1
     f06:	80 93 d2 00 	sts	0x00D2, r24
     f0a:	90 93 d3 00 	sts	0x00D3, r25
     f0e:	a0 93 d4 00 	sts	0x00D4, r26
     f12:	b0 93 d5 00 	sts	0x00D5, r27

//	if(TMR0_ctcCount == local_u16CTCCounter){
//		//clear counter
	if (private_ctcCounter == local_u32CTCCounter) {
     f16:	20 91 d6 00 	lds	r18, 0x00D6
     f1a:	30 91 d7 00 	lds	r19, 0x00D7
     f1e:	40 91 d8 00 	lds	r20, 0x00D8
     f22:	50 91 d9 00 	lds	r21, 0x00D9
     f26:	80 91 d2 00 	lds	r24, 0x00D2
     f2a:	90 91 d3 00 	lds	r25, 0x00D3
     f2e:	a0 91 d4 00 	lds	r26, 0x00D4
     f32:	b0 91 d5 00 	lds	r27, 0x00D5
     f36:	28 17       	cp	r18, r24
     f38:	39 07       	cpc	r19, r25
     f3a:	4a 07       	cpc	r20, r26
     f3c:	5b 07       	cpc	r21, r27
     f3e:	99 f4       	brne	.+38     	; 0xf66 <__vector_10+0xa0>
		//clear counter
		local_u32CTCCounter = 0;
     f40:	10 92 d2 00 	sts	0x00D2, r1
     f44:	10 92 d3 00 	sts	0x00D3, r1
     f48:	10 92 d4 00 	sts	0x00D4, r1
     f4c:	10 92 d5 00 	sts	0x00D5, r1
		//call action
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
     f50:	80 91 ce 00 	lds	r24, 0x00CE
     f54:	90 91 cf 00 	lds	r25, 0x00CF
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	29 f0       	breq	.+10     	; 0xf66 <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
     f5c:	e0 91 ce 00 	lds	r30, 0x00CE
     f60:	f0 91 cf 00 	lds	r31, 0x00CF
     f64:	09 95       	icall
		}

	}
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <TMR0_voidSetCompareMatchValue>:

void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
     f98:	ec e5       	ldi	r30, 0x5C	; 92
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 83       	st	Z, r24
}
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	00 d0       	rcall	.+0      	; 0xfae <Port_Init+0x6>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <Port_Init+0x8>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <Port_Init+0xa>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9c 83       	std	Y+4, r25	; 0x04
     fb8:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
     fba:	1a 82       	std	Y+2, r1	; 0x02
     fbc:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i < 32; i++) {
     fbe:	1a 82       	std	Y+2, r1	; 0x02
     fc0:	19 82       	std	Y+1, r1	; 0x01
     fc2:	72 c1       	rjmp	.+740    	; 0x12a8 <Port_Init+0x300>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
     fc4:	29 81       	ldd	r18, Y+1	; 0x01
     fc6:	3a 81       	ldd	r19, Y+2	; 0x02
     fc8:	c9 01       	movw	r24, r18
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	28 0f       	add	r18, r24
     fd0:	39 1f       	adc	r19, r25
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	fc 01       	movw	r30, r24
     fd8:	e2 0f       	add	r30, r18
     fda:	f3 1f       	adc	r31, r19
     fdc:	80 81       	ld	r24, Z
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3e 83       	std	Y+6, r19	; 0x06
     fe4:	2d 83       	std	Y+5, r18	; 0x05
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	91 05       	cpc	r25, r1
     fee:	09 f4       	brne	.+2      	; 0xff2 <Port_Init+0x4a>
     ff0:	67 c0       	rjmp	.+206    	; 0x10c0 <Port_Init+0x118>
     ff2:	2d 81       	ldd	r18, Y+5	; 0x05
     ff4:	3e 81       	ldd	r19, Y+6	; 0x06
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <Port_Init+0x5e>
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	71 f0       	breq	.+28     	; 0x1020 <Port_Init+0x78>
    1004:	4c c1       	rjmp	.+664    	; 0x129e <Port_Init+0x2f6>
    1006:	2d 81       	ldd	r18, Y+5	; 0x05
    1008:	3e 81       	ldd	r19, Y+6	; 0x06
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <Port_Init+0x6a>
    1010:	a7 c0       	rjmp	.+334    	; 0x1160 <Port_Init+0x1b8>
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <Port_Init+0x76>
    101c:	f1 c0       	rjmp	.+482    	; 0x1200 <Port_Init+0x258>
    101e:	3f c1       	rjmp	.+638    	; 0x129e <Port_Init+0x2f6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1020:	29 81       	ldd	r18, Y+1	; 0x01
    1022:	3a 81       	ldd	r19, Y+2	; 0x02
    1024:	c9 01       	movw	r24, r18
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	28 0f       	add	r18, r24
    102c:	39 1f       	adc	r19, r25
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	fc 01       	movw	r30, r24
    1034:	e2 0f       	add	r30, r18
    1036:	f3 1f       	adc	r31, r19
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	01 f5       	brne	.+64     	; 0x107e <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    103e:	aa e3       	ldi	r26, 0x3A	; 58
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ea e3       	ldi	r30, 0x3A	; 58
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	29 81       	ldd	r18, Y+1	; 0x01
    104c:	3a 81       	ldd	r19, Y+2	; 0x02
    104e:	c9 01       	movw	r24, r18
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	28 0f       	add	r18, r24
    1056:	39 1f       	adc	r19, r25
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	fc 01       	movw	r30, r24
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	81 81       	ldd	r24, Z+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <Port_Init+0xcc>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <Port_Init+0xc8>
    1078:	84 2b       	or	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	10 c1       	rjmp	.+544    	; 0x129e <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    107e:	aa e3       	ldi	r26, 0x3A	; 58
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ea e3       	ldi	r30, 0x3A	; 58
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	29 81       	ldd	r18, Y+1	; 0x01
    108c:	3a 81       	ldd	r19, Y+2	; 0x02
    108e:	c9 01       	movw	r24, r18
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	28 0f       	add	r18, r24
    1096:	39 1f       	adc	r19, r25
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	81 81       	ldd	r24, Z+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <Port_Init+0x10c>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <Port_Init+0x108>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	ef c0       	rjmp	.+478    	; 0x129e <Port_Init+0x2f6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    10c0:	29 81       	ldd	r18, Y+1	; 0x01
    10c2:	3a 81       	ldd	r19, Y+2	; 0x02
    10c4:	c9 01       	movw	r24, r18
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	28 0f       	add	r18, r24
    10cc:	39 1f       	adc	r19, r25
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	fc 01       	movw	r30, r24
    10d4:	e2 0f       	add	r30, r18
    10d6:	f3 1f       	adc	r31, r19
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	01 f5       	brne	.+64     	; 0x111e <Port_Init+0x176>
				SET_BIT(DDRB, pin_cfg[i].pin);
    10de:	a7 e3       	ldi	r26, 0x37	; 55
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e7 e3       	ldi	r30, 0x37	; 55
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	29 81       	ldd	r18, Y+1	; 0x01
    10ec:	3a 81       	ldd	r19, Y+2	; 0x02
    10ee:	c9 01       	movw	r24, r18
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	28 0f       	add	r18, r24
    10f6:	39 1f       	adc	r19, r25
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	fc 01       	movw	r30, r24
    10fe:	e2 0f       	add	r30, r18
    1100:	f3 1f       	adc	r31, r19
    1102:	81 81       	ldd	r24, Z+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <Port_Init+0x16c>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <Port_Init+0x168>
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	c0 c0       	rjmp	.+384    	; 0x129e <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    111e:	a7 e3       	ldi	r26, 0x37	; 55
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e7 e3       	ldi	r30, 0x37	; 55
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	29 81       	ldd	r18, Y+1	; 0x01
    112c:	3a 81       	ldd	r19, Y+2	; 0x02
    112e:	c9 01       	movw	r24, r18
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	28 0f       	add	r18, r24
    1136:	39 1f       	adc	r19, r25
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	fc 01       	movw	r30, r24
    113e:	e2 0f       	add	r30, r18
    1140:	f3 1f       	adc	r31, r19
    1142:	81 81       	ldd	r24, Z+1	; 0x01
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <Port_Init+0x1ac>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <Port_Init+0x1a8>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	9f c0       	rjmp	.+318    	; 0x129e <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1160:	29 81       	ldd	r18, Y+1	; 0x01
    1162:	3a 81       	ldd	r19, Y+2	; 0x02
    1164:	c9 01       	movw	r24, r18
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	28 0f       	add	r18, r24
    116c:	39 1f       	adc	r19, r25
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	01 f5       	brne	.+64     	; 0x11be <Port_Init+0x216>
				SET_BIT(DDRC, pin_cfg[i].pin);
    117e:	a4 e3       	ldi	r26, 0x34	; 52
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e4 e3       	ldi	r30, 0x34	; 52
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	29 81       	ldd	r18, Y+1	; 0x01
    118c:	3a 81       	ldd	r19, Y+2	; 0x02
    118e:	c9 01       	movw	r24, r18
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	28 0f       	add	r18, r24
    1196:	39 1f       	adc	r19, r25
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	fc 01       	movw	r30, r24
    119e:	e2 0f       	add	r30, r18
    11a0:	f3 1f       	adc	r31, r19
    11a2:	81 81       	ldd	r24, Z+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <Port_Init+0x20c>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <Port_Init+0x208>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	70 c0       	rjmp	.+224    	; 0x129e <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    11be:	a4 e3       	ldi	r26, 0x34	; 52
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e4 e3       	ldi	r30, 0x34	; 52
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	29 81       	ldd	r18, Y+1	; 0x01
    11cc:	3a 81       	ldd	r19, Y+2	; 0x02
    11ce:	c9 01       	movw	r24, r18
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	28 0f       	add	r18, r24
    11d6:	39 1f       	adc	r19, r25
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	81 81       	ldd	r24, Z+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <Port_Init+0x24c>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <Port_Init+0x248>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	4f c0       	rjmp	.+158    	; 0x129e <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1200:	29 81       	ldd	r18, Y+1	; 0x01
    1202:	3a 81       	ldd	r19, Y+2	; 0x02
    1204:	c9 01       	movw	r24, r18
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	28 0f       	add	r18, r24
    120c:	39 1f       	adc	r19, r25
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	fc 01       	movw	r30, r24
    1214:	e2 0f       	add	r30, r18
    1216:	f3 1f       	adc	r31, r19
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	01 f5       	brne	.+64     	; 0x125e <Port_Init+0x2b6>
				SET_BIT(DDRD, pin_cfg[i].pin);
    121e:	a1 e3       	ldi	r26, 0x31	; 49
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e1 e3       	ldi	r30, 0x31	; 49
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	29 81       	ldd	r18, Y+1	; 0x01
    122c:	3a 81       	ldd	r19, Y+2	; 0x02
    122e:	c9 01       	movw	r24, r18
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	28 0f       	add	r18, r24
    1236:	39 1f       	adc	r19, r25
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	fc 01       	movw	r30, r24
    123e:	e2 0f       	add	r30, r18
    1240:	f3 1f       	adc	r31, r19
    1242:	81 81       	ldd	r24, Z+1	; 0x01
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <Port_Init+0x2ac>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <Port_Init+0x2a8>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	20 c0       	rjmp	.+64     	; 0x129e <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    125e:	a1 e3       	ldi	r26, 0x31	; 49
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	29 81       	ldd	r18, Y+1	; 0x01
    126c:	3a 81       	ldd	r19, Y+2	; 0x02
    126e:	c9 01       	movw	r24, r18
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	28 0f       	add	r18, r24
    1276:	39 1f       	adc	r19, r25
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	fc 01       	movw	r30, r24
    127e:	e2 0f       	add	r30, r18
    1280:	f3 1f       	adc	r31, r19
    1282:	81 81       	ldd	r24, Z+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <Port_Init+0x2ec>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <Port_Init+0x2e8>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i=0; i < 32; i++) {
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	80 32       	cpi	r24, 0x20	; 32
    12ae:	91 05       	cpc	r25, r1
    12b0:	0c f4       	brge	.+2      	; 0x12b4 <Port_Init+0x30c>
    12b2:	88 ce       	rjmp	.-752    	; 0xfc4 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    12b4:	26 96       	adiw	r28, 0x06	; 6
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    12ce:	af e5       	ldi	r26, 0x5F	; 95
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ef e5       	ldi	r30, 0x5F	; 95
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 68       	ori	r24, 0x80	; 128
    12da:	8c 93       	st	X, r24
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <GI_voidDisable>:

void GI_voidDisable(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    12ea:	af e5       	ldi	r26, 0x5F	; 95
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ef e5       	ldi	r30, 0x5F	; 95
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 77       	andi	r24, 0x7F	; 127
    12f6:	8c 93       	st	X, r24
}
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <EXTI_voidInit>:

static void (*prviate_pCallBackINT0)(void) = NULL;
static void (*prviate_pCallBackINT1)(void) = NULL;
static void (*prviate_pCallBackINT2)(void) = NULL;

void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	28 97       	sbiw	r28, 0x08	; 8
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_u8InterruptSource) {
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	38 87       	std	Y+8, r19	; 0x08
    131e:	2f 83       	std	Y+7, r18	; 0x07
    1320:	8f 81       	ldd	r24, Y+7	; 0x07
    1322:	98 85       	ldd	r25, Y+8	; 0x08
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <EXTI_voidInit+0x2e>
    132a:	5b c0       	rjmp	.+182    	; 0x13e2 <EXTI_voidInit+0xe4>
    132c:	2f 81       	ldd	r18, Y+7	; 0x07
    132e:	38 85       	ldd	r19, Y+8	; 0x08
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	09 f4       	brne	.+2      	; 0x1338 <EXTI_voidInit+0x3a>
    1336:	a5 c0       	rjmp	.+330    	; 0x1482 <EXTI_voidInit+0x184>
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	09 f0       	breq	.+2      	; 0x1342 <EXTI_voidInit+0x44>
    1340:	b5 c0       	rjmp	.+362    	; 0x14ac <EXTI_voidInit+0x1ae>

	case EXTI_INT0:
		switch (copy_u8SenseControl) {
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3e 83       	std	Y+6, r19	; 0x06
    134a:	2d 83       	std	Y+5, r18	; 0x05
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	91 05       	cpc	r25, r1
    1354:	b9 f1       	breq	.+110    	; 0x13c4 <EXTI_voidInit+0xc6>
    1356:	2d 81       	ldd	r18, Y+5	; 0x05
    1358:	3e 81       	ldd	r19, Y+6	; 0x06
    135a:	23 30       	cpi	r18, 0x03	; 3
    135c:	31 05       	cpc	r19, r1
    135e:	19 f1       	breq	.+70     	; 0x13a6 <EXTI_voidInit+0xa8>
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	79 f0       	breq	.+30     	; 0x1388 <EXTI_voidInit+0x8a>
		default:
		case RISING_EDGE:
			SET_BIT(MCUCR, ISC00);
    136a:	a5 e5       	ldi	r26, 0x55	; 85
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e5       	ldi	r30, 0x55	; 85
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC01);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	82 60       	ori	r24, 0x02	; 2
    1384:	8c 93       	st	X, r24
    1386:	92 c0       	rjmp	.+292    	; 0x14ac <EXTI_voidInit+0x1ae>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR, ISC00);
    1388:	a5 e5       	ldi	r26, 0x55	; 85
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e5 e5       	ldi	r30, 0x55	; 85
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8e 7f       	andi	r24, 0xFE	; 254
    1394:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC01);
    1396:	a5 e5       	ldi	r26, 0x55	; 85
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e5 e5       	ldi	r30, 0x55	; 85
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	82 60       	ori	r24, 0x02	; 2
    13a2:	8c 93       	st	X, r24
    13a4:	83 c0       	rjmp	.+262    	; 0x14ac <EXTI_voidInit+0x1ae>
			break;
		case ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR, ISC00);
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC01);
    13b4:	a5 e5       	ldi	r26, 0x55	; 85
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e5       	ldi	r30, 0x55	; 85
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8d 7f       	andi	r24, 0xFD	; 253
    13c0:	8c 93       	st	X, r24
    13c2:	74 c0       	rjmp	.+232    	; 0x14ac <EXTI_voidInit+0x1ae>
			break;
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC00);
    13c4:	a5 e5       	ldi	r26, 0x55	; 85
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e5       	ldi	r30, 0x55	; 85
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8e 7f       	andi	r24, 0xFE	; 254
    13d0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC01);
    13d2:	a5 e5       	ldi	r26, 0x55	; 85
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e5       	ldi	r30, 0x55	; 85
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8d 7f       	andi	r24, 0xFD	; 253
    13de:	8c 93       	st	X, r24
    13e0:	65 c0       	rjmp	.+202    	; 0x14ac <EXTI_voidInit+0x1ae>
		}
		break;

	case EXTI_INT1:

		switch (copy_u8SenseControl) {
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	3c 83       	std	Y+4, r19	; 0x04
    13ea:	2b 83       	std	Y+3, r18	; 0x03
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	91 05       	cpc	r25, r1
    13f4:	b9 f1       	breq	.+110    	; 0x1464 <EXTI_voidInit+0x166>
    13f6:	2b 81       	ldd	r18, Y+3	; 0x03
    13f8:	3c 81       	ldd	r19, Y+4	; 0x04
    13fa:	23 30       	cpi	r18, 0x03	; 3
    13fc:	31 05       	cpc	r19, r1
    13fe:	19 f1       	breq	.+70     	; 0x1446 <EXTI_voidInit+0x148>
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	79 f0       	breq	.+30     	; 0x1428 <EXTI_voidInit+0x12a>
		default:
		case RISING_EDGE:
			SET_BIT(MCUCR, ISC10);
    140a:	a5 e5       	ldi	r26, 0x55	; 85
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e5       	ldi	r30, 0x55	; 85
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	84 60       	ori	r24, 0x04	; 4
    1416:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC11);
    1418:	a5 e5       	ldi	r26, 0x55	; 85
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e5       	ldi	r30, 0x55	; 85
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	88 60       	ori	r24, 0x08	; 8
    1424:	8c 93       	st	X, r24
    1426:	42 c0       	rjmp	.+132    	; 0x14ac <EXTI_voidInit+0x1ae>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR, ISC10);
    1428:	a5 e5       	ldi	r26, 0x55	; 85
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e5       	ldi	r30, 0x55	; 85
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8b 7f       	andi	r24, 0xFB	; 251
    1434:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC11);
    1436:	a5 e5       	ldi	r26, 0x55	; 85
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e5 e5       	ldi	r30, 0x55	; 85
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	88 60       	ori	r24, 0x08	; 8
    1442:	8c 93       	st	X, r24
    1444:	33 c0       	rjmp	.+102    	; 0x14ac <EXTI_voidInit+0x1ae>
			break;
		case ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR, ISC10);
    1446:	a5 e5       	ldi	r26, 0x55	; 85
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e5 e5       	ldi	r30, 0x55	; 85
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	84 60       	ori	r24, 0x04	; 4
    1452:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC11);
    1454:	a5 e5       	ldi	r26, 0x55	; 85
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e5 e5       	ldi	r30, 0x55	; 85
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	87 7f       	andi	r24, 0xF7	; 247
    1460:	8c 93       	st	X, r24
    1462:	24 c0       	rjmp	.+72     	; 0x14ac <EXTI_voidInit+0x1ae>
			break;
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC10);
    1464:	a5 e5       	ldi	r26, 0x55	; 85
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e5 e5       	ldi	r30, 0x55	; 85
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8b 7f       	andi	r24, 0xFB	; 251
    1470:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC11);
    1472:	a5 e5       	ldi	r26, 0x55	; 85
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e5       	ldi	r30, 0x55	; 85
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	87 7f       	andi	r24, 0xF7	; 247
    147e:	8c 93       	st	X, r24
    1480:	15 c0       	rjmp	.+42     	; 0x14ac <EXTI_voidInit+0x1ae>
			break;
		}
		break;

	case EXTI_INT2:
		switch (copy_u8SenseControl) {
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	41 f0       	breq	.+16     	; 0x149e <EXTI_voidInit+0x1a0>
		default:
		case RISING_EDGE:
			SET_BIT(MCUCSR, ISC2);
    148e:	a4 e5       	ldi	r26, 0x54	; 84
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e4 e5       	ldi	r30, 0x54	; 84
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 64       	ori	r24, 0x40	; 64
    149a:	8c 93       	st	X, r24
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <EXTI_voidInit+0x1ae>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCSR, ISC2);
    149e:	a4 e5       	ldi	r26, 0x54	; 84
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e4 e5       	ldi	r30, 0x54	; 84
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8f 7b       	andi	r24, 0xBF	; 191
    14aa:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    14ac:	28 96       	adiw	r28, 0x08	; 8
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <EXTI_voidEnable>:

void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <EXTI_voidEnable+0x6>
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_u8InterruptSource) {
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3b 83       	std	Y+3, r19	; 0x03
    14d4:	2a 83       	std	Y+2, r18	; 0x02
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	9b 81       	ldd	r25, Y+3	; 0x03
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	89 f0       	breq	.+34     	; 0x1502 <EXTI_voidEnable+0x44>
    14e0:	2a 81       	ldd	r18, Y+2	; 0x02
    14e2:	3b 81       	ldd	r19, Y+3	; 0x03
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	a1 f0       	breq	.+40     	; 0x1512 <EXTI_voidEnable+0x54>
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	b9 f4       	brne	.+46     	; 0x1520 <EXTI_voidEnable+0x62>
	case EXTI_INT0:
		SET_BIT(GICR, INT0);
    14f2:	ab e5       	ldi	r26, 0x5B	; 91
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	eb e5       	ldi	r30, 0x5B	; 91
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	80 64       	ori	r24, 0x40	; 64
    14fe:	8c 93       	st	X, r24
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <EXTI_voidEnable+0x62>
		break;
	case EXTI_INT1:
		SET_BIT(GICR, INT1);
    1502:	ab e5       	ldi	r26, 0x5B	; 91
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	eb e5       	ldi	r30, 0x5B	; 91
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 68       	ori	r24, 0x80	; 128
    150e:	8c 93       	st	X, r24
    1510:	07 c0       	rjmp	.+14     	; 0x1520 <EXTI_voidEnable+0x62>
		break;
	case EXTI_INT2:
		SET_BIT(GICR, INT2);
    1512:	ab e5       	ldi	r26, 0x5B	; 91
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e5       	ldi	r30, 0x5B	; 91
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 62       	ori	r24, 0x20	; 32
    151e:	8c 93       	st	X, r24
		break;

	}
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <EXTI_voidDisable>:

void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <EXTI_voidDisable+0x6>
    1532:	0f 92       	push	r0
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	89 83       	std	Y+1, r24	; 0x01

	switch (copy_u8InterruptSource) {
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3b 83       	std	Y+3, r19	; 0x03
    1542:	2a 83       	std	Y+2, r18	; 0x02
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	9b 81       	ldd	r25, Y+3	; 0x03
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	91 05       	cpc	r25, r1
    154c:	89 f0       	breq	.+34     	; 0x1570 <EXTI_voidDisable+0x44>
    154e:	2a 81       	ldd	r18, Y+2	; 0x02
    1550:	3b 81       	ldd	r19, Y+3	; 0x03
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	a1 f0       	breq	.+40     	; 0x1580 <EXTI_voidDisable+0x54>
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	b9 f4       	brne	.+46     	; 0x158e <EXTI_voidDisable+0x62>
	case EXTI_INT0:
		CLR_BIT(GICR, INT0);
    1560:	ab e5       	ldi	r26, 0x5B	; 91
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	eb e5       	ldi	r30, 0x5B	; 91
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8f 7b       	andi	r24, 0xBF	; 191
    156c:	8c 93       	st	X, r24
    156e:	0f c0       	rjmp	.+30     	; 0x158e <EXTI_voidDisable+0x62>
		break;
	case EXTI_INT1:
		CLR_BIT(GICR, INT1);
    1570:	ab e5       	ldi	r26, 0x5B	; 91
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	eb e5       	ldi	r30, 0x5B	; 91
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8f 77       	andi	r24, 0x7F	; 127
    157c:	8c 93       	st	X, r24
    157e:	07 c0       	rjmp	.+14     	; 0x158e <EXTI_voidDisable+0x62>
		break;
	case EXTI_INT2:
		CLR_BIT(GICR, INT2);
    1580:	ab e5       	ldi	r26, 0x5B	; 91
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e5       	ldi	r30, 0x5B	; 91
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8f 7d       	andi	r24, 0xDF	; 223
    158c:	8c 93       	st	X, r24
		break;

	}
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <EXTRI_voidSetCallBackINT>:

void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <EXTRI_voidSetCallBackINT+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <EXTRI_voidSetCallBackINT+0x8>
    15a2:	0f 92       	push	r0
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	7b 83       	std	Y+3, r23	; 0x03
    15ac:	6a 83       	std	Y+2, r22	; 0x02
	if (ptrToFunction != NULL) {
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	9b 81       	ldd	r25, Y+3	; 0x03
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	39 f1       	breq	.+78     	; 0x1604 <EXTRI_voidSetCallBackINT+0x6a>
		switch (EXTI_Int) {
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3d 83       	std	Y+5, r19	; 0x05
    15be:	2c 83       	std	Y+4, r18	; 0x04
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	81 f0       	breq	.+32     	; 0x15ea <EXTRI_voidSetCallBackINT+0x50>
    15ca:	2c 81       	ldd	r18, Y+4	; 0x04
    15cc:	3d 81       	ldd	r19, Y+5	; 0x05
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	91 f0       	breq	.+36     	; 0x15f8 <EXTRI_voidSetCallBackINT+0x5e>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	a1 f4       	brne	.+40     	; 0x1604 <EXTRI_voidSetCallBackINT+0x6a>
		case EXTI_INT0:
			prviate_pCallBackINT0 = ptrToFunction;
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	90 93 db 00 	sts	0x00DB, r25
    15e4:	80 93 da 00 	sts	0x00DA, r24
    15e8:	0d c0       	rjmp	.+26     	; 0x1604 <EXTRI_voidSetCallBackINT+0x6a>
			break;
		case EXTI_INT1:
			prviate_pCallBackINT1 = ptrToFunction;
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	9b 81       	ldd	r25, Y+3	; 0x03
    15ee:	90 93 dd 00 	sts	0x00DD, r25
    15f2:	80 93 dc 00 	sts	0x00DC, r24
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <EXTRI_voidSetCallBackINT+0x6a>
			break;
		case EXTI_INT2:
			prviate_pCallBackINT2 = ptrToFunction;
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	90 93 df 00 	sts	0x00DF, r25
    1600:	80 93 de 00 	sts	0x00DE, r24
		default:
			break;
		}

	}
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	if (prviate_pCallBackINT0 != NULL) {
    163e:	80 91 da 00 	lds	r24, 0x00DA
    1642:	90 91 db 00 	lds	r25, 0x00DB
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	29 f0       	breq	.+10     	; 0x1654 <__vector_1+0x40>
		prviate_pCallBackINT0();
    164a:	e0 91 da 00 	lds	r30, 0x00DA
    164e:	f0 91 db 00 	lds	r31, 0x00DB
    1652:	09 95       	icall
	}
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	if (prviate_pCallBackINT1 != NULL) {
    16a4:	80 91 dc 00 	lds	r24, 0x00DC
    16a8:	90 91 dd 00 	lds	r25, 0x00DD
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	29 f0       	breq	.+10     	; 0x16ba <__vector_2+0x40>
		prviate_pCallBackINT1();
    16b0:	e0 91 dc 00 	lds	r30, 0x00DC
    16b4:	f0 91 dd 00 	lds	r31, 0x00DD
    16b8:	09 95       	icall
	}
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	2f 93       	push	r18
    16ec:	3f 93       	push	r19
    16ee:	4f 93       	push	r20
    16f0:	5f 93       	push	r21
    16f2:	6f 93       	push	r22
    16f4:	7f 93       	push	r23
    16f6:	8f 93       	push	r24
    16f8:	9f 93       	push	r25
    16fa:	af 93       	push	r26
    16fc:	bf 93       	push	r27
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	if (prviate_pCallBackINT2 != NULL) {
    170a:	80 91 de 00 	lds	r24, 0x00DE
    170e:	90 91 df 00 	lds	r25, 0x00DF
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	29 f0       	breq	.+10     	; 0x1720 <__vector_3+0x40>
		prviate_pCallBackINT2();
    1716:	e0 91 de 00 	lds	r30, 0x00DE
    171a:	f0 91 df 00 	lds	r31, 0x00DF
    171e:	09 95       	icall
	}
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <Dio_WriteChannel>:
#include "DIO.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <Dio_WriteChannel+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <Dio_WriteChannel+0x8>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	8a 83       	std	Y+2, r24	; 0x02
    1756:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	86 95       	lsr	r24
    175c:	86 95       	lsr	r24
    175e:	86 95       	lsr	r24
    1760:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3d 83       	std	Y+5, r19	; 0x05
    176a:	2c 83       	std	Y+4, r18	; 0x04
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	91 05       	cpc	r25, r1
    1774:	09 f4       	brne	.+2      	; 0x1778 <Dio_WriteChannel+0x32>
    1776:	43 c0       	rjmp	.+134    	; 0x17fe <Dio_WriteChannel+0xb8>
    1778:	2c 81       	ldd	r18, Y+4	; 0x04
    177a:	3d 81       	ldd	r19, Y+5	; 0x05
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	2c f4       	brge	.+10     	; 0x178c <Dio_WriteChannel+0x46>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	71 f0       	breq	.+28     	; 0x17a6 <Dio_WriteChannel+0x60>
    178a:	ce c0       	rjmp	.+412    	; 0x1928 <Dio_WriteChannel+0x1e2>
    178c:	2c 81       	ldd	r18, Y+4	; 0x04
    178e:	3d 81       	ldd	r19, Y+5	; 0x05
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <Dio_WriteChannel+0x52>
    1796:	65 c0       	rjmp	.+202    	; 0x1862 <Dio_WriteChannel+0x11c>
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	91 05       	cpc	r25, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <Dio_WriteChannel+0x5e>
    17a2:	91 c0       	rjmp	.+290    	; 0x18c6 <Dio_WriteChannel+0x180>
    17a4:	c1 c0       	rjmp	.+386    	; 0x1928 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGHT) {
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	a1 f4       	brne	.+40     	; 0x17d4 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    17ac:	ab e3       	ldi	r26, 0x3B	; 59
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	eb e3       	ldi	r30, 0x3B	; 59
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <Dio_WriteChannel+0x84>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <Dio_WriteChannel+0x80>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	aa c0       	rjmp	.+340    	; 0x1928 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    17d4:	ab e3       	ldi	r26, 0x3B	; 59
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	eb e3       	ldi	r30, 0x3B	; 59
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <Dio_WriteChannel+0xac>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <Dio_WriteChannel+0xa8>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	95 c0       	rjmp	.+298    	; 0x1928 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGHT) {
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	b9 f4       	brne	.+46     	; 0x1832 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    1804:	a8 e3       	ldi	r26, 0x38	; 56
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e8 e3       	ldi	r30, 0x38	; 56
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 01       	movw	r18, r24
    1818:	27 70       	andi	r18, 0x07	; 7
    181a:	30 70       	andi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <Dio_WriteChannel+0xe2>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <Dio_WriteChannel+0xde>
    182c:	84 2b       	or	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	7b c0       	rjmp	.+246    	; 0x1928 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    1832:	a8 e3       	ldi	r26, 0x38	; 56
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e8 e3       	ldi	r30, 0x38	; 56
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 01       	movw	r18, r24
    1846:	27 70       	andi	r18, 0x07	; 7
    1848:	30 70       	andi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <Dio_WriteChannel+0x110>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <Dio_WriteChannel+0x10c>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	63 c0       	rjmp	.+198    	; 0x1928 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGHT) {
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	b9 f4       	brne	.+46     	; 0x1896 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    1868:	a5 e3       	ldi	r26, 0x35	; 53
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e3       	ldi	r30, 0x35	; 53
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9c 01       	movw	r18, r24
    187c:	27 70       	andi	r18, 0x07	; 7
    187e:	30 70       	andi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <Dio_WriteChannel+0x146>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <Dio_WriteChannel+0x142>
    1890:	84 2b       	or	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	49 c0       	rjmp	.+146    	; 0x1928 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    1896:	a5 e3       	ldi	r26, 0x35	; 53
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e3       	ldi	r30, 0x35	; 53
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9c 01       	movw	r18, r24
    18aa:	27 70       	andi	r18, 0x07	; 7
    18ac:	30 70       	andi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <Dio_WriteChannel+0x174>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <Dio_WriteChannel+0x170>
    18be:	80 95       	com	r24
    18c0:	84 23       	and	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	31 c0       	rjmp	.+98     	; 0x1928 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGHT) {
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	b9 f4       	brne	.+46     	; 0x18fa <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    18cc:	a2 e3       	ldi	r26, 0x32	; 50
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e2 e3       	ldi	r30, 0x32	; 50
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9c 01       	movw	r18, r24
    18e0:	27 70       	andi	r18, 0x07	; 7
    18e2:	30 70       	andi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <Dio_WriteChannel+0x1aa>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <Dio_WriteChannel+0x1a6>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	17 c0       	rjmp	.+46     	; 0x1928 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    18fa:	a2 e3       	ldi	r26, 0x32	; 50
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e2 e3       	ldi	r30, 0x32	; 50
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 01       	movw	r18, r24
    190e:	27 70       	andi	r18, 0x07	; 7
    1910:	30 70       	andi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <Dio_WriteChannel+0x1d8>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <Dio_WriteChannel+0x1d4>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
		}
		break;
	}
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <Dio_ReadChannel+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <Dio_ReadChannel+0x8>
    1940:	0f 92       	push	r0
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	86 95       	lsr	r24
    194c:	86 95       	lsr	r24
    194e:	86 95       	lsr	r24
    1950:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3d 83       	std	Y+5, r19	; 0x05
    195a:	2c 83       	std	Y+4, r18	; 0x04
    195c:	4c 81       	ldd	r20, Y+4	; 0x04
    195e:	5d 81       	ldd	r21, Y+5	; 0x05
    1960:	41 30       	cpi	r20, 0x01	; 1
    1962:	51 05       	cpc	r21, r1
    1964:	49 f1       	breq	.+82     	; 0x19b8 <Dio_ReadChannel+0x80>
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	91 05       	cpc	r25, r1
    196e:	34 f4       	brge	.+12     	; 0x197c <Dio_ReadChannel+0x44>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	21 15       	cp	r18, r1
    1976:	31 05       	cpc	r19, r1
    1978:	69 f0       	breq	.+26     	; 0x1994 <Dio_ReadChannel+0x5c>
    197a:	59 c0       	rjmp	.+178    	; 0x1a2e <Dio_ReadChannel+0xf6>
    197c:	4c 81       	ldd	r20, Y+4	; 0x04
    197e:	5d 81       	ldd	r21, Y+5	; 0x05
    1980:	42 30       	cpi	r20, 0x02	; 2
    1982:	51 05       	cpc	r21, r1
    1984:	69 f1       	breq	.+90     	; 0x19e0 <Dio_ReadChannel+0xa8>
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	91 05       	cpc	r25, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <Dio_ReadChannel+0x5a>
    1990:	3b c0       	rjmp	.+118    	; 0x1a08 <Dio_ReadChannel+0xd0>
    1992:	4d c0       	rjmp	.+154    	; 0x1a2e <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    1994:	e9 e3       	ldi	r30, 0x39	; 57
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a9 01       	movw	r20, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <Dio_ReadChannel+0x74>
    19a8:	55 95       	asr	r21
    19aa:	47 95       	ror	r20
    19ac:	8a 95       	dec	r24
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <Dio_ReadChannel+0x70>
    19b0:	ca 01       	movw	r24, r20
    19b2:	81 70       	andi	r24, 0x01	; 1
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	3b c0       	rjmp	.+118    	; 0x1a2e <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    19b8:	e6 e3       	ldi	r30, 0x36	; 54
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	87 70       	andi	r24, 0x07	; 7
    19ca:	90 70       	andi	r25, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <Dio_ReadChannel+0x9c>
    19d0:	55 95       	asr	r21
    19d2:	47 95       	ror	r20
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <Dio_ReadChannel+0x98>
    19d8:	ca 01       	movw	r24, r20
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	27 c0       	rjmp	.+78     	; 0x1a2e <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    19e0:	e3 e3       	ldi	r30, 0x33	; 51
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	87 70       	andi	r24, 0x07	; 7
    19f2:	90 70       	andi	r25, 0x00	; 0
    19f4:	a9 01       	movw	r20, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <Dio_ReadChannel+0xc4>
    19f8:	55 95       	asr	r21
    19fa:	47 95       	ror	r20
    19fc:	8a 95       	dec	r24
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <Dio_ReadChannel+0xc0>
    1a00:	ca 01       	movw	r24, r20
    1a02:	81 70       	andi	r24, 0x01	; 1
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	13 c0       	rjmp	.+38     	; 0x1a2e <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    1a08:	e0 e3       	ldi	r30, 0x30	; 48
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	87 70       	andi	r24, 0x07	; 7
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	a9 01       	movw	r20, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <Dio_ReadChannel+0xec>
    1a20:	55 95       	asr	r21
    1a22:	47 95       	ror	r20
    1a24:	8a 95       	dec	r24
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <Dio_ReadChannel+0xe8>
    1a28:	ca 01       	movw	r24, r20
    1a2a:	81 70       	andi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <Dio_FlipChannel+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <Dio_FlipChannel+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	86 95       	lsr	r24
    1a52:	86 95       	lsr	r24
    1a54:	86 95       	lsr	r24
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	3c 83       	std	Y+4, r19	; 0x04
    1a5c:	2b 83       	std	Y+3, r18	; 0x03
    1a5e:	4b 81       	ldd	r20, Y+3	; 0x03
    1a60:	5c 81       	ldd	r21, Y+4	; 0x04
    1a62:	41 30       	cpi	r20, 0x01	; 1
    1a64:	51 05       	cpc	r21, r1
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <Dio_FlipChannel+0x2a>
    1a68:	3c c0       	rjmp	.+120    	; 0x1ae2 <Dio_FlipChannel+0xa2>
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	91 05       	cpc	r25, r1
    1a72:	34 f4       	brge	.+12     	; 0x1a80 <Dio_FlipChannel+0x40>
    1a74:	2b 81       	ldd	r18, Y+3	; 0x03
    1a76:	3c 81       	ldd	r19, Y+4	; 0x04
    1a78:	21 15       	cp	r18, r1
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	71 f0       	breq	.+28     	; 0x1a9a <Dio_FlipChannel+0x5a>
    1a7e:	ab c0       	rjmp	.+342    	; 0x1bd6 <Dio_FlipChannel+0x196>
    1a80:	4b 81       	ldd	r20, Y+3	; 0x03
    1a82:	5c 81       	ldd	r21, Y+4	; 0x04
    1a84:	42 30       	cpi	r20, 0x02	; 2
    1a86:	51 05       	cpc	r21, r1
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <Dio_FlipChannel+0x4c>
    1a8a:	54 c0       	rjmp	.+168    	; 0x1b34 <Dio_FlipChannel+0xf4>
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	91 05       	cpc	r25, r1
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <Dio_FlipChannel+0x58>
    1a96:	77 c0       	rjmp	.+238    	; 0x1b86 <Dio_FlipChannel+0x146>
    1a98:	9e c0       	rjmp	.+316    	; 0x1bd6 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    1a9a:	ab e3       	ldi	r26, 0x3B	; 59
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	eb e3       	ldi	r30, 0x3B	; 59
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <Dio_FlipChannel+0x76>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	2a 95       	dec	r18
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <Dio_FlipChannel+0x72>
    1aba:	84 27       	eor	r24, r20
    1abc:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    1abe:	eb e3       	ldi	r30, 0x3B	; 59
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a9 01       	movw	r20, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <Dio_FlipChannel+0x96>
    1ad2:	55 95       	asr	r21
    1ad4:	47 95       	ror	r20
    1ad6:	8a 95       	dec	r24
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <Dio_FlipChannel+0x92>
    1ada:	ca 01       	movw	r24, r20
    1adc:	81 70       	andi	r24, 0x01	; 1
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	7a c0       	rjmp	.+244    	; 0x1bd6 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    1ae2:	a8 e3       	ldi	r26, 0x38	; 56
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e8 e3       	ldi	r30, 0x38	; 56
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9c 01       	movw	r18, r24
    1af6:	27 70       	andi	r18, 0x07	; 7
    1af8:	30 70       	andi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <Dio_FlipChannel+0xc4>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	2a 95       	dec	r18
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <Dio_FlipChannel+0xc0>
    1b08:	84 27       	eor	r24, r20
    1b0a:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	87 70       	andi	r24, 0x07	; 7
    1b1e:	90 70       	andi	r25, 0x00	; 0
    1b20:	a9 01       	movw	r20, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <Dio_FlipChannel+0xe8>
    1b24:	55 95       	asr	r21
    1b26:	47 95       	ror	r20
    1b28:	8a 95       	dec	r24
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <Dio_FlipChannel+0xe4>
    1b2c:	ca 01       	movw	r24, r20
    1b2e:	81 70       	andi	r24, 0x01	; 1
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	51 c0       	rjmp	.+162    	; 0x1bd6 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    1b34:	a5 e3       	ldi	r26, 0x35	; 53
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e5 e3       	ldi	r30, 0x35	; 53
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9c 01       	movw	r18, r24
    1b48:	27 70       	andi	r18, 0x07	; 7
    1b4a:	30 70       	andi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <Dio_FlipChannel+0x116>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	2a 95       	dec	r18
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <Dio_FlipChannel+0x112>
    1b5a:	84 27       	eor	r24, r20
    1b5c:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    1b5e:	e5 e3       	ldi	r30, 0x35	; 53
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	87 70       	andi	r24, 0x07	; 7
    1b70:	90 70       	andi	r25, 0x00	; 0
    1b72:	a9 01       	movw	r20, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <Dio_FlipChannel+0x13a>
    1b76:	55 95       	asr	r21
    1b78:	47 95       	ror	r20
    1b7a:	8a 95       	dec	r24
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <Dio_FlipChannel+0x136>
    1b7e:	ca 01       	movw	r24, r20
    1b80:	81 70       	andi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	28 c0       	rjmp	.+80     	; 0x1bd6 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    1b86:	a2 e3       	ldi	r26, 0x32	; 50
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e2 e3       	ldi	r30, 0x32	; 50
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9c 01       	movw	r18, r24
    1b9a:	27 70       	andi	r18, 0x07	; 7
    1b9c:	30 70       	andi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <Dio_FlipChannel+0x168>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	2a 95       	dec	r18
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <Dio_FlipChannel+0x164>
    1bac:	84 27       	eor	r24, r20
    1bae:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    1bb0:	e2 e3       	ldi	r30, 0x32	; 50
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	87 70       	andi	r24, 0x07	; 7
    1bc2:	90 70       	andi	r25, 0x00	; 0
    1bc4:	a9 01       	movw	r20, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <Dio_FlipChannel+0x18c>
    1bc8:	55 95       	asr	r21
    1bca:	47 95       	ror	r20
    1bcc:	8a 95       	dec	r24
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <Dio_FlipChannel+0x188>
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	81 70       	andi	r24, 0x01	; 1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <Dio_WritePort+0x6>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <Dio_WritePort+0x8>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	3c 83       	std	Y+4, r19	; 0x04
    1bfe:	2b 83       	std	Y+3, r18	; 0x03
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	91 05       	cpc	r25, r1
    1c08:	d1 f0       	breq	.+52     	; 0x1c3e <Dio_WritePort+0x58>
    1c0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <Dio_WritePort+0x38>
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	61 f0       	breq	.+24     	; 0x1c34 <Dio_WritePort+0x4e>
    1c1c:	1e c0       	rjmp	.+60     	; 0x1c5a <Dio_WritePort+0x74>
    1c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c20:	3c 81       	ldd	r19, Y+4	; 0x04
    1c22:	22 30       	cpi	r18, 0x02	; 2
    1c24:	31 05       	cpc	r19, r1
    1c26:	81 f0       	breq	.+32     	; 0x1c48 <Dio_WritePort+0x62>
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	83 30       	cpi	r24, 0x03	; 3
    1c2e:	91 05       	cpc	r25, r1
    1c30:	81 f0       	breq	.+32     	; 0x1c52 <Dio_WritePort+0x6c>
    1c32:	13 c0       	rjmp	.+38     	; 0x1c5a <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    1c34:	eb e3       	ldi	r30, 0x3B	; 59
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	80 83       	st	Z, r24
    1c3c:	0e c0       	rjmp	.+28     	; 0x1c5a <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    1c3e:	e8 e3       	ldi	r30, 0x38	; 56
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	80 83       	st	Z, r24
    1c46:	09 c0       	rjmp	.+18     	; 0x1c5a <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    1c48:	e5 e3       	ldi	r30, 0x35	; 53
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	80 83       	st	Z, r24
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    1c52:	e2 e3       	ldi	r30, 0x32	; 50
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	80 83       	st	Z, r24
		break;
	}
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <SevenSeg_SegEnable>:

#include "SEVEN_SEGMENT.h"
#include <avr/io.h>
#include <avr/delay.h>

void SevenSeg_SegEnable(SegNumber seg) {
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <SevenSeg_SegEnable+0x6>
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	89 83       	std	Y+1, r24	; 0x01
	switch (seg) {
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	3b 83       	std	Y+3, r19	; 0x03
    1c7e:	2a 83       	std	Y+2, r18	; 0x02
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	9b 81       	ldd	r25, Y+3	; 0x03
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	91 05       	cpc	r25, r1
    1c88:	b1 f0       	breq	.+44     	; 0x1cb6 <SevenSeg_SegEnable+0x4e>
    1c8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c8e:	24 30       	cpi	r18, 0x04	; 4
    1c90:	31 05       	cpc	r19, r1
    1c92:	34 f4       	brge	.+12     	; 0x1ca0 <SevenSeg_SegEnable+0x38>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	e9 f0       	breq	.+58     	; 0x1cd8 <SevenSeg_SegEnable+0x70>
    1c9e:	4e c0       	rjmp	.+156    	; 0x1d3c <SevenSeg_SegEnable+0xd4>
    1ca0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca4:	2d 30       	cpi	r18, 0x0D	; 13
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	41 f1       	breq	.+80     	; 0x1cfa <SevenSeg_SegEnable+0x92>
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	8e 30       	cpi	r24, 0x0E	; 14
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	a1 f1       	breq	.+104    	; 0x1d1c <SevenSeg_SegEnable+0xb4>
    1cb4:	43 c0       	rjmp	.+134    	; 0x1d3c <SevenSeg_SegEnable+0xd4>
	case SEG_1:
		Dio_WriteChannel(SEG_2, 1);
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1cbe:	8d e0       	ldi	r24, 0x0D	; 13
    1cc0:	61 e0       	ldi	r22, 0x01	; 1
    1cc2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1cc6:	8e e0       	ldi	r24, 0x0E	; 14
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 0);
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    1cd6:	32 c0       	rjmp	.+100    	; 0x1d3c <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_2:
		Dio_WriteChannel(SEG_1, 1);
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1ce0:	8d e0       	ldi	r24, 0x0D	; 13
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1ce8:	8e e0       	ldi	r24, 0x0E	; 14
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_2, 0);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    1cf8:	21 c0       	rjmp	.+66     	; 0x1d3c <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_3:
		Dio_WriteChannel(SEG_2, 1);
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1d02:	83 e0       	ldi	r24, 0x03	; 3
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1d0a:	8e e0       	ldi	r24, 0x0E	; 14
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 0);
    1d12:	8d e0       	ldi	r24, 0x0D	; 13
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    1d1a:	10 c0       	rjmp	.+32     	; 0x1d3c <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_4:
		Dio_WriteChannel(SEG_2, 1);
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1d24:	8d e0       	ldi	r24, 0x0D	; 13
    1d26:	61 e0       	ldi	r22, 0x01	; 1
    1d28:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 0);
    1d34:	8e e0       	ldi	r24, 0x0E	; 14
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>

		break;

	}

}
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <SevenSeg_Send>:
//
//void SevenSeg_SegDisable(SegNumber seg){
//	Dio_WriteChannel(seg,1);
//}

void SevenSeg_Send(u8 num1, u8 num2, u8 num3, u8 num4) {
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	ec 97       	sbiw	r28, 0x3c	; 60
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	89 af       	std	Y+57, r24	; 0x39
    1d5e:	6a af       	std	Y+58, r22	; 0x3a
    1d60:	4b af       	std	Y+59, r20	; 0x3b
    1d62:	2c af       	std	Y+60, r18	; 0x3c

	SevenSeg_SegEnable(SEG_1);
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num1);
    1d6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d6c:	0e 94 9b 10 	call	0x2136	; 0x2136 <SevenSeg_SendOneSeg>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a8 ec       	ldi	r26, 0xC8	; 200
    1d76:	b2 e4       	ldi	r27, 0x42	; 66
    1d78:	8d ab       	std	Y+53, r24	; 0x35
    1d7a:	9e ab       	std	Y+54, r25	; 0x36
    1d7c:	af ab       	std	Y+55, r26	; 0x37
    1d7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6d a9       	ldd	r22, Y+53	; 0x35
    1d82:	7e a9       	ldd	r23, Y+54	; 0x36
    1d84:	8f a9       	ldd	r24, Y+55	; 0x37
    1d86:	98 ad       	ldd	r25, Y+56	; 0x38
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a e7       	ldi	r20, 0x7A	; 122
    1d8e:	55 e4       	ldi	r21, 0x45	; 69
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	89 ab       	std	Y+49, r24	; 0x31
    1d9a:	9a ab       	std	Y+50, r25	; 0x32
    1d9c:	ab ab       	std	Y+51, r26	; 0x33
    1d9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da0:	69 a9       	ldd	r22, Y+49	; 0x31
    1da2:	7a a9       	ldd	r23, Y+50	; 0x32
    1da4:	8b a9       	ldd	r24, Y+51	; 0x33
    1da6:	9c a9       	ldd	r25, Y+52	; 0x34
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <SevenSeg_Send+0x7a>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	98 ab       	std	Y+48, r25	; 0x30
    1dbe:	8f a7       	std	Y+47, r24	; 0x2f
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <SevenSeg_Send+0xf8>
	else if (__tmp > 65535)
    1dc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <SevenSeg_Send+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6d a9       	ldd	r22, Y+53	; 0x35
    1ddc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dde:	8f a9       	ldd	r24, Y+55	; 0x37
    1de0:	98 ad       	ldd	r25, Y+56	; 0x38
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	98 ab       	std	Y+48, r25	; 0x30
    1e00:	8f a7       	std	Y+47, r24	; 0x2f
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <SevenSeg_Send+0xda>
    1e04:	80 e9       	ldi	r24, 0x90	; 144
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	9e a7       	std	Y+46, r25	; 0x2e
    1e0a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <SevenSeg_Send+0xc8>
    1e14:	9e a7       	std	Y+46, r25	; 0x2e
    1e16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	98 ab       	std	Y+48, r25	; 0x30
    1e20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e24:	98 a9       	ldd	r25, Y+48	; 0x30
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <SevenSeg_Send+0xbc>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <SevenSeg_Send+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e30:	8b a9       	ldd	r24, Y+51	; 0x33
    1e32:	9c a9       	ldd	r25, Y+52	; 0x34
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	98 ab       	std	Y+48, r25	; 0x30
    1e3e:	8f a7       	std	Y+47, r24	; 0x2f
    1e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e42:	98 a9       	ldd	r25, Y+48	; 0x30
    1e44:	9c a7       	std	Y+44, r25	; 0x2c
    1e46:	8b a7       	std	Y+43, r24	; 0x2b
    1e48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <SevenSeg_Send+0x104>
    1e50:	9c a7       	std	Y+44, r25	; 0x2c
    1e52:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_2);
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num2);
    1e5a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e5c:	0e 94 9b 10 	call	0x2136	; 0x2136 <SevenSeg_SendOneSeg>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a8 ec       	ldi	r26, 0xC8	; 200
    1e66:	b2 e4       	ldi	r27, 0x42	; 66
    1e68:	8f a3       	std	Y+39, r24	; 0x27
    1e6a:	98 a7       	std	Y+40, r25	; 0x28
    1e6c:	a9 a7       	std	Y+41, r26	; 0x29
    1e6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	6f a1       	ldd	r22, Y+39	; 0x27
    1e72:	78 a5       	ldd	r23, Y+40	; 0x28
    1e74:	89 a5       	ldd	r24, Y+41	; 0x29
    1e76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	55 e4       	ldi	r21, 0x45	; 69
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8b a3       	std	Y+35, r24	; 0x23
    1e8a:	9c a3       	std	Y+36, r25	; 0x24
    1e8c:	ad a3       	std	Y+37, r26	; 0x25
    1e8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e90:	6b a1       	ldd	r22, Y+35	; 0x23
    1e92:	7c a1       	ldd	r23, Y+36	; 0x24
    1e94:	8d a1       	ldd	r24, Y+37	; 0x25
    1e96:	9e a1       	ldd	r25, Y+38	; 0x26
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <SevenSeg_Send+0x16a>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9a a3       	std	Y+34, r25	; 0x22
    1eae:	89 a3       	std	Y+33, r24	; 0x21
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <SevenSeg_Send+0x1e8>
	else if (__tmp > 65535)
    1eb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <SevenSeg_Send+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	6f a1       	ldd	r22, Y+39	; 0x27
    1ecc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ece:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9a a3       	std	Y+34, r25	; 0x22
    1ef0:	89 a3       	std	Y+33, r24	; 0x21
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <SevenSeg_Send+0x1ca>
    1ef4:	80 e9       	ldi	r24, 0x90	; 144
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	98 a3       	std	Y+32, r25	; 0x20
    1efa:	8f 8f       	std	Y+31, r24	; 0x1f
    1efc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1efe:	98 a1       	ldd	r25, Y+32	; 0x20
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <SevenSeg_Send+0x1b8>
    1f04:	98 a3       	std	Y+32, r25	; 0x20
    1f06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9a a3       	std	Y+34, r25	; 0x22
    1f10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	89 a1       	ldd	r24, Y+33	; 0x21
    1f14:	9a a1       	ldd	r25, Y+34	; 0x22
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <SevenSeg_Send+0x1ac>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <SevenSeg_Send+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f20:	8d a1       	ldd	r24, Y+37	; 0x25
    1f22:	9e a1       	ldd	r25, Y+38	; 0x26
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9a a3       	std	Y+34, r25	; 0x22
    1f2e:	89 a3       	std	Y+33, r24	; 0x21
    1f30:	89 a1       	ldd	r24, Y+33	; 0x21
    1f32:	9a a1       	ldd	r25, Y+34	; 0x22
    1f34:	9e 8f       	std	Y+30, r25	; 0x1e
    1f36:	8d 8f       	std	Y+29, r24	; 0x1d
    1f38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <SevenSeg_Send+0x1f4>
    1f40:	9e 8f       	std	Y+30, r25	; 0x1e
    1f42:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_3);
    1f44:	8d e0       	ldi	r24, 0x0D	; 13
    1f46:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num3);
    1f4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f4c:	0e 94 9b 10 	call	0x2136	; 0x2136 <SevenSeg_SendOneSeg>
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a8 ec       	ldi	r26, 0xC8	; 200
    1f56:	b2 e4       	ldi	r27, 0x42	; 66
    1f58:	89 8f       	std	Y+25, r24	; 0x19
    1f5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f60:	69 8d       	ldd	r22, Y+25	; 0x19
    1f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	55 e4       	ldi	r21, 0x45	; 69
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8d 8b       	std	Y+21, r24	; 0x15
    1f7a:	9e 8b       	std	Y+22, r25	; 0x16
    1f7c:	af 8b       	std	Y+23, r26	; 0x17
    1f7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f80:	6d 89       	ldd	r22, Y+21	; 0x15
    1f82:	7e 89       	ldd	r23, Y+22	; 0x16
    1f84:	8f 89       	ldd	r24, Y+23	; 0x17
    1f86:	98 8d       	ldd	r25, Y+24	; 0x18
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e8       	ldi	r20, 0x80	; 128
    1f8e:	5f e3       	ldi	r21, 0x3F	; 63
    1f90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f94:	88 23       	and	r24, r24
    1f96:	2c f4       	brge	.+10     	; 0x1fa2 <SevenSeg_Send+0x25a>
		__ticks = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9c 8b       	std	Y+20, r25	; 0x14
    1f9e:	8b 8b       	std	Y+19, r24	; 0x13
    1fa0:	3f c0       	rjmp	.+126    	; 0x2020 <SevenSeg_Send+0x2d8>
	else if (__tmp > 65535)
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	4c f5       	brge	.+82     	; 0x200c <SevenSeg_Send+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e2       	ldi	r20, 0x20	; 32
    1fc8:	51 e4       	ldi	r21, 0x41	; 65
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9c 8b       	std	Y+20, r25	; 0x14
    1fe0:	8b 8b       	std	Y+19, r24	; 0x13
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <SevenSeg_Send+0x2ba>
    1fe4:	80 e9       	ldi	r24, 0x90	; 144
    1fe6:	91 e0       	ldi	r25, 0x01	; 1
    1fe8:	9a 8b       	std	Y+18, r25	; 0x12
    1fea:	89 8b       	std	Y+17, r24	; 0x11
    1fec:	89 89       	ldd	r24, Y+17	; 0x11
    1fee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <SevenSeg_Send+0x2a8>
    1ff4:	9a 8b       	std	Y+18, r25	; 0x12
    1ff6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	8b 89       	ldd	r24, Y+19	; 0x13
    2004:	9c 89       	ldd	r25, Y+20	; 0x14
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	69 f7       	brne	.-38     	; 0x1fe4 <SevenSeg_Send+0x29c>
    200a:	14 c0       	rjmp	.+40     	; 0x2034 <SevenSeg_Send+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200c:	6d 89       	ldd	r22, Y+21	; 0x15
    200e:	7e 89       	ldd	r23, Y+22	; 0x16
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9c 8b       	std	Y+20, r25	; 0x14
    201e:	8b 8b       	std	Y+19, r24	; 0x13
    2020:	8b 89       	ldd	r24, Y+19	; 0x13
    2022:	9c 89       	ldd	r25, Y+20	; 0x14
    2024:	98 8b       	std	Y+16, r25	; 0x10
    2026:	8f 87       	std	Y+15, r24	; 0x0f
    2028:	8f 85       	ldd	r24, Y+15	; 0x0f
    202a:	98 89       	ldd	r25, Y+16	; 0x10
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <SevenSeg_Send+0x2e4>
    2030:	98 8b       	std	Y+16, r25	; 0x10
    2032:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_4);
    2034:	8e e0       	ldi	r24, 0x0E	; 14
    2036:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num4);
    203a:	8c ad       	ldd	r24, Y+60	; 0x3c
    203c:	0e 94 9b 10 	call	0x2136	; 0x2136 <SevenSeg_SendOneSeg>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a8 ec       	ldi	r26, 0xC8	; 200
    2046:	b2 e4       	ldi	r27, 0x42	; 66
    2048:	8b 87       	std	Y+11, r24	; 0x0b
    204a:	9c 87       	std	Y+12, r25	; 0x0c
    204c:	ad 87       	std	Y+13, r26	; 0x0d
    204e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	6b 85       	ldd	r22, Y+11	; 0x0b
    2052:	7c 85       	ldd	r23, Y+12	; 0x0c
    2054:	8d 85       	ldd	r24, Y+13	; 0x0d
    2056:	9e 85       	ldd	r25, Y+14	; 0x0e
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a e7       	ldi	r20, 0x7A	; 122
    205e:	55 e4       	ldi	r21, 0x45	; 69
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8f 83       	std	Y+7, r24	; 0x07
    206a:	98 87       	std	Y+8, r25	; 0x08
    206c:	a9 87       	std	Y+9, r26	; 0x09
    206e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <SevenSeg_Send+0x34a>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <SevenSeg_Send+0x3c8>
	else if (__tmp > 65535)
    2092:	6f 81       	ldd	r22, Y+7	; 0x07
    2094:	78 85       	ldd	r23, Y+8	; 0x08
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <SevenSeg_Send+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <SevenSeg_Send+0x3aa>
    20d4:	80 e9       	ldi	r24, 0x90	; 144
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <SevenSeg_Send+0x398>
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <SevenSeg_Send+0x38c>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <SevenSeg_Send+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <SevenSeg_Send+0x3d4>
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);

}
    2124:	ec 96       	adiw	r28, 0x3c	; 60
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <SevenSeg_SendOneSeg>:
void SevenSeg_SendOneSeg(u8 number) //SevenSeg_Type type ,
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	89 83       	std	Y+1, r24	; 0x01
//	SevenSeg_SegEnable(seg);
	Dio_WriteChannel(PB_0, GET_BIT(number, 0));
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	98 2f       	mov	r25, r24
    2146:	91 70       	andi	r25, 0x01	; 1
    2148:	88 e0       	ldi	r24, 0x08	; 8
    214a:	69 2f       	mov	r22, r25
    214c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(number, 1));
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	86 95       	lsr	r24
    2154:	98 2f       	mov	r25, r24
    2156:	91 70       	andi	r25, 0x01	; 1
    2158:	89 e0       	ldi	r24, 0x09	; 9
    215a:	69 2f       	mov	r22, r25
    215c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(number, 2));
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	86 95       	lsr	r24
    2164:	86 95       	lsr	r24
    2166:	98 2f       	mov	r25, r24
    2168:	91 70       	andi	r25, 0x01	; 1
    216a:	8a e0       	ldi	r24, 0x0A	; 10
    216c:	69 2f       	mov	r22, r25
    216e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(number, 3));
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	86 95       	lsr	r24
    2176:	86 95       	lsr	r24
    2178:	86 95       	lsr	r24
    217a:	98 2f       	mov	r25, r24
    217c:	91 70       	andi	r25, 0x01	; 1
    217e:	8c e0       	ldi	r24, 0x0C	; 12
    2180:	69 2f       	mov	r22, r25
    2182:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
}
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <Lcd_SendCMD>:
 *      Author: AhmedAbogabl
 */

#include "LCD.h"

void Lcd_SendCMD(u8 cmd) {
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	c1 56       	subi	r28, 0x61	; 97
    219c:	d0 40       	sbci	r29, 0x00	; 0
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	fe 01       	movw	r30, r28
    21aa:	ef 59       	subi	r30, 0x9F	; 159
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 83       	st	Z, r24
	// Set RS to command mode
	Dio_WriteChannel(LCD_RS, STD_LOW);
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>

	// Send the high nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 4));
    21b8:	fe 01       	movw	r30, r28
    21ba:	ef 59       	subi	r30, 0x9F	; 159
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 81       	ld	r24, Z
    21c0:	82 95       	swap	r24
    21c2:	8f 70       	andi	r24, 0x0F	; 15
    21c4:	98 2f       	mov	r25, r24
    21c6:	91 70       	andi	r25, 0x01	; 1
    21c8:	88 e0       	ldi	r24, 0x08	; 8
    21ca:	69 2f       	mov	r22, r25
    21cc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 5));
    21d0:	fe 01       	movw	r30, r28
    21d2:	ef 59       	subi	r30, 0x9F	; 159
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 81       	ld	r24, Z
    21d8:	82 95       	swap	r24
    21da:	86 95       	lsr	r24
    21dc:	87 70       	andi	r24, 0x07	; 7
    21de:	98 2f       	mov	r25, r24
    21e0:	91 70       	andi	r25, 0x01	; 1
    21e2:	89 e0       	ldi	r24, 0x09	; 9
    21e4:	69 2f       	mov	r22, r25
    21e6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 6));
    21ea:	fe 01       	movw	r30, r28
    21ec:	ef 59       	subi	r30, 0x9F	; 159
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	82 95       	swap	r24
    21f4:	86 95       	lsr	r24
    21f6:	86 95       	lsr	r24
    21f8:	83 70       	andi	r24, 0x03	; 3
    21fa:	98 2f       	mov	r25, r24
    21fc:	91 70       	andi	r25, 0x01	; 1
    21fe:	8a e0       	ldi	r24, 0x0A	; 10
    2200:	69 2f       	mov	r22, r25
    2202:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 7));
    2206:	fe 01       	movw	r30, r28
    2208:	ef 59       	subi	r30, 0x9F	; 159
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	98 2f       	mov	r25, r24
    2210:	99 1f       	adc	r25, r25
    2212:	99 27       	eor	r25, r25
    2214:	99 1f       	adc	r25, r25
    2216:	8c e0       	ldi	r24, 0x0C	; 12
    2218:	69 2f       	mov	r22, r25
    221a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGHT);
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    2226:	fe 01       	movw	r30, r28
    2228:	e3 5a       	subi	r30, 0xA3	; 163
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	bf e3       	ldi	r27, 0x3F	; 63
    2234:	80 83       	st	Z, r24
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	a2 83       	std	Z+2, r26	; 0x02
    223a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    223c:	8e 01       	movw	r16, r28
    223e:	07 5a       	subi	r16, 0xA7	; 167
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	fe 01       	movw	r30, r28
    2244:	e3 5a       	subi	r30, 0xA3	; 163
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	60 81       	ld	r22, Z
    224a:	71 81       	ldd	r23, Z+1	; 0x01
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	2b ea       	ldi	r18, 0xAB	; 171
    2252:	3a ea       	ldi	r19, 0xAA	; 170
    2254:	4a ea       	ldi	r20, 0xAA	; 170
    2256:	50 e4       	ldi	r21, 0x40	; 64
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	f8 01       	movw	r30, r16
    2262:	80 83       	st	Z, r24
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	a2 83       	std	Z+2, r26	; 0x02
    2268:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    226a:	fe 01       	movw	r30, r28
    226c:	e7 5a       	subi	r30, 0xA7	; 167
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e8       	ldi	r20, 0x80	; 128
    227e:	5f e3       	ldi	r21, 0x3F	; 63
    2280:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2284:	88 23       	and	r24, r24
    2286:	34 f4       	brge	.+12     	; 0x2294 <Lcd_SendCMD+0x106>
		__ticks = 1;
    2288:	fe 01       	movw	r30, r28
    228a:	e8 5a       	subi	r30, 0xA8	; 168
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	80 83       	st	Z, r24
    2292:	e0 c0       	rjmp	.+448    	; 0x2454 <Lcd_SendCMD+0x2c6>
	else if (__tmp > 255)
    2294:	fe 01       	movw	r30, r28
    2296:	e7 5a       	subi	r30, 0xA7	; 167
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4f e7       	ldi	r20, 0x7F	; 127
    22a8:	53 e4       	ldi	r21, 0x43	; 67
    22aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ae:	18 16       	cp	r1, r24
    22b0:	0c f0       	brlt	.+2      	; 0x22b4 <Lcd_SendCMD+0x126>
    22b2:	c0 c0       	rjmp	.+384    	; 0x2434 <Lcd_SendCMD+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    22b4:	fe 01       	movw	r30, r28
    22b6:	e3 5a       	subi	r30, 0xA3	; 163
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a e7       	ldi	r20, 0x7A	; 122
    22c8:	54 e4       	ldi	r21, 0x44	; 68
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	fe 01       	movw	r30, r28
    22d4:	ec 5a       	subi	r30, 0xAC	; 172
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 83       	st	Z, r24
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	a2 83       	std	Z+2, r26	; 0x02
    22de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e0:	8e 01       	movw	r16, r28
    22e2:	00 5b       	subi	r16, 0xB0	; 176
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
    22e6:	fe 01       	movw	r30, r28
    22e8:	ec 5a       	subi	r30, 0xAC	; 172
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	60 81       	ld	r22, Z
    22ee:	71 81       	ldd	r23, Z+1	; 0x01
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a e7       	ldi	r20, 0x7A	; 122
    22fa:	55 e4       	ldi	r21, 0x45	; 69
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	f8 01       	movw	r30, r16
    2306:	80 83       	st	Z, r24
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	a2 83       	std	Z+2, r26	; 0x02
    230c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230e:	fe 01       	movw	r30, r28
    2310:	e0 5b       	subi	r30, 0xB0	; 176
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	44 f4       	brge	.+16     	; 0x233c <Lcd_SendCMD+0x1ae>
		__ticks = 1;
    232c:	fe 01       	movw	r30, r28
    232e:	e2 5b       	subi	r30, 0xB2	; 178
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	64 c0       	rjmp	.+200    	; 0x2404 <Lcd_SendCMD+0x276>
	else if (__tmp > 65535)
    233c:	fe 01       	movw	r30, r28
    233e:	e0 5b       	subi	r30, 0xB0	; 176
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	0c f0       	brlt	.+2      	; 0x235c <Lcd_SendCMD+0x1ce>
    235a:	43 c0       	rjmp	.+134    	; 0x23e2 <Lcd_SendCMD+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	fe 01       	movw	r30, r28
    235e:	ec 5a       	subi	r30, 0xAC	; 172
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8e 01       	movw	r16, r28
    237c:	02 5b       	subi	r16, 0xB2	; 178
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	f8 01       	movw	r30, r16
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	80 83       	st	Z, r24
    2392:	1f c0       	rjmp	.+62     	; 0x23d2 <Lcd_SendCMD+0x244>
    2394:	fe 01       	movw	r30, r28
    2396:	e4 5b       	subi	r30, 0xB4	; 180
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 e9       	ldi	r24, 0x90	; 144
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
    23a2:	fe 01       	movw	r30, r28
    23a4:	e4 5b       	subi	r30, 0xB4	; 180
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <Lcd_SendCMD+0x21e>
    23b0:	fe 01       	movw	r30, r28
    23b2:	e4 5b       	subi	r30, 0xB4	; 180
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	de 01       	movw	r26, r28
    23bc:	a2 5b       	subi	r26, 0xB2	; 178
    23be:	bf 4f       	sbci	r27, 0xFF	; 255
    23c0:	fe 01       	movw	r30, r28
    23c2:	e2 5b       	subi	r30, 0xB2	; 178
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	9c 93       	st	X, r25
    23d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	fe 01       	movw	r30, r28
    23d4:	e2 5b       	subi	r30, 0xB2	; 178
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	d1 f6       	brne	.-76     	; 0x2394 <Lcd_SendCMD+0x206>
    23e0:	4b c0       	rjmp	.+150    	; 0x2478 <Lcd_SendCMD+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e2:	8e 01       	movw	r16, r28
    23e4:	02 5b       	subi	r16, 0xB2	; 178
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e0 5b       	subi	r30, 0xB0	; 176
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	f8 01       	movw	r30, r16
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	de 01       	movw	r26, r28
    2406:	a6 5b       	subi	r26, 0xB6	; 182
    2408:	bf 4f       	sbci	r27, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e2 5b       	subi	r30, 0xB2	; 178
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	11 96       	adiw	r26, 0x01	; 1
    2416:	9c 93       	st	X, r25
    2418:	8e 93       	st	-X, r24
    241a:	fe 01       	movw	r30, r28
    241c:	e6 5b       	subi	r30, 0xB6	; 182
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <Lcd_SendCMD+0x296>
    2428:	fe 01       	movw	r30, r28
    242a:	e6 5b       	subi	r30, 0xB6	; 182
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    2432:	22 c0       	rjmp	.+68     	; 0x2478 <Lcd_SendCMD+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2434:	8e 01       	movw	r16, r28
    2436:	08 5a       	subi	r16, 0xA8	; 168
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	fe 01       	movw	r30, r28
    243c:	e7 5a       	subi	r30, 0xA7	; 167
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	f8 01       	movw	r30, r16
    2452:	80 83       	st	Z, r24
    2454:	de 01       	movw	r26, r28
    2456:	a7 5b       	subi	r26, 0xB7	; 183
    2458:	bf 4f       	sbci	r27, 0xFF	; 255
    245a:	fe 01       	movw	r30, r28
    245c:	e8 5a       	subi	r30, 0xA8	; 168
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 81       	ld	r24, Z
    2462:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2464:	fe 01       	movw	r30, r28
    2466:	e7 5b       	subi	r30, 0xB7	; 183
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	8a 95       	dec	r24
    246e:	f1 f7       	brne	.-4      	; 0x246c <Lcd_SendCMD+0x2de>
    2470:	fe 01       	movw	r30, r28
    2472:	e7 5b       	subi	r30, 0xB7	; 183
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    2480:	fe 01       	movw	r30, r28
    2482:	eb 5b       	subi	r30, 0xBB	; 187
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	a0 e8       	ldi	r26, 0x80	; 128
    248c:	bf e3       	ldi	r27, 0x3F	; 63
    248e:	80 83       	st	Z, r24
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	a2 83       	std	Z+2, r26	; 0x02
    2494:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2496:	8e 01       	movw	r16, r28
    2498:	0f 5b       	subi	r16, 0xBF	; 191
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	fe 01       	movw	r30, r28
    249e:	eb 5b       	subi	r30, 0xBB	; 187
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	60 81       	ld	r22, Z
    24a4:	71 81       	ldd	r23, Z+1	; 0x01
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	93 81       	ldd	r25, Z+3	; 0x03
    24aa:	2b ea       	ldi	r18, 0xAB	; 171
    24ac:	3a ea       	ldi	r19, 0xAA	; 170
    24ae:	4a ea       	ldi	r20, 0xAA	; 170
    24b0:	50 e4       	ldi	r21, 0x40	; 64
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	f8 01       	movw	r30, r16
    24bc:	80 83       	st	Z, r24
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	a2 83       	std	Z+2, r26	; 0x02
    24c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 5b       	subi	r30, 0xBF	; 191
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	34 f4       	brge	.+12     	; 0x24ee <Lcd_SendCMD+0x360>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	fe 01       	movw	r30, r28
    24e6:	e0 5c       	subi	r30, 0xC0	; 192
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 83       	st	Z, r24
    24ec:	9d c0       	rjmp	.+314    	; 0x2628 <Lcd_SendCMD+0x49a>
	else if (__tmp > 255)
    24ee:	fe 01       	movw	r30, r28
    24f0:	ef 5b       	subi	r30, 0xBF	; 191
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	53 e4       	ldi	r21, 0x43	; 67
    2504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	0c f0       	brlt	.+2      	; 0x250e <Lcd_SendCMD+0x380>
    250c:	7e c0       	rjmp	.+252    	; 0x260a <Lcd_SendCMD+0x47c>
	{
		_delay_ms(__us / 1000.0);
    250e:	fe 01       	movw	r30, r28
    2510:	eb 5b       	subi	r30, 0xBB	; 187
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8c af       	std	Y+60, r24	; 0x3c
    252e:	9d af       	std	Y+61, r25	; 0x3d
    2530:	ae af       	std	Y+62, r26	; 0x3e
    2532:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6c ad       	ldd	r22, Y+60	; 0x3c
    2536:	7d ad       	ldd	r23, Y+61	; 0x3d
    2538:	8e ad       	ldd	r24, Y+62	; 0x3e
    253a:	9f ad       	ldd	r25, Y+63	; 0x3f
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a e7       	ldi	r20, 0x7A	; 122
    2542:	55 e4       	ldi	r21, 0x45	; 69
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	88 af       	std	Y+56, r24	; 0x38
    254e:	99 af       	std	Y+57, r25	; 0x39
    2550:	aa af       	std	Y+58, r26	; 0x3a
    2552:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2554:	68 ad       	ldd	r22, Y+56	; 0x38
    2556:	79 ad       	ldd	r23, Y+57	; 0x39
    2558:	8a ad       	ldd	r24, Y+58	; 0x3a
    255a:	9b ad       	ldd	r25, Y+59	; 0x3b
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <Lcd_SendCMD+0x3e8>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9f ab       	std	Y+55, r25	; 0x37
    2572:	8e ab       	std	Y+54, r24	; 0x36
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <Lcd_SendCMD+0x466>
	else if (__tmp > 65535)
    2576:	68 ad       	ldd	r22, Y+56	; 0x38
    2578:	79 ad       	ldd	r23, Y+57	; 0x39
    257a:	8a ad       	ldd	r24, Y+58	; 0x3a
    257c:	9b ad       	ldd	r25, Y+59	; 0x3b
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <Lcd_SendCMD+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2590:	7d ad       	ldd	r23, Y+61	; 0x3d
    2592:	8e ad       	ldd	r24, Y+62	; 0x3e
    2594:	9f ad       	ldd	r25, Y+63	; 0x3f
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9f ab       	std	Y+55, r25	; 0x37
    25b4:	8e ab       	std	Y+54, r24	; 0x36
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <Lcd_SendCMD+0x448>
    25b8:	80 e9       	ldi	r24, 0x90	; 144
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	9d ab       	std	Y+53, r25	; 0x35
    25be:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c0:	8c a9       	ldd	r24, Y+52	; 0x34
    25c2:	9d a9       	ldd	r25, Y+53	; 0x35
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <Lcd_SendCMD+0x436>
    25c8:	9d ab       	std	Y+53, r25	; 0x35
    25ca:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8e a9       	ldd	r24, Y+54	; 0x36
    25ce:	9f a9       	ldd	r25, Y+55	; 0x37
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9f ab       	std	Y+55, r25	; 0x37
    25d4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8e a9       	ldd	r24, Y+54	; 0x36
    25d8:	9f a9       	ldd	r25, Y+55	; 0x37
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <Lcd_SendCMD+0x42a>
    25de:	2d c0       	rjmp	.+90     	; 0x263a <Lcd_SendCMD+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	68 ad       	ldd	r22, Y+56	; 0x38
    25e2:	79 ad       	ldd	r23, Y+57	; 0x39
    25e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    25e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9f ab       	std	Y+55, r25	; 0x37
    25f2:	8e ab       	std	Y+54, r24	; 0x36
    25f4:	8e a9       	ldd	r24, Y+54	; 0x36
    25f6:	9f a9       	ldd	r25, Y+55	; 0x37
    25f8:	9b ab       	std	Y+51, r25	; 0x33
    25fa:	8a ab       	std	Y+50, r24	; 0x32
    25fc:	8a a9       	ldd	r24, Y+50	; 0x32
    25fe:	9b a9       	ldd	r25, Y+51	; 0x33
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <Lcd_SendCMD+0x472>
    2604:	9b ab       	std	Y+51, r25	; 0x33
    2606:	8a ab       	std	Y+50, r24	; 0x32
    2608:	18 c0       	rjmp	.+48     	; 0x263a <Lcd_SendCMD+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    260a:	fe 01       	movw	r30, r28
    260c:	ef 5b       	subi	r30, 0xBF	; 191
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	fe 01       	movw	r30, r28
    2622:	e0 5c       	subi	r30, 0xC0	; 192
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 83       	st	Z, r24
    2628:	fe 01       	movw	r30, r28
    262a:	e0 5c       	subi	r30, 0xC0	; 192
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 81       	ld	r24, Z
    2630:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2632:	89 a9       	ldd	r24, Y+49	; 0x31
    2634:	8a 95       	dec	r24
    2636:	f1 f7       	brne	.-4      	; 0x2634 <Lcd_SendCMD+0x4a6>
    2638:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 0));
    263a:	fe 01       	movw	r30, r28
    263c:	ef 59       	subi	r30, 0x9F	; 159
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	98 2f       	mov	r25, r24
    2644:	91 70       	andi	r25, 0x01	; 1
    2646:	88 e0       	ldi	r24, 0x08	; 8
    2648:	69 2f       	mov	r22, r25
    264a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 1));
    264e:	fe 01       	movw	r30, r28
    2650:	ef 59       	subi	r30, 0x9F	; 159
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	86 95       	lsr	r24
    2658:	98 2f       	mov	r25, r24
    265a:	91 70       	andi	r25, 0x01	; 1
    265c:	89 e0       	ldi	r24, 0x09	; 9
    265e:	69 2f       	mov	r22, r25
    2660:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 2));
    2664:	fe 01       	movw	r30, r28
    2666:	ef 59       	subi	r30, 0x9F	; 159
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	86 95       	lsr	r24
    266e:	86 95       	lsr	r24
    2670:	98 2f       	mov	r25, r24
    2672:	91 70       	andi	r25, 0x01	; 1
    2674:	8a e0       	ldi	r24, 0x0A	; 10
    2676:	69 2f       	mov	r22, r25
    2678:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 3));
    267c:	fe 01       	movw	r30, r28
    267e:	ef 59       	subi	r30, 0x9F	; 159
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	86 95       	lsr	r24
    2686:	86 95       	lsr	r24
    2688:	86 95       	lsr	r24
    268a:	98 2f       	mov	r25, r24
    268c:	91 70       	andi	r25, 0x01	; 1
    268e:	8c e0       	ldi	r24, 0x0C	; 12
    2690:	69 2f       	mov	r22, r25
    2692:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGHT);
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a0 e8       	ldi	r26, 0x80	; 128
    26a4:	bf e3       	ldi	r27, 0x3F	; 63
    26a6:	8d a7       	std	Y+45, r24	; 0x2d
    26a8:	9e a7       	std	Y+46, r25	; 0x2e
    26aa:	af a7       	std	Y+47, r26	; 0x2f
    26ac:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    26b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    26b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b4:	98 a9       	ldd	r25, Y+48	; 0x30
    26b6:	2b ea       	ldi	r18, 0xAB	; 171
    26b8:	3a ea       	ldi	r19, 0xAA	; 170
    26ba:	4a ea       	ldi	r20, 0xAA	; 170
    26bc:	50 e4       	ldi	r21, 0x40	; 64
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	89 a7       	std	Y+41, r24	; 0x29
    26c8:	9a a7       	std	Y+42, r25	; 0x2a
    26ca:	ab a7       	std	Y+43, r26	; 0x2b
    26cc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26ce:	69 a5       	ldd	r22, Y+41	; 0x29
    26d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    26d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    26d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	1c f4       	brge	.+6      	; 0x26ec <Lcd_SendCMD+0x55e>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	88 a7       	std	Y+40, r24	; 0x28
    26ea:	91 c0       	rjmp	.+290    	; 0x280e <Lcd_SendCMD+0x680>
	else if (__tmp > 255)
    26ec:	69 a5       	ldd	r22, Y+41	; 0x29
    26ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    26f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	53 e4       	ldi	r21, 0x43	; 67
    26fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	0c f0       	brlt	.+2      	; 0x2706 <Lcd_SendCMD+0x578>
    2704:	7b c0       	rjmp	.+246    	; 0x27fc <Lcd_SendCMD+0x66e>
	{
		_delay_ms(__us / 1000.0);
    2706:	6d a5       	ldd	r22, Y+45	; 0x2d
    2708:	7e a5       	ldd	r23, Y+46	; 0x2e
    270a:	8f a5       	ldd	r24, Y+47	; 0x2f
    270c:	98 a9       	ldd	r25, Y+48	; 0x30
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	54 e4       	ldi	r21, 0x44	; 68
    2716:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8c a3       	std	Y+36, r24	; 0x24
    2720:	9d a3       	std	Y+37, r25	; 0x25
    2722:	ae a3       	std	Y+38, r26	; 0x26
    2724:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2726:	6c a1       	ldd	r22, Y+36	; 0x24
    2728:	7d a1       	ldd	r23, Y+37	; 0x25
    272a:	8e a1       	ldd	r24, Y+38	; 0x26
    272c:	9f a1       	ldd	r25, Y+39	; 0x27
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a e7       	ldi	r20, 0x7A	; 122
    2734:	55 e4       	ldi	r21, 0x45	; 69
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	88 a3       	std	Y+32, r24	; 0x20
    2740:	99 a3       	std	Y+33, r25	; 0x21
    2742:	aa a3       	std	Y+34, r26	; 0x22
    2744:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2746:	68 a1       	ldd	r22, Y+32	; 0x20
    2748:	79 a1       	ldd	r23, Y+33	; 0x21
    274a:	8a a1       	ldd	r24, Y+34	; 0x22
    274c:	9b a1       	ldd	r25, Y+35	; 0x23
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	2c f4       	brge	.+10     	; 0x2768 <Lcd_SendCMD+0x5da>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9f 8f       	std	Y+31, r25	; 0x1f
    2764:	8e 8f       	std	Y+30, r24	; 0x1e
    2766:	3f c0       	rjmp	.+126    	; 0x27e6 <Lcd_SendCMD+0x658>
	else if (__tmp > 65535)
    2768:	68 a1       	ldd	r22, Y+32	; 0x20
    276a:	79 a1       	ldd	r23, Y+33	; 0x21
    276c:	8a a1       	ldd	r24, Y+34	; 0x22
    276e:	9b a1       	ldd	r25, Y+35	; 0x23
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	4c f5       	brge	.+82     	; 0x27d2 <Lcd_SendCMD+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2780:	6c a1       	ldd	r22, Y+36	; 0x24
    2782:	7d a1       	ldd	r23, Y+37	; 0x25
    2784:	8e a1       	ldd	r24, Y+38	; 0x26
    2786:	9f a1       	ldd	r25, Y+39	; 0x27
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9f 8f       	std	Y+31, r25	; 0x1f
    27a6:	8e 8f       	std	Y+30, r24	; 0x1e
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <Lcd_SendCMD+0x63a>
    27aa:	80 e9       	ldi	r24, 0x90	; 144
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	9d 8f       	std	Y+29, r25	; 0x1d
    27b0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <Lcd_SendCMD+0x628>
    27ba:	9d 8f       	std	Y+29, r25	; 0x1d
    27bc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	9f 8f       	std	Y+31, r25	; 0x1f
    27c6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <Lcd_SendCMD+0x61c>
    27d0:	24 c0       	rjmp	.+72     	; 0x281a <Lcd_SendCMD+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	68 a1       	ldd	r22, Y+32	; 0x20
    27d4:	79 a1       	ldd	r23, Y+33	; 0x21
    27d6:	8a a1       	ldd	r24, Y+34	; 0x22
    27d8:	9b a1       	ldd	r25, Y+35	; 0x23
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9f 8f       	std	Y+31, r25	; 0x1f
    27e4:	8e 8f       	std	Y+30, r24	; 0x1e
    27e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ea:	9b 8f       	std	Y+27, r25	; 0x1b
    27ec:	8a 8f       	std	Y+26, r24	; 0x1a
    27ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <Lcd_SendCMD+0x664>
    27f6:	9b 8f       	std	Y+27, r25	; 0x1b
    27f8:	8a 8f       	std	Y+26, r24	; 0x1a
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <Lcd_SendCMD+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27fc:	69 a5       	ldd	r22, Y+41	; 0x29
    27fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2800:	8b a5       	ldd	r24, Y+43	; 0x2b
    2802:	9c a5       	ldd	r25, Y+44	; 0x2c
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	88 a7       	std	Y+40, r24	; 0x28
    280e:	88 a5       	ldd	r24, Y+40	; 0x28
    2810:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2812:	89 8d       	ldd	r24, Y+25	; 0x19
    2814:	8a 95       	dec	r24
    2816:	f1 f7       	brne	.-4      	; 0x2814 <Lcd_SendCMD+0x686>
    2818:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a0 e8       	ldi	r26, 0x80	; 128
    2828:	bf e3       	ldi	r27, 0x3F	; 63
    282a:	8d 8b       	std	Y+21, r24	; 0x15
    282c:	9e 8b       	std	Y+22, r25	; 0x16
    282e:	af 8b       	std	Y+23, r26	; 0x17
    2830:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2832:	6d 89       	ldd	r22, Y+21	; 0x15
    2834:	7e 89       	ldd	r23, Y+22	; 0x16
    2836:	8f 89       	ldd	r24, Y+23	; 0x17
    2838:	98 8d       	ldd	r25, Y+24	; 0x18
    283a:	2b ea       	ldi	r18, 0xAB	; 171
    283c:	3a ea       	ldi	r19, 0xAA	; 170
    283e:	4a ea       	ldi	r20, 0xAA	; 170
    2840:	50 e4       	ldi	r21, 0x40	; 64
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	89 8b       	std	Y+17, r24	; 0x11
    284c:	9a 8b       	std	Y+18, r25	; 0x12
    284e:	ab 8b       	std	Y+19, r26	; 0x13
    2850:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2852:	69 89       	ldd	r22, Y+17	; 0x11
    2854:	7a 89       	ldd	r23, Y+18	; 0x12
    2856:	8b 89       	ldd	r24, Y+19	; 0x13
    2858:	9c 89       	ldd	r25, Y+20	; 0x14
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	1c f4       	brge	.+6      	; 0x2870 <Lcd_SendCMD+0x6e2>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	88 8b       	std	Y+16, r24	; 0x10
    286e:	91 c0       	rjmp	.+290    	; 0x2992 <Lcd_SendCMD+0x804>
	else if (__tmp > 255)
    2870:	69 89       	ldd	r22, Y+17	; 0x11
    2872:	7a 89       	ldd	r23, Y+18	; 0x12
    2874:	8b 89       	ldd	r24, Y+19	; 0x13
    2876:	9c 89       	ldd	r25, Y+20	; 0x14
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	53 e4       	ldi	r21, 0x43	; 67
    2880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	0c f0       	brlt	.+2      	; 0x288a <Lcd_SendCMD+0x6fc>
    2888:	7b c0       	rjmp	.+246    	; 0x2980 <Lcd_SendCMD+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    288a:	6d 89       	ldd	r22, Y+21	; 0x15
    288c:	7e 89       	ldd	r23, Y+22	; 0x16
    288e:	8f 89       	ldd	r24, Y+23	; 0x17
    2890:	98 8d       	ldd	r25, Y+24	; 0x18
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	4a e7       	ldi	r20, 0x7A	; 122
    2898:	54 e4       	ldi	r21, 0x44	; 68
    289a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	8c 87       	std	Y+12, r24	; 0x0c
    28a4:	9d 87       	std	Y+13, r25	; 0x0d
    28a6:	ae 87       	std	Y+14, r26	; 0x0e
    28a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    28ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    28ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    28b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a e7       	ldi	r20, 0x7A	; 122
    28b8:	55 e4       	ldi	r21, 0x45	; 69
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	88 87       	std	Y+8, r24	; 0x08
    28c4:	99 87       	std	Y+9, r25	; 0x09
    28c6:	aa 87       	std	Y+10, r26	; 0x0a
    28c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28ca:	68 85       	ldd	r22, Y+8	; 0x08
    28cc:	79 85       	ldd	r23, Y+9	; 0x09
    28ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e8       	ldi	r20, 0x80	; 128
    28d8:	5f e3       	ldi	r21, 0x3F	; 63
    28da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28de:	88 23       	and	r24, r24
    28e0:	2c f4       	brge	.+10     	; 0x28ec <Lcd_SendCMD+0x75e>
		__ticks = 1;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9f 83       	std	Y+7, r25	; 0x07
    28e8:	8e 83       	std	Y+6, r24	; 0x06
    28ea:	3f c0       	rjmp	.+126    	; 0x296a <Lcd_SendCMD+0x7dc>
	else if (__tmp > 65535)
    28ec:	68 85       	ldd	r22, Y+8	; 0x08
    28ee:	79 85       	ldd	r23, Y+9	; 0x09
    28f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	57 e4       	ldi	r21, 0x47	; 71
    28fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	4c f5       	brge	.+82     	; 0x2956 <Lcd_SendCMD+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	6c 85       	ldd	r22, Y+12	; 0x0c
    2906:	7d 85       	ldd	r23, Y+13	; 0x0d
    2908:	8e 85       	ldd	r24, Y+14	; 0x0e
    290a:	9f 85       	ldd	r25, Y+15	; 0x0f
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e2       	ldi	r20, 0x20	; 32
    2912:	51 e4       	ldi	r21, 0x41	; 65
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9f 83       	std	Y+7, r25	; 0x07
    292a:	8e 83       	std	Y+6, r24	; 0x06
    292c:	0f c0       	rjmp	.+30     	; 0x294c <Lcd_SendCMD+0x7be>
    292e:	80 e9       	ldi	r24, 0x90	; 144
    2930:	91 e0       	ldi	r25, 0x01	; 1
    2932:	9d 83       	std	Y+5, r25	; 0x05
    2934:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2936:	8c 81       	ldd	r24, Y+4	; 0x04
    2938:	9d 81       	ldd	r25, Y+5	; 0x05
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <Lcd_SendCMD+0x7ac>
    293e:	9d 83       	std	Y+5, r25	; 0x05
    2940:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	8e 81       	ldd	r24, Y+6	; 0x06
    2944:	9f 81       	ldd	r25, Y+7	; 0x07
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	9f 83       	std	Y+7, r25	; 0x07
    294a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294c:	8e 81       	ldd	r24, Y+6	; 0x06
    294e:	9f 81       	ldd	r25, Y+7	; 0x07
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	69 f7       	brne	.-38     	; 0x292e <Lcd_SendCMD+0x7a0>
    2954:	24 c0       	rjmp	.+72     	; 0x299e <Lcd_SendCMD+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2956:	68 85       	ldd	r22, Y+8	; 0x08
    2958:	79 85       	ldd	r23, Y+9	; 0x09
    295a:	8a 85       	ldd	r24, Y+10	; 0x0a
    295c:	9b 85       	ldd	r25, Y+11	; 0x0b
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9f 83       	std	Y+7, r25	; 0x07
    2968:	8e 83       	std	Y+6, r24	; 0x06
    296a:	8e 81       	ldd	r24, Y+6	; 0x06
    296c:	9f 81       	ldd	r25, Y+7	; 0x07
    296e:	9b 83       	std	Y+3, r25	; 0x03
    2970:	8a 83       	std	Y+2, r24	; 0x02
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	9b 81       	ldd	r25, Y+3	; 0x03
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <Lcd_SendCMD+0x7e8>
    297a:	9b 83       	std	Y+3, r25	; 0x03
    297c:	8a 83       	std	Y+2, r24	; 0x02
    297e:	0f c0       	rjmp	.+30     	; 0x299e <Lcd_SendCMD+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2980:	69 89       	ldd	r22, Y+17	; 0x11
    2982:	7a 89       	ldd	r23, Y+18	; 0x12
    2984:	8b 89       	ldd	r24, Y+19	; 0x13
    2986:	9c 89       	ldd	r25, Y+20	; 0x14
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	88 8b       	std	Y+16, r24	; 0x10
    2992:	88 89       	ldd	r24, Y+16	; 0x10
    2994:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	8a 95       	dec	r24
    299a:	f1 f7       	brne	.-4      	; 0x2998 <Lcd_SendCMD+0x80a>
    299c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);  // Wait for the command to execute
}
    299e:	cf 59       	subi	r28, 0x9F	; 159
    29a0:	df 4f       	sbci	r29, 0xFF	; 255
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	cd bf       	out	0x3d, r28	; 61
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	1f 91       	pop	r17
    29b2:	0f 91       	pop	r16
    29b4:	08 95       	ret

000029b6 <Lcd_SendData>:

void Lcd_SendData(u8 data) {
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	c1 56       	subi	r28, 0x61	; 97
    29c4:	d0 40       	sbci	r29, 0x00	; 0
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	fe 01       	movw	r30, r28
    29d2:	ef 59       	subi	r30, 0x9F	; 159
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 83       	st	Z, r24

	// Set RS to data mode
//	SET_BIT(PORTA, LCD_RS);
	Dio_WriteChannel(LCD_RS, STD_HIGHT);
    29d8:	83 e0       	ldi	r24, 0x03	; 3
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	// Send the high nibble

	Dio_WriteChannel(PB_0, GET_BIT(data, 4));
    29e0:	fe 01       	movw	r30, r28
    29e2:	ef 59       	subi	r30, 0x9F	; 159
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	82 95       	swap	r24
    29ea:	8f 70       	andi	r24, 0x0F	; 15
    29ec:	98 2f       	mov	r25, r24
    29ee:	91 70       	andi	r25, 0x01	; 1
    29f0:	88 e0       	ldi	r24, 0x08	; 8
    29f2:	69 2f       	mov	r22, r25
    29f4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 5));
    29f8:	fe 01       	movw	r30, r28
    29fa:	ef 59       	subi	r30, 0x9F	; 159
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	82 95       	swap	r24
    2a02:	86 95       	lsr	r24
    2a04:	87 70       	andi	r24, 0x07	; 7
    2a06:	98 2f       	mov	r25, r24
    2a08:	91 70       	andi	r25, 0x01	; 1
    2a0a:	89 e0       	ldi	r24, 0x09	; 9
    2a0c:	69 2f       	mov	r22, r25
    2a0e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 6));
    2a12:	fe 01       	movw	r30, r28
    2a14:	ef 59       	subi	r30, 0x9F	; 159
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	82 95       	swap	r24
    2a1c:	86 95       	lsr	r24
    2a1e:	86 95       	lsr	r24
    2a20:	83 70       	andi	r24, 0x03	; 3
    2a22:	98 2f       	mov	r25, r24
    2a24:	91 70       	andi	r25, 0x01	; 1
    2a26:	8a e0       	ldi	r24, 0x0A	; 10
    2a28:	69 2f       	mov	r22, r25
    2a2a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 7));
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ef 59       	subi	r30, 0x9F	; 159
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	98 2f       	mov	r25, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	99 27       	eor	r25, r25
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	8c e0       	ldi	r24, 0x0C	; 12
    2a40:	69 2f       	mov	r22, r25
    2a42:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_EN, STD_HIGHT);
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e3 5a       	subi	r30, 0xA3	; 163
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	a0 e8       	ldi	r26, 0x80	; 128
    2a5a:	bf e3       	ldi	r27, 0x3F	; 63
    2a5c:	80 83       	st	Z, r24
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	a2 83       	std	Z+2, r26	; 0x02
    2a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a64:	8e 01       	movw	r16, r28
    2a66:	07 5a       	subi	r16, 0xA7	; 167
    2a68:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e3 5a       	subi	r30, 0xA3	; 163
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	60 81       	ld	r22, Z
    2a72:	71 81       	ldd	r23, Z+1	; 0x01
    2a74:	82 81       	ldd	r24, Z+2	; 0x02
    2a76:	93 81       	ldd	r25, Z+3	; 0x03
    2a78:	2b ea       	ldi	r18, 0xAB	; 171
    2a7a:	3a ea       	ldi	r19, 0xAA	; 170
    2a7c:	4a ea       	ldi	r20, 0xAA	; 170
    2a7e:	50 e4       	ldi	r21, 0x40	; 64
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	f8 01       	movw	r30, r16
    2a8a:	80 83       	st	Z, r24
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	a2 83       	std	Z+2, r26	; 0x02
    2a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a92:	fe 01       	movw	r30, r28
    2a94:	e7 5a       	subi	r30, 0xA7	; 167
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e8       	ldi	r20, 0x80	; 128
    2aa6:	5f e3       	ldi	r21, 0x3F	; 63
    2aa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aac:	88 23       	and	r24, r24
    2aae:	34 f4       	brge	.+12     	; 0x2abc <Lcd_SendData+0x106>
		__ticks = 1;
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	e8 5a       	subi	r30, 0xA8	; 168
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	80 83       	st	Z, r24
    2aba:	e0 c0       	rjmp	.+448    	; 0x2c7c <Lcd_SendData+0x2c6>
	else if (__tmp > 255)
    2abc:	fe 01       	movw	r30, r28
    2abe:	e7 5a       	subi	r30, 0xA7	; 167
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4f e7       	ldi	r20, 0x7F	; 127
    2ad0:	53 e4       	ldi	r21, 0x43	; 67
    2ad2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad6:	18 16       	cp	r1, r24
    2ad8:	0c f0       	brlt	.+2      	; 0x2adc <Lcd_SendData+0x126>
    2ada:	c0 c0       	rjmp	.+384    	; 0x2c5c <Lcd_SendData+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    2adc:	fe 01       	movw	r30, r28
    2ade:	e3 5a       	subi	r30, 0xA3	; 163
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	54 e4       	ldi	r21, 0x44	; 68
    2af2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	fe 01       	movw	r30, r28
    2afc:	ec 5a       	subi	r30, 0xAC	; 172
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 83       	st	Z, r24
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	a2 83       	std	Z+2, r26	; 0x02
    2b06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b08:	8e 01       	movw	r16, r28
    2b0a:	00 5b       	subi	r16, 0xB0	; 176
    2b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0e:	fe 01       	movw	r30, r28
    2b10:	ec 5a       	subi	r30, 0xAC	; 172
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a e7       	ldi	r20, 0x7A	; 122
    2b22:	55 e4       	ldi	r21, 0x45	; 69
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	80 83       	st	Z, r24
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	a2 83       	std	Z+2, r26	; 0x02
    2b34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b36:	fe 01       	movw	r30, r28
    2b38:	e0 5b       	subi	r30, 0xB0	; 176
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	60 81       	ld	r22, Z
    2b3e:	71 81       	ldd	r23, Z+1	; 0x01
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	44 f4       	brge	.+16     	; 0x2b64 <Lcd_SendData+0x1ae>
		__ticks = 1;
    2b54:	fe 01       	movw	r30, r28
    2b56:	e2 5b       	subi	r30, 0xB2	; 178
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
    2b62:	64 c0       	rjmp	.+200    	; 0x2c2c <Lcd_SendData+0x276>
	else if (__tmp > 65535)
    2b64:	fe 01       	movw	r30, r28
    2b66:	e0 5b       	subi	r30, 0xB0	; 176
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	60 81       	ld	r22, Z
    2b6c:	71 81       	ldd	r23, Z+1	; 0x01
    2b6e:	82 81       	ldd	r24, Z+2	; 0x02
    2b70:	93 81       	ldd	r25, Z+3	; 0x03
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <Lcd_SendData+0x1ce>
    2b82:	43 c0       	rjmp	.+134    	; 0x2c0a <Lcd_SendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b84:	fe 01       	movw	r30, r28
    2b86:	ec 5a       	subi	r30, 0xAC	; 172
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8e 01       	movw	r16, r28
    2ba4:	02 5b       	subi	r16, 0xB2	; 178
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	1f c0       	rjmp	.+62     	; 0x2bfa <Lcd_SendData+0x244>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e4 5b       	subi	r30, 0xB4	; 180
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 e9       	ldi	r24, 0x90	; 144
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e4 5b       	subi	r30, 0xB4	; 180
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <Lcd_SendData+0x21e>
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e4 5b       	subi	r30, 0xB4	; 180
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be2:	de 01       	movw	r26, r28
    2be4:	a2 5b       	subi	r26, 0xB2	; 178
    2be6:	bf 4f       	sbci	r27, 0xFF	; 255
    2be8:	fe 01       	movw	r30, r28
    2bea:	e2 5b       	subi	r30, 0xB2	; 178
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	11 96       	adiw	r26, 0x01	; 1
    2bf6:	9c 93       	st	X, r25
    2bf8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e2 5b       	subi	r30, 0xB2	; 178
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	d1 f6       	brne	.-76     	; 0x2bbc <Lcd_SendData+0x206>
    2c08:	4b c0       	rjmp	.+150    	; 0x2ca0 <Lcd_SendData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0a:	8e 01       	movw	r16, r28
    2c0c:	02 5b       	subi	r16, 0xB2	; 178
    2c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c10:	fe 01       	movw	r30, r28
    2c12:	e0 5b       	subi	r30, 0xB0	; 176
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	60 81       	ld	r22, Z
    2c18:	71 81       	ldd	r23, Z+1	; 0x01
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	f8 01       	movw	r30, r16
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	80 83       	st	Z, r24
    2c2c:	de 01       	movw	r26, r28
    2c2e:	a6 5b       	subi	r26, 0xB6	; 182
    2c30:	bf 4f       	sbci	r27, 0xFF	; 255
    2c32:	fe 01       	movw	r30, r28
    2c34:	e2 5b       	subi	r30, 0xB2	; 178
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	11 96       	adiw	r26, 0x01	; 1
    2c3e:	9c 93       	st	X, r25
    2c40:	8e 93       	st	-X, r24
    2c42:	fe 01       	movw	r30, r28
    2c44:	e6 5b       	subi	r30, 0xB6	; 182
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <Lcd_SendData+0x296>
    2c50:	fe 01       	movw	r30, r28
    2c52:	e6 5b       	subi	r30, 0xB6	; 182
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	80 83       	st	Z, r24
    2c5a:	22 c0       	rjmp	.+68     	; 0x2ca0 <Lcd_SendData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c5c:	8e 01       	movw	r16, r28
    2c5e:	08 5a       	subi	r16, 0xA8	; 168
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	fe 01       	movw	r30, r28
    2c64:	e7 5a       	subi	r30, 0xA7	; 167
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	60 81       	ld	r22, Z
    2c6a:	71 81       	ldd	r23, Z+1	; 0x01
    2c6c:	82 81       	ldd	r24, Z+2	; 0x02
    2c6e:	93 81       	ldd	r25, Z+3	; 0x03
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	f8 01       	movw	r30, r16
    2c7a:	80 83       	st	Z, r24
    2c7c:	de 01       	movw	r26, r28
    2c7e:	a7 5b       	subi	r26, 0xB7	; 183
    2c80:	bf 4f       	sbci	r27, 0xFF	; 255
    2c82:	fe 01       	movw	r30, r28
    2c84:	e8 5a       	subi	r30, 0xA8	; 168
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e7 5b       	subi	r30, 0xB7	; 183
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	8a 95       	dec	r24
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <Lcd_SendData+0x2de>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e7 5b       	subi	r30, 0xB7	; 183
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    2ca0:	82 e0       	ldi	r24, 0x02	; 2
    2ca2:	60 e0       	ldi	r22, 0x00	; 0
    2ca4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    2ca8:	fe 01       	movw	r30, r28
    2caa:	eb 5b       	subi	r30, 0xBB	; 187
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	a0 e8       	ldi	r26, 0x80	; 128
    2cb4:	bf e3       	ldi	r27, 0x3F	; 63
    2cb6:	80 83       	st	Z, r24
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	a2 83       	std	Z+2, r26	; 0x02
    2cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cbe:	8e 01       	movw	r16, r28
    2cc0:	0f 5b       	subi	r16, 0xBF	; 191
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	eb 5b       	subi	r30, 0xBB	; 187
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	2b ea       	ldi	r18, 0xAB	; 171
    2cd4:	3a ea       	ldi	r19, 0xAA	; 170
    2cd6:	4a ea       	ldi	r20, 0xAA	; 170
    2cd8:	50 e4       	ldi	r21, 0x40	; 64
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	f8 01       	movw	r30, r16
    2ce4:	80 83       	st	Z, r24
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	a2 83       	std	Z+2, r26	; 0x02
    2cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cec:	fe 01       	movw	r30, r28
    2cee:	ef 5b       	subi	r30, 0xBF	; 191
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e8       	ldi	r20, 0x80	; 128
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	34 f4       	brge	.+12     	; 0x2d16 <Lcd_SendData+0x360>
		__ticks = 1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e0 5c       	subi	r30, 0xC0	; 192
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 83       	st	Z, r24
    2d14:	9d c0       	rjmp	.+314    	; 0x2e50 <Lcd_SendData+0x49a>
	else if (__tmp > 255)
    2d16:	fe 01       	movw	r30, r28
    2d18:	ef 5b       	subi	r30, 0xBF	; 191
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4f e7       	ldi	r20, 0x7F	; 127
    2d2a:	53 e4       	ldi	r21, 0x43	; 67
    2d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	0c f0       	brlt	.+2      	; 0x2d36 <Lcd_SendData+0x380>
    2d34:	7e c0       	rjmp	.+252    	; 0x2e32 <Lcd_SendData+0x47c>
	{
		_delay_ms(__us / 1000.0);
    2d36:	fe 01       	movw	r30, r28
    2d38:	eb 5b       	subi	r30, 0xBB	; 187
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	60 81       	ld	r22, Z
    2d3e:	71 81       	ldd	r23, Z+1	; 0x01
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a e7       	ldi	r20, 0x7A	; 122
    2d4a:	54 e4       	ldi	r21, 0x44	; 68
    2d4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	8c af       	std	Y+60, r24	; 0x3c
    2d56:	9d af       	std	Y+61, r25	; 0x3d
    2d58:	ae af       	std	Y+62, r26	; 0x3e
    2d5a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d60:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d62:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	4a e7       	ldi	r20, 0x7A	; 122
    2d6a:	55 e4       	ldi	r21, 0x45	; 69
    2d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	88 af       	std	Y+56, r24	; 0x38
    2d76:	99 af       	std	Y+57, r25	; 0x39
    2d78:	aa af       	std	Y+58, r26	; 0x3a
    2d7a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2d7c:	68 ad       	ldd	r22, Y+56	; 0x38
    2d7e:	79 ad       	ldd	r23, Y+57	; 0x39
    2d80:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d82:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	40 e8       	ldi	r20, 0x80	; 128
    2d8a:	5f e3       	ldi	r21, 0x3F	; 63
    2d8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d90:	88 23       	and	r24, r24
    2d92:	2c f4       	brge	.+10     	; 0x2d9e <Lcd_SendData+0x3e8>
		__ticks = 1;
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	9f ab       	std	Y+55, r25	; 0x37
    2d9a:	8e ab       	std	Y+54, r24	; 0x36
    2d9c:	3f c0       	rjmp	.+126    	; 0x2e1c <Lcd_SendData+0x466>
	else if (__tmp > 65535)
    2d9e:	68 ad       	ldd	r22, Y+56	; 0x38
    2da0:	79 ad       	ldd	r23, Y+57	; 0x39
    2da2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2da4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	3f ef       	ldi	r19, 0xFF	; 255
    2daa:	4f e7       	ldi	r20, 0x7F	; 127
    2dac:	57 e4       	ldi	r21, 0x47	; 71
    2dae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db2:	18 16       	cp	r1, r24
    2db4:	4c f5       	brge	.+82     	; 0x2e08 <Lcd_SendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2db8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2dba:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e2       	ldi	r20, 0x20	; 32
    2dc4:	51 e4       	ldi	r21, 0x41	; 65
    2dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	bc 01       	movw	r22, r24
    2dd0:	cd 01       	movw	r24, r26
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	9f ab       	std	Y+55, r25	; 0x37
    2ddc:	8e ab       	std	Y+54, r24	; 0x36
    2dde:	0f c0       	rjmp	.+30     	; 0x2dfe <Lcd_SendData+0x448>
    2de0:	80 e9       	ldi	r24, 0x90	; 144
    2de2:	91 e0       	ldi	r25, 0x01	; 1
    2de4:	9d ab       	std	Y+53, r25	; 0x35
    2de6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2de8:	8c a9       	ldd	r24, Y+52	; 0x34
    2dea:	9d a9       	ldd	r25, Y+53	; 0x35
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <Lcd_SendData+0x436>
    2df0:	9d ab       	std	Y+53, r25	; 0x35
    2df2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df4:	8e a9       	ldd	r24, Y+54	; 0x36
    2df6:	9f a9       	ldd	r25, Y+55	; 0x37
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	9f ab       	std	Y+55, r25	; 0x37
    2dfc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfe:	8e a9       	ldd	r24, Y+54	; 0x36
    2e00:	9f a9       	ldd	r25, Y+55	; 0x37
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	69 f7       	brne	.-38     	; 0x2de0 <Lcd_SendData+0x42a>
    2e06:	2d c0       	rjmp	.+90     	; 0x2e62 <Lcd_SendData+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e08:	68 ad       	ldd	r22, Y+56	; 0x38
    2e0a:	79 ad       	ldd	r23, Y+57	; 0x39
    2e0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	9f ab       	std	Y+55, r25	; 0x37
    2e1a:	8e ab       	std	Y+54, r24	; 0x36
    2e1c:	8e a9       	ldd	r24, Y+54	; 0x36
    2e1e:	9f a9       	ldd	r25, Y+55	; 0x37
    2e20:	9b ab       	std	Y+51, r25	; 0x33
    2e22:	8a ab       	std	Y+50, r24	; 0x32
    2e24:	8a a9       	ldd	r24, Y+50	; 0x32
    2e26:	9b a9       	ldd	r25, Y+51	; 0x33
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <Lcd_SendData+0x472>
    2e2c:	9b ab       	std	Y+51, r25	; 0x33
    2e2e:	8a ab       	std	Y+50, r24	; 0x32
    2e30:	18 c0       	rjmp	.+48     	; 0x2e62 <Lcd_SendData+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e32:	fe 01       	movw	r30, r28
    2e34:	ef 5b       	subi	r30, 0xBF	; 191
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e0 5c       	subi	r30, 0xC0	; 192
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 83       	st	Z, r24
    2e50:	fe 01       	movw	r30, r28
    2e52:	e0 5c       	subi	r30, 0xC0	; 192
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 81       	ld	r24, Z
    2e58:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e5a:	89 a9       	ldd	r24, Y+49	; 0x31
    2e5c:	8a 95       	dec	r24
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <Lcd_SendData+0x4a6>
    2e60:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(data, 0));
    2e62:	fe 01       	movw	r30, r28
    2e64:	ef 59       	subi	r30, 0x9F	; 159
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	80 81       	ld	r24, Z
    2e6a:	98 2f       	mov	r25, r24
    2e6c:	91 70       	andi	r25, 0x01	; 1
    2e6e:	88 e0       	ldi	r24, 0x08	; 8
    2e70:	69 2f       	mov	r22, r25
    2e72:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 1));
    2e76:	fe 01       	movw	r30, r28
    2e78:	ef 59       	subi	r30, 0x9F	; 159
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	86 95       	lsr	r24
    2e80:	98 2f       	mov	r25, r24
    2e82:	91 70       	andi	r25, 0x01	; 1
    2e84:	89 e0       	ldi	r24, 0x09	; 9
    2e86:	69 2f       	mov	r22, r25
    2e88:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 2));
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ef 59       	subi	r30, 0x9F	; 159
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	86 95       	lsr	r24
    2e96:	86 95       	lsr	r24
    2e98:	98 2f       	mov	r25, r24
    2e9a:	91 70       	andi	r25, 0x01	; 1
    2e9c:	8a e0       	ldi	r24, 0x0A	; 10
    2e9e:	69 2f       	mov	r22, r25
    2ea0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 3));
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ef 59       	subi	r30, 0x9F	; 159
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	86 95       	lsr	r24
    2eae:	86 95       	lsr	r24
    2eb0:	86 95       	lsr	r24
    2eb2:	98 2f       	mov	r25, r24
    2eb4:	91 70       	andi	r25, 0x01	; 1
    2eb6:	8c e0       	ldi	r24, 0x0C	; 12
    2eb8:	69 2f       	mov	r22, r25
    2eba:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGHT);
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	61 e0       	ldi	r22, 0x01	; 1
    2ec2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a0 e8       	ldi	r26, 0x80	; 128
    2ecc:	bf e3       	ldi	r27, 0x3F	; 63
    2ece:	8d a7       	std	Y+45, r24	; 0x2d
    2ed0:	9e a7       	std	Y+46, r25	; 0x2e
    2ed2:	af a7       	std	Y+47, r26	; 0x2f
    2ed4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ed6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ed8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2edc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ede:	2b ea       	ldi	r18, 0xAB	; 171
    2ee0:	3a ea       	ldi	r19, 0xAA	; 170
    2ee2:	4a ea       	ldi	r20, 0xAA	; 170
    2ee4:	50 e4       	ldi	r21, 0x40	; 64
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	89 a7       	std	Y+41, r24	; 0x29
    2ef0:	9a a7       	std	Y+42, r25	; 0x2a
    2ef2:	ab a7       	std	Y+43, r26	; 0x2b
    2ef4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ef6:	69 a5       	ldd	r22, Y+41	; 0x29
    2ef8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2efa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2efc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	40 e8       	ldi	r20, 0x80	; 128
    2f04:	5f e3       	ldi	r21, 0x3F	; 63
    2f06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f0a:	88 23       	and	r24, r24
    2f0c:	1c f4       	brge	.+6      	; 0x2f14 <Lcd_SendData+0x55e>
		__ticks = 1;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	88 a7       	std	Y+40, r24	; 0x28
    2f12:	91 c0       	rjmp	.+290    	; 0x3036 <Lcd_SendData+0x680>
	else if (__tmp > 255)
    2f14:	69 a5       	ldd	r22, Y+41	; 0x29
    2f16:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4f e7       	ldi	r20, 0x7F	; 127
    2f22:	53 e4       	ldi	r21, 0x43	; 67
    2f24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	0c f0       	brlt	.+2      	; 0x2f2e <Lcd_SendData+0x578>
    2f2c:	7b c0       	rjmp	.+246    	; 0x3024 <Lcd_SendData+0x66e>
	{
		_delay_ms(__us / 1000.0);
    2f2e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f30:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f34:	98 a9       	ldd	r25, Y+48	; 0x30
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	4a e7       	ldi	r20, 0x7A	; 122
    2f3c:	54 e4       	ldi	r21, 0x44	; 68
    2f3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	8c a3       	std	Y+36, r24	; 0x24
    2f48:	9d a3       	std	Y+37, r25	; 0x25
    2f4a:	ae a3       	std	Y+38, r26	; 0x26
    2f4c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4e:	6c a1       	ldd	r22, Y+36	; 0x24
    2f50:	7d a1       	ldd	r23, Y+37	; 0x25
    2f52:	8e a1       	ldd	r24, Y+38	; 0x26
    2f54:	9f a1       	ldd	r25, Y+39	; 0x27
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	4a e7       	ldi	r20, 0x7A	; 122
    2f5c:	55 e4       	ldi	r21, 0x45	; 69
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	88 a3       	std	Y+32, r24	; 0x20
    2f68:	99 a3       	std	Y+33, r25	; 0x21
    2f6a:	aa a3       	std	Y+34, r26	; 0x22
    2f6c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2f6e:	68 a1       	ldd	r22, Y+32	; 0x20
    2f70:	79 a1       	ldd	r23, Y+33	; 0x21
    2f72:	8a a1       	ldd	r24, Y+34	; 0x22
    2f74:	9b a1       	ldd	r25, Y+35	; 0x23
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e8       	ldi	r20, 0x80	; 128
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f82:	88 23       	and	r24, r24
    2f84:	2c f4       	brge	.+10     	; 0x2f90 <Lcd_SendData+0x5da>
		__ticks = 1;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	9f 8f       	std	Y+31, r25	; 0x1f
    2f8c:	8e 8f       	std	Y+30, r24	; 0x1e
    2f8e:	3f c0       	rjmp	.+126    	; 0x300e <Lcd_SendData+0x658>
	else if (__tmp > 65535)
    2f90:	68 a1       	ldd	r22, Y+32	; 0x20
    2f92:	79 a1       	ldd	r23, Y+33	; 0x21
    2f94:	8a a1       	ldd	r24, Y+34	; 0x22
    2f96:	9b a1       	ldd	r25, Y+35	; 0x23
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	3f ef       	ldi	r19, 0xFF	; 255
    2f9c:	4f e7       	ldi	r20, 0x7F	; 127
    2f9e:	57 e4       	ldi	r21, 0x47	; 71
    2fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa4:	18 16       	cp	r1, r24
    2fa6:	4c f5       	brge	.+82     	; 0x2ffa <Lcd_SendData+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa8:	6c a1       	ldd	r22, Y+36	; 0x24
    2faa:	7d a1       	ldd	r23, Y+37	; 0x25
    2fac:	8e a1       	ldd	r24, Y+38	; 0x26
    2fae:	9f a1       	ldd	r25, Y+39	; 0x27
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e2       	ldi	r20, 0x20	; 32
    2fb6:	51 e4       	ldi	r21, 0x41	; 65
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	bc 01       	movw	r22, r24
    2fc2:	cd 01       	movw	r24, r26
    2fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9f 8f       	std	Y+31, r25	; 0x1f
    2fce:	8e 8f       	std	Y+30, r24	; 0x1e
    2fd0:	0f c0       	rjmp	.+30     	; 0x2ff0 <Lcd_SendData+0x63a>
    2fd2:	80 e9       	ldi	r24, 0x90	; 144
    2fd4:	91 e0       	ldi	r25, 0x01	; 1
    2fd6:	9d 8f       	std	Y+29, r25	; 0x1d
    2fd8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	f1 f7       	brne	.-4      	; 0x2fde <Lcd_SendData+0x628>
    2fe2:	9d 8f       	std	Y+29, r25	; 0x1d
    2fe4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fe8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	9f 8f       	std	Y+31, r25	; 0x1f
    2fee:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	69 f7       	brne	.-38     	; 0x2fd2 <Lcd_SendData+0x61c>
    2ff8:	24 c0       	rjmp	.+72     	; 0x3042 <Lcd_SendData+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffa:	68 a1       	ldd	r22, Y+32	; 0x20
    2ffc:	79 a1       	ldd	r23, Y+33	; 0x21
    2ffe:	8a a1       	ldd	r24, Y+34	; 0x22
    3000:	9b a1       	ldd	r25, Y+35	; 0x23
    3002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	9f 8f       	std	Y+31, r25	; 0x1f
    300c:	8e 8f       	std	Y+30, r24	; 0x1e
    300e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3010:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3012:	9b 8f       	std	Y+27, r25	; 0x1b
    3014:	8a 8f       	std	Y+26, r24	; 0x1a
    3016:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3018:	9b 8d       	ldd	r25, Y+27	; 0x1b
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	f1 f7       	brne	.-4      	; 0x301a <Lcd_SendData+0x664>
    301e:	9b 8f       	std	Y+27, r25	; 0x1b
    3020:	8a 8f       	std	Y+26, r24	; 0x1a
    3022:	0f c0       	rjmp	.+30     	; 0x3042 <Lcd_SendData+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3024:	69 a5       	ldd	r22, Y+41	; 0x29
    3026:	7a a5       	ldd	r23, Y+42	; 0x2a
    3028:	8b a5       	ldd	r24, Y+43	; 0x2b
    302a:	9c a5       	ldd	r25, Y+44	; 0x2c
    302c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	88 a7       	std	Y+40, r24	; 0x28
    3036:	88 a5       	ldd	r24, Y+40	; 0x28
    3038:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    303a:	89 8d       	ldd	r24, Y+25	; 0x19
    303c:	8a 95       	dec	r24
    303e:	f1 f7       	brne	.-4      	; 0x303c <Lcd_SendData+0x686>
    3040:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3042:	82 e0       	ldi	r24, 0x02	; 2
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a0 e2       	ldi	r26, 0x20	; 32
    3050:	b1 e4       	ldi	r27, 0x41	; 65
    3052:	8d 8b       	std	Y+21, r24	; 0x15
    3054:	9e 8b       	std	Y+22, r25	; 0x16
    3056:	af 8b       	std	Y+23, r26	; 0x17
    3058:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    305a:	6d 89       	ldd	r22, Y+21	; 0x15
    305c:	7e 89       	ldd	r23, Y+22	; 0x16
    305e:	8f 89       	ldd	r24, Y+23	; 0x17
    3060:	98 8d       	ldd	r25, Y+24	; 0x18
    3062:	2b ea       	ldi	r18, 0xAB	; 171
    3064:	3a ea       	ldi	r19, 0xAA	; 170
    3066:	4a ea       	ldi	r20, 0xAA	; 170
    3068:	50 e4       	ldi	r21, 0x40	; 64
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	89 8b       	std	Y+17, r24	; 0x11
    3074:	9a 8b       	std	Y+18, r25	; 0x12
    3076:	ab 8b       	std	Y+19, r26	; 0x13
    3078:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    307a:	69 89       	ldd	r22, Y+17	; 0x11
    307c:	7a 89       	ldd	r23, Y+18	; 0x12
    307e:	8b 89       	ldd	r24, Y+19	; 0x13
    3080:	9c 89       	ldd	r25, Y+20	; 0x14
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e8       	ldi	r20, 0x80	; 128
    3088:	5f e3       	ldi	r21, 0x3F	; 63
    308a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    308e:	88 23       	and	r24, r24
    3090:	1c f4       	brge	.+6      	; 0x3098 <Lcd_SendData+0x6e2>
		__ticks = 1;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	88 8b       	std	Y+16, r24	; 0x10
    3096:	91 c0       	rjmp	.+290    	; 0x31ba <Lcd_SendData+0x804>
	else if (__tmp > 255)
    3098:	69 89       	ldd	r22, Y+17	; 0x11
    309a:	7a 89       	ldd	r23, Y+18	; 0x12
    309c:	8b 89       	ldd	r24, Y+19	; 0x13
    309e:	9c 89       	ldd	r25, Y+20	; 0x14
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	53 e4       	ldi	r21, 0x43	; 67
    30a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	0c f0       	brlt	.+2      	; 0x30b2 <Lcd_SendData+0x6fc>
    30b0:	7b c0       	rjmp	.+246    	; 0x31a8 <Lcd_SendData+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    30b2:	6d 89       	ldd	r22, Y+21	; 0x15
    30b4:	7e 89       	ldd	r23, Y+22	; 0x16
    30b6:	8f 89       	ldd	r24, Y+23	; 0x17
    30b8:	98 8d       	ldd	r25, Y+24	; 0x18
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	4a e7       	ldi	r20, 0x7A	; 122
    30c0:	54 e4       	ldi	r21, 0x44	; 68
    30c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	8c 87       	std	Y+12, r24	; 0x0c
    30cc:	9d 87       	std	Y+13, r25	; 0x0d
    30ce:	ae 87       	std	Y+14, r26	; 0x0e
    30d0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    30d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    30d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    30d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a e7       	ldi	r20, 0x7A	; 122
    30e0:	55 e4       	ldi	r21, 0x45	; 69
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	88 87       	std	Y+8, r24	; 0x08
    30ec:	99 87       	std	Y+9, r25	; 0x09
    30ee:	aa 87       	std	Y+10, r26	; 0x0a
    30f0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30f2:	68 85       	ldd	r22, Y+8	; 0x08
    30f4:	79 85       	ldd	r23, Y+9	; 0x09
    30f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <Lcd_SendData+0x75e>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9f 83       	std	Y+7, r25	; 0x07
    3110:	8e 83       	std	Y+6, r24	; 0x06
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <Lcd_SendData+0x7dc>
	else if (__tmp > 65535)
    3114:	68 85       	ldd	r22, Y+8	; 0x08
    3116:	79 85       	ldd	r23, Y+9	; 0x09
    3118:	8a 85       	ldd	r24, Y+10	; 0x0a
    311a:	9b 85       	ldd	r25, Y+11	; 0x0b
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <Lcd_SendData+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	6c 85       	ldd	r22, Y+12	; 0x0c
    312e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3130:	8e 85       	ldd	r24, Y+14	; 0x0e
    3132:	9f 85       	ldd	r25, Y+15	; 0x0f
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9f 83       	std	Y+7, r25	; 0x07
    3152:	8e 83       	std	Y+6, r24	; 0x06
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <Lcd_SendData+0x7be>
    3156:	80 e9       	ldi	r24, 0x90	; 144
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	9d 83       	std	Y+5, r25	; 0x05
    315c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    315e:	8c 81       	ldd	r24, Y+4	; 0x04
    3160:	9d 81       	ldd	r25, Y+5	; 0x05
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <Lcd_SendData+0x7ac>
    3166:	9d 83       	std	Y+5, r25	; 0x05
    3168:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	8e 81       	ldd	r24, Y+6	; 0x06
    316c:	9f 81       	ldd	r25, Y+7	; 0x07
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	9f 83       	std	Y+7, r25	; 0x07
    3172:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	8e 81       	ldd	r24, Y+6	; 0x06
    3176:	9f 81       	ldd	r25, Y+7	; 0x07
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <Lcd_SendData+0x7a0>
    317c:	24 c0       	rjmp	.+72     	; 0x31c6 <Lcd_SendData+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	68 85       	ldd	r22, Y+8	; 0x08
    3180:	79 85       	ldd	r23, Y+9	; 0x09
    3182:	8a 85       	ldd	r24, Y+10	; 0x0a
    3184:	9b 85       	ldd	r25, Y+11	; 0x0b
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9f 83       	std	Y+7, r25	; 0x07
    3190:	8e 83       	std	Y+6, r24	; 0x06
    3192:	8e 81       	ldd	r24, Y+6	; 0x06
    3194:	9f 81       	ldd	r25, Y+7	; 0x07
    3196:	9b 83       	std	Y+3, r25	; 0x03
    3198:	8a 83       	std	Y+2, r24	; 0x02
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	9b 81       	ldd	r25, Y+3	; 0x03
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <Lcd_SendData+0x7e8>
    31a2:	9b 83       	std	Y+3, r25	; 0x03
    31a4:	8a 83       	std	Y+2, r24	; 0x02
    31a6:	0f c0       	rjmp	.+30     	; 0x31c6 <Lcd_SendData+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31a8:	69 89       	ldd	r22, Y+17	; 0x11
    31aa:	7a 89       	ldd	r23, Y+18	; 0x12
    31ac:	8b 89       	ldd	r24, Y+19	; 0x13
    31ae:	9c 89       	ldd	r25, Y+20	; 0x14
    31b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	88 8b       	std	Y+16, r24	; 0x10
    31ba:	88 89       	ldd	r24, Y+16	; 0x10
    31bc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	8a 95       	dec	r24
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <Lcd_SendData+0x80a>
    31c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);  // Wait for the data to be displayed
}
    31c6:	cf 59       	subi	r28, 0x9F	; 159
    31c8:	df 4f       	sbci	r29, 0xFF	; 255
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	08 95       	ret

000031de <Lcd_GoTo>:

void Lcd_GoTo(u8 row,u8 col){
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <Lcd_GoTo+0x6>
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <Lcd_GoTo+0x8>
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	6a 83       	std	Y+2, r22	; 0x02
	col--;
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	81 50       	subi	r24, 0x01	; 1
    31f2:	8a 83       	std	Y+2, r24	; 0x02
	switch (row){
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	28 2f       	mov	r18, r24
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	3c 83       	std	Y+4, r19	; 0x04
    31fc:	2b 83       	std	Y+3, r18	; 0x03
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	9c 81       	ldd	r25, Y+4	; 0x04
    3202:	82 30       	cpi	r24, 0x02	; 2
    3204:	91 05       	cpc	r25, r1
    3206:	d9 f0       	breq	.+54     	; 0x323e <Lcd_GoTo+0x60>
    3208:	2b 81       	ldd	r18, Y+3	; 0x03
    320a:	3c 81       	ldd	r19, Y+4	; 0x04
    320c:	23 30       	cpi	r18, 0x03	; 3
    320e:	31 05       	cpc	r19, r1
    3210:	34 f4       	brge	.+12     	; 0x321e <Lcd_GoTo+0x40>
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	91 05       	cpc	r25, r1
    321a:	61 f0       	breq	.+24     	; 0x3234 <Lcd_GoTo+0x56>
    321c:	1e c0       	rjmp	.+60     	; 0x325a <Lcd_GoTo+0x7c>
    321e:	2b 81       	ldd	r18, Y+3	; 0x03
    3220:	3c 81       	ldd	r19, Y+4	; 0x04
    3222:	23 30       	cpi	r18, 0x03	; 3
    3224:	31 05       	cpc	r19, r1
    3226:	81 f0       	breq	.+32     	; 0x3248 <Lcd_GoTo+0x6a>
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	9c 81       	ldd	r25, Y+4	; 0x04
    322c:	84 30       	cpi	r24, 0x04	; 4
    322e:	91 05       	cpc	r25, r1
    3230:	81 f0       	breq	.+32     	; 0x3252 <Lcd_GoTo+0x74>
    3232:	13 c0       	rjmp	.+38     	; 0x325a <Lcd_GoTo+0x7c>
	        case ROW1:
	        	Lcd_SendCMD(0x80+col);
    3234:	8a 81       	ldd	r24, Y+2	; 0x02
    3236:	80 58       	subi	r24, 0x80	; 128
    3238:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
    323c:	0e c0       	rjmp	.+28     	; 0x325a <Lcd_GoTo+0x7c>
	        break;
	        case ROW2:
	        	Lcd_SendCMD(0xC0+col);
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	80 54       	subi	r24, 0x40	; 64
    3242:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
    3246:	09 c0       	rjmp	.+18     	; 0x325a <Lcd_GoTo+0x7c>
	        break;
	        case ROW3:
	        	Lcd_SendCMD(0x94+col);
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	8c 56       	subi	r24, 0x6C	; 108
    324c:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
    3250:	04 c0       	rjmp	.+8      	; 0x325a <Lcd_GoTo+0x7c>
	        break;
	        case ROW4:
	        	Lcd_SendCMD(0xD4+col);
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	8c 52       	subi	r24, 0x2C	; 44
    3256:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
	        break;
	        default:break;

	    }
}
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	08 95       	ret

00003268 <Lcd_PutChar>:

void Lcd_PutChar (u8 character)
{
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	0f 92       	push	r0
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
    3272:	89 83       	std	Y+1, r24	; 0x01
	Lcd_SendData(character);
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	0e 94 db 14 	call	0x29b6	; 0x29b6 <Lcd_SendData>
}
    327a:	0f 90       	pop	r0
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <Lcd_PutInt>:

void Lcd_PutInt(u32 Number)
{
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	00 d0       	rcall	.+0      	; 0x3288 <Lcd_PutInt+0x6>
    3288:	00 d0       	rcall	.+0      	; 0x328a <Lcd_PutInt+0x8>
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	69 83       	std	Y+1, r22	; 0x01
    3290:	7a 83       	std	Y+2, r23	; 0x02
    3292:	8b 83       	std	Y+3, r24	; 0x03
    3294:	9c 83       	std	Y+4, r25	; 0x04

	if(Number == 0 )
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	ab 81       	ldd	r26, Y+3	; 0x03
    329c:	bc 81       	ldd	r27, Y+4	; 0x04
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	a1 05       	cpc	r26, r1
    32a2:	b1 05       	cpc	r27, r1
    32a4:	19 f1       	breq	.+70     	; 0x32ec <Lcd_PutInt+0x6a>
		return ;
	else
		Lcd_PutInt(Number/10);
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	ab 81       	ldd	r26, Y+3	; 0x03
    32ac:	bc 81       	ldd	r27, Y+4	; 0x04
    32ae:	2a e0       	ldi	r18, 0x0A	; 10
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	bc 01       	movw	r22, r24
    32b8:	cd 01       	movw	r24, r26
    32ba:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__udivmodsi4>
    32be:	da 01       	movw	r26, r20
    32c0:	c9 01       	movw	r24, r18
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	0e 94 41 19 	call	0x3282	; 0x3282 <Lcd_PutInt>
	///if(Number<255)
	 Lcd_SendData((Number%10)+0x30);
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	ab 81       	ldd	r26, Y+3	; 0x03
    32d0:	bc 81       	ldd	r27, Y+4	; 0x04
    32d2:	2a e0       	ldi	r18, 0x0A	; 10
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	bc 01       	movw	r22, r24
    32dc:	cd 01       	movw	r24, r26
    32de:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__udivmodsi4>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	80 5d       	subi	r24, 0xD0	; 208
    32e8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <Lcd_SendData>
}
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <Lcd_Init>:
void Lcd_Init(void) {
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	c6 54       	subi	r28, 0x46	; 70
    3308:	d0 40       	sbci	r29, 0x00	; 0
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	fe 01       	movw	r30, r28
    3316:	ed 5b       	subi	r30, 0xBD	; 189
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	a8 e4       	ldi	r26, 0x48	; 72
    3320:	b2 e4       	ldi	r27, 0x42	; 66
    3322:	80 83       	st	Z, r24
    3324:	91 83       	std	Z+1, r25	; 0x01
    3326:	a2 83       	std	Z+2, r26	; 0x02
    3328:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332a:	8e 01       	movw	r16, r28
    332c:	01 5c       	subi	r16, 0xC1	; 193
    332e:	1f 4f       	sbci	r17, 0xFF	; 255
    3330:	fe 01       	movw	r30, r28
    3332:	ed 5b       	subi	r30, 0xBD	; 189
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	60 81       	ld	r22, Z
    3338:	71 81       	ldd	r23, Z+1	; 0x01
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	4a e7       	ldi	r20, 0x7A	; 122
    3344:	55 e4       	ldi	r21, 0x45	; 69
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	f8 01       	movw	r30, r16
    3350:	80 83       	st	Z, r24
    3352:	91 83       	std	Z+1, r25	; 0x01
    3354:	a2 83       	std	Z+2, r26	; 0x02
    3356:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3358:	fe 01       	movw	r30, r28
    335a:	ff 96       	adiw	r30, 0x3f	; 63
    335c:	60 81       	ld	r22, Z
    335e:	71 81       	ldd	r23, Z+1	; 0x01
    3360:	82 81       	ldd	r24, Z+2	; 0x02
    3362:	93 81       	ldd	r25, Z+3	; 0x03
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e8       	ldi	r20, 0x80	; 128
    336a:	5f e3       	ldi	r21, 0x3F	; 63
    336c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3370:	88 23       	and	r24, r24
    3372:	2c f4       	brge	.+10     	; 0x337e <Lcd_Init+0x84>
		__ticks = 1;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	9e af       	std	Y+62, r25	; 0x3e
    337a:	8d af       	std	Y+61, r24	; 0x3d
    337c:	46 c0       	rjmp	.+140    	; 0x340a <Lcd_Init+0x110>
	else if (__tmp > 65535)
    337e:	fe 01       	movw	r30, r28
    3380:	ff 96       	adiw	r30, 0x3f	; 63
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	64 f5       	brge	.+88     	; 0x33f2 <Lcd_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	fe 01       	movw	r30, r28
    339c:	ed 5b       	subi	r30, 0xBD	; 189
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e2       	ldi	r20, 0x20	; 32
    33ae:	51 e4       	ldi	r21, 0x41	; 65
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	9e af       	std	Y+62, r25	; 0x3e
    33c6:	8d af       	std	Y+61, r24	; 0x3d
    33c8:	0f c0       	rjmp	.+30     	; 0x33e8 <Lcd_Init+0xee>
    33ca:	80 e9       	ldi	r24, 0x90	; 144
    33cc:	91 e0       	ldi	r25, 0x01	; 1
    33ce:	9c af       	std	Y+60, r25	; 0x3c
    33d0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    33d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <Lcd_Init+0xdc>
    33da:	9c af       	std	Y+60, r25	; 0x3c
    33dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33de:	8d ad       	ldd	r24, Y+61	; 0x3d
    33e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	9e af       	std	Y+62, r25	; 0x3e
    33e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    33ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	69 f7       	brne	.-38     	; 0x33ca <Lcd_Init+0xd0>
    33f0:	16 c0       	rjmp	.+44     	; 0x341e <Lcd_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f2:	fe 01       	movw	r30, r28
    33f4:	ff 96       	adiw	r30, 0x3f	; 63
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	9e af       	std	Y+62, r25	; 0x3e
    3408:	8d af       	std	Y+61, r24	; 0x3d
    340a:	8d ad       	ldd	r24, Y+61	; 0x3d
    340c:	9e ad       	ldd	r25, Y+62	; 0x3e
    340e:	9a af       	std	Y+58, r25	; 0x3a
    3410:	89 af       	std	Y+57, r24	; 0x39
    3412:	89 ad       	ldd	r24, Y+57	; 0x39
    3414:	9a ad       	ldd	r25, Y+58	; 0x3a
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <Lcd_Init+0x11c>
    341a:	9a af       	std	Y+58, r25	; 0x3a
    341c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	Lcd_SendCMD(HOME);
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
	Lcd_SendCMD(FOUR_BIT);
    3424:	88 e2       	ldi	r24, 0x28	; 40
    3426:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	a0 e8       	ldi	r26, 0x80	; 128
    3430:	bf e3       	ldi	r27, 0x3F	; 63
    3432:	8d ab       	std	Y+53, r24	; 0x35
    3434:	9e ab       	std	Y+54, r25	; 0x36
    3436:	af ab       	std	Y+55, r26	; 0x37
    3438:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343a:	6d a9       	ldd	r22, Y+53	; 0x35
    343c:	7e a9       	ldd	r23, Y+54	; 0x36
    343e:	8f a9       	ldd	r24, Y+55	; 0x37
    3440:	98 ad       	ldd	r25, Y+56	; 0x38
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	4a e7       	ldi	r20, 0x7A	; 122
    3448:	55 e4       	ldi	r21, 0x45	; 69
    344a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	89 ab       	std	Y+49, r24	; 0x31
    3454:	9a ab       	std	Y+50, r25	; 0x32
    3456:	ab ab       	std	Y+51, r26	; 0x33
    3458:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    345a:	69 a9       	ldd	r22, Y+49	; 0x31
    345c:	7a a9       	ldd	r23, Y+50	; 0x32
    345e:	8b a9       	ldd	r24, Y+51	; 0x33
    3460:	9c a9       	ldd	r25, Y+52	; 0x34
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e8       	ldi	r20, 0x80	; 128
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    346e:	88 23       	and	r24, r24
    3470:	2c f4       	brge	.+10     	; 0x347c <Lcd_Init+0x182>
		__ticks = 1;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	98 ab       	std	Y+48, r25	; 0x30
    3478:	8f a7       	std	Y+47, r24	; 0x2f
    347a:	3f c0       	rjmp	.+126    	; 0x34fa <Lcd_Init+0x200>
	else if (__tmp > 65535)
    347c:	69 a9       	ldd	r22, Y+49	; 0x31
    347e:	7a a9       	ldd	r23, Y+50	; 0x32
    3480:	8b a9       	ldd	r24, Y+51	; 0x33
    3482:	9c a9       	ldd	r25, Y+52	; 0x34
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	3f ef       	ldi	r19, 0xFF	; 255
    3488:	4f e7       	ldi	r20, 0x7F	; 127
    348a:	57 e4       	ldi	r21, 0x47	; 71
    348c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3490:	18 16       	cp	r1, r24
    3492:	4c f5       	brge	.+82     	; 0x34e6 <Lcd_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3494:	6d a9       	ldd	r22, Y+53	; 0x35
    3496:	7e a9       	ldd	r23, Y+54	; 0x36
    3498:	8f a9       	ldd	r24, Y+55	; 0x37
    349a:	98 ad       	ldd	r25, Y+56	; 0x38
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	40 e2       	ldi	r20, 0x20	; 32
    34a2:	51 e4       	ldi	r21, 0x41	; 65
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	98 ab       	std	Y+48, r25	; 0x30
    34ba:	8f a7       	std	Y+47, r24	; 0x2f
    34bc:	0f c0       	rjmp	.+30     	; 0x34dc <Lcd_Init+0x1e2>
    34be:	80 e9       	ldi	r24, 0x90	; 144
    34c0:	91 e0       	ldi	r25, 0x01	; 1
    34c2:	9e a7       	std	Y+46, r25	; 0x2e
    34c4:	8d a7       	std	Y+45, r24	; 0x2d
    34c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    34c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <Lcd_Init+0x1d0>
    34ce:	9e a7       	std	Y+46, r25	; 0x2e
    34d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d4:	98 a9       	ldd	r25, Y+48	; 0x30
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	98 ab       	std	Y+48, r25	; 0x30
    34da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    34de:	98 a9       	ldd	r25, Y+48	; 0x30
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	69 f7       	brne	.-38     	; 0x34be <Lcd_Init+0x1c4>
    34e4:	14 c0       	rjmp	.+40     	; 0x350e <Lcd_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e6:	69 a9       	ldd	r22, Y+49	; 0x31
    34e8:	7a a9       	ldd	r23, Y+50	; 0x32
    34ea:	8b a9       	ldd	r24, Y+51	; 0x33
    34ec:	9c a9       	ldd	r25, Y+52	; 0x34
    34ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	98 ab       	std	Y+48, r25	; 0x30
    34f8:	8f a7       	std	Y+47, r24	; 0x2f
    34fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    34fc:	98 a9       	ldd	r25, Y+48	; 0x30
    34fe:	9c a7       	std	Y+44, r25	; 0x2c
    3500:	8b a7       	std	Y+43, r24	; 0x2b
    3502:	8b a5       	ldd	r24, Y+43	; 0x2b
    3504:	9c a5       	ldd	r25, Y+44	; 0x2c
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <Lcd_Init+0x20c>
    350a:	9c a7       	std	Y+44, r25	; 0x2c
    350c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Lcd_SendCMD(CURSER_ON);
    350e:	8f e0       	ldi	r24, 0x0F	; 15
    3510:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	a0 e8       	ldi	r26, 0x80	; 128
    351a:	bf e3       	ldi	r27, 0x3F	; 63
    351c:	8f a3       	std	Y+39, r24	; 0x27
    351e:	98 a7       	std	Y+40, r25	; 0x28
    3520:	a9 a7       	std	Y+41, r26	; 0x29
    3522:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3524:	6f a1       	ldd	r22, Y+39	; 0x27
    3526:	78 a5       	ldd	r23, Y+40	; 0x28
    3528:	89 a5       	ldd	r24, Y+41	; 0x29
    352a:	9a a5       	ldd	r25, Y+42	; 0x2a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	4a e7       	ldi	r20, 0x7A	; 122
    3532:	55 e4       	ldi	r21, 0x45	; 69
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	8b a3       	std	Y+35, r24	; 0x23
    353e:	9c a3       	std	Y+36, r25	; 0x24
    3540:	ad a3       	std	Y+37, r26	; 0x25
    3542:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3544:	6b a1       	ldd	r22, Y+35	; 0x23
    3546:	7c a1       	ldd	r23, Y+36	; 0x24
    3548:	8d a1       	ldd	r24, Y+37	; 0x25
    354a:	9e a1       	ldd	r25, Y+38	; 0x26
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	2c f4       	brge	.+10     	; 0x3566 <Lcd_Init+0x26c>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	9a a3       	std	Y+34, r25	; 0x22
    3562:	89 a3       	std	Y+33, r24	; 0x21
    3564:	3f c0       	rjmp	.+126    	; 0x35e4 <Lcd_Init+0x2ea>
	else if (__tmp > 65535)
    3566:	6b a1       	ldd	r22, Y+35	; 0x23
    3568:	7c a1       	ldd	r23, Y+36	; 0x24
    356a:	8d a1       	ldd	r24, Y+37	; 0x25
    356c:	9e a1       	ldd	r25, Y+38	; 0x26
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	4c f5       	brge	.+82     	; 0x35d0 <Lcd_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357e:	6f a1       	ldd	r22, Y+39	; 0x27
    3580:	78 a5       	ldd	r23, Y+40	; 0x28
    3582:	89 a5       	ldd	r24, Y+41	; 0x29
    3584:	9a a5       	ldd	r25, Y+42	; 0x2a
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e2       	ldi	r20, 0x20	; 32
    358c:	51 e4       	ldi	r21, 0x41	; 65
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9a a3       	std	Y+34, r25	; 0x22
    35a4:	89 a3       	std	Y+33, r24	; 0x21
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <Lcd_Init+0x2cc>
    35a8:	80 e9       	ldi	r24, 0x90	; 144
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	98 a3       	std	Y+32, r25	; 0x20
    35ae:	8f 8f       	std	Y+31, r24	; 0x1f
    35b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35b2:	98 a1       	ldd	r25, Y+32	; 0x20
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <Lcd_Init+0x2ba>
    35b8:	98 a3       	std	Y+32, r25	; 0x20
    35ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35bc:	89 a1       	ldd	r24, Y+33	; 0x21
    35be:	9a a1       	ldd	r25, Y+34	; 0x22
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	9a a3       	std	Y+34, r25	; 0x22
    35c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	89 a1       	ldd	r24, Y+33	; 0x21
    35c8:	9a a1       	ldd	r25, Y+34	; 0x22
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	69 f7       	brne	.-38     	; 0x35a8 <Lcd_Init+0x2ae>
    35ce:	14 c0       	rjmp	.+40     	; 0x35f8 <Lcd_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	6b a1       	ldd	r22, Y+35	; 0x23
    35d2:	7c a1       	ldd	r23, Y+36	; 0x24
    35d4:	8d a1       	ldd	r24, Y+37	; 0x25
    35d6:	9e a1       	ldd	r25, Y+38	; 0x26
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	9a a3       	std	Y+34, r25	; 0x22
    35e2:	89 a3       	std	Y+33, r24	; 0x21
    35e4:	89 a1       	ldd	r24, Y+33	; 0x21
    35e6:	9a a1       	ldd	r25, Y+34	; 0x22
    35e8:	9e 8f       	std	Y+30, r25	; 0x1e
    35ea:	8d 8f       	std	Y+29, r24	; 0x1d
    35ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <Lcd_Init+0x2f6>
    35f4:	9e 8f       	std	Y+30, r25	; 0x1e
    35f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_SendCMD(CLEAR);
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	a0 e8       	ldi	r26, 0x80	; 128
    3604:	bf e3       	ldi	r27, 0x3F	; 63
    3606:	89 8f       	std	Y+25, r24	; 0x19
    3608:	9a 8f       	std	Y+26, r25	; 0x1a
    360a:	ab 8f       	std	Y+27, r26	; 0x1b
    360c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	69 8d       	ldd	r22, Y+25	; 0x19
    3610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	4a e7       	ldi	r20, 0x7A	; 122
    361c:	55 e4       	ldi	r21, 0x45	; 69
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	8d 8b       	std	Y+21, r24	; 0x15
    3628:	9e 8b       	std	Y+22, r25	; 0x16
    362a:	af 8b       	std	Y+23, r26	; 0x17
    362c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    362e:	6d 89       	ldd	r22, Y+21	; 0x15
    3630:	7e 89       	ldd	r23, Y+22	; 0x16
    3632:	8f 89       	ldd	r24, Y+23	; 0x17
    3634:	98 8d       	ldd	r25, Y+24	; 0x18
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e8       	ldi	r20, 0x80	; 128
    363c:	5f e3       	ldi	r21, 0x3F	; 63
    363e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3642:	88 23       	and	r24, r24
    3644:	2c f4       	brge	.+10     	; 0x3650 <Lcd_Init+0x356>
		__ticks = 1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9c 8b       	std	Y+20, r25	; 0x14
    364c:	8b 8b       	std	Y+19, r24	; 0x13
    364e:	3f c0       	rjmp	.+126    	; 0x36ce <Lcd_Init+0x3d4>
	else if (__tmp > 65535)
    3650:	6d 89       	ldd	r22, Y+21	; 0x15
    3652:	7e 89       	ldd	r23, Y+22	; 0x16
    3654:	8f 89       	ldd	r24, Y+23	; 0x17
    3656:	98 8d       	ldd	r25, Y+24	; 0x18
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4f e7       	ldi	r20, 0x7F	; 127
    365e:	57 e4       	ldi	r21, 0x47	; 71
    3660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3664:	18 16       	cp	r1, r24
    3666:	4c f5       	brge	.+82     	; 0x36ba <Lcd_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3668:	69 8d       	ldd	r22, Y+25	; 0x19
    366a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    366c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    366e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	9c 8b       	std	Y+20, r25	; 0x14
    368e:	8b 8b       	std	Y+19, r24	; 0x13
    3690:	0f c0       	rjmp	.+30     	; 0x36b0 <Lcd_Init+0x3b6>
    3692:	80 e9       	ldi	r24, 0x90	; 144
    3694:	91 e0       	ldi	r25, 0x01	; 1
    3696:	9a 8b       	std	Y+18, r25	; 0x12
    3698:	89 8b       	std	Y+17, r24	; 0x11
    369a:	89 89       	ldd	r24, Y+17	; 0x11
    369c:	9a 89       	ldd	r25, Y+18	; 0x12
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <Lcd_Init+0x3a4>
    36a2:	9a 8b       	std	Y+18, r25	; 0x12
    36a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a6:	8b 89       	ldd	r24, Y+19	; 0x13
    36a8:	9c 89       	ldd	r25, Y+20	; 0x14
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	9c 8b       	std	Y+20, r25	; 0x14
    36ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b0:	8b 89       	ldd	r24, Y+19	; 0x13
    36b2:	9c 89       	ldd	r25, Y+20	; 0x14
    36b4:	00 97       	sbiw	r24, 0x00	; 0
    36b6:	69 f7       	brne	.-38     	; 0x3692 <Lcd_Init+0x398>
    36b8:	14 c0       	rjmp	.+40     	; 0x36e2 <Lcd_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ba:	6d 89       	ldd	r22, Y+21	; 0x15
    36bc:	7e 89       	ldd	r23, Y+22	; 0x16
    36be:	8f 89       	ldd	r24, Y+23	; 0x17
    36c0:	98 8d       	ldd	r25, Y+24	; 0x18
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	9c 8b       	std	Y+20, r25	; 0x14
    36cc:	8b 8b       	std	Y+19, r24	; 0x13
    36ce:	8b 89       	ldd	r24, Y+19	; 0x13
    36d0:	9c 89       	ldd	r25, Y+20	; 0x14
    36d2:	98 8b       	std	Y+16, r25	; 0x10
    36d4:	8f 87       	std	Y+15, r24	; 0x0f
    36d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d8:	98 89       	ldd	r25, Y+16	; 0x10
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <Lcd_Init+0x3e0>
    36de:	98 8b       	std	Y+16, r25	; 0x10
    36e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_SendCMD(MODE);
    36e2:	86 e0       	ldi	r24, 0x06	; 6
    36e4:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	a0 e8       	ldi	r26, 0x80	; 128
    36ee:	bf e3       	ldi	r27, 0x3F	; 63
    36f0:	8b 87       	std	Y+11, r24	; 0x0b
    36f2:	9c 87       	std	Y+12, r25	; 0x0c
    36f4:	ad 87       	std	Y+13, r26	; 0x0d
    36f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    36fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a e7       	ldi	r20, 0x7A	; 122
    3706:	55 e4       	ldi	r21, 0x45	; 69
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	8f 83       	std	Y+7, r24	; 0x07
    3712:	98 87       	std	Y+8, r25	; 0x08
    3714:	a9 87       	std	Y+9, r26	; 0x09
    3716:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3718:	6f 81       	ldd	r22, Y+7	; 0x07
    371a:	78 85       	ldd	r23, Y+8	; 0x08
    371c:	89 85       	ldd	r24, Y+9	; 0x09
    371e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e8       	ldi	r20, 0x80	; 128
    3726:	5f e3       	ldi	r21, 0x3F	; 63
    3728:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    372c:	88 23       	and	r24, r24
    372e:	2c f4       	brge	.+10     	; 0x373a <Lcd_Init+0x440>
		__ticks = 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9e 83       	std	Y+6, r25	; 0x06
    3736:	8d 83       	std	Y+5, r24	; 0x05
    3738:	3f c0       	rjmp	.+126    	; 0x37b8 <Lcd_Init+0x4be>
	else if (__tmp > 65535)
    373a:	6f 81       	ldd	r22, Y+7	; 0x07
    373c:	78 85       	ldd	r23, Y+8	; 0x08
    373e:	89 85       	ldd	r24, Y+9	; 0x09
    3740:	9a 85       	ldd	r25, Y+10	; 0x0a
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    374e:	18 16       	cp	r1, r24
    3750:	4c f5       	brge	.+82     	; 0x37a4 <Lcd_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	6b 85       	ldd	r22, Y+11	; 0x0b
    3754:	7c 85       	ldd	r23, Y+12	; 0x0c
    3756:	8d 85       	ldd	r24, Y+13	; 0x0d
    3758:	9e 85       	ldd	r25, Y+14	; 0x0e
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
    377a:	0f c0       	rjmp	.+30     	; 0x379a <Lcd_Init+0x4a0>
    377c:	80 e9       	ldi	r24, 0x90	; 144
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	9c 83       	std	Y+4, r25	; 0x04
    3782:	8b 83       	std	Y+3, r24	; 0x03
    3784:	8b 81       	ldd	r24, Y+3	; 0x03
    3786:	9c 81       	ldd	r25, Y+4	; 0x04
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	f1 f7       	brne	.-4      	; 0x3788 <Lcd_Init+0x48e>
    378c:	9c 83       	std	Y+4, r25	; 0x04
    378e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	9e 81       	ldd	r25, Y+6	; 0x06
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379a:	8d 81       	ldd	r24, Y+5	; 0x05
    379c:	9e 81       	ldd	r25, Y+6	; 0x06
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	69 f7       	brne	.-38     	; 0x377c <Lcd_Init+0x482>
    37a2:	14 c0       	rjmp	.+40     	; 0x37cc <Lcd_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a4:	6f 81       	ldd	r22, Y+7	; 0x07
    37a6:	78 85       	ldd	r23, Y+8	; 0x08
    37a8:	89 85       	ldd	r24, Y+9	; 0x09
    37aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9e 83       	std	Y+6, r25	; 0x06
    37b6:	8d 83       	std	Y+5, r24	; 0x05
    37b8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ba:	9e 81       	ldd	r25, Y+6	; 0x06
    37bc:	9a 83       	std	Y+2, r25	; 0x02
    37be:	89 83       	std	Y+1, r24	; 0x01
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	9a 81       	ldd	r25, Y+2	; 0x02
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <Lcd_Init+0x4ca>
    37c8:	9a 83       	std	Y+2, r25	; 0x02
    37ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Lcd_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    37cc:	8c e0       	ldi	r24, 0x0C	; 12
    37ce:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
	Lcd_SendCMD(SET_DDRAM_ADDR);
    37d2:	80 e8       	ldi	r24, 0x80	; 128
    37d4:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
}
    37d8:	ca 5b       	subi	r28, 0xBA	; 186
    37da:	df 4f       	sbci	r29, 0xFF	; 255
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	1f 91       	pop	r17
    37ec:	0f 91       	pop	r16
    37ee:	08 95       	ret

000037f0 <Lcd_Clear>:
void Lcd_Clear(void){
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
Lcd_SendCMD(CLEAR);
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	0e 94 c7 10 	call	0x218e	; 0x218e <Lcd_SendCMD>
}
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	08 95       	ret

00003804 <Lcd_PutString>:


void Lcd_PutString (u8* str)
{
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	00 d0       	rcall	.+0      	; 0x380a <Lcd_PutString+0x6>
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	9a 83       	std	Y+2, r25	; 0x02
    3810:	89 83       	std	Y+1, r24	; 0x01
    3812:	0a c0       	rjmp	.+20     	; 0x3828 <Lcd_PutString+0x24>
	 while (*str !='\0'){
		Lcd_PutChar(*str);
    3814:	e9 81       	ldd	r30, Y+1	; 0x01
    3816:	fa 81       	ldd	r31, Y+2	; 0x02
    3818:	80 81       	ld	r24, Z
    381a:	0e 94 34 19 	call	0x3268	; 0x3268 <Lcd_PutChar>
		str++;
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	9a 81       	ldd	r25, Y+2	; 0x02
    3822:	01 96       	adiw	r24, 0x01	; 1
    3824:	9a 83       	std	Y+2, r25	; 0x02
    3826:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_PutString (u8* str)
{
	 while (*str !='\0'){
    3828:	e9 81       	ldd	r30, Y+1	; 0x01
    382a:	fa 81       	ldd	r31, Y+2	; 0x02
    382c:	80 81       	ld	r24, Z
    382e:	88 23       	and	r24, r24
    3830:	89 f7       	brne	.-30     	; 0x3814 <Lcd_PutString+0x10>
		Lcd_PutChar(*str);
		str++;
		}
}
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	08 95       	ret

0000383c <lcd4_disply_char_at_X_Y>:

void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	00 d0       	rcall	.+0      	; 0x3842 <lcd4_disply_char_at_X_Y+0x6>
    3842:	0f 92       	push	r0
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	89 83       	std	Y+1, r24	; 0x01
    384a:	6a 83       	std	Y+2, r22	; 0x02
    384c:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoTo(row, col);
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	6b 81       	ldd	r22, Y+3	; 0x03
    3852:	0e 94 ef 18 	call	0x31de	; 0x31de <Lcd_GoTo>
	Lcd_SendData(data);
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	0e 94 db 14 	call	0x29b6	; 0x29b6 <Lcd_SendData>
}
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <Lcd_PutString_x_Y>:


void Lcd_PutString_x_Y(u8* data, u8 row, u8 col)
{
    3868:	df 93       	push	r29
    386a:	cf 93       	push	r28
    386c:	00 d0       	rcall	.+0      	; 0x386e <Lcd_PutString_x_Y+0x6>
    386e:	00 d0       	rcall	.+0      	; 0x3870 <Lcd_PutString_x_Y+0x8>
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	9a 83       	std	Y+2, r25	; 0x02
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	6b 83       	std	Y+3, r22	; 0x03
    387a:	4c 83       	std	Y+4, r20	; 0x04
	Lcd_GoTo(row, col);
    387c:	8b 81       	ldd	r24, Y+3	; 0x03
    387e:	6c 81       	ldd	r22, Y+4	; 0x04
    3880:	0e 94 ef 18 	call	0x31de	; 0x31de <Lcd_GoTo>
	Lcd_PutString(data);
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	9a 81       	ldd	r25, Y+2	; 0x02
    3888:	0e 94 02 1c 	call	0x3804	; 0x3804 <Lcd_PutString>
}
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	08 95       	ret

0000389a <Action1>:
#include "MCAL/EXTI/EXTI_interface.h"
#include "MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"


void Action1(void)
{
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_5);
    38a2:	85 e0       	ldi	r24, 0x05	; 5
    38a4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <Dio_FlipChannel>
}
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	08 95       	ret

000038ae <main>:

int main() {
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	2e 97       	sbiw	r28, 0x0e	; 14
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61

	Port_Init(pin_cfg);
    38c2:	88 e6       	ldi	r24, 0x68	; 104
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Port_Init>
//	TMR0_voidSetCompareMatchValue(249);
//
//	TMR0_voidStart();
//	u8 local_delay =1;
	while (1){
		Dio_WriteChannel(PB_3,STD_HIGHT);
    38ca:	8b e0       	ldi	r24, 0x0B	; 11
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(PB_5,STD_HIGHT);
    38d2:	8d e0       	ldi	r24, 0x0D	; 13
    38d4:	61 e0       	ldi	r22, 0x01	; 1
    38d6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
		Dio_WriteChannel(PB_6,STD_HIGHT);
    38da:	8e e0       	ldi	r24, 0x0E	; 14
    38dc:	61 e0       	ldi	r22, 0x01	; 1
    38de:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Dio_WriteChannel>
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	90 e4       	ldi	r25, 0x40	; 64
    38e6:	ac e9       	ldi	r26, 0x9C	; 156
    38e8:	b5 e4       	ldi	r27, 0x45	; 69
    38ea:	8b 87       	std	Y+11, r24	; 0x0b
    38ec:	9c 87       	std	Y+12, r25	; 0x0c
    38ee:	ad 87       	std	Y+13, r26	; 0x0d
    38f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	4a e7       	ldi	r20, 0x7A	; 122
    3900:	55 e4       	ldi	r21, 0x45	; 69
    3902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	8f 83       	std	Y+7, r24	; 0x07
    390c:	98 87       	std	Y+8, r25	; 0x08
    390e:	a9 87       	std	Y+9, r26	; 0x09
    3910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3912:	6f 81       	ldd	r22, Y+7	; 0x07
    3914:	78 85       	ldd	r23, Y+8	; 0x08
    3916:	89 85       	ldd	r24, Y+9	; 0x09
    3918:	9a 85       	ldd	r25, Y+10	; 0x0a
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e8       	ldi	r20, 0x80	; 128
    3920:	5f e3       	ldi	r21, 0x3F	; 63
    3922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3926:	88 23       	and	r24, r24
    3928:	2c f4       	brge	.+10     	; 0x3934 <main+0x86>
		__ticks = 1;
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	9e 83       	std	Y+6, r25	; 0x06
    3930:	8d 83       	std	Y+5, r24	; 0x05
    3932:	3f c0       	rjmp	.+126    	; 0x39b2 <main+0x104>
	else if (__tmp > 65535)
    3934:	6f 81       	ldd	r22, Y+7	; 0x07
    3936:	78 85       	ldd	r23, Y+8	; 0x08
    3938:	89 85       	ldd	r24, Y+9	; 0x09
    393a:	9a 85       	ldd	r25, Y+10	; 0x0a
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	3f ef       	ldi	r19, 0xFF	; 255
    3940:	4f e7       	ldi	r20, 0x7F	; 127
    3942:	57 e4       	ldi	r21, 0x47	; 71
    3944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3948:	18 16       	cp	r1, r24
    394a:	4c f5       	brge	.+82     	; 0x399e <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394c:	6b 85       	ldd	r22, Y+11	; 0x0b
    394e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3950:	8d 85       	ldd	r24, Y+13	; 0x0d
    3952:	9e 85       	ldd	r25, Y+14	; 0x0e
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	40 e2       	ldi	r20, 0x20	; 32
    395a:	51 e4       	ldi	r21, 0x41	; 65
    395c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	bc 01       	movw	r22, r24
    3966:	cd 01       	movw	r24, r26
    3968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	9e 83       	std	Y+6, r25	; 0x06
    3972:	8d 83       	std	Y+5, r24	; 0x05
    3974:	0f c0       	rjmp	.+30     	; 0x3994 <main+0xe6>
    3976:	80 e9       	ldi	r24, 0x90	; 144
    3978:	91 e0       	ldi	r25, 0x01	; 1
    397a:	9c 83       	std	Y+4, r25	; 0x04
    397c:	8b 83       	std	Y+3, r24	; 0x03
    397e:	8b 81       	ldd	r24, Y+3	; 0x03
    3980:	9c 81       	ldd	r25, Y+4	; 0x04
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <main+0xd4>
    3986:	9c 83       	std	Y+4, r25	; 0x04
    3988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398a:	8d 81       	ldd	r24, Y+5	; 0x05
    398c:	9e 81       	ldd	r25, Y+6	; 0x06
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	9e 83       	std	Y+6, r25	; 0x06
    3992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3994:	8d 81       	ldd	r24, Y+5	; 0x05
    3996:	9e 81       	ldd	r25, Y+6	; 0x06
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	69 f7       	brne	.-38     	; 0x3976 <main+0xc8>
    399c:	96 cf       	rjmp	.-212    	; 0x38ca <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    399e:	6f 81       	ldd	r22, Y+7	; 0x07
    39a0:	78 85       	ldd	r23, Y+8	; 0x08
    39a2:	89 85       	ldd	r24, Y+9	; 0x09
    39a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	9e 83       	std	Y+6, r25	; 0x06
    39b0:	8d 83       	std	Y+5, r24	; 0x05
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	9a 83       	std	Y+2, r25	; 0x02
    39b8:	89 83       	std	Y+1, r24	; 0x01
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	9a 81       	ldd	r25, Y+2	; 0x02
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	f1 f7       	brne	.-4      	; 0x39be <main+0x110>
    39c2:	9a 83       	std	Y+2, r25	; 0x02
    39c4:	89 83       	std	Y+1, r24	; 0x01
    39c6:	81 cf       	rjmp	.-254    	; 0x38ca <main+0x1c>

000039c8 <__udivmodhi4>:
    39c8:	aa 1b       	sub	r26, r26
    39ca:	bb 1b       	sub	r27, r27
    39cc:	51 e1       	ldi	r21, 0x11	; 17
    39ce:	07 c0       	rjmp	.+14     	; 0x39de <__udivmodhi4_ep>

000039d0 <__udivmodhi4_loop>:
    39d0:	aa 1f       	adc	r26, r26
    39d2:	bb 1f       	adc	r27, r27
    39d4:	a6 17       	cp	r26, r22
    39d6:	b7 07       	cpc	r27, r23
    39d8:	10 f0       	brcs	.+4      	; 0x39de <__udivmodhi4_ep>
    39da:	a6 1b       	sub	r26, r22
    39dc:	b7 0b       	sbc	r27, r23

000039de <__udivmodhi4_ep>:
    39de:	88 1f       	adc	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	5a 95       	dec	r21
    39e4:	a9 f7       	brne	.-22     	; 0x39d0 <__udivmodhi4_loop>
    39e6:	80 95       	com	r24
    39e8:	90 95       	com	r25
    39ea:	bc 01       	movw	r22, r24
    39ec:	cd 01       	movw	r24, r26
    39ee:	08 95       	ret

000039f0 <__udivmodsi4>:
    39f0:	a1 e2       	ldi	r26, 0x21	; 33
    39f2:	1a 2e       	mov	r1, r26
    39f4:	aa 1b       	sub	r26, r26
    39f6:	bb 1b       	sub	r27, r27
    39f8:	fd 01       	movw	r30, r26
    39fa:	0d c0       	rjmp	.+26     	; 0x3a16 <__udivmodsi4_ep>

000039fc <__udivmodsi4_loop>:
    39fc:	aa 1f       	adc	r26, r26
    39fe:	bb 1f       	adc	r27, r27
    3a00:	ee 1f       	adc	r30, r30
    3a02:	ff 1f       	adc	r31, r31
    3a04:	a2 17       	cp	r26, r18
    3a06:	b3 07       	cpc	r27, r19
    3a08:	e4 07       	cpc	r30, r20
    3a0a:	f5 07       	cpc	r31, r21
    3a0c:	20 f0       	brcs	.+8      	; 0x3a16 <__udivmodsi4_ep>
    3a0e:	a2 1b       	sub	r26, r18
    3a10:	b3 0b       	sbc	r27, r19
    3a12:	e4 0b       	sbc	r30, r20
    3a14:	f5 0b       	sbc	r31, r21

00003a16 <__udivmodsi4_ep>:
    3a16:	66 1f       	adc	r22, r22
    3a18:	77 1f       	adc	r23, r23
    3a1a:	88 1f       	adc	r24, r24
    3a1c:	99 1f       	adc	r25, r25
    3a1e:	1a 94       	dec	r1
    3a20:	69 f7       	brne	.-38     	; 0x39fc <__udivmodsi4_loop>
    3a22:	60 95       	com	r22
    3a24:	70 95       	com	r23
    3a26:	80 95       	com	r24
    3a28:	90 95       	com	r25
    3a2a:	9b 01       	movw	r18, r22
    3a2c:	ac 01       	movw	r20, r24
    3a2e:	bd 01       	movw	r22, r26
    3a30:	cf 01       	movw	r24, r30
    3a32:	08 95       	ret

00003a34 <__prologue_saves__>:
    3a34:	2f 92       	push	r2
    3a36:	3f 92       	push	r3
    3a38:	4f 92       	push	r4
    3a3a:	5f 92       	push	r5
    3a3c:	6f 92       	push	r6
    3a3e:	7f 92       	push	r7
    3a40:	8f 92       	push	r8
    3a42:	9f 92       	push	r9
    3a44:	af 92       	push	r10
    3a46:	bf 92       	push	r11
    3a48:	cf 92       	push	r12
    3a4a:	df 92       	push	r13
    3a4c:	ef 92       	push	r14
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
    3a5c:	ca 1b       	sub	r28, r26
    3a5e:	db 0b       	sbc	r29, r27
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
    3a6a:	09 94       	ijmp

00003a6c <__epilogue_restores__>:
    3a6c:	2a 88       	ldd	r2, Y+18	; 0x12
    3a6e:	39 88       	ldd	r3, Y+17	; 0x11
    3a70:	48 88       	ldd	r4, Y+16	; 0x10
    3a72:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a74:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a76:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a78:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a7e:	b9 84       	ldd	r11, Y+9	; 0x09
    3a80:	c8 84       	ldd	r12, Y+8	; 0x08
    3a82:	df 80       	ldd	r13, Y+7	; 0x07
    3a84:	ee 80       	ldd	r14, Y+6	; 0x06
    3a86:	fd 80       	ldd	r15, Y+5	; 0x05
    3a88:	0c 81       	ldd	r16, Y+4	; 0x04
    3a8a:	1b 81       	ldd	r17, Y+3	; 0x03
    3a8c:	aa 81       	ldd	r26, Y+2	; 0x02
    3a8e:	b9 81       	ldd	r27, Y+1	; 0x01
    3a90:	ce 0f       	add	r28, r30
    3a92:	d1 1d       	adc	r29, r1
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	ed 01       	movw	r28, r26
    3aa0:	08 95       	ret

00003aa2 <_exit>:
    3aa2:	f8 94       	cli

00003aa4 <__stop_program>:
    3aa4:	ff cf       	rjmp	.-2      	; 0x3aa4 <__stop_program>
