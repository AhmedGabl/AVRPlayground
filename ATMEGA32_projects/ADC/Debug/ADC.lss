
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  000035a8  0000363c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000dc  008000dc  000036b8  2**0
                  ALLOC
  3 .stab         00003b28  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002797  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009977  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c75b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e0c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_1>
       8:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_2>
       c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_10>
      2c:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <main>
      8a:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TMR0_voidSetDelay_ms_usingCTC+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
     b54:	ec e5       	ldi	r30, 0x5C	; 92
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	89 ef       	ldi	r24, 0xF9	; 249
     b5a:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	cc 01       	movw	r24, r24
     b62:	a0 e0       	ldi	r26, 0x00	; 0
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	80 93 e6 00 	sts	0x00E6, r24
     b6a:	90 93 e7 00 	sts	0x00E7, r25
     b6e:	a0 93 e8 00 	sts	0x00E8, r26
     b72:	b0 93 e9 00 	sts	0x00E9, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
     b8c:	0f 90       	pop	r0
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
	// Enable Output Compare Match Interrupt (OCI)
	SET_BIT(TIMSK, OCIE0);

#elif TMR0_MODE == TMR0_NORMAL_MODE
	// Select normal mode
	CLR_BIT(TCCR0, WGM00);
     b9c:	a3 e5       	ldi	r26, 0x53	; 83
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 7b       	andi	r24, 0xBF	; 191
     ba8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
     baa:	a3 e5       	ldi	r26, 0x53	; 83
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e3 e5       	ldi	r30, 0x53	; 83
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	87 7f       	andi	r24, 0xF7	; 247
     bb6:	8c 93       	st	X, r24
	// Initialize timer with a preload value
	TCNT0 = TMR0_PRELOAD_VALUE;
     bb8:	e2 e5       	ldi	r30, 0x52	; 82
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	81 e7       	ldi	r24, 0x71	; 113
     bbe:	80 83       	st	Z, r24
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE0);
     bc0:	a9 e5       	ldi	r26, 0x59	; 89
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e9 e5       	ldi	r30, 0x59	; 89
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);
#endif

#endif
}
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
     bdc:	a3 e5       	ldi	r26, 0x53	; 83
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e3 e5       	ldi	r30, 0x53	; 83
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	81 60       	ori	r24, 0x01	; 1
     be8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
     bea:	a3 e5       	ldi	r26, 0x53	; 83
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e3 e5       	ldi	r30, 0x53	; 83
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	82 60       	ori	r24, 0x02	; 2
     bf6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     bf8:	a3 e5       	ldi	r26, 0x53	; 83
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e3 e5       	ldi	r30, 0x53	; 83
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	8b 7f       	andi	r24, 0xFB	; 251
     c04:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
     c14:	a3 e5       	ldi	r26, 0x53	; 83
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e3 e5       	ldi	r30, 0x53	; 83
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     c22:	a3 e5       	ldi	r26, 0x53	; 83
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e3 e5       	ldi	r30, 0x53	; 83
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	8d 7f       	andi	r24, 0xFD	; 253
     c2e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     c30:	a3 e5       	ldi	r26, 0x53	; 83
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e3 e5       	ldi	r30, 0x53	; 83
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8b 7f       	andi	r24, 0xFB	; 251
     c3c:	8c 93       	st	X, r24
}
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <TMR0_voidSetCallBackOVF+0x6>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	31 f0       	breq	.+12     	; 0xc66 <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	90 93 dd 00 	sts	0x00DD, r25
     c62:	80 93 dc 00 	sts	0x00DC, r24
}
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <TMR0_voidSetCallBackCTC+0x6>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	9a 83       	std	Y+2, r25	; 0x02
     c7c:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	31 f0       	breq	.+12     	; 0xc92 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	90 93 df 00 	sts	0x00DF, r25
     c8e:	80 93 de 00 	sts	0x00DE, r24
}
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     c9c:	1f 92       	push	r1
     c9e:	0f 92       	push	r0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	0f 92       	push	r0
     ca4:	11 24       	eor	r1, r1
     ca6:	2f 93       	push	r18
     ca8:	3f 93       	push	r19
     caa:	4f 93       	push	r20
     cac:	5f 93       	push	r21
     cae:	6f 93       	push	r22
     cb0:	7f 93       	push	r23
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	af 93       	push	r26
     cb8:	bf 93       	push	r27
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
     cc6:	80 91 e0 00 	lds	r24, 0x00E0
     cca:	90 91 e1 00 	lds	r25, 0x00E1
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	90 93 e1 00 	sts	0x00E1, r25
     cd4:	80 93 e0 00 	sts	0x00E0, r24

	if (TMR0_ovCount == local_u16ovCounter) {
     cd8:	80 91 e0 00 	lds	r24, 0x00E0
     cdc:	90 91 e1 00 	lds	r25, 0x00E1
     ce0:	8a 30       	cpi	r24, 0x0A	; 10
     ce2:	91 05       	cpc	r25, r1
     ce4:	99 f4       	brne	.+38     	; 0xd0c <__vector_11+0x70>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
     ce6:	e2 e5       	ldi	r30, 0x52	; 82
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	81 e7       	ldi	r24, 0x71	; 113
     cec:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
     cee:	10 92 e1 00 	sts	0x00E1, r1
     cf2:	10 92 e0 00 	sts	0x00E0, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
     cf6:	80 91 dc 00 	lds	r24, 0x00DC
     cfa:	90 91 dd 00 	lds	r25, 0x00DD
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	29 f0       	breq	.+10     	; 0xd0c <__vector_11+0x70>
			TMR0_privatePtrToCAllBackOVF();
     d02:	e0 91 dc 00 	lds	r30, 0x00DC
     d06:	f0 91 dd 00 	lds	r31, 0x00DD
     d0a:	09 95       	icall
		}
	}
}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
     d5c:	80 91 e2 00 	lds	r24, 0x00E2
     d60:	90 91 e3 00 	lds	r25, 0x00E3
     d64:	a0 91 e4 00 	lds	r26, 0x00E4
     d68:	b0 91 e5 00 	lds	r27, 0x00E5
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	a1 1d       	adc	r26, r1
     d70:	b1 1d       	adc	r27, r1
     d72:	80 93 e2 00 	sts	0x00E2, r24
     d76:	90 93 e3 00 	sts	0x00E3, r25
     d7a:	a0 93 e4 00 	sts	0x00E4, r26
     d7e:	b0 93 e5 00 	sts	0x00E5, r27

	if (private_ctcCounter == local_u32CTCCounter) {
     d82:	20 91 e6 00 	lds	r18, 0x00E6
     d86:	30 91 e7 00 	lds	r19, 0x00E7
     d8a:	40 91 e8 00 	lds	r20, 0x00E8
     d8e:	50 91 e9 00 	lds	r21, 0x00E9
     d92:	80 91 e2 00 	lds	r24, 0x00E2
     d96:	90 91 e3 00 	lds	r25, 0x00E3
     d9a:	a0 91 e4 00 	lds	r26, 0x00E4
     d9e:	b0 91 e5 00 	lds	r27, 0x00E5
     da2:	28 17       	cp	r18, r24
     da4:	39 07       	cpc	r19, r25
     da6:	4a 07       	cpc	r20, r26
     da8:	5b 07       	cpc	r21, r27
     daa:	99 f4       	brne	.+38     	; 0xdd2 <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
     dac:	10 92 e2 00 	sts	0x00E2, r1
     db0:	10 92 e3 00 	sts	0x00E3, r1
     db4:	10 92 e4 00 	sts	0x00E4, r1
     db8:	10 92 e5 00 	sts	0x00E5, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
     dbc:	80 91 de 00 	lds	r24, 0x00DE
     dc0:	90 91 df 00 	lds	r25, 0x00DF
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	29 f0       	breq	.+10     	; 0xdd2 <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
     dc8:	e0 91 de 00 	lds	r30, 0x00DE
     dcc:	f0 91 df 00 	lds	r31, 0x00DF
     dd0:	09 95       	icall
		}
	}
}
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
     e04:	ec e5       	ldi	r30, 0x5C	; 92
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	80 83       	st	Z, r24
}
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <Port_Init+0x6>
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <Port_Init+0x8>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <Port_Init+0xa>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
     e26:	1a 82       	std	Y+2, r1	; 0x02
     e28:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
     e2a:	1a 82       	std	Y+2, r1	; 0x02
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	ea c1       	rjmp	.+980    	; 0x1204 <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	c9 01       	movw	r24, r18
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	28 0f       	add	r18, r24
     e3c:	39 1f       	adc	r19, r25
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	fc 01       	movw	r30, r24
     e44:	e2 0f       	add	r30, r18
     e46:	f3 1f       	adc	r31, r19
     e48:	80 81       	ld	r24, Z
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3e 83       	std	Y+6, r19	; 0x06
     e50:	2d 83       	std	Y+5, r18	; 0x05
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	91 05       	cpc	r25, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <Port_Init+0x4a>
     e5c:	85 c0       	rjmp	.+266    	; 0xf68 <Port_Init+0x154>
     e5e:	2d 81       	ldd	r18, Y+5	; 0x05
     e60:	3e 81       	ldd	r19, Y+6	; 0x06
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	2c f4       	brge	.+10     	; 0xe72 <Port_Init+0x5e>
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	71 f0       	breq	.+28     	; 0xe8c <Port_Init+0x78>
     e70:	c4 c1       	rjmp	.+904    	; 0x11fa <Port_Init+0x3e6>
     e72:	2d 81       	ldd	r18, Y+5	; 0x05
     e74:	3e 81       	ldd	r19, Y+6	; 0x06
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <Port_Init+0x6a>
     e7c:	e3 c0       	rjmp	.+454    	; 0x1044 <Port_Init+0x230>
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	91 05       	cpc	r25, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <Port_Init+0x76>
     e88:	4b c1       	rjmp	.+662    	; 0x1120 <Port_Init+0x30c>
     e8a:	b7 c1       	rjmp	.+878    	; 0x11fa <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
     e8c:	29 81       	ldd	r18, Y+1	; 0x01
     e8e:	3a 81       	ldd	r19, Y+2	; 0x02
     e90:	c9 01       	movw	r24, r18
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	28 0f       	add	r18, r24
     e98:	39 1f       	adc	r19, r25
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	9c 81       	ldd	r25, Y+4	; 0x04
     e9e:	fc 01       	movw	r30, r24
     ea0:	e2 0f       	add	r30, r18
     ea2:	f3 1f       	adc	r31, r19
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	01 f5       	brne	.+64     	; 0xeea <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
     eaa:	aa e3       	ldi	r26, 0x3A	; 58
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ea e3       	ldi	r30, 0x3A	; 58
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	29 81       	ldd	r18, Y+1	; 0x01
     eb8:	3a 81       	ldd	r19, Y+2	; 0x02
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	28 0f       	add	r18, r24
     ec2:	39 1f       	adc	r19, r25
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	fc 01       	movw	r30, r24
     eca:	e2 0f       	add	r30, r18
     ecc:	f3 1f       	adc	r31, r19
     ece:	81 81       	ldd	r24, Z+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <Port_Init+0xcc>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <Port_Init+0xc8>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	88 c1       	rjmp	.+784    	; 0x11fa <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
     eea:	aa e3       	ldi	r26, 0x3A	; 58
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e3       	ldi	r30, 0x3A	; 58
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	29 81       	ldd	r18, Y+1	; 0x01
     ef8:	3a 81       	ldd	r19, Y+2	; 0x02
     efa:	c9 01       	movw	r24, r18
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	28 0f       	add	r18, r24
     f02:	39 1f       	adc	r19, r25
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	fc 01       	movw	r30, r24
     f0a:	e2 0f       	add	r30, r18
     f0c:	f3 1f       	adc	r31, r19
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <Port_Init+0x10a>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	2a 95       	dec	r18
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <Port_Init+0x106>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
     f28:	ab e3       	ldi	r26, 0x3B	; 59
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	eb e3       	ldi	r30, 0x3B	; 59
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	29 81       	ldd	r18, Y+1	; 0x01
     f36:	3a 81       	ldd	r19, Y+2	; 0x02
     f38:	c9 01       	movw	r24, r18
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	28 0f       	add	r18, r24
     f40:	39 1f       	adc	r19, r25
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	81 81       	ldd	r24, Z+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <Port_Init+0x14a>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <Port_Init+0x146>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	49 c1       	rjmp	.+658    	; 0x11fa <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
     f68:	29 81       	ldd	r18, Y+1	; 0x01
     f6a:	3a 81       	ldd	r19, Y+2	; 0x02
     f6c:	c9 01       	movw	r24, r18
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	28 0f       	add	r18, r24
     f74:	39 1f       	adc	r19, r25
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	fc 01       	movw	r30, r24
     f7c:	e2 0f       	add	r30, r18
     f7e:	f3 1f       	adc	r31, r19
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	01 f5       	brne	.+64     	; 0xfc6 <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
     f86:	a7 e3       	ldi	r26, 0x37	; 55
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e7 e3       	ldi	r30, 0x37	; 55
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	29 81       	ldd	r18, Y+1	; 0x01
     f94:	3a 81       	ldd	r19, Y+2	; 0x02
     f96:	c9 01       	movw	r24, r18
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	28 0f       	add	r18, r24
     f9e:	39 1f       	adc	r19, r25
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	fc 01       	movw	r30, r24
     fa6:	e2 0f       	add	r30, r18
     fa8:	f3 1f       	adc	r31, r19
     faa:	81 81       	ldd	r24, Z+1	; 0x01
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <Port_Init+0x1a8>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <Port_Init+0x1a4>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	1a c1       	rjmp	.+564    	; 0x11fa <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
     fc6:	a7 e3       	ldi	r26, 0x37	; 55
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e3       	ldi	r30, 0x37	; 55
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	29 81       	ldd	r18, Y+1	; 0x01
     fd4:	3a 81       	ldd	r19, Y+2	; 0x02
     fd6:	c9 01       	movw	r24, r18
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	28 0f       	add	r18, r24
     fde:	39 1f       	adc	r19, r25
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	fc 01       	movw	r30, r24
     fe6:	e2 0f       	add	r30, r18
     fe8:	f3 1f       	adc	r31, r19
     fea:	81 81       	ldd	r24, Z+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <Port_Init+0x1e6>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	2a 95       	dec	r18
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <Port_Init+0x1e2>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    1004:	a8 e3       	ldi	r26, 0x38	; 56
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e8 e3       	ldi	r30, 0x38	; 56
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	29 81       	ldd	r18, Y+1	; 0x01
    1012:	3a 81       	ldd	r19, Y+2	; 0x02
    1014:	c9 01       	movw	r24, r18
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	28 0f       	add	r18, r24
    101c:	39 1f       	adc	r19, r25
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	fc 01       	movw	r30, r24
    1024:	e2 0f       	add	r30, r18
    1026:	f3 1f       	adc	r31, r19
    1028:	81 81       	ldd	r24, Z+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <Port_Init+0x226>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <Port_Init+0x222>
    103e:	84 2b       	or	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	db c0       	rjmp	.+438    	; 0x11fa <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1044:	29 81       	ldd	r18, Y+1	; 0x01
    1046:	3a 81       	ldd	r19, Y+2	; 0x02
    1048:	c9 01       	movw	r24, r18
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	28 0f       	add	r18, r24
    1050:	39 1f       	adc	r19, r25
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	fc 01       	movw	r30, r24
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	01 f5       	brne	.+64     	; 0x10a2 <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1062:	a4 e3       	ldi	r26, 0x34	; 52
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e4 e3       	ldi	r30, 0x34	; 52
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	29 81       	ldd	r18, Y+1	; 0x01
    1070:	3a 81       	ldd	r19, Y+2	; 0x02
    1072:	c9 01       	movw	r24, r18
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	28 0f       	add	r18, r24
    107a:	39 1f       	adc	r19, r25
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	fc 01       	movw	r30, r24
    1082:	e2 0f       	add	r30, r18
    1084:	f3 1f       	adc	r31, r19
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <Port_Init+0x284>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <Port_Init+0x280>
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	ac c0       	rjmp	.+344    	; 0x11fa <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e4 e3       	ldi	r30, 0x34	; 52
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	3a 81       	ldd	r19, Y+2	; 0x02
    10b2:	c9 01       	movw	r24, r18
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	28 0f       	add	r18, r24
    10ba:	39 1f       	adc	r19, r25
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	fc 01       	movw	r30, r24
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	81 81       	ldd	r24, Z+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Port_Init+0x2c2>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	2a 95       	dec	r18
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <Port_Init+0x2be>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    10e0:	a5 e3       	ldi	r26, 0x35	; 53
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e3       	ldi	r30, 0x35	; 53
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	29 81       	ldd	r18, Y+1	; 0x01
    10ee:	3a 81       	ldd	r19, Y+2	; 0x02
    10f0:	c9 01       	movw	r24, r18
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	28 0f       	add	r18, r24
    10f8:	39 1f       	adc	r19, r25
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	fc 01       	movw	r30, r24
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	81 81       	ldd	r24, Z+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <Port_Init+0x302>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <Port_Init+0x2fe>
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	6d c0       	rjmp	.+218    	; 0x11fa <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1120:	29 81       	ldd	r18, Y+1	; 0x01
    1122:	3a 81       	ldd	r19, Y+2	; 0x02
    1124:	c9 01       	movw	r24, r18
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	28 0f       	add	r18, r24
    112c:	39 1f       	adc	r19, r25
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	fc 01       	movw	r30, r24
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	01 f5       	brne	.+64     	; 0x117e <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    113e:	a1 e3       	ldi	r26, 0x31	; 49
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e1 e3       	ldi	r30, 0x31	; 49
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	29 81       	ldd	r18, Y+1	; 0x01
    114c:	3a 81       	ldd	r19, Y+2	; 0x02
    114e:	c9 01       	movw	r24, r18
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	28 0f       	add	r18, r24
    1156:	39 1f       	adc	r19, r25
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	fc 01       	movw	r30, r24
    115e:	e2 0f       	add	r30, r18
    1160:	f3 1f       	adc	r31, r19
    1162:	81 81       	ldd	r24, Z+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <Port_Init+0x360>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <Port_Init+0x35c>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	3e c0       	rjmp	.+124    	; 0x11fa <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    117e:	a1 e3       	ldi	r26, 0x31	; 49
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e1 e3       	ldi	r30, 0x31	; 49
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	29 81       	ldd	r18, Y+1	; 0x01
    118c:	3a 81       	ldd	r19, Y+2	; 0x02
    118e:	c9 01       	movw	r24, r18
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	28 0f       	add	r18, r24
    1196:	39 1f       	adc	r19, r25
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	fc 01       	movw	r30, r24
    119e:	e2 0f       	add	r30, r18
    11a0:	f3 1f       	adc	r31, r19
    11a2:	81 81       	ldd	r24, Z+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <Port_Init+0x39e>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	2a 95       	dec	r18
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <Port_Init+0x39a>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    11bc:	a2 e3       	ldi	r26, 0x32	; 50
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e2 e3       	ldi	r30, 0x32	; 50
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	29 81       	ldd	r18, Y+1	; 0x01
    11ca:	3a 81       	ldd	r19, Y+2	; 0x02
    11cc:	c9 01       	movw	r24, r18
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	28 0f       	add	r18, r24
    11d4:	39 1f       	adc	r19, r25
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	fc 01       	movw	r30, r24
    11dc:	e2 0f       	add	r30, r18
    11de:	f3 1f       	adc	r31, r19
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <Port_Init+0x3de>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <Port_Init+0x3da>
    11f6:	84 2b       	or	r24, r20
    11f8:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	80 32       	cpi	r24, 0x20	; 32
    120a:	91 05       	cpc	r25, r1
    120c:	0c f4       	brge	.+2      	; 0x1210 <Port_Init+0x3fc>
    120e:	10 ce       	rjmp	.-992    	; 0xe30 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    1210:	26 96       	adiw	r28, 0x06	; 6
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    122a:	af e5       	ldi	r26, 0x5F	; 95
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ef e5       	ldi	r30, 0x5F	; 95
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	8c 93       	st	X, r24
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <GI_voidDisable>:

void GI_voidDisable(void)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    1246:	af e5       	ldi	r26, 0x5F	; 95
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ef e5       	ldi	r30, 0x5F	; 95
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8f 77       	andi	r24, 0x7F	; 127
    1252:	8c 93       	st	X, r24
}
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	28 97       	sbiw	r28, 0x08	; 8
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	38 87       	std	Y+8, r19	; 0x08
    127a:	2f 83       	std	Y+7, r18	; 0x07
    127c:	8f 81       	ldd	r24, Y+7	; 0x07
    127e:	98 85       	ldd	r25, Y+8	; 0x08
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <EXTI_voidInit+0x2e>
    1286:	5a c0       	rjmp	.+180    	; 0x133c <EXTI_voidInit+0xe2>
    1288:	2f 81       	ldd	r18, Y+7	; 0x07
    128a:	38 85       	ldd	r19, Y+8	; 0x08
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <EXTI_voidInit+0x3a>
    1292:	a3 c0       	rjmp	.+326    	; 0x13da <EXTI_voidInit+0x180>
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	09 f0       	breq	.+2      	; 0x129e <EXTI_voidInit+0x44>
    129c:	b3 c0       	rjmp	.+358    	; 0x1404 <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3e 83       	std	Y+6, r19	; 0x06
    12a6:	2d 83       	std	Y+5, r18	; 0x05
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	39 f1       	breq	.+78     	; 0x1300 <EXTI_voidInit+0xa6>
    12b2:	2d 81       	ldd	r18, Y+5	; 0x05
    12b4:	3e 81       	ldd	r19, Y+6	; 0x06
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	99 f0       	breq	.+38     	; 0x12e2 <EXTI_voidInit+0x88>
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f1       	breq	.+90     	; 0x131e <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    12c4:	a5 e5       	ldi	r26, 0x55	; 85
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e5 e5       	ldi	r30, 0x55	; 85
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	81 60       	ori	r24, 0x01	; 1
    12d0:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    12d2:	a5 e5       	ldi	r26, 0x55	; 85
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e5       	ldi	r30, 0x55	; 85
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	82 60       	ori	r24, 0x02	; 2
    12de:	8c 93       	st	X, r24
    12e0:	91 c0       	rjmp	.+290    	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    12e2:	a5 e5       	ldi	r26, 0x55	; 85
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e5       	ldi	r30, 0x55	; 85
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	8e 7f       	andi	r24, 0xFE	; 254
    12ee:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    12f0:	a5 e5       	ldi	r26, 0x55	; 85
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e5       	ldi	r30, 0x55	; 85
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	82 60       	ori	r24, 0x02	; 2
    12fc:	8c 93       	st	X, r24
    12fe:	82 c0       	rjmp	.+260    	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    1300:	a5 e5       	ldi	r26, 0x55	; 85
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e5       	ldi	r30, 0x55	; 85
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	81 60       	ori	r24, 0x01	; 1
    130c:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    130e:	a5 e5       	ldi	r26, 0x55	; 85
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e5 e5       	ldi	r30, 0x55	; 85
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8d 7f       	andi	r24, 0xFD	; 253
    131a:	8c 93       	st	X, r24
    131c:	73 c0       	rjmp	.+230    	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    131e:	a5 e5       	ldi	r26, 0x55	; 85
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e5       	ldi	r30, 0x55	; 85
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	8e 7f       	andi	r24, 0xFE	; 254
    132a:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    132c:	a5 e5       	ldi	r26, 0x55	; 85
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e5       	ldi	r30, 0x55	; 85
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8d 7f       	andi	r24, 0xFD	; 253
    1338:	8c 93       	st	X, r24
    133a:	64 c0       	rjmp	.+200    	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3c 83       	std	Y+4, r19	; 0x04
    1344:	2b 83       	std	Y+3, r18	; 0x03
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	39 f1       	breq	.+78     	; 0x139e <EXTI_voidInit+0x144>
    1350:	2b 81       	ldd	r18, Y+3	; 0x03
    1352:	3c 81       	ldd	r19, Y+4	; 0x04
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	99 f0       	breq	.+38     	; 0x1380 <EXTI_voidInit+0x126>
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	69 f1       	breq	.+90     	; 0x13bc <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    1362:	a5 e5       	ldi	r26, 0x55	; 85
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e5 e5       	ldi	r30, 0x55	; 85
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	84 60       	ori	r24, 0x04	; 4
    136e:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    1370:	a5 e5       	ldi	r26, 0x55	; 85
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e5 e5       	ldi	r30, 0x55	; 85
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 60       	ori	r24, 0x08	; 8
    137c:	8c 93       	st	X, r24
    137e:	42 c0       	rjmp	.+132    	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    1380:	a5 e5       	ldi	r26, 0x55	; 85
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e5       	ldi	r30, 0x55	; 85
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8b 7f       	andi	r24, 0xFB	; 251
    138c:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    138e:	a5 e5       	ldi	r26, 0x55	; 85
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e5       	ldi	r30, 0x55	; 85
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	88 60       	ori	r24, 0x08	; 8
    139a:	8c 93       	st	X, r24
    139c:	33 c0       	rjmp	.+102    	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    139e:	a5 e5       	ldi	r26, 0x55	; 85
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e5       	ldi	r30, 0x55	; 85
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	84 60       	ori	r24, 0x04	; 4
    13aa:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    13ac:	a5 e5       	ldi	r26, 0x55	; 85
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e5       	ldi	r30, 0x55	; 85
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	87 7f       	andi	r24, 0xF7	; 247
    13b8:	8c 93       	st	X, r24
    13ba:	24 c0       	rjmp	.+72     	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    13bc:	a5 e5       	ldi	r26, 0x55	; 85
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e5 e5       	ldi	r30, 0x55	; 85
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8b 7f       	andi	r24, 0xFB	; 251
    13c8:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    13ca:	a5 e5       	ldi	r26, 0x55	; 85
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e5       	ldi	r30, 0x55	; 85
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	87 7f       	andi	r24, 0xF7	; 247
    13d6:	8c 93       	st	X, r24
    13d8:	15 c0       	rjmp	.+42     	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	91 05       	cpc	r25, r1
    13e4:	41 f0       	breq	.+16     	; 0x13f6 <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    13e6:	a4 e5       	ldi	r26, 0x54	; 84
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e4 e5       	ldi	r30, 0x54	; 84
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	80 64       	ori	r24, 0x40	; 64
    13f2:	8c 93       	st	X, r24
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    13f6:	a4 e5       	ldi	r26, 0x54	; 84
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e5       	ldi	r30, 0x54	; 84
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 7b       	andi	r24, 0xBF	; 191
    1402:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    1404:	28 96       	adiw	r28, 0x08	; 8
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <EXTI_voidEnable+0x6>
    141c:	0f 92       	push	r0
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3b 83       	std	Y+3, r19	; 0x03
    142c:	2a 83       	std	Y+2, r18	; 0x02
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 05       	cpc	r25, r1
    1436:	89 f0       	breq	.+34     	; 0x145a <EXTI_voidEnable+0x44>
    1438:	2a 81       	ldd	r18, Y+2	; 0x02
    143a:	3b 81       	ldd	r19, Y+3	; 0x03
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	a1 f0       	breq	.+40     	; 0x146a <EXTI_voidEnable+0x54>
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	b9 f4       	brne	.+46     	; 0x1478 <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    144a:	ab e5       	ldi	r26, 0x5B	; 91
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e5       	ldi	r30, 0x5B	; 91
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	8c 93       	st	X, r24
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    145a:	ab e5       	ldi	r26, 0x5B	; 91
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	eb e5       	ldi	r30, 0x5B	; 91
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 68       	ori	r24, 0x80	; 128
    1466:	8c 93       	st	X, r24
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    146a:	ab e5       	ldi	r26, 0x5B	; 91
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e5       	ldi	r30, 0x5B	; 91
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	8c 93       	st	X, r24
        break;
    }
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <EXTI_voidDisable+0x6>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3b 83       	std	Y+3, r19	; 0x03
    149a:	2a 83       	std	Y+2, r18	; 0x02
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	91 05       	cpc	r25, r1
    14a4:	89 f0       	breq	.+34     	; 0x14c8 <EXTI_voidDisable+0x44>
    14a6:	2a 81       	ldd	r18, Y+2	; 0x02
    14a8:	3b 81       	ldd	r19, Y+3	; 0x03
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	a1 f0       	breq	.+40     	; 0x14d8 <EXTI_voidDisable+0x54>
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	b9 f4       	brne	.+46     	; 0x14e6 <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    14b8:	ab e5       	ldi	r26, 0x5B	; 91
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	eb e5       	ldi	r30, 0x5B	; 91
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 7b       	andi	r24, 0xBF	; 191
    14c4:	8c 93       	st	X, r24
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    14c8:	ab e5       	ldi	r26, 0x5B	; 91
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	eb e5       	ldi	r30, 0x5B	; 91
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 77       	andi	r24, 0x7F	; 127
    14d4:	8c 93       	st	X, r24
    14d6:	07 c0       	rjmp	.+14     	; 0x14e6 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    14d8:	ab e5       	ldi	r26, 0x5B	; 91
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	eb e5       	ldi	r30, 0x5B	; 91
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7d       	andi	r24, 0xDF	; 223
    14e4:	8c 93       	st	X, r24
        break;
    }
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <EXTRI_voidSetCallBackINT+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <EXTRI_voidSetCallBackINT+0x8>
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	7b 83       	std	Y+3, r23	; 0x03
    1504:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	39 f1       	breq	.+78     	; 0x155c <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3d 83       	std	Y+5, r19	; 0x05
    1516:	2c 83       	std	Y+4, r18	; 0x04
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	91 05       	cpc	r25, r1
    1520:	81 f0       	breq	.+32     	; 0x1542 <EXTRI_voidSetCallBackINT+0x50>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	91 f0       	breq	.+36     	; 0x1550 <EXTRI_voidSetCallBackINT+0x5e>
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	a1 f4       	brne	.+40     	; 0x155c <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	90 93 eb 00 	sts	0x00EB, r25
    153c:	80 93 ea 00 	sts	0x00EA, r24
    1540:	0d c0       	rjmp	.+26     	; 0x155c <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	90 93 ed 00 	sts	0x00ED, r25
    154a:	80 93 ec 00 	sts	0x00EC, r24
    154e:	06 c0       	rjmp	.+12     	; 0x155c <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	9b 81       	ldd	r25, Y+3	; 0x03
    1554:	90 93 ef 00 	sts	0x00EF, r25
    1558:	80 93 ee 00 	sts	0x00EE, r24
            break;
        default:
            break;
        }
    }
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    1596:	80 91 ea 00 	lds	r24, 0x00EA
    159a:	90 91 eb 00 	lds	r25, 0x00EB
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	29 f0       	breq	.+10     	; 0x15ac <__vector_1+0x40>
        private_pCallBackINT0();
    15a2:	e0 91 ea 00 	lds	r30, 0x00EA
    15a6:	f0 91 eb 00 	lds	r31, 0x00EB
    15aa:	09 95       	icall
    }
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	0f 90       	pop	r0
    15ce:	1f 90       	pop	r1
    15d0:	18 95       	reti

000015d2 <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	2f 93       	push	r18
    15de:	3f 93       	push	r19
    15e0:	4f 93       	push	r20
    15e2:	5f 93       	push	r21
    15e4:	6f 93       	push	r22
    15e6:	7f 93       	push	r23
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	af 93       	push	r26
    15ee:	bf 93       	push	r27
    15f0:	ef 93       	push	r30
    15f2:	ff 93       	push	r31
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    15fc:	80 91 ec 00 	lds	r24, 0x00EC
    1600:	90 91 ed 00 	lds	r25, 0x00ED
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	29 f0       	breq	.+10     	; 0x1612 <__vector_2+0x40>
        private_pCallBackINT1();
    1608:	e0 91 ec 00 	lds	r30, 0x00EC
    160c:	f0 91 ed 00 	lds	r31, 0x00ED
    1610:	09 95       	icall
    }
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	ff 91       	pop	r31
    1618:	ef 91       	pop	r30
    161a:	bf 91       	pop	r27
    161c:	af 91       	pop	r26
    161e:	9f 91       	pop	r25
    1620:	8f 91       	pop	r24
    1622:	7f 91       	pop	r23
    1624:	6f 91       	pop	r22
    1626:	5f 91       	pop	r21
    1628:	4f 91       	pop	r20
    162a:	3f 91       	pop	r19
    162c:	2f 91       	pop	r18
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	2f 93       	push	r18
    1644:	3f 93       	push	r19
    1646:	4f 93       	push	r20
    1648:	5f 93       	push	r21
    164a:	6f 93       	push	r22
    164c:	7f 93       	push	r23
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	ef 93       	push	r30
    1658:	ff 93       	push	r31
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    1662:	80 91 ee 00 	lds	r24, 0x00EE
    1666:	90 91 ef 00 	lds	r25, 0x00EF
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	29 f0       	breq	.+10     	; 0x1678 <__vector_3+0x40>
        private_pCallBackINT2();
    166e:	e0 91 ee 00 	lds	r30, 0x00EE
    1672:	f0 91 ef 00 	lds	r31, 0x00EF
    1676:	09 95       	icall
    }
}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <Dio_WriteChannel+0x6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <Dio_WriteChannel+0x8>
    16a6:	0f 92       	push	r0
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	8a 83       	std	Y+2, r24	; 0x02
    16ae:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	86 95       	lsr	r24
    16b4:	86 95       	lsr	r24
    16b6:	86 95       	lsr	r24
    16b8:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 83       	std	Y+5, r19	; 0x05
    16c2:	2c 83       	std	Y+4, r18	; 0x04
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <Dio_WriteChannel+0x32>
    16ce:	43 c0       	rjmp	.+134    	; 0x1756 <Dio_WriteChannel+0xb8>
    16d0:	2c 81       	ldd	r18, Y+4	; 0x04
    16d2:	3d 81       	ldd	r19, Y+5	; 0x05
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <Dio_WriteChannel+0x46>
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	71 f0       	breq	.+28     	; 0x16fe <Dio_WriteChannel+0x60>
    16e2:	ce c0       	rjmp	.+412    	; 0x1880 <Dio_WriteChannel+0x1e2>
    16e4:	2c 81       	ldd	r18, Y+4	; 0x04
    16e6:	3d 81       	ldd	r19, Y+5	; 0x05
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <Dio_WriteChannel+0x52>
    16ee:	65 c0       	rjmp	.+202    	; 0x17ba <Dio_WriteChannel+0x11c>
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <Dio_WriteChannel+0x5e>
    16fa:	91 c0       	rjmp	.+290    	; 0x181e <Dio_WriteChannel+0x180>
    16fc:	c1 c0       	rjmp	.+386    	; 0x1880 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	a1 f4       	brne	.+40     	; 0x172c <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    1704:	ab e3       	ldi	r26, 0x3B	; 59
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <Dio_WriteChannel+0x84>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <Dio_WriteChannel+0x80>
    1726:	84 2b       	or	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	aa c0       	rjmp	.+340    	; 0x1880 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    172c:	ab e3       	ldi	r26, 0x3B	; 59
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	eb e3       	ldi	r30, 0x3B	; 59
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <Dio_WriteChannel+0xac>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <Dio_WriteChannel+0xa8>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	95 c0       	rjmp	.+298    	; 0x1880 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	b9 f4       	brne	.+46     	; 0x178a <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    175c:	a8 e3       	ldi	r26, 0x38	; 56
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e8 e3       	ldi	r30, 0x38	; 56
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9c 01       	movw	r18, r24
    1770:	27 70       	andi	r18, 0x07	; 7
    1772:	30 70       	andi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <Dio_WriteChannel+0xe2>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <Dio_WriteChannel+0xde>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	7b c0       	rjmp	.+246    	; 0x1880 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9c 01       	movw	r18, r24
    179e:	27 70       	andi	r18, 0x07	; 7
    17a0:	30 70       	andi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <Dio_WriteChannel+0x110>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <Dio_WriteChannel+0x10c>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	63 c0       	rjmp	.+198    	; 0x1880 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	b9 f4       	brne	.+46     	; 0x17ee <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    17c0:	a5 e3       	ldi	r26, 0x35	; 53
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e5 e3       	ldi	r30, 0x35	; 53
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9c 01       	movw	r18, r24
    17d4:	27 70       	andi	r18, 0x07	; 7
    17d6:	30 70       	andi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <Dio_WriteChannel+0x146>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <Dio_WriteChannel+0x142>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	49 c0       	rjmp	.+146    	; 0x1880 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    17ee:	a5 e3       	ldi	r26, 0x35	; 53
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e5 e3       	ldi	r30, 0x35	; 53
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9c 01       	movw	r18, r24
    1802:	27 70       	andi	r18, 0x07	; 7
    1804:	30 70       	andi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <Dio_WriteChannel+0x174>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <Dio_WriteChannel+0x170>
    1816:	80 95       	com	r24
    1818:	84 23       	and	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	31 c0       	rjmp	.+98     	; 0x1880 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	b9 f4       	brne	.+46     	; 0x1852 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    1824:	a2 e3       	ldi	r26, 0x32	; 50
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e2 e3       	ldi	r30, 0x32	; 50
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9c 01       	movw	r18, r24
    1838:	27 70       	andi	r18, 0x07	; 7
    183a:	30 70       	andi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <Dio_WriteChannel+0x1aa>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <Dio_WriteChannel+0x1a6>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	17 c0       	rjmp	.+46     	; 0x1880 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    1852:	a2 e3       	ldi	r26, 0x32	; 50
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e2 e3       	ldi	r30, 0x32	; 50
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9c 01       	movw	r18, r24
    1866:	27 70       	andi	r18, 0x07	; 7
    1868:	30 70       	andi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <Dio_WriteChannel+0x1d8>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <Dio_WriteChannel+0x1d4>
    187a:	80 95       	com	r24
    187c:	84 23       	and	r24, r20
    187e:	8c 93       	st	X, r24
		}
		break;
	}
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <Dio_ReadChannel+0x6>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <Dio_ReadChannel+0x8>
    1898:	0f 92       	push	r0
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	86 95       	lsr	r24
    18a4:	86 95       	lsr	r24
    18a6:	86 95       	lsr	r24
    18a8:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3d 83       	std	Y+5, r19	; 0x05
    18b2:	2c 83       	std	Y+4, r18	; 0x04
    18b4:	4c 81       	ldd	r20, Y+4	; 0x04
    18b6:	5d 81       	ldd	r21, Y+5	; 0x05
    18b8:	41 30       	cpi	r20, 0x01	; 1
    18ba:	51 05       	cpc	r21, r1
    18bc:	49 f1       	breq	.+82     	; 0x1910 <Dio_ReadChannel+0x80>
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	9d 81       	ldd	r25, Y+5	; 0x05
    18c2:	82 30       	cpi	r24, 0x02	; 2
    18c4:	91 05       	cpc	r25, r1
    18c6:	34 f4       	brge	.+12     	; 0x18d4 <Dio_ReadChannel+0x44>
    18c8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ca:	3d 81       	ldd	r19, Y+5	; 0x05
    18cc:	21 15       	cp	r18, r1
    18ce:	31 05       	cpc	r19, r1
    18d0:	69 f0       	breq	.+26     	; 0x18ec <Dio_ReadChannel+0x5c>
    18d2:	59 c0       	rjmp	.+178    	; 0x1986 <Dio_ReadChannel+0xf6>
    18d4:	4c 81       	ldd	r20, Y+4	; 0x04
    18d6:	5d 81       	ldd	r21, Y+5	; 0x05
    18d8:	42 30       	cpi	r20, 0x02	; 2
    18da:	51 05       	cpc	r21, r1
    18dc:	69 f1       	breq	.+90     	; 0x1938 <Dio_ReadChannel+0xa8>
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	91 05       	cpc	r25, r1
    18e6:	09 f4       	brne	.+2      	; 0x18ea <Dio_ReadChannel+0x5a>
    18e8:	3b c0       	rjmp	.+118    	; 0x1960 <Dio_ReadChannel+0xd0>
    18ea:	4d c0       	rjmp	.+154    	; 0x1986 <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    18ec:	e9 e3       	ldi	r30, 0x39	; 57
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	88 2f       	mov	r24, r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a9 01       	movw	r20, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <Dio_ReadChannel+0x74>
    1900:	55 95       	asr	r21
    1902:	47 95       	ror	r20
    1904:	8a 95       	dec	r24
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <Dio_ReadChannel+0x70>
    1908:	ca 01       	movw	r24, r20
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	3b c0       	rjmp	.+118    	; 0x1986 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    1910:	e6 e3       	ldi	r30, 0x36	; 54
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	87 70       	andi	r24, 0x07	; 7
    1922:	90 70       	andi	r25, 0x00	; 0
    1924:	a9 01       	movw	r20, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <Dio_ReadChannel+0x9c>
    1928:	55 95       	asr	r21
    192a:	47 95       	ror	r20
    192c:	8a 95       	dec	r24
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <Dio_ReadChannel+0x98>
    1930:	ca 01       	movw	r24, r20
    1932:	81 70       	andi	r24, 0x01	; 1
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	27 c0       	rjmp	.+78     	; 0x1986 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    1938:	e3 e3       	ldi	r30, 0x33	; 51
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	87 70       	andi	r24, 0x07	; 7
    194a:	90 70       	andi	r25, 0x00	; 0
    194c:	a9 01       	movw	r20, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <Dio_ReadChannel+0xc4>
    1950:	55 95       	asr	r21
    1952:	47 95       	ror	r20
    1954:	8a 95       	dec	r24
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <Dio_ReadChannel+0xc0>
    1958:	ca 01       	movw	r24, r20
    195a:	81 70       	andi	r24, 0x01	; 1
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    1960:	e0 e3       	ldi	r30, 0x30	; 48
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	87 70       	andi	r24, 0x07	; 7
    1972:	90 70       	andi	r25, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <Dio_ReadChannel+0xec>
    1978:	55 95       	asr	r21
    197a:	47 95       	ror	r20
    197c:	8a 95       	dec	r24
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <Dio_ReadChannel+0xe8>
    1980:	ca 01       	movw	r24, r20
    1982:	81 70       	andi	r24, 0x01	; 1
    1984:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <Dio_FlipChannel+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <Dio_FlipChannel+0x8>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	86 95       	lsr	r24
    19aa:	86 95       	lsr	r24
    19ac:	86 95       	lsr	r24
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	3c 83       	std	Y+4, r19	; 0x04
    19b4:	2b 83       	std	Y+3, r18	; 0x03
    19b6:	4b 81       	ldd	r20, Y+3	; 0x03
    19b8:	5c 81       	ldd	r21, Y+4	; 0x04
    19ba:	41 30       	cpi	r20, 0x01	; 1
    19bc:	51 05       	cpc	r21, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <Dio_FlipChannel+0x2a>
    19c0:	3c c0       	rjmp	.+120    	; 0x1a3a <Dio_FlipChannel+0xa2>
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	82 30       	cpi	r24, 0x02	; 2
    19c8:	91 05       	cpc	r25, r1
    19ca:	34 f4       	brge	.+12     	; 0x19d8 <Dio_FlipChannel+0x40>
    19cc:	2b 81       	ldd	r18, Y+3	; 0x03
    19ce:	3c 81       	ldd	r19, Y+4	; 0x04
    19d0:	21 15       	cp	r18, r1
    19d2:	31 05       	cpc	r19, r1
    19d4:	71 f0       	breq	.+28     	; 0x19f2 <Dio_FlipChannel+0x5a>
    19d6:	ab c0       	rjmp	.+342    	; 0x1b2e <Dio_FlipChannel+0x196>
    19d8:	4b 81       	ldd	r20, Y+3	; 0x03
    19da:	5c 81       	ldd	r21, Y+4	; 0x04
    19dc:	42 30       	cpi	r20, 0x02	; 2
    19de:	51 05       	cpc	r21, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <Dio_FlipChannel+0x4c>
    19e2:	54 c0       	rjmp	.+168    	; 0x1a8c <Dio_FlipChannel+0xf4>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	91 05       	cpc	r25, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <Dio_FlipChannel+0x58>
    19ee:	77 c0       	rjmp	.+238    	; 0x1ade <Dio_FlipChannel+0x146>
    19f0:	9e c0       	rjmp	.+316    	; 0x1b2e <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    19f2:	ab e3       	ldi	r26, 0x3B	; 59
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	eb e3       	ldi	r30, 0x3B	; 59
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <Dio_FlipChannel+0x76>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	2a 95       	dec	r18
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <Dio_FlipChannel+0x72>
    1a12:	84 27       	eor	r24, r20
    1a14:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    1a16:	eb e3       	ldi	r30, 0x3B	; 59
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a9 01       	movw	r20, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <Dio_FlipChannel+0x96>
    1a2a:	55 95       	asr	r21
    1a2c:	47 95       	ror	r20
    1a2e:	8a 95       	dec	r24
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <Dio_FlipChannel+0x92>
    1a32:	ca 01       	movw	r24, r20
    1a34:	81 70       	andi	r24, 0x01	; 1
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	7a c0       	rjmp	.+244    	; 0x1b2e <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    1a3a:	a8 e3       	ldi	r26, 0x38	; 56
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e8 e3       	ldi	r30, 0x38	; 56
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 01       	movw	r18, r24
    1a4e:	27 70       	andi	r18, 0x07	; 7
    1a50:	30 70       	andi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <Dio_FlipChannel+0xc4>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	2a 95       	dec	r18
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <Dio_FlipChannel+0xc0>
    1a60:	84 27       	eor	r24, r20
    1a62:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    1a64:	e8 e3       	ldi	r30, 0x38	; 56
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	87 70       	andi	r24, 0x07	; 7
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	a9 01       	movw	r20, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <Dio_FlipChannel+0xe8>
    1a7c:	55 95       	asr	r21
    1a7e:	47 95       	ror	r20
    1a80:	8a 95       	dec	r24
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <Dio_FlipChannel+0xe4>
    1a84:	ca 01       	movw	r24, r20
    1a86:	81 70       	andi	r24, 0x01	; 1
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	51 c0       	rjmp	.+162    	; 0x1b2e <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    1a8c:	a5 e3       	ldi	r26, 0x35	; 53
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e5 e3       	ldi	r30, 0x35	; 53
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9c 01       	movw	r18, r24
    1aa0:	27 70       	andi	r18, 0x07	; 7
    1aa2:	30 70       	andi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <Dio_FlipChannel+0x116>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	2a 95       	dec	r18
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <Dio_FlipChannel+0x112>
    1ab2:	84 27       	eor	r24, r20
    1ab4:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    1ab6:	e5 e3       	ldi	r30, 0x35	; 53
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	87 70       	andi	r24, 0x07	; 7
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	a9 01       	movw	r20, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <Dio_FlipChannel+0x13a>
    1ace:	55 95       	asr	r21
    1ad0:	47 95       	ror	r20
    1ad2:	8a 95       	dec	r24
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <Dio_FlipChannel+0x136>
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	81 70       	andi	r24, 0x01	; 1
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	28 c0       	rjmp	.+80     	; 0x1b2e <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    1ade:	a2 e3       	ldi	r26, 0x32	; 50
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e2 e3       	ldi	r30, 0x32	; 50
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9c 01       	movw	r18, r24
    1af2:	27 70       	andi	r18, 0x07	; 7
    1af4:	30 70       	andi	r19, 0x00	; 0
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <Dio_FlipChannel+0x168>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	2a 95       	dec	r18
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <Dio_FlipChannel+0x164>
    1b04:	84 27       	eor	r24, r20
    1b06:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    1b08:	e2 e3       	ldi	r30, 0x32	; 50
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	87 70       	andi	r24, 0x07	; 7
    1b1a:	90 70       	andi	r25, 0x00	; 0
    1b1c:	a9 01       	movw	r20, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <Dio_FlipChannel+0x18c>
    1b20:	55 95       	asr	r21
    1b22:	47 95       	ror	r20
    1b24:	8a 95       	dec	r24
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <Dio_FlipChannel+0x188>
    1b28:	ca 01       	movw	r24, r20
    1b2a:	81 70       	andi	r24, 0x01	; 1
    1b2c:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <Dio_WritePort+0x6>
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <Dio_WritePort+0x8>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	3c 83       	std	Y+4, r19	; 0x04
    1b56:	2b 83       	std	Y+3, r18	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	91 05       	cpc	r25, r1
    1b60:	d1 f0       	breq	.+52     	; 0x1b96 <Dio_WritePort+0x58>
    1b62:	2b 81       	ldd	r18, Y+3	; 0x03
    1b64:	3c 81       	ldd	r19, Y+4	; 0x04
    1b66:	22 30       	cpi	r18, 0x02	; 2
    1b68:	31 05       	cpc	r19, r1
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <Dio_WritePort+0x38>
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	61 f0       	breq	.+24     	; 0x1b8c <Dio_WritePort+0x4e>
    1b74:	1e c0       	rjmp	.+60     	; 0x1bb2 <Dio_WritePort+0x74>
    1b76:	2b 81       	ldd	r18, Y+3	; 0x03
    1b78:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	81 f0       	breq	.+32     	; 0x1ba0 <Dio_WritePort+0x62>
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	83 30       	cpi	r24, 0x03	; 3
    1b86:	91 05       	cpc	r25, r1
    1b88:	81 f0       	breq	.+32     	; 0x1baa <Dio_WritePort+0x6c>
    1b8a:	13 c0       	rjmp	.+38     	; 0x1bb2 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    1b8c:	eb e3       	ldi	r30, 0x3B	; 59
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	80 83       	st	Z, r24
    1b94:	0e c0       	rjmp	.+28     	; 0x1bb2 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    1b96:	e8 e3       	ldi	r30, 0x38	; 56
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	80 83       	st	Z, r24
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    1ba0:	e5 e3       	ldi	r30, 0x35	; 53
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	80 83       	st	Z, r24
    1ba8:	04 c0       	rjmp	.+8      	; 0x1bb2 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    1baa:	e2 e3       	ldi	r30, 0x32	; 50
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	80 83       	st	Z, r24
		break;
	}
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <ADC_Init>:
 */

#include "../includes/ADC_interface.h"  // Include the ADC interface header file
#include <avr/io.h>         // Include AVR I/O definitions
#include "../../DIO/DIO_interface.h"
void ADC_Init(void) {
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
	// Set reference voltage to AVCC with external capacitor at AREF pin
#if ADC_AREF_MODE == ADC_AREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_AREF_MODE == ADC_AVCC
	SET_BIT(ADMUX,REFS0);
    1bc8:	a7 e2       	ldi	r26, 0x27	; 39
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e7 e2       	ldi	r30, 0x27	; 39
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 64       	ori	r24, 0x40	; 64
    1bd4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    1bd6:	a7 e2       	ldi	r26, 0x27	; 39
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e7 e2       	ldi	r30, 0x27	; 39
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 77       	andi	r24, 0x7F	; 127
    1be2:	8c 93       	st	X, r24
#endif

//	ADMUX = (1 << REFS0);

#if 	ADC_RESULT_ADJUSTMENT_MODE ==ADC_LEFT_ADJUST_THE_RESULT
	SET_BIT(ADMUX,ADLAR);
    1be4:	a7 e2       	ldi	r26, 0x27	; 39
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e7 e2       	ldi	r30, 0x27	; 39
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	80 62       	ori	r24, 0x20	; 32
    1bf0:	8c 93       	st	X, r24
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_32
    SET_BIT(ADCSRA,ADPS0);
    CLR_BIT(ADCSRA,ADPS1);
    SET_BIT(ADCSRA,ADPS2);
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_64
    CLR_BIT(ADCSRA,ADPS0);
    1bf2:	a6 e2       	ldi	r26, 0x26	; 38
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e6 e2       	ldi	r30, 0x26	; 38
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8e 7f       	andi	r24, 0xFE	; 254
    1bfe:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS1);
    1c00:	a6 e2       	ldi	r26, 0x26	; 38
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e6 e2       	ldi	r30, 0x26	; 38
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	82 60       	ori	r24, 0x02	; 2
    1c0c:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS2);
    1c0e:	a6 e2       	ldi	r26, 0x26	; 38
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e6 e2       	ldi	r30, 0x26	; 38
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	84 60       	ori	r24, 0x04	; 4
    1c1a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS1);
    SET_BIT(ADCSRA,ADPS2);
#endif

    // Enable the ADC
   	     SET_BIT(ADCSRA,ADEN);
    1c1c:	a6 e2       	ldi	r26, 0x26	; 38
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e6 e2       	ldi	r30, 0x26	; 38
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	80 68       	ori	r24, 0x80	; 128
    1c28:	8c 93       	st	X, r24
    //    ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
//	SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);

}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <ADC_ReadChannel>:

u16 ADC_ReadChannel(u8 channel) {
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <ADC_ReadChannel+0x6>
    1c36:	0f 92       	push	r0
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
	u16 result=0;
    1c3e:	1a 82       	std	Y+2, r1	; 0x02
    1c40:	19 82       	std	Y+1, r1	; 0x01
	// Select the ADC channel           0x00000111
                //    0x1111 1000
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
    1c42:	a7 e2       	ldi	r26, 0x27	; 39
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e7 e2       	ldi	r30, 0x27	; 39
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	98 2f       	mov	r25, r24
    1c4e:	98 7f       	andi	r25, 0xF8	; 248
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	87 70       	andi	r24, 0x07	; 7
    1c54:	89 2b       	or	r24, r25
    1c56:	8c 93       	st	X, r24

    // Start the conversion
    SET_BIT(ADCSRA,ADSC);
    1c58:	a6 e2       	ldi	r26, 0x26	; 38
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e6 e2       	ldi	r30, 0x26	; 38
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 64       	ori	r24, 0x40	; 64
    1c64:	8c 93       	st	X, r24
   // ADCSRA |= (1 << ADSC);

    // Wait for the conversion to complete
    while (ADCSRA & (1 << ADSC));
    1c66:	e6 e2       	ldi	r30, 0x26	; 38
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	88 2f       	mov	r24, r24
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	80 74       	andi	r24, 0x40	; 64
    1c72:	90 70       	andi	r25, 0x00	; 0
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	b9 f7       	brne	.-18     	; 0x1c66 <ADC_ReadChannel+0x36>

#if ADC_RESULT_ADJUSTMENT_MODE == ADC_LEFT_ADJUST_THE_RESULT
    // Return the ADC result as a 16-bit value (combining ADCL and ADCH)
    result=(ADCL>>6);
    1c78:	e4 e2       	ldi	r30, 0x24	; 36
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	82 95       	swap	r24
    1c80:	86 95       	lsr	r24
    1c82:	86 95       	lsr	r24
    1c84:	83 70       	andi	r24, 0x03	; 3
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    result|=(ADCH<<2);
    1c8e:	e5 e2       	ldi	r30, 0x25	; 37
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	9c 01       	movw	r18, r24
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	82 2b       	or	r24, r18
    1ca8:	93 2b       	or	r25, r19
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
    // Return the ADC result as a 16-bit value (combining ADCL and ADCH)
  result = ADCL;
  result|=(ADCH << 8);
    // result = (ADCH<<8) | ADCL;
    #endif
    return result;
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <SevenSeg_SegEnable>:

#include "SEVEN_SEGMENT.h"
#include <avr/io.h>
#include <avr/delay.h>

void SevenSeg_SegEnable(SegNumber seg) {
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <SevenSeg_SegEnable+0x6>
    1cc4:	0f 92       	push	r0
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	89 83       	std	Y+1, r24	; 0x01
	switch (seg) {
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	3b 83       	std	Y+3, r19	; 0x03
    1cd4:	2a 83       	std	Y+2, r18	; 0x02
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cda:	83 30       	cpi	r24, 0x03	; 3
    1cdc:	91 05       	cpc	r25, r1
    1cde:	b1 f0       	breq	.+44     	; 0x1d0c <SevenSeg_SegEnable+0x4e>
    1ce0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce4:	24 30       	cpi	r18, 0x04	; 4
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	34 f4       	brge	.+12     	; 0x1cf6 <SevenSeg_SegEnable+0x38>
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	e9 f0       	breq	.+58     	; 0x1d2e <SevenSeg_SegEnable+0x70>
    1cf4:	4e c0       	rjmp	.+156    	; 0x1d92 <SevenSeg_SegEnable+0xd4>
    1cf6:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf8:	3b 81       	ldd	r19, Y+3	; 0x03
    1cfa:	2d 30       	cpi	r18, 0x0D	; 13
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	41 f1       	breq	.+80     	; 0x1d50 <SevenSeg_SegEnable+0x92>
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	8e 30       	cpi	r24, 0x0E	; 14
    1d06:	91 05       	cpc	r25, r1
    1d08:	a1 f1       	breq	.+104    	; 0x1d72 <SevenSeg_SegEnable+0xb4>
    1d0a:	43 c0       	rjmp	.+134    	; 0x1d92 <SevenSeg_SegEnable+0xd4>
	case SEG_1:
		Dio_WriteChannel(SEG_2, 1);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	61 e0       	ldi	r22, 0x01	; 1
    1d10:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1d14:	8d e0       	ldi	r24, 0x0D	; 13
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1d1c:	8e e0       	ldi	r24, 0x0E	; 14
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 0);
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    1d2c:	32 c0       	rjmp	.+100    	; 0x1d92 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_2:
		Dio_WriteChannel(SEG_1, 1);
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1d36:	8d e0       	ldi	r24, 0x0D	; 13
    1d38:	61 e0       	ldi	r22, 0x01	; 1
    1d3a:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1d3e:	8e e0       	ldi	r24, 0x0E	; 14
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_2, 0);
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    1d4e:	21 c0       	rjmp	.+66     	; 0x1d92 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_3:
		Dio_WriteChannel(SEG_2, 1);
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	61 e0       	ldi	r22, 0x01	; 1
    1d54:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1d60:	8e e0       	ldi	r24, 0x0E	; 14
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 0);
    1d68:	8d e0       	ldi	r24, 0x0D	; 13
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    1d70:	10 c0       	rjmp	.+32     	; 0x1d92 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_4:
		Dio_WriteChannel(SEG_2, 1);
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1d7a:	8d e0       	ldi	r24, 0x0D	; 13
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 0);
    1d8a:	8e e0       	ldi	r24, 0x0E	; 14
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>

		break;

	}

}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <SevenSeg_Send>:
//
//void SevenSeg_SegDisable(SegNumber seg){
//	Dio_WriteChannel(seg,1);
//}

void SevenSeg_Send(u8 num1, u8 num2, u8 num3, u8 num4) {
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	ec 97       	sbiw	r28, 0x3c	; 60
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	89 af       	std	Y+57, r24	; 0x39
    1db4:	6a af       	std	Y+58, r22	; 0x3a
    1db6:	4b af       	std	Y+59, r20	; 0x3b
    1db8:	2c af       	std	Y+60, r18	; 0x3c

	SevenSeg_SegEnable(SEG_1);
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num1);
    1dc0:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc2:	0e 94 c6 10 	call	0x218c	; 0x218c <SevenSeg_SendOneSeg>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a8 ec       	ldi	r26, 0xC8	; 200
    1dcc:	b2 e4       	ldi	r27, 0x42	; 66
    1dce:	8d ab       	std	Y+53, r24	; 0x35
    1dd0:	9e ab       	std	Y+54, r25	; 0x36
    1dd2:	af ab       	std	Y+55, r26	; 0x37
    1dd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dda:	8f a9       	ldd	r24, Y+55	; 0x37
    1ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	55 e4       	ldi	r21, 0x45	; 69
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	89 ab       	std	Y+49, r24	; 0x31
    1df0:	9a ab       	std	Y+50, r25	; 0x32
    1df2:	ab ab       	std	Y+51, r26	; 0x33
    1df4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1df6:	69 a9       	ldd	r22, Y+49	; 0x31
    1df8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <SevenSeg_Send+0x7a>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	98 ab       	std	Y+48, r25	; 0x30
    1e14:	8f a7       	std	Y+47, r24	; 0x2f
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <SevenSeg_Send+0xf8>
	else if (__tmp > 65535)
    1e18:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <SevenSeg_Send+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6d a9       	ldd	r22, Y+53	; 0x35
    1e32:	7e a9       	ldd	r23, Y+54	; 0x36
    1e34:	8f a9       	ldd	r24, Y+55	; 0x37
    1e36:	98 ad       	ldd	r25, Y+56	; 0x38
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	98 ab       	std	Y+48, r25	; 0x30
    1e56:	8f a7       	std	Y+47, r24	; 0x2f
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <SevenSeg_Send+0xda>
    1e5a:	80 e9       	ldi	r24, 0x90	; 144
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	9e a7       	std	Y+46, r25	; 0x2e
    1e60:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <SevenSeg_Send+0xc8>
    1e6a:	9e a7       	std	Y+46, r25	; 0x2e
    1e6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e70:	98 a9       	ldd	r25, Y+48	; 0x30
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <SevenSeg_Send+0xbc>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <SevenSeg_Send+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	69 a9       	ldd	r22, Y+49	; 0x31
    1e84:	7a a9       	ldd	r23, Y+50	; 0x32
    1e86:	8b a9       	ldd	r24, Y+51	; 0x33
    1e88:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	98 ab       	std	Y+48, r25	; 0x30
    1e94:	8f a7       	std	Y+47, r24	; 0x2f
    1e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e98:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9a:	9c a7       	std	Y+44, r25	; 0x2c
    1e9c:	8b a7       	std	Y+43, r24	; 0x2b
    1e9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <SevenSeg_Send+0x104>
    1ea6:	9c a7       	std	Y+44, r25	; 0x2c
    1ea8:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_2);
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num2);
    1eb0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eb2:	0e 94 c6 10 	call	0x218c	; 0x218c <SevenSeg_SendOneSeg>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a8 ec       	ldi	r26, 0xC8	; 200
    1ebc:	b2 e4       	ldi	r27, 0x42	; 66
    1ebe:	8f a3       	std	Y+39, r24	; 0x27
    1ec0:	98 a7       	std	Y+40, r25	; 0x28
    1ec2:	a9 a7       	std	Y+41, r26	; 0x29
    1ec4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a e7       	ldi	r20, 0x7A	; 122
    1ed4:	55 e4       	ldi	r21, 0x45	; 69
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	8b a3       	std	Y+35, r24	; 0x23
    1ee0:	9c a3       	std	Y+36, r25	; 0x24
    1ee2:	ad a3       	std	Y+37, r26	; 0x25
    1ee4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eea:	8d a1       	ldd	r24, Y+37	; 0x25
    1eec:	9e a1       	ldd	r25, Y+38	; 0x26
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <SevenSeg_Send+0x16a>
		__ticks = 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9a a3       	std	Y+34, r25	; 0x22
    1f04:	89 a3       	std	Y+33, r24	; 0x21
    1f06:	3f c0       	rjmp	.+126    	; 0x1f86 <SevenSeg_Send+0x1e8>
	else if (__tmp > 65535)
    1f08:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	3f ef       	ldi	r19, 0xFF	; 255
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	57 e4       	ldi	r21, 0x47	; 71
    1f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	4c f5       	brge	.+82     	; 0x1f72 <SevenSeg_Send+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	6f a1       	ldd	r22, Y+39	; 0x27
    1f22:	78 a5       	ldd	r23, Y+40	; 0x28
    1f24:	89 a5       	ldd	r24, Y+41	; 0x29
    1f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9a a3       	std	Y+34, r25	; 0x22
    1f46:	89 a3       	std	Y+33, r24	; 0x21
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <SevenSeg_Send+0x1ca>
    1f4a:	80 e9       	ldi	r24, 0x90	; 144
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	98 a3       	std	Y+32, r25	; 0x20
    1f50:	8f 8f       	std	Y+31, r24	; 0x1f
    1f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f54:	98 a1       	ldd	r25, Y+32	; 0x20
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <SevenSeg_Send+0x1b8>
    1f5a:	98 a3       	std	Y+32, r25	; 0x20
    1f5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f60:	9a a1       	ldd	r25, Y+34	; 0x22
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	9a a3       	std	Y+34, r25	; 0x22
    1f66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a <SevenSeg_Send+0x1ac>
    1f70:	14 c0       	rjmp	.+40     	; 0x1f9a <SevenSeg_Send+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f72:	6b a1       	ldd	r22, Y+35	; 0x23
    1f74:	7c a1       	ldd	r23, Y+36	; 0x24
    1f76:	8d a1       	ldd	r24, Y+37	; 0x25
    1f78:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9a a3       	std	Y+34, r25	; 0x22
    1f84:	89 a3       	std	Y+33, r24	; 0x21
    1f86:	89 a1       	ldd	r24, Y+33	; 0x21
    1f88:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <SevenSeg_Send+0x1f4>
    1f96:	9e 8f       	std	Y+30, r25	; 0x1e
    1f98:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_3);
    1f9a:	8d e0       	ldi	r24, 0x0D	; 13
    1f9c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num3);
    1fa0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fa2:	0e 94 c6 10 	call	0x218c	; 0x218c <SevenSeg_SendOneSeg>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a8 ec       	ldi	r26, 0xC8	; 200
    1fac:	b2 e4       	ldi	r27, 0x42	; 66
    1fae:	89 8f       	std	Y+25, r24	; 0x19
    1fb0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	4a e7       	ldi	r20, 0x7A	; 122
    1fc4:	55 e4       	ldi	r21, 0x45	; 69
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8d 8b       	std	Y+21, r24	; 0x15
    1fd0:	9e 8b       	std	Y+22, r25	; 0x16
    1fd2:	af 8b       	std	Y+23, r26	; 0x17
    1fd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fda:	8f 89       	ldd	r24, Y+23	; 0x17
    1fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <SevenSeg_Send+0x25a>
		__ticks = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9c 8b       	std	Y+20, r25	; 0x14
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
    1ff6:	3f c0       	rjmp	.+126    	; 0x2076 <SevenSeg_Send+0x2d8>
	else if (__tmp > 65535)
    1ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	57 e4       	ldi	r21, 0x47	; 71
    2008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200c:	18 16       	cp	r1, r24
    200e:	4c f5       	brge	.+82     	; 0x2062 <SevenSeg_Send+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2010:	69 8d       	ldd	r22, Y+25	; 0x19
    2012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9c 8b       	std	Y+20, r25	; 0x14
    2036:	8b 8b       	std	Y+19, r24	; 0x13
    2038:	0f c0       	rjmp	.+30     	; 0x2058 <SevenSeg_Send+0x2ba>
    203a:	80 e9       	ldi	r24, 0x90	; 144
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	9a 8b       	std	Y+18, r25	; 0x12
    2040:	89 8b       	std	Y+17, r24	; 0x11
    2042:	89 89       	ldd	r24, Y+17	; 0x11
    2044:	9a 89       	ldd	r25, Y+18	; 0x12
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <SevenSeg_Send+0x2a8>
    204a:	9a 8b       	std	Y+18, r25	; 0x12
    204c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	9c 89       	ldd	r25, Y+20	; 0x14
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2058:	8b 89       	ldd	r24, Y+19	; 0x13
    205a:	9c 89       	ldd	r25, Y+20	; 0x14
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	69 f7       	brne	.-38     	; 0x203a <SevenSeg_Send+0x29c>
    2060:	14 c0       	rjmp	.+40     	; 0x208a <SevenSeg_Send+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2062:	6d 89       	ldd	r22, Y+21	; 0x15
    2064:	7e 89       	ldd	r23, Y+22	; 0x16
    2066:	8f 89       	ldd	r24, Y+23	; 0x17
    2068:	98 8d       	ldd	r25, Y+24	; 0x18
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9c 8b       	std	Y+20, r25	; 0x14
    2074:	8b 8b       	std	Y+19, r24	; 0x13
    2076:	8b 89       	ldd	r24, Y+19	; 0x13
    2078:	9c 89       	ldd	r25, Y+20	; 0x14
    207a:	98 8b       	std	Y+16, r25	; 0x10
    207c:	8f 87       	std	Y+15, r24	; 0x0f
    207e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2080:	98 89       	ldd	r25, Y+16	; 0x10
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <SevenSeg_Send+0x2e4>
    2086:	98 8b       	std	Y+16, r25	; 0x10
    2088:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_4);
    208a:	8e e0       	ldi	r24, 0x0E	; 14
    208c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num4);
    2090:	8c ad       	ldd	r24, Y+60	; 0x3c
    2092:	0e 94 c6 10 	call	0x218c	; 0x218c <SevenSeg_SendOneSeg>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a8 ec       	ldi	r26, 0xC8	; 200
    209c:	b2 e4       	ldi	r27, 0x42	; 66
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	9c 87       	std	Y+12, r25	; 0x0c
    20a2:	ad 87       	std	Y+13, r26	; 0x0d
    20a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	55 e4       	ldi	r21, 0x45	; 69
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8f 83       	std	Y+7, r24	; 0x07
    20c0:	98 87       	std	Y+8, r25	; 0x08
    20c2:	a9 87       	std	Y+9, r26	; 0x09
    20c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <SevenSeg_Send+0x34a>
		__ticks = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	3f c0       	rjmp	.+126    	; 0x2166 <SevenSeg_Send+0x3c8>
	else if (__tmp > 65535)
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	4c f5       	brge	.+82     	; 0x2152 <SevenSeg_Send+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	6b 85       	ldd	r22, Y+11	; 0x0b
    2102:	7c 85       	ldd	r23, Y+12	; 0x0c
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	51 e4       	ldi	r21, 0x41	; 65
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <SevenSeg_Send+0x3aa>
    212a:	80 e9       	ldi	r24, 0x90	; 144
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	8b 83       	std	Y+3, r24	; 0x03
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <SevenSeg_Send+0x398>
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	69 f7       	brne	.-38     	; 0x212a <SevenSeg_Send+0x38c>
    2150:	14 c0       	rjmp	.+40     	; 0x217a <SevenSeg_Send+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2152:	6f 81       	ldd	r22, Y+7	; 0x07
    2154:	78 85       	ldd	r23, Y+8	; 0x08
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <SevenSeg_Send+0x3d4>
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);

}
    217a:	ec 96       	adiw	r28, 0x3c	; 60
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <SevenSeg_SendOneSeg>:
void SevenSeg_SendOneSeg(u8 number) //SevenSeg_Type type ,
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	89 83       	std	Y+1, r24	; 0x01
//	SevenSeg_SegEnable(seg);
	Dio_WriteChannel(PB_0, GET_BIT(number, 0));
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	98 2f       	mov	r25, r24
    219c:	91 70       	andi	r25, 0x01	; 1
    219e:	88 e0       	ldi	r24, 0x08	; 8
    21a0:	69 2f       	mov	r22, r25
    21a2:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(number, 1));
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	86 95       	lsr	r24
    21aa:	98 2f       	mov	r25, r24
    21ac:	91 70       	andi	r25, 0x01	; 1
    21ae:	89 e0       	ldi	r24, 0x09	; 9
    21b0:	69 2f       	mov	r22, r25
    21b2:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(number, 2));
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	86 95       	lsr	r24
    21ba:	86 95       	lsr	r24
    21bc:	98 2f       	mov	r25, r24
    21be:	91 70       	andi	r25, 0x01	; 1
    21c0:	8a e0       	ldi	r24, 0x0A	; 10
    21c2:	69 2f       	mov	r22, r25
    21c4:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(number, 3));
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	86 95       	lsr	r24
    21cc:	86 95       	lsr	r24
    21ce:	86 95       	lsr	r24
    21d0:	98 2f       	mov	r25, r24
    21d2:	91 70       	andi	r25, 0x01	; 1
    21d4:	8c e0       	ldi	r24, 0x0C	; 12
    21d6:	69 2f       	mov	r22, r25
    21d8:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
}
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <lcd4_Init>:
 * lcd4_Init : This function initializes the LCD 4bit
 * @param	void
 * @return	void
 */
void lcd4_Init(void)
{
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	c6 54       	subi	r28, 0x46	; 70
    21f2:	d0 40       	sbci	r29, 0x00	; 0
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	fe 01       	movw	r30, r28
    2200:	ed 5b       	subi	r30, 0xBD	; 189
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a8 e4       	ldi	r26, 0x48	; 72
    220a:	b2 e4       	ldi	r27, 0x42	; 66
    220c:	80 83       	st	Z, r24
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	a2 83       	std	Z+2, r26	; 0x02
    2212:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2214:	8e 01       	movw	r16, r28
    2216:	01 5c       	subi	r16, 0xC1	; 193
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	fe 01       	movw	r30, r28
    221c:	ed 5b       	subi	r30, 0xBD	; 189
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a e7       	ldi	r20, 0x7A	; 122
    222e:	55 e4       	ldi	r21, 0x45	; 69
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	f8 01       	movw	r30, r16
    223a:	80 83       	st	Z, r24
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	a2 83       	std	Z+2, r26	; 0x02
    2240:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2242:	fe 01       	movw	r30, r28
    2244:	ff 96       	adiw	r30, 0x3f	; 63
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <lcd4_Init+0x84>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9e af       	std	Y+62, r25	; 0x3e
    2264:	8d af       	std	Y+61, r24	; 0x3d
    2266:	46 c0       	rjmp	.+140    	; 0x22f4 <lcd4_Init+0x110>
	else if (__tmp > 65535)
    2268:	fe 01       	movw	r30, r28
    226a:	ff 96       	adiw	r30, 0x3f	; 63
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
    2270:	82 81       	ldd	r24, Z+2	; 0x02
    2272:	93 81       	ldd	r25, Z+3	; 0x03
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2280:	18 16       	cp	r1, r24
    2282:	64 f5       	brge	.+88     	; 0x22dc <lcd4_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2284:	fe 01       	movw	r30, r28
    2286:	ed 5b       	subi	r30, 0xBD	; 189
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	60 81       	ld	r22, Z
    228c:	71 81       	ldd	r23, Z+1	; 0x01
    228e:	82 81       	ldd	r24, Z+2	; 0x02
    2290:	93 81       	ldd	r25, Z+3	; 0x03
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e af       	std	Y+62, r25	; 0x3e
    22b0:	8d af       	std	Y+61, r24	; 0x3d
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <lcd4_Init+0xee>
    22b4:	80 e9       	ldi	r24, 0x90	; 144
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	9c af       	std	Y+60, r25	; 0x3c
    22ba:	8b af       	std	Y+59, r24	; 0x3b
    22bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    22be:	9c ad       	ldd	r25, Y+60	; 0x3c
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <lcd4_Init+0xdc>
    22c4:	9c af       	std	Y+60, r25	; 0x3c
    22c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9e af       	std	Y+62, r25	; 0x3e
    22d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    22d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <lcd4_Init+0xd0>
    22da:	16 c0       	rjmp	.+44     	; 0x2308 <lcd4_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	fe 01       	movw	r30, r28
    22de:	ff 96       	adiw	r30, 0x3f	; 63
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9e af       	std	Y+62, r25	; 0x3e
    22f2:	8d af       	std	Y+61, r24	; 0x3d
    22f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22f8:	9a af       	std	Y+58, r25	; 0x3a
    22fa:	89 af       	std	Y+57, r24	; 0x39
    22fc:	89 ad       	ldd	r24, Y+57	; 0x39
    22fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <lcd4_Init+0x11c>
    2304:	9a af       	std	Y+58, r25	; 0x3a
    2306:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD4_Command_Write(LCD_CURSOR_HOME);
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
	LCD4_Command_Write(LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);	//LCD 4bit mode, 2 line
    230e:	88 e2       	ldi	r24, 0x28	; 40
    2310:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e8       	ldi	r26, 0x80	; 128
    231a:	bf e3       	ldi	r27, 0x3F	; 63
    231c:	8d ab       	std	Y+53, r24	; 0x35
    231e:	9e ab       	std	Y+54, r25	; 0x36
    2320:	af ab       	std	Y+55, r26	; 0x37
    2322:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	6d a9       	ldd	r22, Y+53	; 0x35
    2326:	7e a9       	ldd	r23, Y+54	; 0x36
    2328:	8f a9       	ldd	r24, Y+55	; 0x37
    232a:	98 ad       	ldd	r25, Y+56	; 0x38
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4a e7       	ldi	r20, 0x7A	; 122
    2332:	55 e4       	ldi	r21, 0x45	; 69
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	89 ab       	std	Y+49, r24	; 0x31
    233e:	9a ab       	std	Y+50, r25	; 0x32
    2340:	ab ab       	std	Y+51, r26	; 0x33
    2342:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2344:	69 a9       	ldd	r22, Y+49	; 0x31
    2346:	7a a9       	ldd	r23, Y+50	; 0x32
    2348:	8b a9       	ldd	r24, Y+51	; 0x33
    234a:	9c a9       	ldd	r25, Y+52	; 0x34
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	2c f4       	brge	.+10     	; 0x2366 <lcd4_Init+0x182>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	98 ab       	std	Y+48, r25	; 0x30
    2362:	8f a7       	std	Y+47, r24	; 0x2f
    2364:	3f c0       	rjmp	.+126    	; 0x23e4 <lcd4_Init+0x200>
	else if (__tmp > 65535)
    2366:	69 a9       	ldd	r22, Y+49	; 0x31
    2368:	7a a9       	ldd	r23, Y+50	; 0x32
    236a:	8b a9       	ldd	r24, Y+51	; 0x33
    236c:	9c a9       	ldd	r25, Y+52	; 0x34
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	4c f5       	brge	.+82     	; 0x23d0 <lcd4_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	6d a9       	ldd	r22, Y+53	; 0x35
    2380:	7e a9       	ldd	r23, Y+54	; 0x36
    2382:	8f a9       	ldd	r24, Y+55	; 0x37
    2384:	98 ad       	ldd	r25, Y+56	; 0x38
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	98 ab       	std	Y+48, r25	; 0x30
    23a4:	8f a7       	std	Y+47, r24	; 0x2f
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <lcd4_Init+0x1e2>
    23a8:	80 e9       	ldi	r24, 0x90	; 144
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	9e a7       	std	Y+46, r25	; 0x2e
    23ae:	8d a7       	std	Y+45, r24	; 0x2d
    23b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <lcd4_Init+0x1d0>
    23b8:	9e a7       	std	Y+46, r25	; 0x2e
    23ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23be:	98 a9       	ldd	r25, Y+48	; 0x30
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	98 ab       	std	Y+48, r25	; 0x30
    23c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <lcd4_Init+0x1c4>
    23ce:	14 c0       	rjmp	.+40     	; 0x23f8 <lcd4_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	98 ab       	std	Y+48, r25	; 0x30
    23e2:	8f a7       	std	Y+47, r24	; 0x2f
    23e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e6:	98 a9       	ldd	r25, Y+48	; 0x30
    23e8:	9c a7       	std	Y+44, r25	; 0x2c
    23ea:	8b a7       	std	Y+43, r24	; 0x2b
    23ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <lcd4_Init+0x20c>
    23f4:	9c a7       	std	Y+44, r25	; 0x2c
    23f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD4_Command_Write(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_ON_BLOCK_CURSOR_ON); //cursor on off,blink  0x0f,0x0c,0x0e
    23f8:	8f e0       	ldi	r24, 0x0F	; 15
    23fa:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e8       	ldi	r26, 0x80	; 128
    2404:	bf e3       	ldi	r27, 0x3F	; 63
    2406:	8f a3       	std	Y+39, r24	; 0x27
    2408:	98 a7       	std	Y+40, r25	; 0x28
    240a:	a9 a7       	std	Y+41, r26	; 0x29
    240c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	6f a1       	ldd	r22, Y+39	; 0x27
    2410:	78 a5       	ldd	r23, Y+40	; 0x28
    2412:	89 a5       	ldd	r24, Y+41	; 0x29
    2414:	9a a5       	ldd	r25, Y+42	; 0x2a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a e7       	ldi	r20, 0x7A	; 122
    241c:	55 e4       	ldi	r21, 0x45	; 69
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8b a3       	std	Y+35, r24	; 0x23
    2428:	9c a3       	std	Y+36, r25	; 0x24
    242a:	ad a3       	std	Y+37, r26	; 0x25
    242c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    242e:	6b a1       	ldd	r22, Y+35	; 0x23
    2430:	7c a1       	ldd	r23, Y+36	; 0x24
    2432:	8d a1       	ldd	r24, Y+37	; 0x25
    2434:	9e a1       	ldd	r25, Y+38	; 0x26
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <lcd4_Init+0x26c>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9a a3       	std	Y+34, r25	; 0x22
    244c:	89 a3       	std	Y+33, r24	; 0x21
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <lcd4_Init+0x2ea>
	else if (__tmp > 65535)
    2450:	6b a1       	ldd	r22, Y+35	; 0x23
    2452:	7c a1       	ldd	r23, Y+36	; 0x24
    2454:	8d a1       	ldd	r24, Y+37	; 0x25
    2456:	9e a1       	ldd	r25, Y+38	; 0x26
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <lcd4_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	6f a1       	ldd	r22, Y+39	; 0x27
    246a:	78 a5       	ldd	r23, Y+40	; 0x28
    246c:	89 a5       	ldd	r24, Y+41	; 0x29
    246e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9a a3       	std	Y+34, r25	; 0x22
    248e:	89 a3       	std	Y+33, r24	; 0x21
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <lcd4_Init+0x2cc>
    2492:	80 e9       	ldi	r24, 0x90	; 144
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	98 a3       	std	Y+32, r25	; 0x20
    2498:	8f 8f       	std	Y+31, r24	; 0x1f
    249a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    249c:	98 a1       	ldd	r25, Y+32	; 0x20
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <lcd4_Init+0x2ba>
    24a2:	98 a3       	std	Y+32, r25	; 0x20
    24a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	89 a1       	ldd	r24, Y+33	; 0x21
    24a8:	9a a1       	ldd	r25, Y+34	; 0x22
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	9a a3       	std	Y+34, r25	; 0x22
    24ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	89 a1       	ldd	r24, Y+33	; 0x21
    24b2:	9a a1       	ldd	r25, Y+34	; 0x22
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <lcd4_Init+0x2ae>
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <lcd4_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	6b a1       	ldd	r22, Y+35	; 0x23
    24bc:	7c a1       	ldd	r23, Y+36	; 0x24
    24be:	8d a1       	ldd	r24, Y+37	; 0x25
    24c0:	9e a1       	ldd	r25, Y+38	; 0x26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9a a3       	std	Y+34, r25	; 0x22
    24cc:	89 a3       	std	Y+33, r24	; 0x21
    24ce:	89 a1       	ldd	r24, Y+33	; 0x21
    24d0:	9a a1       	ldd	r25, Y+34	; 0x22
    24d2:	9e 8f       	std	Y+30, r25	; 0x1e
    24d4:	8d 8f       	std	Y+29, r24	; 0x1d
    24d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <lcd4_Init+0x2f6>
    24de:	9e 8f       	std	Y+30, r25	; 0x1e
    24e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD4_Command_Write(LCD_CLEAR_COMMAND); //clear screen
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a0 e0       	ldi	r26, 0x00	; 0
    24ee:	b0 e4       	ldi	r27, 0x40	; 64
    24f0:	89 8f       	std	Y+25, r24	; 0x19
    24f2:	9a 8f       	std	Y+26, r25	; 0x1a
    24f4:	ab 8f       	std	Y+27, r26	; 0x1b
    24f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f8:	69 8d       	ldd	r22, Y+25	; 0x19
    24fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a e7       	ldi	r20, 0x7A	; 122
    2506:	55 e4       	ldi	r21, 0x45	; 69
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8d 8b       	std	Y+21, r24	; 0x15
    2512:	9e 8b       	std	Y+22, r25	; 0x16
    2514:	af 8b       	std	Y+23, r26	; 0x17
    2516:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2518:	6d 89       	ldd	r22, Y+21	; 0x15
    251a:	7e 89       	ldd	r23, Y+22	; 0x16
    251c:	8f 89       	ldd	r24, Y+23	; 0x17
    251e:	98 8d       	ldd	r25, Y+24	; 0x18
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <lcd4_Init+0x356>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
    2538:	3f c0       	rjmp	.+126    	; 0x25b8 <lcd4_Init+0x3d4>
	else if (__tmp > 65535)
    253a:	6d 89       	ldd	r22, Y+21	; 0x15
    253c:	7e 89       	ldd	r23, Y+22	; 0x16
    253e:	8f 89       	ldd	r24, Y+23	; 0x17
    2540:	98 8d       	ldd	r25, Y+24	; 0x18
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	4c f5       	brge	.+82     	; 0x25a4 <lcd4_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	69 8d       	ldd	r22, Y+25	; 0x19
    2554:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	8b 8b       	std	Y+19, r24	; 0x13
    257a:	0f c0       	rjmp	.+30     	; 0x259a <lcd4_Init+0x3b6>
    257c:	80 e9       	ldi	r24, 0x90	; 144
    257e:	91 e0       	ldi	r25, 0x01	; 1
    2580:	9a 8b       	std	Y+18, r25	; 0x12
    2582:	89 8b       	std	Y+17, r24	; 0x11
    2584:	89 89       	ldd	r24, Y+17	; 0x11
    2586:	9a 89       	ldd	r25, Y+18	; 0x12
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <lcd4_Init+0x3a4>
    258c:	9a 8b       	std	Y+18, r25	; 0x12
    258e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	9c 8b       	std	Y+20, r25	; 0x14
    2598:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	8b 89       	ldd	r24, Y+19	; 0x13
    259c:	9c 89       	ldd	r25, Y+20	; 0x14
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	69 f7       	brne	.-38     	; 0x257c <lcd4_Init+0x398>
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <lcd4_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	6d 89       	ldd	r22, Y+21	; 0x15
    25a6:	7e 89       	ldd	r23, Y+22	; 0x16
    25a8:	8f 89       	ldd	r24, Y+23	; 0x17
    25aa:	98 8d       	ldd	r25, Y+24	; 0x18
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9c 8b       	std	Y+20, r25	; 0x14
    25b6:	8b 8b       	std	Y+19, r24	; 0x13
    25b8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ba:	9c 89       	ldd	r25, Y+20	; 0x14
    25bc:	98 8b       	std	Y+16, r25	; 0x10
    25be:	8f 87       	std	Y+15, r24	; 0x0f
    25c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c2:	98 89       	ldd	r25, Y+16	; 0x10
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <lcd4_Init+0x3e0>
    25c8:	98 8b       	std	Y+16, r25	; 0x10
    25ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD4_Command_Write(LCD_ENTRY_MODE_INC_SHIFT_OFF);	//increase DDRAM address
    25cc:	86 e0       	ldi	r24, 0x06	; 6
    25ce:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e8       	ldi	r26, 0x80	; 128
    25d8:	bf e3       	ldi	r27, 0x3F	; 63
    25da:	8b 87       	std	Y+11, r24	; 0x0b
    25dc:	9c 87       	std	Y+12, r25	; 0x0c
    25de:	ad 87       	std	Y+13, r26	; 0x0d
    25e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a e7       	ldi	r20, 0x7A	; 122
    25f0:	55 e4       	ldi	r21, 0x45	; 69
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8f 83       	std	Y+7, r24	; 0x07
    25fc:	98 87       	std	Y+8, r25	; 0x08
    25fe:	a9 87       	std	Y+9, r26	; 0x09
    2600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2602:	6f 81       	ldd	r22, Y+7	; 0x07
    2604:	78 85       	ldd	r23, Y+8	; 0x08
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <lcd4_Init+0x440>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <lcd4_Init+0x4be>
	else if (__tmp > 65535)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <lcd4_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6b 85       	ldd	r22, Y+11	; 0x0b
    263e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <lcd4_Init+0x4a0>
    2666:	80 e9       	ldi	r24, 0x90	; 144
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	9c 83       	std	Y+4, r25	; 0x04
    266c:	8b 83       	std	Y+3, r24	; 0x03
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <lcd4_Init+0x48e>
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <lcd4_Init+0x482>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <lcd4_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <lcd4_Init+0x4ca>
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	LCD4_Command_Write(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    26b6:	8c e0       	ldi	r24, 0x0C	; 12
    26b8:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
	LCD4_Command_Write(LCD_DDRAM_START);
    26bc:	80 e8       	ldi	r24, 0x80	; 128
    26be:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
}
    26c2:	ca 5b       	subi	r28, 0xBA	; 186
    26c4:	df 4f       	sbci	r29, 0xFF	; 255
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	08 95       	ret

000026da <lcd4_CLR>:
 * lcd4_Init : This function Clears the LCD 4bit
 * @param	void
 * @return	void
 */
void lcd4_CLR(void)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
	LCD4_Command_Write(0x01);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
}
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <lcd4_disply_char>:
 * lcd4_disply_char : This function displays a character on the LCD 4bit
 * @param	data which is the character to display Ex: 'A'
 * @return	void
 */
void lcd4_disply_char (const u8 character)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	0f 92       	push	r0
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	89 83       	std	Y+1, r24	; 0x01
	if(current_pos == 20 )
    26fa:	80 91 f0 00 	lds	r24, 0x00F0
    26fe:	84 31       	cpi	r24, 0x14	; 20
    2700:	29 f4       	brne	.+10     	; 0x270c <lcd4_disply_char+0x1e>
	{
		lcd4_set_cursor(2, 1);
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	61 e0       	ldi	r22, 0x01	; 1
    2706:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <lcd4_set_cursor>
    270a:	11 c0       	rjmp	.+34     	; 0x272e <lcd4_disply_char+0x40>
	}
	else if(current_pos == 40 )
    270c:	80 91 f0 00 	lds	r24, 0x00F0
    2710:	88 32       	cpi	r24, 0x28	; 40
    2712:	29 f4       	brne	.+10     	; 0x271e <lcd4_disply_char+0x30>
	{
		lcd4_set_cursor(3, 1);
    2714:	83 e0       	ldi	r24, 0x03	; 3
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <lcd4_set_cursor>
    271c:	08 c0       	rjmp	.+16     	; 0x272e <lcd4_disply_char+0x40>
	}
	else if(current_pos == 60 )
    271e:	80 91 f0 00 	lds	r24, 0x00F0
    2722:	8c 33       	cpi	r24, 0x3C	; 60
    2724:	21 f4       	brne	.+8      	; 0x272e <lcd4_disply_char+0x40>
	{
		lcd4_set_cursor(4, 1);
    2726:	84 e0       	ldi	r24, 0x04	; 4
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <lcd4_set_cursor>
	}
	LCD_Data_write(character);
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_Data_write>
	current_pos ++;
    2734:	80 91 f0 00 	lds	r24, 0x00F0
    2738:	8f 5f       	subi	r24, 0xFF	; 255
    273a:	80 93 f0 00 	sts	0x00F0, r24
}
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <lcd4_disply_string>:
 * lcd4_disply_string : This function displays whole string on the LCD 4bit
 * @param	data which is the string to display Ex: "Ahmed abo gabl"
 * @return	void
 */
void lcd4_disply_string (const u8* str)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	00 d0       	rcall	.+0      	; 0x274c <lcd4_disply_string+0x6>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	89 83       	std	Y+1, r24	; 0x01
    2754:	0a c0       	rjmp	.+20     	; 0x276a <lcd4_disply_string+0x24>
	 while (*str){
		lcd4_disply_char(*str);
    2756:	e9 81       	ldd	r30, Y+1	; 0x01
    2758:	fa 81       	ldd	r31, Y+2	; 0x02
    275a:	80 81       	ld	r24, Z
    275c:	0e 94 77 13 	call	0x26ee	; 0x26ee <lcd4_disply_char>
		str++;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	9a 81       	ldd	r25, Y+2	; 0x02
    2764:	01 96       	adiw	r24, 0x01	; 1
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
 * @param	data which is the string to display Ex: "Ahmed abo gabl"
 * @return	void
 */
void lcd4_disply_string (const u8* str)
{
	 while (*str){
    276a:	e9 81       	ldd	r30, Y+1	; 0x01
    276c:	fa 81       	ldd	r31, Y+2	; 0x02
    276e:	80 81       	ld	r24, Z
    2770:	88 23       	and	r24, r24
    2772:	89 f7       	brne	.-30     	; 0x2756 <lcd4_disply_string+0x10>
		lcd4_disply_char(*str);
		str++;
		}
}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	cf 91       	pop	r28
    277a:	df 91       	pop	r29
    277c:	08 95       	ret

0000277e <lcd4_disply_char_at_X_Y>:
 * 			3- col : the Column position of the character
 * 			Ex ('A', 2, 3) -> will display A @ [2,3]
 * @return	void
 */
void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	00 d0       	rcall	.+0      	; 0x2784 <lcd4_disply_char_at_X_Y+0x6>
    2784:	0f 92       	push	r0
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	6a 83       	std	Y+2, r22	; 0x02
    278e:	4b 83       	std	Y+3, r20	; 0x03
	lcd4_set_cursor(row, col);
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	6b 81       	ldd	r22, Y+3	; 0x03
    2794:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <lcd4_set_cursor>
	LCD_Data_write(data);
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_Data_write>
}
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <lcd4_disply_string_at_X_Y>:
 * 			3- col : the Column position of the 1st character of the string which is 'M' here
 * 			Ex ("Ahmed abo gabl", 2, 3) -> will display "Ahmed abo gabl" @ [2,3]
 * @return	void
 */
void lcd4_disply_string_at_X_Y(u8* data, u8 row, u8 col)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <lcd4_disply_string_at_X_Y+0x6>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <lcd4_disply_string_at_X_Y+0x8>
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	6b 83       	std	Y+3, r22	; 0x03
    27bc:	4c 83       	std	Y+4, r20	; 0x04
	lcd4_set_cursor(row, col);
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	6c 81       	ldd	r22, Y+4	; 0x04
    27c2:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <lcd4_set_cursor>
	lcd4_disply_string(data);
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	0e 94 a3 13 	call	0x2746	; 0x2746 <lcd4_disply_string>
}
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <lcd4_disply_num>:
/**
 * lcd4_disply_num : This function converts the nu,ber to string and displays it on the LCD 4bit
 * @param	num which is the number to display
 * @return	void
 */
void lcd4_disply_num(u32 Number) {
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <lcd4_disply_num+0x6>
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <lcd4_disply_num+0x8>
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	69 83       	std	Y+1, r22	; 0x01
    27ea:	7a 83       	std	Y+2, r23	; 0x02
    27ec:	8b 83       	std	Y+3, r24	; 0x03
    27ee:	9c 83       	std	Y+4, r25	; 0x04
//    // Display the string on the LCD character by character
//    for (int i = 0; num_str[i] != '\0'; i++) {
//        lcd4_disply_char(num_str[i]);
//    }

		if(Number == 0 )
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	ab 81       	ldd	r26, Y+3	; 0x03
    27f6:	bc 81       	ldd	r27, Y+4	; 0x04
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	a1 05       	cpc	r26, r1
    27fc:	b1 05       	cpc	r27, r1
    27fe:	19 f1       	breq	.+70     	; 0x2846 <lcd4_disply_num+0x6a>
			return ;
		else
			lcd4_disply_num(Number/10);
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	ab 81       	ldd	r26, Y+3	; 0x03
    2806:	bc 81       	ldd	r27, Y+4	; 0x04
    2808:	2a e0       	ldi	r18, 0x0A	; 10
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__udivmodsi4>
    2818:	da 01       	movw	r26, r20
    281a:	c9 01       	movw	r24, r18
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 ee 13 	call	0x27dc	; 0x27dc <lcd4_disply_num>
		///if(Number<255)
		LCD_Data_write((Number%10)+0x30);
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	ab 81       	ldd	r26, Y+3	; 0x03
    282a:	bc 81       	ldd	r27, Y+4	; 0x04
    282c:	2a e0       	ldi	r18, 0x0A	; 10
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__udivmodsi4>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	80 5d       	subi	r24, 0xD0	; 208
    2842:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_Data_write>

}
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <lcd4_disply_CustomCharacter>:
 * 			Ex: u8 customChar[] = {0x0E, 0x1B, 0x1F, 0x1F, 0x1F, 0x1F, 0x1B, 0x0E};
 * 				lcd4_disply_CustomCharacter(1, 5, customChar, 0);
 * @return	void
 */
void lcd4_disply_CustomCharacter(u8 row, u8 col, u8* CustomCharacter, u8 MemPos)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	27 97       	sbiw	r28, 0x07	; 7
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	8b 83       	std	Y+3, r24	; 0x03
    286a:	6c 83       	std	Y+4, r22	; 0x04
    286c:	5e 83       	std	Y+6, r21	; 0x06
    286e:	4d 83       	std	Y+5, r20	; 0x05
    2870:	2f 83       	std	Y+7, r18	; 0x07
	LCD4_Command_Write(LCD_CGRAM_START + (MemPos * 8));
    2872:	8f 81       	ldd	r24, Y+7	; 0x07
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	08 96       	adiw	r24, 0x08	; 8
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
	for(int i = 0 ; i < 8 ; i++)
    288a:	1a 82       	std	Y+2, r1	; 0x02
    288c:	19 82       	std	Y+1, r1	; 0x01
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <lcd4_disply_CustomCharacter+0x5a>
	{
		LCD_Data_write(CustomCharacter[i]);
    2890:	29 81       	ldd	r18, Y+1	; 0x01
    2892:	3a 81       	ldd	r19, Y+2	; 0x02
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	fc 01       	movw	r30, r24
    289a:	e2 0f       	add	r30, r18
    289c:	f3 1f       	adc	r31, r19
    289e:	80 81       	ld	r24, Z
    28a0:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <LCD_Data_write>
 * @return	void
 */
void lcd4_disply_CustomCharacter(u8 row, u8 col, u8* CustomCharacter, u8 MemPos)
{
	LCD4_Command_Write(LCD_CGRAM_START + (MemPos * 8));
	for(int i = 0 ; i < 8 ; i++)
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	9a 81       	ldd	r25, Y+2	; 0x02
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	88 30       	cpi	r24, 0x08	; 8
    28b4:	91 05       	cpc	r25, r1
    28b6:	64 f3       	brlt	.-40     	; 0x2890 <lcd4_disply_CustomCharacter+0x3c>
	{
		LCD_Data_write(CustomCharacter[i]);
	}
	lcd4_disply_char_at_X_Y(MemPos, row, col);
    28b8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ba:	6b 81       	ldd	r22, Y+3	; 0x03
    28bc:	4c 81       	ldd	r20, Y+4	; 0x04
    28be:	0e 94 bf 13 	call	0x277e	; 0x277e <lcd4_disply_char_at_X_Y>
}
    28c2:	27 96       	adiw	r28, 0x07	; 7
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <LCD_Data_write>:


/* ----------------- Section : Static "Private" Functions Declaration Implementation -----------------*/

static void LCD_Data_write(u8 data)
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	e9 97       	sbiw	r28, 0x39	; 57
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	89 af       	std	Y+57, r24	; 0x39
	Dio_WriteChannel(RS,STD_HIGH);
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	61 e0       	ldi	r22, 0x01	; 1
    28ee:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>

	Dio_WriteChannel(D4,GET_BIT(data,4));
    28f2:	89 ad       	ldd	r24, Y+57	; 0x39
    28f4:	82 95       	swap	r24
    28f6:	8f 70       	andi	r24, 0x0F	; 15
    28f8:	98 2f       	mov	r25, r24
    28fa:	91 70       	andi	r25, 0x01	; 1
    28fc:	88 e0       	ldi	r24, 0x08	; 8
    28fe:	69 2f       	mov	r22, r25
    2900:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(data,5));
    2904:	89 ad       	ldd	r24, Y+57	; 0x39
    2906:	82 95       	swap	r24
    2908:	86 95       	lsr	r24
    290a:	87 70       	andi	r24, 0x07	; 7
    290c:	98 2f       	mov	r25, r24
    290e:	91 70       	andi	r25, 0x01	; 1
    2910:	89 e0       	ldi	r24, 0x09	; 9
    2912:	69 2f       	mov	r22, r25
    2914:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(data,6));
    2918:	89 ad       	ldd	r24, Y+57	; 0x39
    291a:	82 95       	swap	r24
    291c:	86 95       	lsr	r24
    291e:	86 95       	lsr	r24
    2920:	83 70       	andi	r24, 0x03	; 3
    2922:	98 2f       	mov	r25, r24
    2924:	91 70       	andi	r25, 0x01	; 1
    2926:	8a e0       	ldi	r24, 0x0A	; 10
    2928:	69 2f       	mov	r22, r25
    292a:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(data,7));
    292e:	89 ad       	ldd	r24, Y+57	; 0x39
    2930:	98 2f       	mov	r25, r24
    2932:	99 1f       	adc	r25, r25
    2934:	99 27       	eor	r25, r25
    2936:	99 1f       	adc	r25, r25
    2938:	8c e0       	ldi	r24, 0x0C	; 12
    293a:	69 2f       	mov	r22, r25
    293c:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a0 e8       	ldi	r26, 0x80	; 128
    294e:	bf e3       	ldi	r27, 0x3F	; 63
    2950:	8d ab       	std	Y+53, r24	; 0x35
    2952:	9e ab       	std	Y+54, r25	; 0x36
    2954:	af ab       	std	Y+55, r26	; 0x37
    2956:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	6d a9       	ldd	r22, Y+53	; 0x35
    295a:	7e a9       	ldd	r23, Y+54	; 0x36
    295c:	8f a9       	ldd	r24, Y+55	; 0x37
    295e:	98 ad       	ldd	r25, Y+56	; 0x38
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	4a e7       	ldi	r20, 0x7A	; 122
    2966:	55 e4       	ldi	r21, 0x45	; 69
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	89 ab       	std	Y+49, r24	; 0x31
    2972:	9a ab       	std	Y+50, r25	; 0x32
    2974:	ab ab       	std	Y+51, r26	; 0x33
    2976:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2978:	69 a9       	ldd	r22, Y+49	; 0x31
    297a:	7a a9       	ldd	r23, Y+50	; 0x32
    297c:	8b a9       	ldd	r24, Y+51	; 0x33
    297e:	9c a9       	ldd	r25, Y+52	; 0x34
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	2c f4       	brge	.+10     	; 0x299a <LCD_Data_write+0xc6>
		__ticks = 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	98 ab       	std	Y+48, r25	; 0x30
    2996:	8f a7       	std	Y+47, r24	; 0x2f
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <LCD_Data_write+0x144>
	else if (__tmp > 65535)
    299a:	69 a9       	ldd	r22, Y+49	; 0x31
    299c:	7a a9       	ldd	r23, Y+50	; 0x32
    299e:	8b a9       	ldd	r24, Y+51	; 0x33
    29a0:	9c a9       	ldd	r25, Y+52	; 0x34
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	4c f5       	brge	.+82     	; 0x2a04 <LCD_Data_write+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	6d a9       	ldd	r22, Y+53	; 0x35
    29b4:	7e a9       	ldd	r23, Y+54	; 0x36
    29b6:	8f a9       	ldd	r24, Y+55	; 0x37
    29b8:	98 ad       	ldd	r25, Y+56	; 0x38
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	98 ab       	std	Y+48, r25	; 0x30
    29d8:	8f a7       	std	Y+47, r24	; 0x2f
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <LCD_Data_write+0x126>
    29dc:	80 e9       	ldi	r24, 0x90	; 144
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	9e a7       	std	Y+46, r25	; 0x2e
    29e2:	8d a7       	std	Y+45, r24	; 0x2d
    29e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <LCD_Data_write+0x114>
    29ec:	9e a7       	std	Y+46, r25	; 0x2e
    29ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f2:	98 a9       	ldd	r25, Y+48	; 0x30
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	98 ab       	std	Y+48, r25	; 0x30
    29f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fc:	98 a9       	ldd	r25, Y+48	; 0x30
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	69 f7       	brne	.-38     	; 0x29dc <LCD_Data_write+0x108>
    2a02:	14 c0       	rjmp	.+40     	; 0x2a2c <LCD_Data_write+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	69 a9       	ldd	r22, Y+49	; 0x31
    2a06:	7a a9       	ldd	r23, Y+50	; 0x32
    2a08:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	98 ab       	std	Y+48, r25	; 0x30
    2a16:	8f a7       	std	Y+47, r24	; 0x2f
    2a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1c:	9c a7       	std	Y+44, r25	; 0x2c
    2a1e:	8b a7       	std	Y+43, r24	; 0x2b
    2a20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <LCD_Data_write+0x150>
    2a28:	9c a7       	std	Y+44, r25	; 0x2c
    2a2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    2a2c:	82 e0       	ldi	r24, 0x02	; 2
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e8       	ldi	r26, 0x80	; 128
    2a3a:	bf e3       	ldi	r27, 0x3F	; 63
    2a3c:	8f a3       	std	Y+39, r24	; 0x27
    2a3e:	98 a7       	std	Y+40, r25	; 0x28
    2a40:	a9 a7       	std	Y+41, r26	; 0x29
    2a42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	6f a1       	ldd	r22, Y+39	; 0x27
    2a46:	78 a5       	ldd	r23, Y+40	; 0x28
    2a48:	89 a5       	ldd	r24, Y+41	; 0x29
    2a4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4a e7       	ldi	r20, 0x7A	; 122
    2a52:	55 e4       	ldi	r21, 0x45	; 69
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	8b a3       	std	Y+35, r24	; 0x23
    2a5e:	9c a3       	std	Y+36, r25	; 0x24
    2a60:	ad a3       	std	Y+37, r26	; 0x25
    2a62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a64:	6b a1       	ldd	r22, Y+35	; 0x23
    2a66:	7c a1       	ldd	r23, Y+36	; 0x24
    2a68:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <LCD_Data_write+0x1b2>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9a a3       	std	Y+34, r25	; 0x22
    2a82:	89 a3       	std	Y+33, r24	; 0x21
    2a84:	3f c0       	rjmp	.+126    	; 0x2b04 <LCD_Data_write+0x230>
	else if (__tmp > 65535)
    2a86:	6b a1       	ldd	r22, Y+35	; 0x23
    2a88:	7c a1       	ldd	r23, Y+36	; 0x24
    2a8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	4c f5       	brge	.+82     	; 0x2af0 <LCD_Data_write+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9e:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa0:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa2:	89 a5       	ldd	r24, Y+41	; 0x29
    2aa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e2       	ldi	r20, 0x20	; 32
    2aac:	51 e4       	ldi	r21, 0x41	; 65
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9a a3       	std	Y+34, r25	; 0x22
    2ac4:	89 a3       	std	Y+33, r24	; 0x21
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <LCD_Data_write+0x212>
    2ac8:	80 e9       	ldi	r24, 0x90	; 144
    2aca:	91 e0       	ldi	r25, 0x01	; 1
    2acc:	98 a3       	std	Y+32, r25	; 0x20
    2ace:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <LCD_Data_write+0x200>
    2ad8:	98 a3       	std	Y+32, r25	; 0x20
    2ada:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2adc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ade:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9a a3       	std	Y+34, r25	; 0x22
    2ae4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	69 f7       	brne	.-38     	; 0x2ac8 <LCD_Data_write+0x1f4>
    2aee:	14 c0       	rjmp	.+40     	; 0x2b18 <LCD_Data_write+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	6b a1       	ldd	r22, Y+35	; 0x23
    2af2:	7c a1       	ldd	r23, Y+36	; 0x24
    2af4:	8d a1       	ldd	r24, Y+37	; 0x25
    2af6:	9e a1       	ldd	r25, Y+38	; 0x26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9a a3       	std	Y+34, r25	; 0x22
    2b02:	89 a3       	std	Y+33, r24	; 0x21
    2b04:	89 a1       	ldd	r24, Y+33	; 0x21
    2b06:	9a a1       	ldd	r25, Y+34	; 0x22
    2b08:	9e 8f       	std	Y+30, r25	; 0x1e
    2b0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <LCD_Data_write+0x23c>
    2b14:	9e 8f       	std	Y+30, r25	; 0x1e
    2b16:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	Dio_WriteChannel(D4,GET_BIT(data,0));
    2b18:	89 ad       	ldd	r24, Y+57	; 0x39
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	91 70       	andi	r25, 0x01	; 1
    2b1e:	88 e0       	ldi	r24, 0x08	; 8
    2b20:	69 2f       	mov	r22, r25
    2b22:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(data,1));
    2b26:	89 ad       	ldd	r24, Y+57	; 0x39
    2b28:	86 95       	lsr	r24
    2b2a:	98 2f       	mov	r25, r24
    2b2c:	91 70       	andi	r25, 0x01	; 1
    2b2e:	89 e0       	ldi	r24, 0x09	; 9
    2b30:	69 2f       	mov	r22, r25
    2b32:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(data,2));
    2b36:	89 ad       	ldd	r24, Y+57	; 0x39
    2b38:	86 95       	lsr	r24
    2b3a:	86 95       	lsr	r24
    2b3c:	98 2f       	mov	r25, r24
    2b3e:	91 70       	andi	r25, 0x01	; 1
    2b40:	8a e0       	ldi	r24, 0x0A	; 10
    2b42:	69 2f       	mov	r22, r25
    2b44:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(data,3));
    2b48:	89 ad       	ldd	r24, Y+57	; 0x39
    2b4a:	86 95       	lsr	r24
    2b4c:	86 95       	lsr	r24
    2b4e:	86 95       	lsr	r24
    2b50:	98 2f       	mov	r25, r24
    2b52:	91 70       	andi	r25, 0x01	; 1
    2b54:	8c e0       	ldi	r24, 0x0C	; 12
    2b56:	69 2f       	mov	r22, r25
    2b58:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	a0 e8       	ldi	r26, 0x80	; 128
    2b6a:	bf e3       	ldi	r27, 0x3F	; 63
    2b6c:	89 8f       	std	Y+25, r24	; 0x19
    2b6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b70:	ab 8f       	std	Y+27, r26	; 0x1b
    2b72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b74:	69 8d       	ldd	r22, Y+25	; 0x19
    2b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	4a e7       	ldi	r20, 0x7A	; 122
    2b82:	55 e4       	ldi	r21, 0x45	; 69
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	8d 8b       	std	Y+21, r24	; 0x15
    2b8e:	9e 8b       	std	Y+22, r25	; 0x16
    2b90:	af 8b       	std	Y+23, r26	; 0x17
    2b92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b94:	6d 89       	ldd	r22, Y+21	; 0x15
    2b96:	7e 89       	ldd	r23, Y+22	; 0x16
    2b98:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e8       	ldi	r20, 0x80	; 128
    2ba2:	5f e3       	ldi	r21, 0x3F	; 63
    2ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba8:	88 23       	and	r24, r24
    2baa:	2c f4       	brge	.+10     	; 0x2bb6 <LCD_Data_write+0x2e2>
		__ticks = 1;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9c 8b       	std	Y+20, r25	; 0x14
    2bb2:	8b 8b       	std	Y+19, r24	; 0x13
    2bb4:	3f c0       	rjmp	.+126    	; 0x2c34 <LCD_Data_write+0x360>
	else if (__tmp > 65535)
    2bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bba:	8f 89       	ldd	r24, Y+23	; 0x17
    2bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	3f ef       	ldi	r19, 0xFF	; 255
    2bc2:	4f e7       	ldi	r20, 0x7F	; 127
    2bc4:	57 e4       	ldi	r21, 0x47	; 71
    2bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bca:	18 16       	cp	r1, r24
    2bcc:	4c f5       	brge	.+82     	; 0x2c20 <LCD_Data_write+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bce:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e2       	ldi	r20, 0x20	; 32
    2bdc:	51 e4       	ldi	r21, 0x41	; 65
    2bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	9c 8b       	std	Y+20, r25	; 0x14
    2bf4:	8b 8b       	std	Y+19, r24	; 0x13
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <LCD_Data_write+0x342>
    2bf8:	80 e9       	ldi	r24, 0x90	; 144
    2bfa:	91 e0       	ldi	r25, 0x01	; 1
    2bfc:	9a 8b       	std	Y+18, r25	; 0x12
    2bfe:	89 8b       	std	Y+17, r24	; 0x11
    2c00:	89 89       	ldd	r24, Y+17	; 0x11
    2c02:	9a 89       	ldd	r25, Y+18	; 0x12
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <LCD_Data_write+0x330>
    2c08:	9a 8b       	std	Y+18, r25	; 0x12
    2c0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	9c 8b       	std	Y+20, r25	; 0x14
    2c14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c16:	8b 89       	ldd	r24, Y+19	; 0x13
    2c18:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	69 f7       	brne	.-38     	; 0x2bf8 <LCD_Data_write+0x324>
    2c1e:	14 c0       	rjmp	.+40     	; 0x2c48 <LCD_Data_write+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c20:	6d 89       	ldd	r22, Y+21	; 0x15
    2c22:	7e 89       	ldd	r23, Y+22	; 0x16
    2c24:	8f 89       	ldd	r24, Y+23	; 0x17
    2c26:	98 8d       	ldd	r25, Y+24	; 0x18
    2c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	9c 8b       	std	Y+20, r25	; 0x14
    2c32:	8b 8b       	std	Y+19, r24	; 0x13
    2c34:	8b 89       	ldd	r24, Y+19	; 0x13
    2c36:	9c 89       	ldd	r25, Y+20	; 0x14
    2c38:	98 8b       	std	Y+16, r25	; 0x10
    2c3a:	8f 87       	std	Y+15, r24	; 0x0f
    2c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c3e:	98 89       	ldd	r25, Y+16	; 0x10
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <LCD_Data_write+0x36c>
    2c44:	98 8b       	std	Y+16, r25	; 0x10
    2c46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    2c48:	82 e0       	ldi	r24, 0x02	; 2
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	a0 e8       	ldi	r26, 0x80	; 128
    2c56:	bf e3       	ldi	r27, 0x3F	; 63
    2c58:	8b 87       	std	Y+11, r24	; 0x0b
    2c5a:	9c 87       	std	Y+12, r25	; 0x0c
    2c5c:	ad 87       	std	Y+13, r26	; 0x0d
    2c5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	4a e7       	ldi	r20, 0x7A	; 122
    2c6e:	55 e4       	ldi	r21, 0x45	; 69
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	8f 83       	std	Y+7, r24	; 0x07
    2c7a:	98 87       	std	Y+8, r25	; 0x08
    2c7c:	a9 87       	std	Y+9, r26	; 0x09
    2c7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c80:	6f 81       	ldd	r22, Y+7	; 0x07
    2c82:	78 85       	ldd	r23, Y+8	; 0x08
    2c84:	89 85       	ldd	r24, Y+9	; 0x09
    2c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e8       	ldi	r20, 0x80	; 128
    2c8e:	5f e3       	ldi	r21, 0x3F	; 63
    2c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c94:	88 23       	and	r24, r24
    2c96:	2c f4       	brge	.+10     	; 0x2ca2 <LCD_Data_write+0x3ce>
		__ticks = 1;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	9e 83       	std	Y+6, r25	; 0x06
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
    2ca0:	3f c0       	rjmp	.+126    	; 0x2d20 <LCD_Data_write+0x44c>
	else if (__tmp > 65535)
    2ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca4:	78 85       	ldd	r23, Y+8	; 0x08
    2ca6:	89 85       	ldd	r24, Y+9	; 0x09
    2ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	3f ef       	ldi	r19, 0xFF	; 255
    2cae:	4f e7       	ldi	r20, 0x7F	; 127
    2cb0:	57 e4       	ldi	r21, 0x47	; 71
    2cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb6:	18 16       	cp	r1, r24
    2cb8:	4c f5       	brge	.+82     	; 0x2d0c <LCD_Data_write+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e2       	ldi	r20, 0x20	; 32
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	0f c0       	rjmp	.+30     	; 0x2d02 <LCD_Data_write+0x42e>
    2ce4:	80 e9       	ldi	r24, 0x90	; 144
    2ce6:	91 e0       	ldi	r25, 0x01	; 1
    2ce8:	9c 83       	std	Y+4, r25	; 0x04
    2cea:	8b 83       	std	Y+3, r24	; 0x03
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <LCD_Data_write+0x41c>
    2cf4:	9c 83       	std	Y+4, r25	; 0x04
    2cf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	9e 83       	std	Y+6, r25	; 0x06
    2d00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d02:	8d 81       	ldd	r24, Y+5	; 0x05
    2d04:	9e 81       	ldd	r25, Y+6	; 0x06
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	69 f7       	brne	.-38     	; 0x2ce4 <LCD_Data_write+0x410>
    2d0a:	14 c0       	rjmp	.+40     	; 0x2d34 <LCD_Data_write+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	9e 83       	std	Y+6, r25	; 0x06
    2d1e:	8d 83       	std	Y+5, r24	; 0x05
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	9e 81       	ldd	r25, Y+6	; 0x06
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <LCD_Data_write+0x458>
    2d30:	9a 83       	std	Y+2, r25	; 0x02
    2d32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2d34:	e9 96       	adiw	r28, 0x39	; 57
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <LCD4_Command_Write>:

static void LCD4_Command_Write(u8 command)
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	e9 97       	sbiw	r28, 0x39	; 57
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	89 af       	std	Y+57, r24	; 0x39
	Dio_WriteChannel(RS,STD_LOW);
    2d5c:	83 e0       	ldi	r24, 0x03	; 3
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>

	Dio_WriteChannel(D4,GET_BIT(command,4));
    2d64:	89 ad       	ldd	r24, Y+57	; 0x39
    2d66:	82 95       	swap	r24
    2d68:	8f 70       	andi	r24, 0x0F	; 15
    2d6a:	98 2f       	mov	r25, r24
    2d6c:	91 70       	andi	r25, 0x01	; 1
    2d6e:	88 e0       	ldi	r24, 0x08	; 8
    2d70:	69 2f       	mov	r22, r25
    2d72:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(command,5));
    2d76:	89 ad       	ldd	r24, Y+57	; 0x39
    2d78:	82 95       	swap	r24
    2d7a:	86 95       	lsr	r24
    2d7c:	87 70       	andi	r24, 0x07	; 7
    2d7e:	98 2f       	mov	r25, r24
    2d80:	91 70       	andi	r25, 0x01	; 1
    2d82:	89 e0       	ldi	r24, 0x09	; 9
    2d84:	69 2f       	mov	r22, r25
    2d86:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(command,6));
    2d8a:	89 ad       	ldd	r24, Y+57	; 0x39
    2d8c:	82 95       	swap	r24
    2d8e:	86 95       	lsr	r24
    2d90:	86 95       	lsr	r24
    2d92:	83 70       	andi	r24, 0x03	; 3
    2d94:	98 2f       	mov	r25, r24
    2d96:	91 70       	andi	r25, 0x01	; 1
    2d98:	8a e0       	ldi	r24, 0x0A	; 10
    2d9a:	69 2f       	mov	r22, r25
    2d9c:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(command,7));
    2da0:	89 ad       	ldd	r24, Y+57	; 0x39
    2da2:	98 2f       	mov	r25, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	99 27       	eor	r25, r25
    2da8:	99 1f       	adc	r25, r25
    2daa:	8c e0       	ldi	r24, 0x0C	; 12
    2dac:	69 2f       	mov	r22, r25
    2dae:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	61 e0       	ldi	r22, 0x01	; 1
    2db6:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	a0 e8       	ldi	r26, 0x80	; 128
    2dc0:	bf e3       	ldi	r27, 0x3F	; 63
    2dc2:	8d ab       	std	Y+53, r24	; 0x35
    2dc4:	9e ab       	std	Y+54, r25	; 0x36
    2dc6:	af ab       	std	Y+55, r26	; 0x37
    2dc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dca:	6d a9       	ldd	r22, Y+53	; 0x35
    2dcc:	7e a9       	ldd	r23, Y+54	; 0x36
    2dce:	8f a9       	ldd	r24, Y+55	; 0x37
    2dd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a e7       	ldi	r20, 0x7A	; 122
    2dd8:	55 e4       	ldi	r21, 0x45	; 69
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	89 ab       	std	Y+49, r24	; 0x31
    2de4:	9a ab       	std	Y+50, r25	; 0x32
    2de6:	ab ab       	std	Y+51, r26	; 0x33
    2de8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dea:	69 a9       	ldd	r22, Y+49	; 0x31
    2dec:	7a a9       	ldd	r23, Y+50	; 0x32
    2dee:	8b a9       	ldd	r24, Y+51	; 0x33
    2df0:	9c a9       	ldd	r25, Y+52	; 0x34
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	2c f4       	brge	.+10     	; 0x2e0c <LCD4_Command_Write+0xc6>
		__ticks = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	98 ab       	std	Y+48, r25	; 0x30
    2e08:	8f a7       	std	Y+47, r24	; 0x2f
    2e0a:	3f c0       	rjmp	.+126    	; 0x2e8a <LCD4_Command_Write+0x144>
	else if (__tmp > 65535)
    2e0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e10:	8b a9       	ldd	r24, Y+51	; 0x33
    2e12:	9c a9       	ldd	r25, Y+52	; 0x34
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
    2e18:	4f e7       	ldi	r20, 0x7F	; 127
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	4c f5       	brge	.+82     	; 0x2e76 <LCD4_Command_Write+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	6d a9       	ldd	r22, Y+53	; 0x35
    2e26:	7e a9       	ldd	r23, Y+54	; 0x36
    2e28:	8f a9       	ldd	r24, Y+55	; 0x37
    2e2a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e2       	ldi	r20, 0x20	; 32
    2e32:	51 e4       	ldi	r21, 0x41	; 65
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	98 ab       	std	Y+48, r25	; 0x30
    2e4a:	8f a7       	std	Y+47, r24	; 0x2f
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <LCD4_Command_Write+0x126>
    2e4e:	80 e9       	ldi	r24, 0x90	; 144
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	9e a7       	std	Y+46, r25	; 0x2e
    2e54:	8d a7       	std	Y+45, r24	; 0x2d
    2e56:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e58:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <LCD4_Command_Write+0x114>
    2e5e:	9e a7       	std	Y+46, r25	; 0x2e
    2e60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e64:	98 a9       	ldd	r25, Y+48	; 0x30
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	98 ab       	std	Y+48, r25	; 0x30
    2e6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	69 f7       	brne	.-38     	; 0x2e4e <LCD4_Command_Write+0x108>
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <LCD4_Command_Write+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e76:	69 a9       	ldd	r22, Y+49	; 0x31
    2e78:	7a a9       	ldd	r23, Y+50	; 0x32
    2e7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	98 ab       	std	Y+48, r25	; 0x30
    2e88:	8f a7       	std	Y+47, r24	; 0x2f
    2e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8e:	9c a7       	std	Y+44, r25	; 0x2c
    2e90:	8b a7       	std	Y+43, r24	; 0x2b
    2e92:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e94:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <LCD4_Command_Write+0x150>
    2e9a:	9c a7       	std	Y+44, r25	; 0x2c
    2e9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	a0 e8       	ldi	r26, 0x80	; 128
    2eac:	bf e3       	ldi	r27, 0x3F	; 63
    2eae:	8f a3       	std	Y+39, r24	; 0x27
    2eb0:	98 a7       	std	Y+40, r25	; 0x28
    2eb2:	a9 a7       	std	Y+41, r26	; 0x29
    2eb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb6:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eba:	89 a5       	ldd	r24, Y+41	; 0x29
    2ebc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	4a e7       	ldi	r20, 0x7A	; 122
    2ec4:	55 e4       	ldi	r21, 0x45	; 69
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	8b a3       	std	Y+35, r24	; 0x23
    2ed0:	9c a3       	std	Y+36, r25	; 0x24
    2ed2:	ad a3       	std	Y+37, r26	; 0x25
    2ed4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ed6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ed8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eda:	8d a1       	ldd	r24, Y+37	; 0x25
    2edc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e8       	ldi	r20, 0x80	; 128
    2ee4:	5f e3       	ldi	r21, 0x3F	; 63
    2ee6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eea:	88 23       	and	r24, r24
    2eec:	2c f4       	brge	.+10     	; 0x2ef8 <LCD4_Command_Write+0x1b2>
		__ticks = 1;
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	9a a3       	std	Y+34, r25	; 0x22
    2ef4:	89 a3       	std	Y+33, r24	; 0x21
    2ef6:	3f c0       	rjmp	.+126    	; 0x2f76 <LCD4_Command_Write+0x230>
	else if (__tmp > 65535)
    2ef8:	6b a1       	ldd	r22, Y+35	; 0x23
    2efa:	7c a1       	ldd	r23, Y+36	; 0x24
    2efc:	8d a1       	ldd	r24, Y+37	; 0x25
    2efe:	9e a1       	ldd	r25, Y+38	; 0x26
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	3f ef       	ldi	r19, 0xFF	; 255
    2f04:	4f e7       	ldi	r20, 0x7F	; 127
    2f06:	57 e4       	ldi	r21, 0x47	; 71
    2f08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f0c:	18 16       	cp	r1, r24
    2f0e:	4c f5       	brge	.+82     	; 0x2f62 <LCD4_Command_Write+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f10:	6f a1       	ldd	r22, Y+39	; 0x27
    2f12:	78 a5       	ldd	r23, Y+40	; 0x28
    2f14:	89 a5       	ldd	r24, Y+41	; 0x29
    2f16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	40 e2       	ldi	r20, 0x20	; 32
    2f1e:	51 e4       	ldi	r21, 0x41	; 65
    2f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	bc 01       	movw	r22, r24
    2f2a:	cd 01       	movw	r24, r26
    2f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	9a a3       	std	Y+34, r25	; 0x22
    2f36:	89 a3       	std	Y+33, r24	; 0x21
    2f38:	0f c0       	rjmp	.+30     	; 0x2f58 <LCD4_Command_Write+0x212>
    2f3a:	80 e9       	ldi	r24, 0x90	; 144
    2f3c:	91 e0       	ldi	r25, 0x01	; 1
    2f3e:	98 a3       	std	Y+32, r25	; 0x20
    2f40:	8f 8f       	std	Y+31, r24	; 0x1f
    2f42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f44:	98 a1       	ldd	r25, Y+32	; 0x20
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <LCD4_Command_Write+0x200>
    2f4a:	98 a3       	std	Y+32, r25	; 0x20
    2f4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f50:	9a a1       	ldd	r25, Y+34	; 0x22
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	9a a3       	std	Y+34, r25	; 0x22
    2f56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f58:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	69 f7       	brne	.-38     	; 0x2f3a <LCD4_Command_Write+0x1f4>
    2f60:	14 c0       	rjmp	.+40     	; 0x2f8a <LCD4_Command_Write+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f62:	6b a1       	ldd	r22, Y+35	; 0x23
    2f64:	7c a1       	ldd	r23, Y+36	; 0x24
    2f66:	8d a1       	ldd	r24, Y+37	; 0x25
    2f68:	9e a1       	ldd	r25, Y+38	; 0x26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9a a3       	std	Y+34, r25	; 0x22
    2f74:	89 a3       	std	Y+33, r24	; 0x21
    2f76:	89 a1       	ldd	r24, Y+33	; 0x21
    2f78:	9a a1       	ldd	r25, Y+34	; 0x22
    2f7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f7c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <LCD4_Command_Write+0x23c>
    2f86:	9e 8f       	std	Y+30, r25	; 0x1e
    2f88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	Dio_WriteChannel(D4,GET_BIT(command,0));
    2f8a:	89 ad       	ldd	r24, Y+57	; 0x39
    2f8c:	98 2f       	mov	r25, r24
    2f8e:	91 70       	andi	r25, 0x01	; 1
    2f90:	88 e0       	ldi	r24, 0x08	; 8
    2f92:	69 2f       	mov	r22, r25
    2f94:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(command,1));
    2f98:	89 ad       	ldd	r24, Y+57	; 0x39
    2f9a:	86 95       	lsr	r24
    2f9c:	98 2f       	mov	r25, r24
    2f9e:	91 70       	andi	r25, 0x01	; 1
    2fa0:	89 e0       	ldi	r24, 0x09	; 9
    2fa2:	69 2f       	mov	r22, r25
    2fa4:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(command,2));
    2fa8:	89 ad       	ldd	r24, Y+57	; 0x39
    2faa:	86 95       	lsr	r24
    2fac:	86 95       	lsr	r24
    2fae:	98 2f       	mov	r25, r24
    2fb0:	91 70       	andi	r25, 0x01	; 1
    2fb2:	8a e0       	ldi	r24, 0x0A	; 10
    2fb4:	69 2f       	mov	r22, r25
    2fb6:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(command,3));
    2fba:	89 ad       	ldd	r24, Y+57	; 0x39
    2fbc:	86 95       	lsr	r24
    2fbe:	86 95       	lsr	r24
    2fc0:	86 95       	lsr	r24
    2fc2:	98 2f       	mov	r25, r24
    2fc4:	91 70       	andi	r25, 0x01	; 1
    2fc6:	8c e0       	ldi	r24, 0x0C	; 12
    2fc8:	69 2f       	mov	r22, r25
    2fca:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	a0 e8       	ldi	r26, 0x80	; 128
    2fdc:	bf e3       	ldi	r27, 0x3F	; 63
    2fde:	89 8f       	std	Y+25, r24	; 0x19
    2fe0:	9a 8f       	std	Y+26, r25	; 0x1a
    2fe2:	ab 8f       	std	Y+27, r26	; 0x1b
    2fe4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	4a e7       	ldi	r20, 0x7A	; 122
    2ff4:	55 e4       	ldi	r21, 0x45	; 69
    2ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	8d 8b       	std	Y+21, r24	; 0x15
    3000:	9e 8b       	std	Y+22, r25	; 0x16
    3002:	af 8b       	std	Y+23, r26	; 0x17
    3004:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3006:	6d 89       	ldd	r22, Y+21	; 0x15
    3008:	7e 89       	ldd	r23, Y+22	; 0x16
    300a:	8f 89       	ldd	r24, Y+23	; 0x17
    300c:	98 8d       	ldd	r25, Y+24	; 0x18
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e8       	ldi	r20, 0x80	; 128
    3014:	5f e3       	ldi	r21, 0x3F	; 63
    3016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    301a:	88 23       	and	r24, r24
    301c:	2c f4       	brge	.+10     	; 0x3028 <LCD4_Command_Write+0x2e2>
		__ticks = 1;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	9c 8b       	std	Y+20, r25	; 0x14
    3024:	8b 8b       	std	Y+19, r24	; 0x13
    3026:	3f c0       	rjmp	.+126    	; 0x30a6 <LCD4_Command_Write+0x360>
	else if (__tmp > 65535)
    3028:	6d 89       	ldd	r22, Y+21	; 0x15
    302a:	7e 89       	ldd	r23, Y+22	; 0x16
    302c:	8f 89       	ldd	r24, Y+23	; 0x17
    302e:	98 8d       	ldd	r25, Y+24	; 0x18
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	3f ef       	ldi	r19, 0xFF	; 255
    3034:	4f e7       	ldi	r20, 0x7F	; 127
    3036:	57 e4       	ldi	r21, 0x47	; 71
    3038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    303c:	18 16       	cp	r1, r24
    303e:	4c f5       	brge	.+82     	; 0x3092 <LCD4_Command_Write+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3040:	69 8d       	ldd	r22, Y+25	; 0x19
    3042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e2       	ldi	r20, 0x20	; 32
    304e:	51 e4       	ldi	r21, 0x41	; 65
    3050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	bc 01       	movw	r22, r24
    305a:	cd 01       	movw	r24, r26
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	9c 8b       	std	Y+20, r25	; 0x14
    3066:	8b 8b       	std	Y+19, r24	; 0x13
    3068:	0f c0       	rjmp	.+30     	; 0x3088 <LCD4_Command_Write+0x342>
    306a:	80 e9       	ldi	r24, 0x90	; 144
    306c:	91 e0       	ldi	r25, 0x01	; 1
    306e:	9a 8b       	std	Y+18, r25	; 0x12
    3070:	89 8b       	std	Y+17, r24	; 0x11
    3072:	89 89       	ldd	r24, Y+17	; 0x11
    3074:	9a 89       	ldd	r25, Y+18	; 0x12
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <LCD4_Command_Write+0x330>
    307a:	9a 8b       	std	Y+18, r25	; 0x12
    307c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307e:	8b 89       	ldd	r24, Y+19	; 0x13
    3080:	9c 89       	ldd	r25, Y+20	; 0x14
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	9c 8b       	std	Y+20, r25	; 0x14
    3086:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3088:	8b 89       	ldd	r24, Y+19	; 0x13
    308a:	9c 89       	ldd	r25, Y+20	; 0x14
    308c:	00 97       	sbiw	r24, 0x00	; 0
    308e:	69 f7       	brne	.-38     	; 0x306a <LCD4_Command_Write+0x324>
    3090:	14 c0       	rjmp	.+40     	; 0x30ba <LCD4_Command_Write+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3092:	6d 89       	ldd	r22, Y+21	; 0x15
    3094:	7e 89       	ldd	r23, Y+22	; 0x16
    3096:	8f 89       	ldd	r24, Y+23	; 0x17
    3098:	98 8d       	ldd	r25, Y+24	; 0x18
    309a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	9c 8b       	std	Y+20, r25	; 0x14
    30a4:	8b 8b       	std	Y+19, r24	; 0x13
    30a6:	8b 89       	ldd	r24, Y+19	; 0x13
    30a8:	9c 89       	ldd	r25, Y+20	; 0x14
    30aa:	98 8b       	std	Y+16, r25	; 0x10
    30ac:	8f 87       	std	Y+15, r24	; 0x0f
    30ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b0:	98 89       	ldd	r25, Y+16	; 0x10
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	f1 f7       	brne	.-4      	; 0x30b2 <LCD4_Command_Write+0x36c>
    30b6:	98 8b       	std	Y+16, r25	; 0x10
    30b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	a0 e8       	ldi	r26, 0x80	; 128
    30c8:	bf e3       	ldi	r27, 0x3F	; 63
    30ca:	8b 87       	std	Y+11, r24	; 0x0b
    30cc:	9c 87       	std	Y+12, r25	; 0x0c
    30ce:	ad 87       	std	Y+13, r26	; 0x0d
    30d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a e7       	ldi	r20, 0x7A	; 122
    30e0:	55 e4       	ldi	r21, 0x45	; 69
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	8f 83       	std	Y+7, r24	; 0x07
    30ec:	98 87       	std	Y+8, r25	; 0x08
    30ee:	a9 87       	std	Y+9, r26	; 0x09
    30f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <LCD4_Command_Write+0x3ce>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <LCD4_Command_Write+0x44c>
	else if (__tmp > 65535)
    3114:	6f 81       	ldd	r22, Y+7	; 0x07
    3116:	78 85       	ldd	r23, Y+8	; 0x08
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <LCD4_Command_Write+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	6b 85       	ldd	r22, Y+11	; 0x0b
    312e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3130:	8d 85       	ldd	r24, Y+13	; 0x0d
    3132:	9e 85       	ldd	r25, Y+14	; 0x0e
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9e 83       	std	Y+6, r25	; 0x06
    3152:	8d 83       	std	Y+5, r24	; 0x05
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <LCD4_Command_Write+0x42e>
    3156:	80 e9       	ldi	r24, 0x90	; 144
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	9c 83       	std	Y+4, r25	; 0x04
    315c:	8b 83       	std	Y+3, r24	; 0x03
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <LCD4_Command_Write+0x41c>
    3166:	9c 83       	std	Y+4, r25	; 0x04
    3168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <LCD4_Command_Write+0x410>
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <LCD4_Command_Write+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	6f 81       	ldd	r22, Y+7	; 0x07
    3180:	78 85       	ldd	r23, Y+8	; 0x08
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	8d 81       	ldd	r24, Y+5	; 0x05
    3194:	9e 81       	ldd	r25, Y+6	; 0x06
    3196:	9a 83       	std	Y+2, r25	; 0x02
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <LCD4_Command_Write+0x458>
    31a2:	9a 83       	std	Y+2, r25	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    31a6:	e9 96       	adiw	r28, 0x39	; 57
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <lcd4_set_cursor>:

static void lcd4_set_cursor(u8 row, u8 coul){
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	00 d0       	rcall	.+0      	; 0x31be <lcd4_set_cursor+0x6>
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <lcd4_set_cursor+0x8>
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	6a 83       	std	Y+2, r22	; 0x02
    coul--;
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	81 50       	subi	r24, 0x01	; 1
    31cc:	8a 83       	std	Y+2, r24	; 0x02
    switch (row){
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	28 2f       	mov	r18, r24
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	3c 83       	std	Y+4, r19	; 0x04
    31d6:	2b 83       	std	Y+3, r18	; 0x03
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	9c 81       	ldd	r25, Y+4	; 0x04
    31dc:	82 30       	cpi	r24, 0x02	; 2
    31de:	91 05       	cpc	r25, r1
    31e0:	d9 f0       	breq	.+54     	; 0x3218 <lcd4_set_cursor+0x60>
    31e2:	2b 81       	ldd	r18, Y+3	; 0x03
    31e4:	3c 81       	ldd	r19, Y+4	; 0x04
    31e6:	23 30       	cpi	r18, 0x03	; 3
    31e8:	31 05       	cpc	r19, r1
    31ea:	34 f4       	brge	.+12     	; 0x31f8 <lcd4_set_cursor+0x40>
    31ec:	8b 81       	ldd	r24, Y+3	; 0x03
    31ee:	9c 81       	ldd	r25, Y+4	; 0x04
    31f0:	81 30       	cpi	r24, 0x01	; 1
    31f2:	91 05       	cpc	r25, r1
    31f4:	61 f0       	breq	.+24     	; 0x320e <lcd4_set_cursor+0x56>
    31f6:	1e c0       	rjmp	.+60     	; 0x3234 <lcd4_set_cursor+0x7c>
    31f8:	2b 81       	ldd	r18, Y+3	; 0x03
    31fa:	3c 81       	ldd	r19, Y+4	; 0x04
    31fc:	23 30       	cpi	r18, 0x03	; 3
    31fe:	31 05       	cpc	r19, r1
    3200:	81 f0       	breq	.+32     	; 0x3222 <lcd4_set_cursor+0x6a>
    3202:	8b 81       	ldd	r24, Y+3	; 0x03
    3204:	9c 81       	ldd	r25, Y+4	; 0x04
    3206:	84 30       	cpi	r24, 0x04	; 4
    3208:	91 05       	cpc	r25, r1
    320a:	81 f0       	breq	.+32     	; 0x322c <lcd4_set_cursor+0x74>
    320c:	13 c0       	rjmp	.+38     	; 0x3234 <lcd4_set_cursor+0x7c>
        case ROW1:
            LCD4_Command_Write(0x80+coul);
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	80 58       	subi	r24, 0x80	; 128
    3212:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
    3216:	0e c0       	rjmp	.+28     	; 0x3234 <lcd4_set_cursor+0x7c>
        break;
        case ROW2:
            LCD4_Command_Write(0xC0+coul);
    3218:	8a 81       	ldd	r24, Y+2	; 0x02
    321a:	80 54       	subi	r24, 0x40	; 64
    321c:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
    3220:	09 c0       	rjmp	.+18     	; 0x3234 <lcd4_set_cursor+0x7c>
        break;
        case ROW3:
            LCD4_Command_Write(0x94+coul);
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	8c 56       	subi	r24, 0x6C	; 108
    3226:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
    322a:	04 c0       	rjmp	.+8      	; 0x3234 <lcd4_set_cursor+0x7c>
        break;
        case ROW4:
            LCD4_Command_Write(0xD4+coul);
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	8c 52       	subi	r24, 0x2C	; 44
    3230:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD4_Command_Write>
        break;
        default:
        	break;
    }
}
    3234:	0f 90       	pop	r0
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <KP_GetKey>:
#include "avr/delay.h"

u8 Keys[][4] = { { '7', '8', '9', '/' }, { '4', '5', '6', '*' }, { '1', '2',
				'3', '-' }, { '.', '0', '=', '+' } };

u8 KP_GetKey() {
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
    324a:	27 97       	sbiw	r28, 0x07	; 7
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
	u8 i, j = 0;
    3256:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < 4; i++) {
    3258:	1a 82       	std	Y+2, r1	; 0x02
    325a:	61 c0       	rjmp	.+194    	; 0x331e <KP_GetKey+0xdc>
		Dio_WriteChannel(col1, !(i == 0));
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	8f 83       	std	Y+7, r24	; 0x07
    3260:	8f 81       	ldd	r24, Y+7	; 0x07
    3262:	88 23       	and	r24, r24
    3264:	11 f0       	breq	.+4      	; 0x326a <KP_GetKey+0x28>
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	8f 83       	std	Y+7, r24	; 0x07
    326a:	9f 81       	ldd	r25, Y+7	; 0x07
    326c:	8f e1       	ldi	r24, 0x1F	; 31
    326e:	69 2f       	mov	r22, r25
    3270:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(col2, !(i == 1));
    3274:	1e 82       	std	Y+6, r1	; 0x06
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	11 f0       	breq	.+4      	; 0x3280 <KP_GetKey+0x3e>
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	8e 83       	std	Y+6, r24	; 0x06
    3280:	8e e1       	ldi	r24, 0x1E	; 30
    3282:	6e 81       	ldd	r22, Y+6	; 0x06
    3284:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(col3, !(i == 2));
    3288:	1d 82       	std	Y+5, r1	; 0x05
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	82 30       	cpi	r24, 0x02	; 2
    328e:	11 f0       	breq	.+4      	; 0x3294 <KP_GetKey+0x52>
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	89 e1       	ldi	r24, 0x19	; 25
    3296:	6d 81       	ldd	r22, Y+5	; 0x05
    3298:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
		Dio_WriteChannel(col4, !(i == 3));
    329c:	1c 82       	std	Y+4, r1	; 0x04
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	83 30       	cpi	r24, 0x03	; 3
    32a2:	11 f0       	breq	.+4      	; 0x32a8 <KP_GetKey+0x66>
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	8c 83       	std	Y+4, r24	; 0x04
    32a8:	8c e1       	ldi	r24, 0x1C	; 28
    32aa:	6c 81       	ldd	r22, Y+4	; 0x04
    32ac:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>

		if (!Dio_ReadChannel(row1)) {
    32b0:	85 e1       	ldi	r24, 0x15	; 21
    32b2:	0e 94 48 0c 	call	0x1890	; 0x1890 <Dio_ReadChannel>
    32b6:	88 23       	and	r24, r24
    32b8:	41 f4       	brne	.+16     	; 0x32ca <KP_GetKey+0x88>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 1;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row1));break;
    32be:	85 e1       	ldi	r24, 0x15	; 21
    32c0:	0e 94 48 0c 	call	0x1890	; 0x1890 <Dio_ReadChannel>
    32c4:	88 23       	and	r24, r24
    32c6:	d9 f3       	breq	.-10     	; 0x32be <KP_GetKey+0x7c>
    32c8:	2e c0       	rjmp	.+92     	; 0x3326 <KP_GetKey+0xe4>

		}
		if (!Dio_ReadChannel(row2)) {
    32ca:	84 e1       	ldi	r24, 0x14	; 20
    32cc:	0e 94 48 0c 	call	0x1890	; 0x1890 <Dio_ReadChannel>
    32d0:	88 23       	and	r24, r24
    32d2:	41 f4       	brne	.+16     	; 0x32e4 <KP_GetKey+0xa2>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 2;
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row2));break;
    32d8:	84 e1       	ldi	r24, 0x14	; 20
    32da:	0e 94 48 0c 	call	0x1890	; 0x1890 <Dio_ReadChannel>
    32de:	88 23       	and	r24, r24
    32e0:	d9 f3       	breq	.-10     	; 0x32d8 <KP_GetKey+0x96>
    32e2:	21 c0       	rjmp	.+66     	; 0x3326 <KP_GetKey+0xe4>


		}
		if (!Dio_ReadChannel(row3)) {
    32e4:	83 e1       	ldi	r24, 0x13	; 19
    32e6:	0e 94 48 0c 	call	0x1890	; 0x1890 <Dio_ReadChannel>
    32ea:	88 23       	and	r24, r24
    32ec:	41 f4       	brne	.+16     	; 0x32fe <KP_GetKey+0xbc>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 3;
    32ee:	83 e0       	ldi	r24, 0x03	; 3
    32f0:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row3));break;
    32f2:	83 e1       	ldi	r24, 0x13	; 19
    32f4:	0e 94 48 0c 	call	0x1890	; 0x1890 <Dio_ReadChannel>
    32f8:	88 23       	and	r24, r24
    32fa:	d9 f3       	breq	.-10     	; 0x32f2 <KP_GetKey+0xb0>
    32fc:	14 c0       	rjmp	.+40     	; 0x3326 <KP_GetKey+0xe4>

		}
		if (!Dio_ReadChannel(row4)) {
    32fe:	82 e1       	ldi	r24, 0x12	; 18
    3300:	0e 94 48 0c 	call	0x1890	; 0x1890 <Dio_ReadChannel>
    3304:	88 23       	and	r24, r24
    3306:	41 f4       	brne	.+16     	; 0x3318 <KP_GetKey+0xd6>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 4;
    3308:	84 e0       	ldi	r24, 0x04	; 4
    330a:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row4));break;
    330c:	82 e1       	ldi	r24, 0x12	; 18
    330e:	0e 94 48 0c 	call	0x1890	; 0x1890 <Dio_ReadChannel>
    3312:	88 23       	and	r24, r24
    3314:	d9 f3       	breq	.-10     	; 0x330c <KP_GetKey+0xca>
    3316:	07 c0       	rjmp	.+14     	; 0x3326 <KP_GetKey+0xe4>
				'3', '-' }, { '.', '0', '=', '+' } };

u8 KP_GetKey() {
	u8 i, j = 0;

	for (i = 0; i < 4; i++) {
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	8f 5f       	subi	r24, 0xFF	; 255
    331c:	8a 83       	std	Y+2, r24	; 0x02
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	84 30       	cpi	r24, 0x04	; 4
    3322:	08 f4       	brcc	.+2      	; 0x3326 <KP_GetKey+0xe4>
    3324:	9b cf       	rjmp	.-202    	; 0x325c <KP_GetKey+0x1a>
			j = 4;
			while (!Dio_ReadChannel(row4));break;

		}
	}
	Dio_WriteChannel(col1, STD_HIGH);
    3326:	8f e1       	ldi	r24, 0x1F	; 31
    3328:	61 e0       	ldi	r22, 0x01	; 1
    332a:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(col2, STD_HIGH);
    332e:	8e e1       	ldi	r24, 0x1E	; 30
    3330:	61 e0       	ldi	r22, 0x01	; 1
    3332:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(col3, STD_HIGH);
    3336:	89 e1       	ldi	r24, 0x19	; 25
    3338:	61 e0       	ldi	r22, 0x01	; 1
    333a:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>
	Dio_WriteChannel(col4, STD_HIGH);
    333e:	8c e1       	ldi	r24, 0x1C	; 28
    3340:	61 e0       	ldi	r22, 0x01	; 1
    3342:	0e 94 4f 0b 	call	0x169e	; 0x169e <Dio_WriteChannel>


	if (j == 0)
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	88 23       	and	r24, r24
    334a:	11 f4       	brne	.+4      	; 0x3350 <KP_GetKey+0x10e>
		return 0;
    334c:	1b 82       	std	Y+3, r1	; 0x03
    334e:	15 c0       	rjmp	.+42     	; 0x337a <KP_GetKey+0x138>
	else
		return (Keys[j-1][i]);
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	88 2f       	mov	r24, r24
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	ac 01       	movw	r20, r24
    3358:	41 50       	subi	r20, 0x01	; 1
    335a:	50 40       	sbci	r21, 0x00	; 0
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	28 2f       	mov	r18, r24
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	ca 01       	movw	r24, r20
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	82 0f       	add	r24, r18
    336e:	93 1f       	adc	r25, r19
    3370:	fc 01       	movw	r30, r24
    3372:	e5 53       	subi	r30, 0x35	; 53
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 81       	ld	r24, Z
    3378:	8b 83       	std	Y+3, r24	; 0x03
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    337c:	27 96       	adiw	r28, 0x07	; 7
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	de bf       	out	0x3e, r29	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <DCM_voidOn>:
/* MCAL */
#include "../../MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"


void DCM_voidOn(u8 Copy_u8Direction)
{
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	0f 92       	push	r0
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	89 83       	std	Y+1, r24	; 0x01
	/* Turn DC motor on using H-Bridge
	 By Setting PWM, Dir and Enable pins with high
	 or Dir Low depend on Copy_u8Direction*/
}
    339a:	0f 90       	pop	r0
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <DCM_voidControlSpeed>:


void DCM_voidControlSpeed(u8 Copy_u8Speed)
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	0f 92       	push	r0
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	89 83       	std	Y+1, r24	; 0x01
	/* Controlling DC motor speed using PWM
	mode from TMR0 by setting Duty Cycle*/
}
    33ae:	0f 90       	pop	r0
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	08 95       	ret

000033b6 <DCM_voidOff>:


void DCM_voidOff(void)
{
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
	/* Turn DC motor off using H-Bridge
	   By Setting Enable pin with low */
}
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <main>:
#include "MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"
#include "HAL/KEYPAD/KP_interface.h"
#include "HAL/LCD/LCD_interface.h"
#include "MCAL/ADC/includes/ADC_interface.h"

int main() {
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	60 97       	sbiw	r28, 0x10	; 16
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61

	Port_Init(pin_cfg);
    33d8:	88 e6       	ldi	r24, 0x68	; 104
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 0a 07 	call	0xe14	; 0xe14 <Port_Init>
	lcd4_Init();
    33e0:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <lcd4_Init>

	ADC_Init();
    33e4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <ADC_Init>
	u16 get = 0;
    33e8:	18 8a       	std	Y+16, r1	; 0x10
    33ea:	1f 86       	std	Y+15, r1	; 0x0f
	//lcd4_disply_string("ADC=");
	while (1) {
		get = ADC_ReadChannel(ADC0);
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <ADC_ReadChannel>
    33f2:	98 8b       	std	Y+16, r25	; 0x10
    33f4:	8f 87       	std	Y+15, r24	; 0x0f
		lcd4_disply_num(get);
    33f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f8:	98 89       	ldd	r25, Y+16	; 0x10
    33fa:	cc 01       	movw	r24, r24
    33fc:	a0 e0       	ldi	r26, 0x00	; 0
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	bc 01       	movw	r22, r24
    3402:	cd 01       	movw	r24, r26
    3404:	0e 94 ee 13 	call	0x27dc	; 0x27dc <lcd4_disply_num>
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	a8 ec       	ldi	r26, 0xC8	; 200
    340e:	b2 e4       	ldi	r27, 0x42	; 66
    3410:	8b 87       	std	Y+11, r24	; 0x0b
    3412:	9c 87       	std	Y+12, r25	; 0x0c
    3414:	ad 87       	std	Y+13, r26	; 0x0d
    3416:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3418:	6b 85       	ldd	r22, Y+11	; 0x0b
    341a:	7c 85       	ldd	r23, Y+12	; 0x0c
    341c:	8d 85       	ldd	r24, Y+13	; 0x0d
    341e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	4a e7       	ldi	r20, 0x7A	; 122
    3426:	55 e4       	ldi	r21, 0x45	; 69
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	8f 83       	std	Y+7, r24	; 0x07
    3432:	98 87       	std	Y+8, r25	; 0x08
    3434:	a9 87       	std	Y+9, r26	; 0x09
    3436:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3438:	6f 81       	ldd	r22, Y+7	; 0x07
    343a:	78 85       	ldd	r23, Y+8	; 0x08
    343c:	89 85       	ldd	r24, Y+9	; 0x09
    343e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e8       	ldi	r20, 0x80	; 128
    3446:	5f e3       	ldi	r21, 0x3F	; 63
    3448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    344c:	88 23       	and	r24, r24
    344e:	2c f4       	brge	.+10     	; 0x345a <main+0x96>
		__ticks = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	9e 83       	std	Y+6, r25	; 0x06
    3456:	8d 83       	std	Y+5, r24	; 0x05
    3458:	3f c0       	rjmp	.+126    	; 0x34d8 <main+0x114>
	else if (__tmp > 65535)
    345a:	6f 81       	ldd	r22, Y+7	; 0x07
    345c:	78 85       	ldd	r23, Y+8	; 0x08
    345e:	89 85       	ldd	r24, Y+9	; 0x09
    3460:	9a 85       	ldd	r25, Y+10	; 0x0a
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	3f ef       	ldi	r19, 0xFF	; 255
    3466:	4f e7       	ldi	r20, 0x7F	; 127
    3468:	57 e4       	ldi	r21, 0x47	; 71
    346a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    346e:	18 16       	cp	r1, r24
    3470:	4c f5       	brge	.+82     	; 0x34c4 <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3472:	6b 85       	ldd	r22, Y+11	; 0x0b
    3474:	7c 85       	ldd	r23, Y+12	; 0x0c
    3476:	8d 85       	ldd	r24, Y+13	; 0x0d
    3478:	9e 85       	ldd	r25, Y+14	; 0x0e
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e2       	ldi	r20, 0x20	; 32
    3480:	51 e4       	ldi	r21, 0x41	; 65
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9e 83       	std	Y+6, r25	; 0x06
    3498:	8d 83       	std	Y+5, r24	; 0x05
    349a:	0f c0       	rjmp	.+30     	; 0x34ba <main+0xf6>
    349c:	80 e9       	ldi	r24, 0x90	; 144
    349e:	91 e0       	ldi	r25, 0x01	; 1
    34a0:	9c 83       	std	Y+4, r25	; 0x04
    34a2:	8b 83       	std	Y+3, r24	; 0x03
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	9c 81       	ldd	r25, Y+4	; 0x04
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <main+0xe4>
    34ac:	9c 83       	std	Y+4, r25	; 0x04
    34ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b0:	8d 81       	ldd	r24, Y+5	; 0x05
    34b2:	9e 81       	ldd	r25, Y+6	; 0x06
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	9e 83       	std	Y+6, r25	; 0x06
    34b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ba:	8d 81       	ldd	r24, Y+5	; 0x05
    34bc:	9e 81       	ldd	r25, Y+6	; 0x06
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	69 f7       	brne	.-38     	; 0x349c <main+0xd8>
    34c2:	14 c0       	rjmp	.+40     	; 0x34ec <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c4:	6f 81       	ldd	r22, Y+7	; 0x07
    34c6:	78 85       	ldd	r23, Y+8	; 0x08
    34c8:	89 85       	ldd	r24, Y+9	; 0x09
    34ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	9e 83       	std	Y+6, r25	; 0x06
    34d6:	8d 83       	std	Y+5, r24	; 0x05
    34d8:	8d 81       	ldd	r24, Y+5	; 0x05
    34da:	9e 81       	ldd	r25, Y+6	; 0x06
    34dc:	9a 83       	std	Y+2, r25	; 0x02
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	9a 81       	ldd	r25, Y+2	; 0x02
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <main+0x120>
    34e8:	9a 83       	std	Y+2, r25	; 0x02
    34ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		lcd4_CLR();
    34ec:	0e 94 6d 13 	call	0x26da	; 0x26da <lcd4_CLR>
    34f0:	7d cf       	rjmp	.-262    	; 0x33ec <main+0x28>

000034f2 <__udivmodsi4>:
    34f2:	a1 e2       	ldi	r26, 0x21	; 33
    34f4:	1a 2e       	mov	r1, r26
    34f6:	aa 1b       	sub	r26, r26
    34f8:	bb 1b       	sub	r27, r27
    34fa:	fd 01       	movw	r30, r26
    34fc:	0d c0       	rjmp	.+26     	; 0x3518 <__udivmodsi4_ep>

000034fe <__udivmodsi4_loop>:
    34fe:	aa 1f       	adc	r26, r26
    3500:	bb 1f       	adc	r27, r27
    3502:	ee 1f       	adc	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	a2 17       	cp	r26, r18
    3508:	b3 07       	cpc	r27, r19
    350a:	e4 07       	cpc	r30, r20
    350c:	f5 07       	cpc	r31, r21
    350e:	20 f0       	brcs	.+8      	; 0x3518 <__udivmodsi4_ep>
    3510:	a2 1b       	sub	r26, r18
    3512:	b3 0b       	sbc	r27, r19
    3514:	e4 0b       	sbc	r30, r20
    3516:	f5 0b       	sbc	r31, r21

00003518 <__udivmodsi4_ep>:
    3518:	66 1f       	adc	r22, r22
    351a:	77 1f       	adc	r23, r23
    351c:	88 1f       	adc	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	1a 94       	dec	r1
    3522:	69 f7       	brne	.-38     	; 0x34fe <__udivmodsi4_loop>
    3524:	60 95       	com	r22
    3526:	70 95       	com	r23
    3528:	80 95       	com	r24
    352a:	90 95       	com	r25
    352c:	9b 01       	movw	r18, r22
    352e:	ac 01       	movw	r20, r24
    3530:	bd 01       	movw	r22, r26
    3532:	cf 01       	movw	r24, r30
    3534:	08 95       	ret

00003536 <__prologue_saves__>:
    3536:	2f 92       	push	r2
    3538:	3f 92       	push	r3
    353a:	4f 92       	push	r4
    353c:	5f 92       	push	r5
    353e:	6f 92       	push	r6
    3540:	7f 92       	push	r7
    3542:	8f 92       	push	r8
    3544:	9f 92       	push	r9
    3546:	af 92       	push	r10
    3548:	bf 92       	push	r11
    354a:	cf 92       	push	r12
    354c:	df 92       	push	r13
    354e:	ef 92       	push	r14
    3550:	ff 92       	push	r15
    3552:	0f 93       	push	r16
    3554:	1f 93       	push	r17
    3556:	cf 93       	push	r28
    3558:	df 93       	push	r29
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	ca 1b       	sub	r28, r26
    3560:	db 0b       	sbc	r29, r27
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	de bf       	out	0x3e, r29	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	cd bf       	out	0x3d, r28	; 61
    356c:	09 94       	ijmp

0000356e <__epilogue_restores__>:
    356e:	2a 88       	ldd	r2, Y+18	; 0x12
    3570:	39 88       	ldd	r3, Y+17	; 0x11
    3572:	48 88       	ldd	r4, Y+16	; 0x10
    3574:	5f 84       	ldd	r5, Y+15	; 0x0f
    3576:	6e 84       	ldd	r6, Y+14	; 0x0e
    3578:	7d 84       	ldd	r7, Y+13	; 0x0d
    357a:	8c 84       	ldd	r8, Y+12	; 0x0c
    357c:	9b 84       	ldd	r9, Y+11	; 0x0b
    357e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3580:	b9 84       	ldd	r11, Y+9	; 0x09
    3582:	c8 84       	ldd	r12, Y+8	; 0x08
    3584:	df 80       	ldd	r13, Y+7	; 0x07
    3586:	ee 80       	ldd	r14, Y+6	; 0x06
    3588:	fd 80       	ldd	r15, Y+5	; 0x05
    358a:	0c 81       	ldd	r16, Y+4	; 0x04
    358c:	1b 81       	ldd	r17, Y+3	; 0x03
    358e:	aa 81       	ldd	r26, Y+2	; 0x02
    3590:	b9 81       	ldd	r27, Y+1	; 0x01
    3592:	ce 0f       	add	r28, r30
    3594:	d1 1d       	adc	r29, r1
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	ed 01       	movw	r28, r26
    35a2:	08 95       	ret

000035a4 <_exit>:
    35a4:	f8 94       	cli

000035a6 <__stop_program>:
    35a6:	ff cf       	rjmp	.-2      	; 0x35a6 <__stop_program>
