
SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  00004a74  00004b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008001cc  008001cc  00004c74  2**0
                  ALLOC
  3 .stab         0000441c  00000000  00000000  00004c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002605  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000b695  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  0000b875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  0000baa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000e3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  0000f9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00010d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  00010f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  0001126a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__vector_1>
       8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__vector_2>
       c:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__vector_3>
      10:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_4>
      14:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__vector_10>
      2c:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_11>
      30:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 20 	call	0x41be	; 0x41be <main>
      8a:	0c 94 38 25 	jmp	0x4a70	; 0x4a70 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 25 	jmp	0x4a02	; 0x4a02 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 25 	jmp	0x4a02	; 0x4a02 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e8 59       	subi	r30, 0x98	; 152
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <TMR2_voidSetDelay_ms_usingCTC+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
     efc:	e3 e4       	ldi	r30, 0x43	; 67
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	89 ef       	ldi	r24, 0xF9	; 249
     f02:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	cc 01       	movw	r24, r24
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	80 93 d6 01 	sts	0x01D6, r24
     f12:	90 93 d7 01 	sts	0x01D7, r25
     f16:	a0 93 d8 01 	sts	0x01D8, r26
     f1a:	b0 93 d9 01 	sts	0x01D9, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	0f 92       	push	r0
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
#if TMR2_MODE == TMR2_FAST_PWM_MODE

	if ((100 >= copy_u8DutyCycle)) {
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	85 36       	cpi	r24, 0x65	; 101
     f38:	e0 f4       	brcc	.+56     	; 0xf72 <TMR2_voidSetDutyCycleForPWM+0x4a>
		OCR2 = 0;
		else
		OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;

#elif TMR2_PWM_MODE == TMR2_INVERTING
		copy_u8DutyCycle = 100 - copy_u8DutyCycle;
     f3a:	94 e6       	ldi	r25, 0x64	; 100
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	29 2f       	mov	r18, r25
     f40:	28 1b       	sub	r18, r24
     f42:	82 2f       	mov	r24, r18
     f44:	89 83       	std	Y+1, r24	; 0x01
		if (copy_u8DutyCycle == 0)
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	88 23       	and	r24, r24
     f4a:	21 f4       	brne	.+8      	; 0xf54 <TMR2_voidSetDutyCycleForPWM+0x2c>
			OCR2 = 0;
     f4c:	e3 e4       	ldi	r30, 0x43	; 67
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	10 82       	st	Z, r1
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <TMR2_voidSetDutyCycleForPWM+0x4a>
		else
			OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;
     f54:	e3 e4       	ldi	r30, 0x43	; 67
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	98 2f       	mov	r25, r24
     f60:	88 27       	eor	r24, r24
     f62:	24 e6       	ldi	r18, 0x64	; 100
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	b9 01       	movw	r22, r18
     f68:	0e 94 cb 24 	call	0x4996	; 0x4996 <__udivmodhi4>
     f6c:	cb 01       	movw	r24, r22
     f6e:	81 50       	subi	r24, 0x01	; 1
     f70:	80 83       	st	Z, r24
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);

#elif TMR2_MODE == TMR2_FAST_PWM_MODE
	// Select Fast PWM mode
	SET_BIT(TCCR2, WGM20);
     f82:	a5 e4       	ldi	r26, 0x45	; 69
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e4       	ldi	r30, 0x45	; 69
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 64       	ori	r24, 0x40	; 64
     f8e:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
     f90:	a5 e4       	ldi	r26, 0x45	; 69
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e4       	ldi	r30, 0x45	; 69
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 60       	ori	r24, 0x08	; 8
     f9c:	8c 93       	st	X, r24

#if TMR2_PWM_MODE == TMR2_INVERTING
	SET_BIT(TCCR2, COM20);
     f9e:	a5 e4       	ldi	r26, 0x45	; 69
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e4       	ldi	r30, 0x45	; 69
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 61       	ori	r24, 0x10	; 16
     faa:	8c 93       	st	X, r24
	SET_BIT(TCCR2, COM21);
     fac:	a5 e4       	ldi	r26, 0x45	; 69
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e5 e4       	ldi	r30, 0x45	; 69
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 62       	ori	r24, 0x20	; 32
     fb8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
     fc8:	a5 e4       	ldi	r26, 0x45	; 69
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e4       	ldi	r30, 0x45	; 69
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	81 60       	ori	r24, 0x01	; 1
     fd4:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
     fd6:	a5 e4       	ldi	r26, 0x45	; 69
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e5 e4       	ldi	r30, 0x45	; 69
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
     fe4:	a5 e4       	ldi	r26, 0x45	; 69
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e4       	ldi	r30, 0x45	; 69
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8b 7f       	andi	r24, 0xFB	; 251
     ff0:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    1000:	a5 e4       	ldi	r26, 0x45	; 69
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e4       	ldi	r30, 0x45	; 69
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8e 7f       	andi	r24, 0xFE	; 254
    100c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    100e:	a5 e4       	ldi	r26, 0x45	; 69
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e4       	ldi	r30, 0x45	; 69
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8d 7f       	andi	r24, 0xFD	; 253
    101a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    101c:	a5 e4       	ldi	r26, 0x45	; 69
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e5 e4       	ldi	r30, 0x45	; 69
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8b 7f       	andi	r24, 0xFB	; 251
    1028:	8c 93       	st	X, r24
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <TMR2_voidSetCallBackOVF+0x6>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	31 f0       	breq	.+12     	; 0x1052 <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	90 93 cd 01 	sts	0x01CD, r25
    104e:	80 93 cc 01 	sts	0x01CC, r24
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <TMR2_voidSetCallBackCTC+0x6>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	31 f0       	breq	.+12     	; 0x107e <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	90 93 cf 01 	sts	0x01CF, r25
    107a:	80 93 ce 01 	sts	0x01CE, r24
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	6f 93       	push	r22
    109c:	7f 93       	push	r23
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	af 93       	push	r26
    10a4:	bf 93       	push	r27
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    10b2:	80 91 d0 01 	lds	r24, 0x01D0
    10b6:	90 91 d1 01 	lds	r25, 0x01D1
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	90 93 d1 01 	sts	0x01D1, r25
    10c0:	80 93 d0 01 	sts	0x01D0, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    10c4:	80 91 d0 01 	lds	r24, 0x01D0
    10c8:	90 91 d1 01 	lds	r25, 0x01D1
    10cc:	23 e0       	ldi	r18, 0x03	; 3
    10ce:	81 3d       	cpi	r24, 0xD1	; 209
    10d0:	92 07       	cpc	r25, r18
    10d2:	99 f4       	brne	.+38     	; 0x10fa <__vector_5+0x72>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    10d4:	e4 e4       	ldi	r30, 0x44	; 68
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	81 e7       	ldi	r24, 0x71	; 113
    10da:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    10dc:	10 92 d1 01 	sts	0x01D1, r1
    10e0:	10 92 d0 01 	sts	0x01D0, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    10e4:	80 91 cc 01 	lds	r24, 0x01CC
    10e8:	90 91 cd 01 	lds	r25, 0x01CD
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	29 f0       	breq	.+10     	; 0x10fa <__vector_5+0x72>
			TMR2_privatePtrToCAllBackOVF();
    10f0:	e0 91 cc 01 	lds	r30, 0x01CC
    10f4:	f0 91 cd 01 	lds	r31, 0x01CD
    10f8:	09 95       	icall
		}
	}
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	ff 91       	pop	r31
    1100:	ef 91       	pop	r30
    1102:	bf 91       	pop	r27
    1104:	af 91       	pop	r26
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	7f 91       	pop	r23
    110c:	6f 91       	pop	r22
    110e:	5f 91       	pop	r21
    1110:	4f 91       	pop	r20
    1112:	3f 91       	pop	r19
    1114:	2f 91       	pop	r18
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    114a:	80 91 d2 01 	lds	r24, 0x01D2
    114e:	90 91 d3 01 	lds	r25, 0x01D3
    1152:	a0 91 d4 01 	lds	r26, 0x01D4
    1156:	b0 91 d5 01 	lds	r27, 0x01D5
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	a1 1d       	adc	r26, r1
    115e:	b1 1d       	adc	r27, r1
    1160:	80 93 d2 01 	sts	0x01D2, r24
    1164:	90 93 d3 01 	sts	0x01D3, r25
    1168:	a0 93 d4 01 	sts	0x01D4, r26
    116c:	b0 93 d5 01 	sts	0x01D5, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1170:	20 91 d6 01 	lds	r18, 0x01D6
    1174:	30 91 d7 01 	lds	r19, 0x01D7
    1178:	40 91 d8 01 	lds	r20, 0x01D8
    117c:	50 91 d9 01 	lds	r21, 0x01D9
    1180:	80 91 d2 01 	lds	r24, 0x01D2
    1184:	90 91 d3 01 	lds	r25, 0x01D3
    1188:	a0 91 d4 01 	lds	r26, 0x01D4
    118c:	b0 91 d5 01 	lds	r27, 0x01D5
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	4a 07       	cpc	r20, r26
    1196:	5b 07       	cpc	r21, r27
    1198:	99 f4       	brne	.+38     	; 0x11c0 <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    119a:	10 92 d2 01 	sts	0x01D2, r1
    119e:	10 92 d3 01 	sts	0x01D3, r1
    11a2:	10 92 d4 01 	sts	0x01D4, r1
    11a6:	10 92 d5 01 	sts	0x01D5, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    11aa:	80 91 ce 01 	lds	r24, 0x01CE
    11ae:	90 91 cf 01 	lds	r25, 0x01CF
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    11b6:	e0 91 ce 01 	lds	r30, 0x01CE
    11ba:	f0 91 cf 01 	lds	r31, 0x01CF
    11be:	09 95       	icall
		}
	}
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	ff 91       	pop	r31
    11c6:	ef 91       	pop	r30
    11c8:	bf 91       	pop	r27
    11ca:	af 91       	pop	r26
    11cc:	9f 91       	pop	r25
    11ce:	8f 91       	pop	r24
    11d0:	7f 91       	pop	r23
    11d2:	6f 91       	pop	r22
    11d4:	5f 91       	pop	r21
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    11f2:	e3 e4       	ldi	r30, 0x43	; 67
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	80 83       	st	Z, r24
}
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    1214:	06 e4       	ldi	r16, 0x46	; 70
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	9c 01       	movw	r18, r24
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	80 e9       	ldi	r24, 0x90	; 144
    1224:	90 ed       	ldi	r25, 0xD0	; 208
    1226:	a3 e0       	ldi	r26, 0x03	; 3
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 df 24 	call	0x49be	; 0x49be <__udivmodsi4>
    1232:	da 01       	movw	r26, r20
    1234:	c9 01       	movw	r24, r18
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f8 01       	movw	r30, r16
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	08 95       	ret

0000124c <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	69 83       	std	Y+1, r22	; 0x01
    125e:	7a 83       	std	Y+2, r23	; 0x02
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    1264:	69 81       	ldd	r22, Y+1	; 0x01
    1266:	7a 81       	ldd	r23, Y+2	; 0x02
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	48 ec       	ldi	r20, 0xC8	; 200
    1272:	52 e4       	ldi	r21, 0x42	; 66
    1274:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    1278:	18 16       	cp	r1, r24
    127a:	0c f4       	brge	.+2      	; 0x127e <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    127c:	48 c0       	rjmp	.+144    	; 0x130e <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    127e:	69 81       	ldd	r22, Y+1	; 0x01
    1280:	7a 81       	ldd	r23, Y+2	; 0x02
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1292:	88 23       	and	r24, r24
    1294:	29 f4       	brne	.+10     	; 0x12a0 <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    1296:	ea e4       	ldi	r30, 0x4A	; 74
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	11 82       	std	Z+1, r1	; 0x01
    129c:	10 82       	st	Z, r1
    129e:	37 c0       	rjmp	.+110    	; 0x130e <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    12a0:	0a e4       	ldi	r16, 0x4A	; 74
    12a2:	10 e0       	ldi	r17, 0x00	; 0
    12a4:	e6 e4       	ldi	r30, 0x46	; 70
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	cc 01       	movw	r24, r24
    12b0:	a0 e0       	ldi	r26, 0x00	; 0
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	29 81       	ldd	r18, Y+1	; 0x01
    12c6:	3a 81       	ldd	r19, Y+2	; 0x02
    12c8:	4b 81       	ldd	r20, Y+3	; 0x03
    12ca:	5c 81       	ldd	r21, Y+4	; 0x04
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	48 ec       	ldi	r20, 0xC8	; 200
    12de:	52 e4       	ldi	r21, 0x42	; 66
    12e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	f8 01       	movw	r30, r16
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <TMR1_voidInit>:


void TMR1_voidInit(void) {
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    1328:	af e4       	ldi	r26, 0x4F	; 79
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ef e4       	ldi	r30, 0x4F	; 79
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8e 7f       	andi	r24, 0xFE	; 254
    1334:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    1336:	af e4       	ldi	r26, 0x4F	; 79
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	ef e4       	ldi	r30, 0x4F	; 79
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	82 60       	ori	r24, 0x02	; 2
    1342:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1344:	ae e4       	ldi	r26, 0x4E	; 78
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	ee e4       	ldi	r30, 0x4E	; 78
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	88 60       	ori	r24, 0x08	; 8
    1350:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1352:	ae e4       	ldi	r26, 0x4E	; 78
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ee e4       	ldi	r30, 0x4E	; 78
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 61       	ori	r24, 0x10	; 16
    135e:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    1360:	af e4       	ldi	r26, 0x4F	; 79
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ef e4       	ldi	r30, 0x4F	; 79
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8f 7b       	andi	r24, 0xBF	; 191
    136c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    136e:	af e4       	ldi	r26, 0x4F	; 79
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ef e4       	ldi	r30, 0x4F	; 79
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 68       	ori	r24, 0x80	; 128
    137a:	8c 93       	st	X, r24
#elif TMR1_PWM_MODE == TMR1_INVERTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
	TMR1_voidSetFrequencyMode14FastPWM(50);
    137c:	82 e3       	ldi	r24, 0x32	; 50
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 01 09 	call	0x1202	; 0x1202 <TMR1_voidSetFrequencyMode14FastPWM>

#endif
}
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <TMR1_voidSetCompareMatchValueA+0x6>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    1398:	ea e4       	ldi	r30, 0x4A	; 74
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	91 83       	std	Z+1, r25	; 0x01
    13a2:	80 83       	st	Z, r24
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    13b6:	ae e4       	ldi	r26, 0x4E	; 78
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	ee e4       	ldi	r30, 0x4E	; 78
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	81 60       	ori	r24, 0x01	; 1
    13c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    13c4:	ae e4       	ldi	r26, 0x4E	; 78
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	ee e4       	ldi	r30, 0x4E	; 78
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	82 60       	ori	r24, 0x02	; 2
    13d0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    13d2:	ae e4       	ldi	r26, 0x4E	; 78
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ee e4       	ldi	r30, 0x4E	; 78
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8b 7f       	andi	r24, 0xFB	; 251
    13de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    13ee:	ae e4       	ldi	r26, 0x4E	; 78
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ee e4       	ldi	r30, 0x4E	; 78
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    13fc:	ae e4       	ldi	r26, 0x4E	; 78
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ee e4       	ldi	r30, 0x4E	; 78
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8d 7f       	andi	r24, 0xFD	; 253
    1408:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    140a:	ae e4       	ldi	r26, 0x4E	; 78
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	ee e4       	ldi	r30, 0x4E	; 78
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8b 7f       	andi	r24, 0xFB	; 251
    1416:	8c 93       	st	X, r24
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	9a 83       	std	Y+2, r25	; 0x02
    142a:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    142c:	ec e5       	ldi	r30, 0x5C	; 92
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	89 ef       	ldi	r24, 0xF9	; 249
    1432:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	cc 01       	movw	r24, r24
    143a:	a0 e0       	ldi	r26, 0x00	; 0
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	80 93 e4 01 	sts	0x01E4, r24
    1442:	90 93 e5 01 	sts	0x01E5, r25
    1446:	a0 93 e6 01 	sts	0x01E6, r26
    144a:	b0 93 e7 01 	sts	0x01E7, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	85 36       	cpi	r24, 0x65	; 101
    1468:	d0 f4       	brcc	.+52     	; 0x149e <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    146a:	ec e5       	ldi	r30, 0x5C	; 92
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	48 2f       	mov	r20, r24
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	ca 01       	movw	r24, r20
    1476:	9c 01       	movw	r18, r24
    1478:	22 0f       	add	r18, r18
    147a:	33 1f       	adc	r19, r19
    147c:	c9 01       	movw	r24, r18
    147e:	96 95       	lsr	r25
    1480:	98 2f       	mov	r25, r24
    1482:	88 27       	eor	r24, r24
    1484:	97 95       	ror	r25
    1486:	87 95       	ror	r24
    1488:	82 1b       	sub	r24, r18
    148a:	93 0b       	sbc	r25, r19
    148c:	84 0f       	add	r24, r20
    148e:	95 1f       	adc	r25, r21
    1490:	24 e6       	ldi	r18, 0x64	; 100
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	b9 01       	movw	r22, r18
    1496:	0e 94 cb 24 	call	0x4996	; 0x4996 <__udivmodhi4>
    149a:	cb 01       	movw	r24, r22
    149c:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    14ae:	a3 e5       	ldi	r26, 0x53	; 83
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e3 e5       	ldi	r30, 0x53	; 83
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 64       	ori	r24, 0x40	; 64
    14ba:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    14bc:	a3 e5       	ldi	r26, 0x53	; 83
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e3 e5       	ldi	r30, 0x53	; 83
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	87 7f       	andi	r24, 0xF7	; 247
    14c8:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    14ca:	a3 e5       	ldi	r26, 0x53	; 83
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e3 e5       	ldi	r30, 0x53	; 83
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7e       	andi	r24, 0xEF	; 239
    14d6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    14d8:	a3 e5       	ldi	r26, 0x53	; 83
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e3 e5       	ldi	r30, 0x53	; 83
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 62       	ori	r24, 0x20	; 32
    14e4:	8c 93       	st	X, r24
#endif

#endif
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    14f4:	a3 e5       	ldi	r26, 0x53	; 83
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e3 e5       	ldi	r30, 0x53	; 83
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	81 60       	ori	r24, 0x01	; 1
    1500:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1502:	a3 e5       	ldi	r26, 0x53	; 83
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e3 e5       	ldi	r30, 0x53	; 83
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	82 60       	ori	r24, 0x02	; 2
    150e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1510:	a3 e5       	ldi	r26, 0x53	; 83
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e3 e5       	ldi	r30, 0x53	; 83
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8b 7f       	andi	r24, 0xFB	; 251
    151c:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    152c:	a3 e5       	ldi	r26, 0x53	; 83
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e3 e5       	ldi	r30, 0x53	; 83
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    153a:	a3 e5       	ldi	r26, 0x53	; 83
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 e5       	ldi	r30, 0x53	; 83
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8d 7f       	andi	r24, 0xFD	; 253
    1546:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1548:	a3 e5       	ldi	r26, 0x53	; 83
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e3 e5       	ldi	r30, 0x53	; 83
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8b 7f       	andi	r24, 0xFB	; 251
    1554:	8c 93       	st	X, r24
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <TMR0_voidSetCallBackOVF+0x6>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	31 f0       	breq	.+12     	; 0x157e <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	90 93 db 01 	sts	0x01DB, r25
    157a:	80 93 da 01 	sts	0x01DA, r24
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <TMR0_voidSetCallBackCTC+0x6>
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	31 f0       	breq	.+12     	; 0x15aa <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	90 93 dd 01 	sts	0x01DD, r25
    15a6:	80 93 dc 01 	sts	0x01DC, r24
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    15de:	80 91 de 01 	lds	r24, 0x01DE
    15e2:	90 91 df 01 	lds	r25, 0x01DF
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	90 93 df 01 	sts	0x01DF, r25
    15ec:	80 93 de 01 	sts	0x01DE, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    15f0:	80 91 de 01 	lds	r24, 0x01DE
    15f4:	90 91 df 01 	lds	r25, 0x01DF
    15f8:	23 e0       	ldi	r18, 0x03	; 3
    15fa:	81 3d       	cpi	r24, 0xD1	; 209
    15fc:	92 07       	cpc	r25, r18
    15fe:	99 f4       	brne	.+38     	; 0x1626 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    1600:	e2 e5       	ldi	r30, 0x52	; 82
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	81 e7       	ldi	r24, 0x71	; 113
    1606:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    1608:	10 92 df 01 	sts	0x01DF, r1
    160c:	10 92 de 01 	sts	0x01DE, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    1610:	80 91 da 01 	lds	r24, 0x01DA
    1614:	90 91 db 01 	lds	r25, 0x01DB
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	29 f0       	breq	.+10     	; 0x1626 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    161c:	e0 91 da 01 	lds	r30, 0x01DA
    1620:	f0 91 db 01 	lds	r31, 0x01DB
    1624:	09 95       	icall
		}
	}
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	0f 90       	pop	r0
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	0f 90       	pop	r0
    1648:	1f 90       	pop	r1
    164a:	18 95       	reti

0000164c <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1676:	80 91 e0 01 	lds	r24, 0x01E0
    167a:	90 91 e1 01 	lds	r25, 0x01E1
    167e:	a0 91 e2 01 	lds	r26, 0x01E2
    1682:	b0 91 e3 01 	lds	r27, 0x01E3
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	a1 1d       	adc	r26, r1
    168a:	b1 1d       	adc	r27, r1
    168c:	80 93 e0 01 	sts	0x01E0, r24
    1690:	90 93 e1 01 	sts	0x01E1, r25
    1694:	a0 93 e2 01 	sts	0x01E2, r26
    1698:	b0 93 e3 01 	sts	0x01E3, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    169c:	20 91 e4 01 	lds	r18, 0x01E4
    16a0:	30 91 e5 01 	lds	r19, 0x01E5
    16a4:	40 91 e6 01 	lds	r20, 0x01E6
    16a8:	50 91 e7 01 	lds	r21, 0x01E7
    16ac:	80 91 e0 01 	lds	r24, 0x01E0
    16b0:	90 91 e1 01 	lds	r25, 0x01E1
    16b4:	a0 91 e2 01 	lds	r26, 0x01E2
    16b8:	b0 91 e3 01 	lds	r27, 0x01E3
    16bc:	28 17       	cp	r18, r24
    16be:	39 07       	cpc	r19, r25
    16c0:	4a 07       	cpc	r20, r26
    16c2:	5b 07       	cpc	r21, r27
    16c4:	99 f4       	brne	.+38     	; 0x16ec <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    16c6:	10 92 e0 01 	sts	0x01E0, r1
    16ca:	10 92 e1 01 	sts	0x01E1, r1
    16ce:	10 92 e2 01 	sts	0x01E2, r1
    16d2:	10 92 e3 01 	sts	0x01E3, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    16d6:	80 91 dc 01 	lds	r24, 0x01DC
    16da:	90 91 dd 01 	lds	r25, 0x01DD
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	29 f0       	breq	.+10     	; 0x16ec <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    16e2:	e0 91 dc 01 	lds	r30, 0x01DC
    16e6:	f0 91 dd 01 	lds	r31, 0x01DD
    16ea:	09 95       	icall
		}
	}
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	0f 92       	push	r0
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    171e:	ec e5       	ldi	r30, 0x5C	; 92
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	80 83       	st	Z, r24
}
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <SPI_voidInit>:
#include "../includes/SPI_config.h"

static void (*private_pCallBackSPI)(u8) = NULL;


void SPI_voidInit(void){
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPI->SPCR,SPR0);
	CLR_BIT(SPI->SPCR,SPR1);
	CLR_BIT(SPI->SPSR,SPI2X);
	//select slave
	#elif SPI_MODE == SPI_SLAVE
	CLR_BIT(SPI->SPCR,MSTR);
    1736:	ad e2       	ldi	r26, 0x2D	; 45
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ed e2       	ldi	r30, 0x2D	; 45
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8f 7e       	andi	r24, 0xEF	; 239
    1742:	8c 93       	st	X, r24
	#endif

	//select LSB
	SET_BIT(SPI->SPCR,DORD);
    1744:	ad e2       	ldi	r26, 0x2D	; 45
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ed e2       	ldi	r30, 0x2D	; 45
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	80 62       	ori	r24, 0x20	; 32
    1750:	8c 93       	st	X, r24

	//select clk polarity falling  select rising sample

	SET_BIT(SPI->SPCR,CPOL);//polarity
    1752:	ad e2       	ldi	r26, 0x2D	; 45
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ed e2       	ldi	r30, 0x2D	; 45
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	88 60       	ori	r24, 0x08	; 8
    175e:	8c 93       	st	X, r24
	SET_BIT(SPI->SPCR,CPHA);//phase
    1760:	ad e2       	ldi	r26, 0x2D	; 45
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ed e2       	ldi	r30, 0x2D	; 45
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	84 60       	ori	r24, 0x04	; 4
    176c:	8c 93       	st	X, r24


	//enable
	SET_BIT(SPI->SPCR,SPE);
    176e:	ad e2       	ldi	r26, 0x2D	; 45
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ed e2       	ldi	r30, 0x2D	; 45
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 64       	ori	r24, 0x40	; 64
    177a:	8c 93       	st	X, r24
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <SPI_voidTransieve>:


void SPI_voidTransieve(u8 copy_u8TXdata , u8* copy_pu8_RXdata){
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <SPI_voidTransieve+0x6>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	7b 83       	std	Y+3, r23	; 0x03
    1792:	6a 83       	std	Y+2, r22	; 0x02

	if(copy_pu8_RXdata != NULL){
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	e1 f0       	breq	.+56     	; 0x17d4 <SPI_voidTransieve+0x52>
		while(1 == GET_BIT(SPI->SPSR,WCOL));
    179c:	ed e2       	ldi	r30, 0x2D	; 45
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	81 81       	ldd	r24, Z+1	; 0x01
    17a2:	82 95       	swap	r24
    17a4:	86 95       	lsr	r24
    17a6:	86 95       	lsr	r24
    17a8:	83 70       	andi	r24, 0x03	; 3
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	81 70       	andi	r24, 0x01	; 1
    17b0:	90 70       	andi	r25, 0x00	; 0
    17b2:	88 23       	and	r24, r24
    17b4:	99 f7       	brne	.-26     	; 0x179c <SPI_voidTransieve+0x1a>
		SPI->SPDR = copy_u8TXdata;
    17b6:	ed e2       	ldi	r30, 0x2D	; 45
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	82 83       	std	Z+2, r24	; 0x02
		//Budy wait
		while(0 == GET_BIT(SPI->SPSR,SPIF));
    17be:	ed e2       	ldi	r30, 0x2D	; 45
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	81 81       	ldd	r24, Z+1	; 0x01
    17c4:	88 23       	and	r24, r24
    17c6:	dc f7       	brge	.-10     	; 0x17be <SPI_voidTransieve+0x3c>
	* copy_pu8_RXdata =  SPI->SPDR;
    17c8:	ed e2       	ldi	r30, 0x2D	; 45
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	ea 81       	ldd	r30, Y+2	; 0x02
    17d0:	fb 81       	ldd	r31, Y+3	; 0x03
    17d2:	80 83       	st	Z, r24
	}
}
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <SPI_voidTransmitAsynchronous>:


void SPI_voidTransmitAsynchronous(u8 copy_u8TxData, void(*ptrToFun)(u8 copy_u8RxData)){
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <SPI_voidTransmitAsynchronous+0x6>
    17e6:	0f 92       	push	r0
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	7b 83       	std	Y+3, r23	; 0x03
    17f0:	6a 83       	std	Y+2, r22	; 0x02
	if(ptrToFun != NULL)
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	f1 f0       	breq	.+60     	; 0x1836 <SPI_voidTransmitAsynchronous+0x56>
	{
		//Enable SPI Interrrupt
		SET_BIT(SPI->SPCR,SPIE);
    17fa:	ad e2       	ldi	r26, 0x2D	; 45
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ed e2       	ldi	r30, 0x2D	; 45
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 68       	ori	r24, 0x80	; 128
    1806:	8c 93       	st	X, r24
			//set call back
		private_pCallBackSPI = ptrToFun ;
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	9b 81       	ldd	r25, Y+3	; 0x03
    180c:	90 93 e9 01 	sts	0x01E9, r25
    1810:	80 93 e8 01 	sts	0x01E8, r24
		//check collision
		while(1 == GET_BIT(SPI->SPSR,WCOL));
    1814:	ed e2       	ldi	r30, 0x2D	; 45
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	81 81       	ldd	r24, Z+1	; 0x01
    181a:	82 95       	swap	r24
    181c:	86 95       	lsr	r24
    181e:	86 95       	lsr	r24
    1820:	83 70       	andi	r24, 0x03	; 3
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	90 70       	andi	r25, 0x00	; 0
    182a:	88 23       	and	r24, r24
    182c:	99 f7       	brne	.-26     	; 0x1814 <SPI_voidTransmitAsynchronous+0x34>
				SPI->SPDR = copy_u8TxData;
    182e:	ed e2       	ldi	r30, 0x2D	; 45
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	82 83       	std	Z+2, r24	; 0x02
	}
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <__vector_12>:


// ISR for timer0 output compare match
void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	2f 93       	push	r18
    184e:	3f 93       	push	r19
    1850:	4f 93       	push	r20
    1852:	5f 93       	push	r21
    1854:	6f 93       	push	r22
    1856:	7f 93       	push	r23
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	af 93       	push	r26
    185e:	bf 93       	push	r27
    1860:	ef 93       	push	r30
    1862:	ff 93       	push	r31
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	if (private_pCallBackSPI != NULL) {
    186c:	80 91 e8 01 	lds	r24, 0x01E8
    1870:	90 91 e9 01 	lds	r25, 0x01E9
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	49 f0       	breq	.+18     	; 0x188a <__vector_12+0x48>
		private_pCallBackSPI(SPI->SPDR);
    1878:	e0 91 e8 01 	lds	r30, 0x01E8
    187c:	f0 91 e9 01 	lds	r31, 0x01E9
    1880:	ad e2       	ldi	r26, 0x2D	; 45
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	12 96       	adiw	r26, 0x02	; 2
    1886:	8c 91       	ld	r24, X
    1888:	09 95       	icall
	}
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <Port_Init+0x6>
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <Port_Init+0x8>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <Port_Init+0xa>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	9c 83       	std	Y+4, r25	; 0x04
    18c0:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    18c2:	1a 82       	std	Y+2, r1	; 0x02
    18c4:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i < 32; i++) {
    18c6:	1a 82       	std	Y+2, r1	; 0x02
    18c8:	19 82       	std	Y+1, r1	; 0x01
    18ca:	72 c1       	rjmp	.+740    	; 0x1bb0 <Port_Init+0x300>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    18cc:	29 81       	ldd	r18, Y+1	; 0x01
    18ce:	3a 81       	ldd	r19, Y+2	; 0x02
    18d0:	c9 01       	movw	r24, r18
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	28 0f       	add	r18, r24
    18d8:	39 1f       	adc	r19, r25
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	fc 01       	movw	r30, r24
    18e0:	e2 0f       	add	r30, r18
    18e2:	f3 1f       	adc	r31, r19
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3e 83       	std	Y+6, r19	; 0x06
    18ec:	2d 83       	std	Y+5, r18	; 0x05
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <Port_Init+0x4a>
    18f8:	67 c0       	rjmp	.+206    	; 0x19c8 <Port_Init+0x118>
    18fa:	2d 81       	ldd	r18, Y+5	; 0x05
    18fc:	3e 81       	ldd	r19, Y+6	; 0x06
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	2c f4       	brge	.+10     	; 0x190e <Port_Init+0x5e>
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	71 f0       	breq	.+28     	; 0x1928 <Port_Init+0x78>
    190c:	4c c1       	rjmp	.+664    	; 0x1ba6 <Port_Init+0x2f6>
    190e:	2d 81       	ldd	r18, Y+5	; 0x05
    1910:	3e 81       	ldd	r19, Y+6	; 0x06
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <Port_Init+0x6a>
    1918:	a7 c0       	rjmp	.+334    	; 0x1a68 <Port_Init+0x1b8>
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	91 05       	cpc	r25, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <Port_Init+0x76>
    1924:	f1 c0       	rjmp	.+482    	; 0x1b08 <Port_Init+0x258>
    1926:	3f c1       	rjmp	.+638    	; 0x1ba6 <Port_Init+0x2f6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1928:	29 81       	ldd	r18, Y+1	; 0x01
    192a:	3a 81       	ldd	r19, Y+2	; 0x02
    192c:	c9 01       	movw	r24, r18
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	28 0f       	add	r18, r24
    1934:	39 1f       	adc	r19, r25
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	fc 01       	movw	r30, r24
    193c:	e2 0f       	add	r30, r18
    193e:	f3 1f       	adc	r31, r19
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	01 f5       	brne	.+64     	; 0x1986 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1946:	aa e3       	ldi	r26, 0x3A	; 58
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ea e3       	ldi	r30, 0x3A	; 58
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	29 81       	ldd	r18, Y+1	; 0x01
    1954:	3a 81       	ldd	r19, Y+2	; 0x02
    1956:	c9 01       	movw	r24, r18
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	28 0f       	add	r18, r24
    195e:	39 1f       	adc	r19, r25
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	fc 01       	movw	r30, r24
    1966:	e2 0f       	add	r30, r18
    1968:	f3 1f       	adc	r31, r19
    196a:	81 81       	ldd	r24, Z+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <Port_Init+0xcc>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <Port_Init+0xc8>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	10 c1       	rjmp	.+544    	; 0x1ba6 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1986:	aa e3       	ldi	r26, 0x3A	; 58
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ea e3       	ldi	r30, 0x3A	; 58
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	29 81       	ldd	r18, Y+1	; 0x01
    1994:	3a 81       	ldd	r19, Y+2	; 0x02
    1996:	c9 01       	movw	r24, r18
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	28 0f       	add	r18, r24
    199e:	39 1f       	adc	r19, r25
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	fc 01       	movw	r30, r24
    19a6:	e2 0f       	add	r30, r18
    19a8:	f3 1f       	adc	r31, r19
    19aa:	81 81       	ldd	r24, Z+1	; 0x01
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <Port_Init+0x10c>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <Port_Init+0x108>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	ef c0       	rjmp	.+478    	; 0x1ba6 <Port_Init+0x2f6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    19c8:	29 81       	ldd	r18, Y+1	; 0x01
    19ca:	3a 81       	ldd	r19, Y+2	; 0x02
    19cc:	c9 01       	movw	r24, r18
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	28 0f       	add	r18, r24
    19d4:	39 1f       	adc	r19, r25
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	fc 01       	movw	r30, r24
    19dc:	e2 0f       	add	r30, r18
    19de:	f3 1f       	adc	r31, r19
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	01 f5       	brne	.+64     	; 0x1a26 <Port_Init+0x176>
				SET_BIT(DDRB, pin_cfg[i].pin);
    19e6:	a7 e3       	ldi	r26, 0x37	; 55
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e7 e3       	ldi	r30, 0x37	; 55
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	29 81       	ldd	r18, Y+1	; 0x01
    19f4:	3a 81       	ldd	r19, Y+2	; 0x02
    19f6:	c9 01       	movw	r24, r18
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	28 0f       	add	r18, r24
    19fe:	39 1f       	adc	r19, r25
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	fc 01       	movw	r30, r24
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	81 81       	ldd	r24, Z+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <Port_Init+0x16c>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <Port_Init+0x168>
    1a20:	84 2b       	or	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	c0 c0       	rjmp	.+384    	; 0x1ba6 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1a26:	a7 e3       	ldi	r26, 0x37	; 55
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e7 e3       	ldi	r30, 0x37	; 55
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	29 81       	ldd	r18, Y+1	; 0x01
    1a34:	3a 81       	ldd	r19, Y+2	; 0x02
    1a36:	c9 01       	movw	r24, r18
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	28 0f       	add	r18, r24
    1a3e:	39 1f       	adc	r19, r25
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	fc 01       	movw	r30, r24
    1a46:	e2 0f       	add	r30, r18
    1a48:	f3 1f       	adc	r31, r19
    1a4a:	81 81       	ldd	r24, Z+1	; 0x01
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <Port_Init+0x1ac>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <Port_Init+0x1a8>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	9f c0       	rjmp	.+318    	; 0x1ba6 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1a68:	29 81       	ldd	r18, Y+1	; 0x01
    1a6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	28 0f       	add	r18, r24
    1a74:	39 1f       	adc	r19, r25
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	e2 0f       	add	r30, r18
    1a7e:	f3 1f       	adc	r31, r19
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	01 f5       	brne	.+64     	; 0x1ac6 <Port_Init+0x216>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1a86:	a4 e3       	ldi	r26, 0x34	; 52
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e4 e3       	ldi	r30, 0x34	; 52
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	29 81       	ldd	r18, Y+1	; 0x01
    1a94:	3a 81       	ldd	r19, Y+2	; 0x02
    1a96:	c9 01       	movw	r24, r18
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	28 0f       	add	r18, r24
    1a9e:	39 1f       	adc	r19, r25
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	e2 0f       	add	r30, r18
    1aa8:	f3 1f       	adc	r31, r19
    1aaa:	81 81       	ldd	r24, Z+1	; 0x01
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <Port_Init+0x20c>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <Port_Init+0x208>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	70 c0       	rjmp	.+224    	; 0x1ba6 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1ac6:	a4 e3       	ldi	r26, 0x34	; 52
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e4 e3       	ldi	r30, 0x34	; 52
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	29 81       	ldd	r18, Y+1	; 0x01
    1ad4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ad6:	c9 01       	movw	r24, r18
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	28 0f       	add	r18, r24
    1ade:	39 1f       	adc	r19, r25
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e2 0f       	add	r30, r18
    1ae8:	f3 1f       	adc	r31, r19
    1aea:	81 81       	ldd	r24, Z+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <Port_Init+0x24c>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <Port_Init+0x248>
    1b00:	80 95       	com	r24
    1b02:	84 23       	and	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	4f c0       	rjmp	.+158    	; 0x1ba6 <Port_Init+0x2f6>
			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1b08:	29 81       	ldd	r18, Y+1	; 0x01
    1b0a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b0c:	c9 01       	movw	r24, r18
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	28 0f       	add	r18, r24
    1b14:	39 1f       	adc	r19, r25
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	e2 0f       	add	r30, r18
    1b1e:	f3 1f       	adc	r31, r19
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	01 f5       	brne	.+64     	; 0x1b66 <Port_Init+0x2b6>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1b26:	a1 e3       	ldi	r26, 0x31	; 49
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e1 e3       	ldi	r30, 0x31	; 49
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	29 81       	ldd	r18, Y+1	; 0x01
    1b34:	3a 81       	ldd	r19, Y+2	; 0x02
    1b36:	c9 01       	movw	r24, r18
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	28 0f       	add	r18, r24
    1b3e:	39 1f       	adc	r19, r25
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	fc 01       	movw	r30, r24
    1b46:	e2 0f       	add	r30, r18
    1b48:	f3 1f       	adc	r31, r19
    1b4a:	81 81       	ldd	r24, Z+1	; 0x01
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 2e       	mov	r0, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <Port_Init+0x2ac>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0a 94       	dec	r0
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <Port_Init+0x2a8>
    1b60:	84 2b       	or	r24, r20
    1b62:	8c 93       	st	X, r24
    1b64:	20 c0       	rjmp	.+64     	; 0x1ba6 <Port_Init+0x2f6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1b66:	a1 e3       	ldi	r26, 0x31	; 49
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e1 e3       	ldi	r30, 0x31	; 49
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	29 81       	ldd	r18, Y+1	; 0x01
    1b74:	3a 81       	ldd	r19, Y+2	; 0x02
    1b76:	c9 01       	movw	r24, r18
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	28 0f       	add	r18, r24
    1b7e:	39 1f       	adc	r19, r25
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	fc 01       	movw	r30, r24
    1b86:	e2 0f       	add	r30, r18
    1b88:	f3 1f       	adc	r31, r19
    1b8a:	81 81       	ldd	r24, Z+1	; 0x01
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <Port_Init+0x2ec>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <Port_Init+0x2e8>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i=0; i < 32; i++) {
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	80 32       	cpi	r24, 0x20	; 32
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	0c f4       	brge	.+2      	; 0x1bbc <Port_Init+0x30c>
    1bba:	88 ce       	rjmp	.-752    	; 0x18cc <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    1bbc:	26 96       	adiw	r28, 0x06	; 6
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    1bd6:	af e5       	ldi	r26, 0x5F	; 95
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	ef e5       	ldi	r30, 0x5F	; 95
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 68       	ori	r24, 0x80	; 128
    1be2:	8c 93       	st	X, r24
}
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <GI_voidDisable>:

void GI_voidDisable(void)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    1bf2:	af e5       	ldi	r26, 0x5F	; 95
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	ef e5       	ldi	r30, 0x5F	; 95
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8f 77       	andi	r24, 0x7F	; 127
    1bfe:	8c 93       	st	X, r24
}
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	28 97       	sbiw	r28, 0x08	; 8
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	38 87       	std	Y+8, r19	; 0x08
    1c26:	2f 83       	std	Y+7, r18	; 0x07
    1c28:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2a:	98 85       	ldd	r25, Y+8	; 0x08
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <EXTI_voidInit+0x2e>
    1c32:	5a c0       	rjmp	.+180    	; 0x1ce8 <EXTI_voidInit+0xe2>
    1c34:	2f 81       	ldd	r18, Y+7	; 0x07
    1c36:	38 85       	ldd	r19, Y+8	; 0x08
    1c38:	22 30       	cpi	r18, 0x02	; 2
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <EXTI_voidInit+0x3a>
    1c3e:	a3 c0       	rjmp	.+326    	; 0x1d86 <EXTI_voidInit+0x180>
    1c40:	8f 81       	ldd	r24, Y+7	; 0x07
    1c42:	98 85       	ldd	r25, Y+8	; 0x08
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <EXTI_voidInit+0x44>
    1c48:	b3 c0       	rjmp	.+358    	; 0x1db0 <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	3e 83       	std	Y+6, r19	; 0x06
    1c52:	2d 83       	std	Y+5, r18	; 0x05
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	39 f1       	breq	.+78     	; 0x1cac <EXTI_voidInit+0xa6>
    1c5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c60:	3e 81       	ldd	r19, Y+6	; 0x06
    1c62:	22 30       	cpi	r18, 0x02	; 2
    1c64:	31 05       	cpc	r19, r1
    1c66:	99 f0       	breq	.+38     	; 0x1c8e <EXTI_voidInit+0x88>
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	69 f1       	breq	.+90     	; 0x1cca <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    1c70:	a5 e5       	ldi	r26, 0x55	; 85
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e5 e5       	ldi	r30, 0x55	; 85
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	81 60       	ori	r24, 0x01	; 1
    1c7c:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1c7e:	a5 e5       	ldi	r26, 0x55	; 85
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e5 e5       	ldi	r30, 0x55	; 85
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	82 60       	ori	r24, 0x02	; 2
    1c8a:	8c 93       	st	X, r24
    1c8c:	91 c0       	rjmp	.+290    	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    1c8e:	a5 e5       	ldi	r26, 0x55	; 85
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e5 e5       	ldi	r30, 0x55	; 85
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8e 7f       	andi	r24, 0xFE	; 254
    1c9a:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1c9c:	a5 e5       	ldi	r26, 0x55	; 85
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e5       	ldi	r30, 0x55	; 85
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	82 60       	ori	r24, 0x02	; 2
    1ca8:	8c 93       	st	X, r24
    1caa:	82 c0       	rjmp	.+260    	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    1cac:	a5 e5       	ldi	r26, 0x55	; 85
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e5 e5       	ldi	r30, 0x55	; 85
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	81 60       	ori	r24, 0x01	; 1
    1cb8:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    1cba:	a5 e5       	ldi	r26, 0x55	; 85
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e5       	ldi	r30, 0x55	; 85
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8d 7f       	andi	r24, 0xFD	; 253
    1cc6:	8c 93       	st	X, r24
    1cc8:	73 c0       	rjmp	.+230    	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    1cca:	a5 e5       	ldi	r26, 0x55	; 85
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e5       	ldi	r30, 0x55	; 85
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8e 7f       	andi	r24, 0xFE	; 254
    1cd6:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    1cd8:	a5 e5       	ldi	r26, 0x55	; 85
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e5 e5       	ldi	r30, 0x55	; 85
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	8d 7f       	andi	r24, 0xFD	; 253
    1ce4:	8c 93       	st	X, r24
    1ce6:	64 c0       	rjmp	.+200    	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	3c 83       	std	Y+4, r19	; 0x04
    1cf0:	2b 83       	std	Y+3, r18	; 0x03
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	39 f1       	breq	.+78     	; 0x1d4a <EXTI_voidInit+0x144>
    1cfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1d00:	22 30       	cpi	r18, 0x02	; 2
    1d02:	31 05       	cpc	r19, r1
    1d04:	99 f0       	breq	.+38     	; 0x1d2c <EXTI_voidInit+0x126>
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	69 f1       	breq	.+90     	; 0x1d68 <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    1d0e:	a5 e5       	ldi	r26, 0x55	; 85
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e5 e5       	ldi	r30, 0x55	; 85
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	84 60       	ori	r24, 0x04	; 4
    1d1a:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    1d1c:	a5 e5       	ldi	r26, 0x55	; 85
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e5 e5       	ldi	r30, 0x55	; 85
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	88 60       	ori	r24, 0x08	; 8
    1d28:	8c 93       	st	X, r24
    1d2a:	42 c0       	rjmp	.+132    	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    1d2c:	a5 e5       	ldi	r26, 0x55	; 85
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e5 e5       	ldi	r30, 0x55	; 85
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8b 7f       	andi	r24, 0xFB	; 251
    1d38:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    1d3a:	a5 e5       	ldi	r26, 0x55	; 85
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e5 e5       	ldi	r30, 0x55	; 85
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	88 60       	ori	r24, 0x08	; 8
    1d46:	8c 93       	st	X, r24
    1d48:	33 c0       	rjmp	.+102    	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    1d4a:	a5 e5       	ldi	r26, 0x55	; 85
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e5 e5       	ldi	r30, 0x55	; 85
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	84 60       	ori	r24, 0x04	; 4
    1d56:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    1d58:	a5 e5       	ldi	r26, 0x55	; 85
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e5 e5       	ldi	r30, 0x55	; 85
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	87 7f       	andi	r24, 0xF7	; 247
    1d64:	8c 93       	st	X, r24
    1d66:	24 c0       	rjmp	.+72     	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    1d68:	a5 e5       	ldi	r26, 0x55	; 85
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e5 e5       	ldi	r30, 0x55	; 85
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	8b 7f       	andi	r24, 0xFB	; 251
    1d74:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    1d76:	a5 e5       	ldi	r26, 0x55	; 85
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e5 e5       	ldi	r30, 0x55	; 85
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	87 7f       	andi	r24, 0xF7	; 247
    1d82:	8c 93       	st	X, r24
    1d84:	15 c0       	rjmp	.+42     	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	91 05       	cpc	r25, r1
    1d90:	41 f0       	breq	.+16     	; 0x1da2 <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    1d92:	a4 e5       	ldi	r26, 0x54	; 84
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e4 e5       	ldi	r30, 0x54	; 84
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 64       	ori	r24, 0x40	; 64
    1d9e:	8c 93       	st	X, r24
    1da0:	07 c0       	rjmp	.+14     	; 0x1db0 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    1da2:	a4 e5       	ldi	r26, 0x54	; 84
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e4 e5       	ldi	r30, 0x54	; 84
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 7b       	andi	r24, 0xBF	; 191
    1dae:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    1db0:	28 96       	adiw	r28, 0x08	; 8
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <EXTI_voidEnable+0x6>
    1dc8:	0f 92       	push	r0
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	3b 83       	std	Y+3, r19	; 0x03
    1dd8:	2a 83       	std	Y+2, r18	; 0x02
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	91 05       	cpc	r25, r1
    1de2:	89 f0       	breq	.+34     	; 0x1e06 <EXTI_voidEnable+0x44>
    1de4:	2a 81       	ldd	r18, Y+2	; 0x02
    1de6:	3b 81       	ldd	r19, Y+3	; 0x03
    1de8:	22 30       	cpi	r18, 0x02	; 2
    1dea:	31 05       	cpc	r19, r1
    1dec:	a1 f0       	breq	.+40     	; 0x1e16 <EXTI_voidEnable+0x54>
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	b9 f4       	brne	.+46     	; 0x1e24 <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    1df6:	ab e5       	ldi	r26, 0x5B	; 91
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	eb e5       	ldi	r30, 0x5B	; 91
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	80 64       	ori	r24, 0x40	; 64
    1e02:	8c 93       	st	X, r24
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    1e06:	ab e5       	ldi	r26, 0x5B	; 91
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	eb e5       	ldi	r30, 0x5B	; 91
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 68       	ori	r24, 0x80	; 128
    1e12:	8c 93       	st	X, r24
    1e14:	07 c0       	rjmp	.+14     	; 0x1e24 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    1e16:	ab e5       	ldi	r26, 0x5B	; 91
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	eb e5       	ldi	r30, 0x5B	; 91
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	80 62       	ori	r24, 0x20	; 32
    1e22:	8c 93       	st	X, r24
        break;
    }
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <EXTI_voidDisable+0x6>
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3b 83       	std	Y+3, r19	; 0x03
    1e46:	2a 83       	std	Y+2, r18	; 0x02
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	91 05       	cpc	r25, r1
    1e50:	89 f0       	breq	.+34     	; 0x1e74 <EXTI_voidDisable+0x44>
    1e52:	2a 81       	ldd	r18, Y+2	; 0x02
    1e54:	3b 81       	ldd	r19, Y+3	; 0x03
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	a1 f0       	breq	.+40     	; 0x1e84 <EXTI_voidDisable+0x54>
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	b9 f4       	brne	.+46     	; 0x1e92 <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    1e64:	ab e5       	ldi	r26, 0x5B	; 91
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	eb e5       	ldi	r30, 0x5B	; 91
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	8f 7b       	andi	r24, 0xBF	; 191
    1e70:	8c 93       	st	X, r24
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    1e74:	ab e5       	ldi	r26, 0x5B	; 91
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	eb e5       	ldi	r30, 0x5B	; 91
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8f 77       	andi	r24, 0x7F	; 127
    1e80:	8c 93       	st	X, r24
    1e82:	07 c0       	rjmp	.+14     	; 0x1e92 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    1e84:	ab e5       	ldi	r26, 0x5B	; 91
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	eb e5       	ldi	r30, 0x5B	; 91
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8f 7d       	andi	r24, 0xDF	; 223
    1e90:	8c 93       	st	X, r24
        break;
    }
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <EXTRI_voidSetCallBackINT+0x6>
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <EXTRI_voidSetCallBackINT+0x8>
    1ea6:	0f 92       	push	r0
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	7b 83       	std	Y+3, r23	; 0x03
    1eb0:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	39 f1       	breq	.+78     	; 0x1f08 <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	3d 83       	std	Y+5, r19	; 0x05
    1ec2:	2c 83       	std	Y+4, r18	; 0x04
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	81 f0       	breq	.+32     	; 0x1eee <EXTRI_voidSetCallBackINT+0x50>
    1ece:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed2:	22 30       	cpi	r18, 0x02	; 2
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	91 f0       	breq	.+36     	; 0x1efc <EXTRI_voidSetCallBackINT+0x5e>
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	a1 f4       	brne	.+40     	; 0x1f08 <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee4:	90 93 eb 01 	sts	0x01EB, r25
    1ee8:	80 93 ea 01 	sts	0x01EA, r24
    1eec:	0d c0       	rjmp	.+26     	; 0x1f08 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef2:	90 93 ed 01 	sts	0x01ED, r25
    1ef6:	80 93 ec 01 	sts	0x01EC, r24
    1efa:	06 c0       	rjmp	.+12     	; 0x1f08 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	90 93 ef 01 	sts	0x01EF, r25
    1f04:	80 93 ee 01 	sts	0x01EE, r24
            break;
        default:
            break;
        }
    }
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    1f18:	1f 92       	push	r1
    1f1a:	0f 92       	push	r0
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	0f 92       	push	r0
    1f20:	11 24       	eor	r1, r1
    1f22:	2f 93       	push	r18
    1f24:	3f 93       	push	r19
    1f26:	4f 93       	push	r20
    1f28:	5f 93       	push	r21
    1f2a:	6f 93       	push	r22
    1f2c:	7f 93       	push	r23
    1f2e:	8f 93       	push	r24
    1f30:	9f 93       	push	r25
    1f32:	af 93       	push	r26
    1f34:	bf 93       	push	r27
    1f36:	ef 93       	push	r30
    1f38:	ff 93       	push	r31
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    1f42:	80 91 ea 01 	lds	r24, 0x01EA
    1f46:	90 91 eb 01 	lds	r25, 0x01EB
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	29 f0       	breq	.+10     	; 0x1f58 <__vector_1+0x40>
        private_pCallBackINT0();
    1f4e:	e0 91 ea 01 	lds	r30, 0x01EA
    1f52:	f0 91 eb 01 	lds	r31, 0x01EB
    1f56:	09 95       	icall
    }
}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	ff 91       	pop	r31
    1f5e:	ef 91       	pop	r30
    1f60:	bf 91       	pop	r27
    1f62:	af 91       	pop	r26
    1f64:	9f 91       	pop	r25
    1f66:	8f 91       	pop	r24
    1f68:	7f 91       	pop	r23
    1f6a:	6f 91       	pop	r22
    1f6c:	5f 91       	pop	r21
    1f6e:	4f 91       	pop	r20
    1f70:	3f 91       	pop	r19
    1f72:	2f 91       	pop	r18
    1f74:	0f 90       	pop	r0
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	0f 90       	pop	r0
    1f7a:	1f 90       	pop	r1
    1f7c:	18 95       	reti

00001f7e <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    1f7e:	1f 92       	push	r1
    1f80:	0f 92       	push	r0
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	0f 92       	push	r0
    1f86:	11 24       	eor	r1, r1
    1f88:	2f 93       	push	r18
    1f8a:	3f 93       	push	r19
    1f8c:	4f 93       	push	r20
    1f8e:	5f 93       	push	r21
    1f90:	6f 93       	push	r22
    1f92:	7f 93       	push	r23
    1f94:	8f 93       	push	r24
    1f96:	9f 93       	push	r25
    1f98:	af 93       	push	r26
    1f9a:	bf 93       	push	r27
    1f9c:	ef 93       	push	r30
    1f9e:	ff 93       	push	r31
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    1fa8:	80 91 ec 01 	lds	r24, 0x01EC
    1fac:	90 91 ed 01 	lds	r25, 0x01ED
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <__vector_2+0x40>
        private_pCallBackINT1();
    1fb4:	e0 91 ec 01 	lds	r30, 0x01EC
    1fb8:	f0 91 ed 01 	lds	r31, 0x01ED
    1fbc:	09 95       	icall
    }
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	ff 91       	pop	r31
    1fc4:	ef 91       	pop	r30
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	0f 90       	pop	r0
    1fe0:	1f 90       	pop	r1
    1fe2:	18 95       	reti

00001fe4 <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    1fe4:	1f 92       	push	r1
    1fe6:	0f 92       	push	r0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	0f 92       	push	r0
    1fec:	11 24       	eor	r1, r1
    1fee:	2f 93       	push	r18
    1ff0:	3f 93       	push	r19
    1ff2:	4f 93       	push	r20
    1ff4:	5f 93       	push	r21
    1ff6:	6f 93       	push	r22
    1ff8:	7f 93       	push	r23
    1ffa:	8f 93       	push	r24
    1ffc:	9f 93       	push	r25
    1ffe:	af 93       	push	r26
    2000:	bf 93       	push	r27
    2002:	ef 93       	push	r30
    2004:	ff 93       	push	r31
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    200e:	80 91 ee 01 	lds	r24, 0x01EE
    2012:	90 91 ef 01 	lds	r25, 0x01EF
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	29 f0       	breq	.+10     	; 0x2024 <__vector_3+0x40>
        private_pCallBackINT2();
    201a:	e0 91 ee 01 	lds	r30, 0x01EE
    201e:	f0 91 ef 01 	lds	r31, 0x01EF
    2022:	09 95       	icall
    }
}
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	ff 91       	pop	r31
    202a:	ef 91       	pop	r30
    202c:	bf 91       	pop	r27
    202e:	af 91       	pop	r26
    2030:	9f 91       	pop	r25
    2032:	8f 91       	pop	r24
    2034:	7f 91       	pop	r23
    2036:	6f 91       	pop	r22
    2038:	5f 91       	pop	r21
    203a:	4f 91       	pop	r20
    203c:	3f 91       	pop	r19
    203e:	2f 91       	pop	r18
    2040:	0f 90       	pop	r0
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	0f 90       	pop	r0
    2046:	1f 90       	pop	r1
    2048:	18 95       	reti

0000204a <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <Dio_WriteChannel+0x6>
    2050:	00 d0       	rcall	.+0      	; 0x2052 <Dio_WriteChannel+0x8>
    2052:	0f 92       	push	r0
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	8a 83       	std	Y+2, r24	; 0x02
    205a:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	86 95       	lsr	r24
    2060:	86 95       	lsr	r24
    2062:	86 95       	lsr	r24
    2064:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	3d 83       	std	Y+5, r19	; 0x05
    206e:	2c 83       	std	Y+4, r18	; 0x04
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	81 30       	cpi	r24, 0x01	; 1
    2076:	91 05       	cpc	r25, r1
    2078:	09 f4       	brne	.+2      	; 0x207c <Dio_WriteChannel+0x32>
    207a:	43 c0       	rjmp	.+134    	; 0x2102 <Dio_WriteChannel+0xb8>
    207c:	2c 81       	ldd	r18, Y+4	; 0x04
    207e:	3d 81       	ldd	r19, Y+5	; 0x05
    2080:	22 30       	cpi	r18, 0x02	; 2
    2082:	31 05       	cpc	r19, r1
    2084:	2c f4       	brge	.+10     	; 0x2090 <Dio_WriteChannel+0x46>
    2086:	8c 81       	ldd	r24, Y+4	; 0x04
    2088:	9d 81       	ldd	r25, Y+5	; 0x05
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	71 f0       	breq	.+28     	; 0x20aa <Dio_WriteChannel+0x60>
    208e:	ce c0       	rjmp	.+412    	; 0x222c <Dio_WriteChannel+0x1e2>
    2090:	2c 81       	ldd	r18, Y+4	; 0x04
    2092:	3d 81       	ldd	r19, Y+5	; 0x05
    2094:	22 30       	cpi	r18, 0x02	; 2
    2096:	31 05       	cpc	r19, r1
    2098:	09 f4       	brne	.+2      	; 0x209c <Dio_WriteChannel+0x52>
    209a:	65 c0       	rjmp	.+202    	; 0x2166 <Dio_WriteChannel+0x11c>
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	83 30       	cpi	r24, 0x03	; 3
    20a2:	91 05       	cpc	r25, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <Dio_WriteChannel+0x5e>
    20a6:	91 c0       	rjmp	.+290    	; 0x21ca <Dio_WriteChannel+0x180>
    20a8:	c1 c0       	rjmp	.+386    	; 0x222c <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	a1 f4       	brne	.+40     	; 0x20d8 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    20b0:	ab e3       	ldi	r26, 0x3B	; 59
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	eb e3       	ldi	r30, 0x3B	; 59
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	48 2f       	mov	r20, r24
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 2e       	mov	r0, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <Dio_WriteChannel+0x84>
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	0a 94       	dec	r0
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <Dio_WriteChannel+0x80>
    20d2:	84 2b       	or	r24, r20
    20d4:	8c 93       	st	X, r24
    20d6:	aa c0       	rjmp	.+340    	; 0x222c <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    20d8:	ab e3       	ldi	r26, 0x3B	; 59
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	eb e3       	ldi	r30, 0x3B	; 59
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	48 2f       	mov	r20, r24
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	02 2e       	mov	r0, r18
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <Dio_WriteChannel+0xac>
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	0a 94       	dec	r0
    20f8:	e2 f7       	brpl	.-8      	; 0x20f2 <Dio_WriteChannel+0xa8>
    20fa:	80 95       	com	r24
    20fc:	84 23       	and	r24, r20
    20fe:	8c 93       	st	X, r24
    2100:	95 c0       	rjmp	.+298    	; 0x222c <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	b9 f4       	brne	.+46     	; 0x2136 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    2108:	a8 e3       	ldi	r26, 0x38	; 56
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e8 e3       	ldi	r30, 0x38	; 56
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	48 2f       	mov	r20, r24
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 01       	movw	r18, r24
    211c:	27 70       	andi	r18, 0x07	; 7
    211e:	30 70       	andi	r19, 0x00	; 0
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 2e       	mov	r0, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <Dio_WriteChannel+0xe2>
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	0a 94       	dec	r0
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <Dio_WriteChannel+0xde>
    2130:	84 2b       	or	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	7b c0       	rjmp	.+246    	; 0x222c <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    2136:	a8 e3       	ldi	r26, 0x38	; 56
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e8 e3       	ldi	r30, 0x38	; 56
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9c 01       	movw	r18, r24
    214a:	27 70       	andi	r18, 0x07	; 7
    214c:	30 70       	andi	r19, 0x00	; 0
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	02 2e       	mov	r0, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <Dio_WriteChannel+0x110>
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	0a 94       	dec	r0
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <Dio_WriteChannel+0x10c>
    215e:	80 95       	com	r24
    2160:	84 23       	and	r24, r20
    2162:	8c 93       	st	X, r24
    2164:	63 c0       	rjmp	.+198    	; 0x222c <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	b9 f4       	brne	.+46     	; 0x219a <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    216c:	a5 e3       	ldi	r26, 0x35	; 53
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e5 e3       	ldi	r30, 0x35	; 53
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	48 2f       	mov	r20, r24
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9c 01       	movw	r18, r24
    2180:	27 70       	andi	r18, 0x07	; 7
    2182:	30 70       	andi	r19, 0x00	; 0
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	02 2e       	mov	r0, r18
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <Dio_WriteChannel+0x146>
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	0a 94       	dec	r0
    2192:	e2 f7       	brpl	.-8      	; 0x218c <Dio_WriteChannel+0x142>
    2194:	84 2b       	or	r24, r20
    2196:	8c 93       	st	X, r24
    2198:	49 c0       	rjmp	.+146    	; 0x222c <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    219a:	a5 e3       	ldi	r26, 0x35	; 53
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e5 e3       	ldi	r30, 0x35	; 53
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	48 2f       	mov	r20, r24
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 01       	movw	r18, r24
    21ae:	27 70       	andi	r18, 0x07	; 7
    21b0:	30 70       	andi	r19, 0x00	; 0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 2e       	mov	r0, r18
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <Dio_WriteChannel+0x174>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <Dio_WriteChannel+0x170>
    21c2:	80 95       	com	r24
    21c4:	84 23       	and	r24, r20
    21c6:	8c 93       	st	X, r24
    21c8:	31 c0       	rjmp	.+98     	; 0x222c <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	b9 f4       	brne	.+46     	; 0x21fe <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    21d0:	a2 e3       	ldi	r26, 0x32	; 50
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e2 e3       	ldi	r30, 0x32	; 50
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	48 2f       	mov	r20, r24
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9c 01       	movw	r18, r24
    21e4:	27 70       	andi	r18, 0x07	; 7
    21e6:	30 70       	andi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 2e       	mov	r0, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <Dio_WriteChannel+0x1aa>
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <Dio_WriteChannel+0x1a6>
    21f8:	84 2b       	or	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	17 c0       	rjmp	.+46     	; 0x222c <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    21fe:	a2 e3       	ldi	r26, 0x32	; 50
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e2 e3       	ldi	r30, 0x32	; 50
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	48 2f       	mov	r20, r24
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9c 01       	movw	r18, r24
    2212:	27 70       	andi	r18, 0x07	; 7
    2214:	30 70       	andi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <Dio_WriteChannel+0x1d8>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <Dio_WriteChannel+0x1d4>
    2226:	80 95       	com	r24
    2228:	84 23       	and	r24, r20
    222a:	8c 93       	st	X, r24
		}
		break;
	}
}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <Dio_ReadChannel+0x6>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <Dio_ReadChannel+0x8>
    2244:	0f 92       	push	r0
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	86 95       	lsr	r24
    2250:	86 95       	lsr	r24
    2252:	86 95       	lsr	r24
    2254:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	3d 83       	std	Y+5, r19	; 0x05
    225e:	2c 83       	std	Y+4, r18	; 0x04
    2260:	4c 81       	ldd	r20, Y+4	; 0x04
    2262:	5d 81       	ldd	r21, Y+5	; 0x05
    2264:	41 30       	cpi	r20, 0x01	; 1
    2266:	51 05       	cpc	r21, r1
    2268:	49 f1       	breq	.+82     	; 0x22bc <Dio_ReadChannel+0x80>
    226a:	8c 81       	ldd	r24, Y+4	; 0x04
    226c:	9d 81       	ldd	r25, Y+5	; 0x05
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	91 05       	cpc	r25, r1
    2272:	34 f4       	brge	.+12     	; 0x2280 <Dio_ReadChannel+0x44>
    2274:	2c 81       	ldd	r18, Y+4	; 0x04
    2276:	3d 81       	ldd	r19, Y+5	; 0x05
    2278:	21 15       	cp	r18, r1
    227a:	31 05       	cpc	r19, r1
    227c:	69 f0       	breq	.+26     	; 0x2298 <Dio_ReadChannel+0x5c>
    227e:	59 c0       	rjmp	.+178    	; 0x2332 <Dio_ReadChannel+0xf6>
    2280:	4c 81       	ldd	r20, Y+4	; 0x04
    2282:	5d 81       	ldd	r21, Y+5	; 0x05
    2284:	42 30       	cpi	r20, 0x02	; 2
    2286:	51 05       	cpc	r21, r1
    2288:	69 f1       	breq	.+90     	; 0x22e4 <Dio_ReadChannel+0xa8>
    228a:	8c 81       	ldd	r24, Y+4	; 0x04
    228c:	9d 81       	ldd	r25, Y+5	; 0x05
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	91 05       	cpc	r25, r1
    2292:	09 f4       	brne	.+2      	; 0x2296 <Dio_ReadChannel+0x5a>
    2294:	3b c0       	rjmp	.+118    	; 0x230c <Dio_ReadChannel+0xd0>
    2296:	4d c0       	rjmp	.+154    	; 0x2332 <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2298:	e9 e3       	ldi	r30, 0x39	; 57
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a9 01       	movw	r20, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <Dio_ReadChannel+0x74>
    22ac:	55 95       	asr	r21
    22ae:	47 95       	ror	r20
    22b0:	8a 95       	dec	r24
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <Dio_ReadChannel+0x70>
    22b4:	ca 01       	movw	r24, r20
    22b6:	81 70       	andi	r24, 0x01	; 1
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	3b c0       	rjmp	.+118    	; 0x2332 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    22bc:	e6 e3       	ldi	r30, 0x36	; 54
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	87 70       	andi	r24, 0x07	; 7
    22ce:	90 70       	andi	r25, 0x00	; 0
    22d0:	a9 01       	movw	r20, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <Dio_ReadChannel+0x9c>
    22d4:	55 95       	asr	r21
    22d6:	47 95       	ror	r20
    22d8:	8a 95       	dec	r24
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <Dio_ReadChannel+0x98>
    22dc:	ca 01       	movw	r24, r20
    22de:	81 70       	andi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	27 c0       	rjmp	.+78     	; 0x2332 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    22e4:	e3 e3       	ldi	r30, 0x33	; 51
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	87 70       	andi	r24, 0x07	; 7
    22f6:	90 70       	andi	r25, 0x00	; 0
    22f8:	a9 01       	movw	r20, r18
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <Dio_ReadChannel+0xc4>
    22fc:	55 95       	asr	r21
    22fe:	47 95       	ror	r20
    2300:	8a 95       	dec	r24
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <Dio_ReadChannel+0xc0>
    2304:	ca 01       	movw	r24, r20
    2306:	81 70       	andi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	13 c0       	rjmp	.+38     	; 0x2332 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    230c:	e0 e3       	ldi	r30, 0x30	; 48
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	87 70       	andi	r24, 0x07	; 7
    231e:	90 70       	andi	r25, 0x00	; 0
    2320:	a9 01       	movw	r20, r18
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <Dio_ReadChannel+0xec>
    2324:	55 95       	asr	r21
    2326:	47 95       	ror	r20
    2328:	8a 95       	dec	r24
    232a:	e2 f7       	brpl	.-8      	; 0x2324 <Dio_ReadChannel+0xe8>
    232c:	ca 01       	movw	r24, r20
    232e:	81 70       	andi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
}
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	00 d0       	rcall	.+0      	; 0x234a <Dio_FlipChannel+0x6>
    234a:	00 d0       	rcall	.+0      	; 0x234c <Dio_FlipChannel+0x8>
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	86 95       	lsr	r24
    2356:	86 95       	lsr	r24
    2358:	86 95       	lsr	r24
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	3c 83       	std	Y+4, r19	; 0x04
    2360:	2b 83       	std	Y+3, r18	; 0x03
    2362:	4b 81       	ldd	r20, Y+3	; 0x03
    2364:	5c 81       	ldd	r21, Y+4	; 0x04
    2366:	41 30       	cpi	r20, 0x01	; 1
    2368:	51 05       	cpc	r21, r1
    236a:	09 f4       	brne	.+2      	; 0x236e <Dio_FlipChannel+0x2a>
    236c:	3c c0       	rjmp	.+120    	; 0x23e6 <Dio_FlipChannel+0xa2>
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	91 05       	cpc	r25, r1
    2376:	34 f4       	brge	.+12     	; 0x2384 <Dio_FlipChannel+0x40>
    2378:	2b 81       	ldd	r18, Y+3	; 0x03
    237a:	3c 81       	ldd	r19, Y+4	; 0x04
    237c:	21 15       	cp	r18, r1
    237e:	31 05       	cpc	r19, r1
    2380:	71 f0       	breq	.+28     	; 0x239e <Dio_FlipChannel+0x5a>
    2382:	ab c0       	rjmp	.+342    	; 0x24da <Dio_FlipChannel+0x196>
    2384:	4b 81       	ldd	r20, Y+3	; 0x03
    2386:	5c 81       	ldd	r21, Y+4	; 0x04
    2388:	42 30       	cpi	r20, 0x02	; 2
    238a:	51 05       	cpc	r21, r1
    238c:	09 f4       	brne	.+2      	; 0x2390 <Dio_FlipChannel+0x4c>
    238e:	54 c0       	rjmp	.+168    	; 0x2438 <Dio_FlipChannel+0xf4>
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	83 30       	cpi	r24, 0x03	; 3
    2396:	91 05       	cpc	r25, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <Dio_FlipChannel+0x58>
    239a:	77 c0       	rjmp	.+238    	; 0x248a <Dio_FlipChannel+0x146>
    239c:	9e c0       	rjmp	.+316    	; 0x24da <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    239e:	ab e3       	ldi	r26, 0x3B	; 59
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	eb e3       	ldi	r30, 0x3B	; 59
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	48 2f       	mov	r20, r24
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <Dio_FlipChannel+0x76>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	2a 95       	dec	r18
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <Dio_FlipChannel+0x72>
    23be:	84 27       	eor	r24, r20
    23c0:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    23c2:	eb e3       	ldi	r30, 0x3B	; 59
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a9 01       	movw	r20, r18
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <Dio_FlipChannel+0x96>
    23d6:	55 95       	asr	r21
    23d8:	47 95       	ror	r20
    23da:	8a 95       	dec	r24
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <Dio_FlipChannel+0x92>
    23de:	ca 01       	movw	r24, r20
    23e0:	81 70       	andi	r24, 0x01	; 1
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	7a c0       	rjmp	.+244    	; 0x24da <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    23e6:	a8 e3       	ldi	r26, 0x38	; 56
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e8 e3       	ldi	r30, 0x38	; 56
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	48 2f       	mov	r20, r24
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9c 01       	movw	r18, r24
    23fa:	27 70       	andi	r18, 0x07	; 7
    23fc:	30 70       	andi	r19, 0x00	; 0
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <Dio_FlipChannel+0xc4>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	2a 95       	dec	r18
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <Dio_FlipChannel+0xc0>
    240c:	84 27       	eor	r24, r20
    240e:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    2410:	e8 e3       	ldi	r30, 0x38	; 56
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	87 70       	andi	r24, 0x07	; 7
    2422:	90 70       	andi	r25, 0x00	; 0
    2424:	a9 01       	movw	r20, r18
    2426:	02 c0       	rjmp	.+4      	; 0x242c <Dio_FlipChannel+0xe8>
    2428:	55 95       	asr	r21
    242a:	47 95       	ror	r20
    242c:	8a 95       	dec	r24
    242e:	e2 f7       	brpl	.-8      	; 0x2428 <Dio_FlipChannel+0xe4>
    2430:	ca 01       	movw	r24, r20
    2432:	81 70       	andi	r24, 0x01	; 1
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	51 c0       	rjmp	.+162    	; 0x24da <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    2438:	a5 e3       	ldi	r26, 0x35	; 53
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e5 e3       	ldi	r30, 0x35	; 53
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	48 2f       	mov	r20, r24
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9c 01       	movw	r18, r24
    244c:	27 70       	andi	r18, 0x07	; 7
    244e:	30 70       	andi	r19, 0x00	; 0
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	02 c0       	rjmp	.+4      	; 0x245a <Dio_FlipChannel+0x116>
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	2a 95       	dec	r18
    245c:	e2 f7       	brpl	.-8      	; 0x2456 <Dio_FlipChannel+0x112>
    245e:	84 27       	eor	r24, r20
    2460:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    2462:	e5 e3       	ldi	r30, 0x35	; 53
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	87 70       	andi	r24, 0x07	; 7
    2474:	90 70       	andi	r25, 0x00	; 0
    2476:	a9 01       	movw	r20, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <Dio_FlipChannel+0x13a>
    247a:	55 95       	asr	r21
    247c:	47 95       	ror	r20
    247e:	8a 95       	dec	r24
    2480:	e2 f7       	brpl	.-8      	; 0x247a <Dio_FlipChannel+0x136>
    2482:	ca 01       	movw	r24, r20
    2484:	81 70       	andi	r24, 0x01	; 1
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	28 c0       	rjmp	.+80     	; 0x24da <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    248a:	a2 e3       	ldi	r26, 0x32	; 50
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e2 e3       	ldi	r30, 0x32	; 50
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	48 2f       	mov	r20, r24
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9c 01       	movw	r18, r24
    249e:	27 70       	andi	r18, 0x07	; 7
    24a0:	30 70       	andi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <Dio_FlipChannel+0x168>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	2a 95       	dec	r18
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <Dio_FlipChannel+0x164>
    24b0:	84 27       	eor	r24, r20
    24b2:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    24b4:	e2 e3       	ldi	r30, 0x32	; 50
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	87 70       	andi	r24, 0x07	; 7
    24c6:	90 70       	andi	r25, 0x00	; 0
    24c8:	a9 01       	movw	r20, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <Dio_FlipChannel+0x18c>
    24cc:	55 95       	asr	r21
    24ce:	47 95       	ror	r20
    24d0:	8a 95       	dec	r24
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <Dio_FlipChannel+0x188>
    24d4:	ca 01       	movw	r24, r20
    24d6:	81 70       	andi	r24, 0x01	; 1
    24d8:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    24da:	89 81       	ldd	r24, Y+1	; 0x01
}
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <Dio_WritePort+0x6>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <Dio_WritePort+0x8>
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	3c 83       	std	Y+4, r19	; 0x04
    2502:	2b 83       	std	Y+3, r18	; 0x03
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	81 30       	cpi	r24, 0x01	; 1
    250a:	91 05       	cpc	r25, r1
    250c:	d1 f0       	breq	.+52     	; 0x2542 <Dio_WritePort+0x58>
    250e:	2b 81       	ldd	r18, Y+3	; 0x03
    2510:	3c 81       	ldd	r19, Y+4	; 0x04
    2512:	22 30       	cpi	r18, 0x02	; 2
    2514:	31 05       	cpc	r19, r1
    2516:	2c f4       	brge	.+10     	; 0x2522 <Dio_WritePort+0x38>
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	61 f0       	breq	.+24     	; 0x2538 <Dio_WritePort+0x4e>
    2520:	1e c0       	rjmp	.+60     	; 0x255e <Dio_WritePort+0x74>
    2522:	2b 81       	ldd	r18, Y+3	; 0x03
    2524:	3c 81       	ldd	r19, Y+4	; 0x04
    2526:	22 30       	cpi	r18, 0x02	; 2
    2528:	31 05       	cpc	r19, r1
    252a:	81 f0       	breq	.+32     	; 0x254c <Dio_WritePort+0x62>
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	83 30       	cpi	r24, 0x03	; 3
    2532:	91 05       	cpc	r25, r1
    2534:	81 f0       	breq	.+32     	; 0x2556 <Dio_WritePort+0x6c>
    2536:	13 c0       	rjmp	.+38     	; 0x255e <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    2538:	eb e3       	ldi	r30, 0x3B	; 59
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	80 83       	st	Z, r24
    2540:	0e c0       	rjmp	.+28     	; 0x255e <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    2542:	e8 e3       	ldi	r30, 0x38	; 56
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	80 83       	st	Z, r24
    254a:	09 c0       	rjmp	.+18     	; 0x255e <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    254c:	e5 e3       	ldi	r30, 0x35	; 53
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	80 83       	st	Z, r24
    2554:	04 c0       	rjmp	.+8      	; 0x255e <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    2556:	e2 e3       	ldi	r30, 0x32	; 50
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	80 83       	st	Z, r24
		break;
	}
}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <SevenSeg_SegEnable>:

#include "SEVEN_SEGMENT.h"
#include <avr/io.h>
#include <avr/delay.h>

void SevenSeg_SegEnable(SegNumber seg) {
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	00 d0       	rcall	.+0      	; 0x2572 <SevenSeg_SegEnable+0x6>
    2572:	0f 92       	push	r0
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	89 83       	std	Y+1, r24	; 0x01
	switch (seg) {
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	3b 83       	std	Y+3, r19	; 0x03
    2582:	2a 83       	std	Y+2, r18	; 0x02
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	83 30       	cpi	r24, 0x03	; 3
    258a:	91 05       	cpc	r25, r1
    258c:	b1 f0       	breq	.+44     	; 0x25ba <SevenSeg_SegEnable+0x4e>
    258e:	2a 81       	ldd	r18, Y+2	; 0x02
    2590:	3b 81       	ldd	r19, Y+3	; 0x03
    2592:	24 30       	cpi	r18, 0x04	; 4
    2594:	31 05       	cpc	r19, r1
    2596:	34 f4       	brge	.+12     	; 0x25a4 <SevenSeg_SegEnable+0x38>
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	9b 81       	ldd	r25, Y+3	; 0x03
    259c:	82 30       	cpi	r24, 0x02	; 2
    259e:	91 05       	cpc	r25, r1
    25a0:	e9 f0       	breq	.+58     	; 0x25dc <SevenSeg_SegEnable+0x70>
    25a2:	4e c0       	rjmp	.+156    	; 0x2640 <SevenSeg_SegEnable+0xd4>
    25a4:	2a 81       	ldd	r18, Y+2	; 0x02
    25a6:	3b 81       	ldd	r19, Y+3	; 0x03
    25a8:	2d 30       	cpi	r18, 0x0D	; 13
    25aa:	31 05       	cpc	r19, r1
    25ac:	41 f1       	breq	.+80     	; 0x25fe <SevenSeg_SegEnable+0x92>
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	9b 81       	ldd	r25, Y+3	; 0x03
    25b2:	8e 30       	cpi	r24, 0x0E	; 14
    25b4:	91 05       	cpc	r25, r1
    25b6:	a1 f1       	breq	.+104    	; 0x2620 <SevenSeg_SegEnable+0xb4>
    25b8:	43 c0       	rjmp	.+134    	; 0x2640 <SevenSeg_SegEnable+0xd4>
	case SEG_1:
		Dio_WriteChannel(SEG_2, 1);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    25c2:	8d e0       	ldi	r24, 0x0D	; 13
    25c4:	61 e0       	ldi	r22, 0x01	; 1
    25c6:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    25ca:	8e e0       	ldi	r24, 0x0E	; 14
    25cc:	61 e0       	ldi	r22, 0x01	; 1
    25ce:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 0);
    25d2:	83 e0       	ldi	r24, 0x03	; 3
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    25da:	32 c0       	rjmp	.+100    	; 0x2640 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_2:
		Dio_WriteChannel(SEG_1, 1);
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    25e4:	8d e0       	ldi	r24, 0x0D	; 13
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    25ec:	8e e0       	ldi	r24, 0x0E	; 14
    25ee:	61 e0       	ldi	r22, 0x01	; 1
    25f0:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_2, 0);
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    25fc:	21 c0       	rjmp	.+66     	; 0x2640 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_3:
		Dio_WriteChannel(SEG_2, 1);
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    260e:	8e e0       	ldi	r24, 0x0E	; 14
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 0);
    2616:	8d e0       	ldi	r24, 0x0D	; 13
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    261e:	10 c0       	rjmp	.+32     	; 0x2640 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_4:
		Dio_WriteChannel(SEG_2, 1);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    2628:	8d e0       	ldi	r24, 0x0D	; 13
    262a:	61 e0       	ldi	r22, 0x01	; 1
    262c:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    2630:	83 e0       	ldi	r24, 0x03	; 3
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 0);
    2638:	8e e0       	ldi	r24, 0x0E	; 14
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>

		break;

	}

}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <SevenSeg_Send>:
//
//void SevenSeg_SegDisable(SegNumber seg){
//	Dio_WriteChannel(seg,1);
//}

void SevenSeg_Send(u8 num1, u8 num2, u8 num3, u8 num4) {
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	ec 97       	sbiw	r28, 0x3c	; 60
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	89 af       	std	Y+57, r24	; 0x39
    2662:	6a af       	std	Y+58, r22	; 0x3a
    2664:	4b af       	std	Y+59, r20	; 0x3b
    2666:	2c af       	std	Y+60, r18	; 0x3c

	SevenSeg_SegEnable(SEG_1);
    2668:	83 e0       	ldi	r24, 0x03	; 3
    266a:	0e 94 b6 12 	call	0x256c	; 0x256c <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num1);
    266e:	89 ad       	ldd	r24, Y+57	; 0x39
    2670:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <SevenSeg_SendOneSeg>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	a8 ec       	ldi	r26, 0xC8	; 200
    267a:	b2 e4       	ldi	r27, 0x42	; 66
    267c:	8d ab       	std	Y+53, r24	; 0x35
    267e:	9e ab       	std	Y+54, r25	; 0x36
    2680:	af ab       	std	Y+55, r26	; 0x37
    2682:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2684:	6d a9       	ldd	r22, Y+53	; 0x35
    2686:	7e a9       	ldd	r23, Y+54	; 0x36
    2688:	8f a9       	ldd	r24, Y+55	; 0x37
    268a:	98 ad       	ldd	r25, Y+56	; 0x38
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	4a e7       	ldi	r20, 0x7A	; 122
    2692:	55 e4       	ldi	r21, 0x45	; 69
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	89 ab       	std	Y+49, r24	; 0x31
    269e:	9a ab       	std	Y+50, r25	; 0x32
    26a0:	ab ab       	std	Y+51, r26	; 0x33
    26a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26a4:	69 a9       	ldd	r22, Y+49	; 0x31
    26a6:	7a a9       	ldd	r23, Y+50	; 0x32
    26a8:	8b a9       	ldd	r24, Y+51	; 0x33
    26aa:	9c a9       	ldd	r25, Y+52	; 0x34
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e8       	ldi	r20, 0x80	; 128
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26b8:	88 23       	and	r24, r24
    26ba:	2c f4       	brge	.+10     	; 0x26c6 <SevenSeg_Send+0x7a>
		__ticks = 1;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	98 ab       	std	Y+48, r25	; 0x30
    26c2:	8f a7       	std	Y+47, r24	; 0x2f
    26c4:	3f c0       	rjmp	.+126    	; 0x2744 <SevenSeg_Send+0xf8>
	else if (__tmp > 65535)
    26c6:	69 a9       	ldd	r22, Y+49	; 0x31
    26c8:	7a a9       	ldd	r23, Y+50	; 0x32
    26ca:	8b a9       	ldd	r24, Y+51	; 0x33
    26cc:	9c a9       	ldd	r25, Y+52	; 0x34
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	3f ef       	ldi	r19, 0xFF	; 255
    26d2:	4f e7       	ldi	r20, 0x7F	; 127
    26d4:	57 e4       	ldi	r21, 0x47	; 71
    26d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26da:	18 16       	cp	r1, r24
    26dc:	4c f5       	brge	.+82     	; 0x2730 <SevenSeg_Send+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26de:	6d a9       	ldd	r22, Y+53	; 0x35
    26e0:	7e a9       	ldd	r23, Y+54	; 0x36
    26e2:	8f a9       	ldd	r24, Y+55	; 0x37
    26e4:	98 ad       	ldd	r25, Y+56	; 0x38
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e2       	ldi	r20, 0x20	; 32
    26ec:	51 e4       	ldi	r21, 0x41	; 65
    26ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	98 ab       	std	Y+48, r25	; 0x30
    2704:	8f a7       	std	Y+47, r24	; 0x2f
    2706:	0f c0       	rjmp	.+30     	; 0x2726 <SevenSeg_Send+0xda>
    2708:	80 e9       	ldi	r24, 0x90	; 144
    270a:	91 e0       	ldi	r25, 0x01	; 1
    270c:	9e a7       	std	Y+46, r25	; 0x2e
    270e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2710:	8d a5       	ldd	r24, Y+45	; 0x2d
    2712:	9e a5       	ldd	r25, Y+46	; 0x2e
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <SevenSeg_Send+0xc8>
    2718:	9e a7       	std	Y+46, r25	; 0x2e
    271a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271c:	8f a5       	ldd	r24, Y+47	; 0x2f
    271e:	98 a9       	ldd	r25, Y+48	; 0x30
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	98 ab       	std	Y+48, r25	; 0x30
    2724:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2726:	8f a5       	ldd	r24, Y+47	; 0x2f
    2728:	98 a9       	ldd	r25, Y+48	; 0x30
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	69 f7       	brne	.-38     	; 0x2708 <SevenSeg_Send+0xbc>
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <SevenSeg_Send+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2730:	69 a9       	ldd	r22, Y+49	; 0x31
    2732:	7a a9       	ldd	r23, Y+50	; 0x32
    2734:	8b a9       	ldd	r24, Y+51	; 0x33
    2736:	9c a9       	ldd	r25, Y+52	; 0x34
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	98 ab       	std	Y+48, r25	; 0x30
    2742:	8f a7       	std	Y+47, r24	; 0x2f
    2744:	8f a5       	ldd	r24, Y+47	; 0x2f
    2746:	98 a9       	ldd	r25, Y+48	; 0x30
    2748:	9c a7       	std	Y+44, r25	; 0x2c
    274a:	8b a7       	std	Y+43, r24	; 0x2b
    274c:	8b a5       	ldd	r24, Y+43	; 0x2b
    274e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <SevenSeg_Send+0x104>
    2754:	9c a7       	std	Y+44, r25	; 0x2c
    2756:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_2);
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	0e 94 b6 12 	call	0x256c	; 0x256c <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num2);
    275e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2760:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <SevenSeg_SendOneSeg>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a8 ec       	ldi	r26, 0xC8	; 200
    276a:	b2 e4       	ldi	r27, 0x42	; 66
    276c:	8f a3       	std	Y+39, r24	; 0x27
    276e:	98 a7       	std	Y+40, r25	; 0x28
    2770:	a9 a7       	std	Y+41, r26	; 0x29
    2772:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	6f a1       	ldd	r22, Y+39	; 0x27
    2776:	78 a5       	ldd	r23, Y+40	; 0x28
    2778:	89 a5       	ldd	r24, Y+41	; 0x29
    277a:	9a a5       	ldd	r25, Y+42	; 0x2a
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a e7       	ldi	r20, 0x7A	; 122
    2782:	55 e4       	ldi	r21, 0x45	; 69
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8b a3       	std	Y+35, r24	; 0x23
    278e:	9c a3       	std	Y+36, r25	; 0x24
    2790:	ad a3       	std	Y+37, r26	; 0x25
    2792:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2794:	6b a1       	ldd	r22, Y+35	; 0x23
    2796:	7c a1       	ldd	r23, Y+36	; 0x24
    2798:	8d a1       	ldd	r24, Y+37	; 0x25
    279a:	9e a1       	ldd	r25, Y+38	; 0x26
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <SevenSeg_Send+0x16a>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9a a3       	std	Y+34, r25	; 0x22
    27b2:	89 a3       	std	Y+33, r24	; 0x21
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <SevenSeg_Send+0x1e8>
	else if (__tmp > 65535)
    27b6:	6b a1       	ldd	r22, Y+35	; 0x23
    27b8:	7c a1       	ldd	r23, Y+36	; 0x24
    27ba:	8d a1       	ldd	r24, Y+37	; 0x25
    27bc:	9e a1       	ldd	r25, Y+38	; 0x26
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <SevenSeg_Send+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	6f a1       	ldd	r22, Y+39	; 0x27
    27d0:	78 a5       	ldd	r23, Y+40	; 0x28
    27d2:	89 a5       	ldd	r24, Y+41	; 0x29
    27d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9a a3       	std	Y+34, r25	; 0x22
    27f4:	89 a3       	std	Y+33, r24	; 0x21
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <SevenSeg_Send+0x1ca>
    27f8:	80 e9       	ldi	r24, 0x90	; 144
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	98 a3       	std	Y+32, r25	; 0x20
    27fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2800:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2802:	98 a1       	ldd	r25, Y+32	; 0x20
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <SevenSeg_Send+0x1b8>
    2808:	98 a3       	std	Y+32, r25	; 0x20
    280a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	89 a1       	ldd	r24, Y+33	; 0x21
    280e:	9a a1       	ldd	r25, Y+34	; 0x22
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9a a3       	std	Y+34, r25	; 0x22
    2814:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	89 a1       	ldd	r24, Y+33	; 0x21
    2818:	9a a1       	ldd	r25, Y+34	; 0x22
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <SevenSeg_Send+0x1ac>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <SevenSeg_Send+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	6b a1       	ldd	r22, Y+35	; 0x23
    2822:	7c a1       	ldd	r23, Y+36	; 0x24
    2824:	8d a1       	ldd	r24, Y+37	; 0x25
    2826:	9e a1       	ldd	r25, Y+38	; 0x26
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9a a3       	std	Y+34, r25	; 0x22
    2832:	89 a3       	std	Y+33, r24	; 0x21
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	9a a1       	ldd	r25, Y+34	; 0x22
    2838:	9e 8f       	std	Y+30, r25	; 0x1e
    283a:	8d 8f       	std	Y+29, r24	; 0x1d
    283c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    283e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <SevenSeg_Send+0x1f4>
    2844:	9e 8f       	std	Y+30, r25	; 0x1e
    2846:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_3);
    2848:	8d e0       	ldi	r24, 0x0D	; 13
    284a:	0e 94 b6 12 	call	0x256c	; 0x256c <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num3);
    284e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2850:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <SevenSeg_SendOneSeg>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a8 ec       	ldi	r26, 0xC8	; 200
    285a:	b2 e4       	ldi	r27, 0x42	; 66
    285c:	89 8f       	std	Y+25, r24	; 0x19
    285e:	9a 8f       	std	Y+26, r25	; 0x1a
    2860:	ab 8f       	std	Y+27, r26	; 0x1b
    2862:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2864:	69 8d       	ldd	r22, Y+25	; 0x19
    2866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    286a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4a e7       	ldi	r20, 0x7A	; 122
    2872:	55 e4       	ldi	r21, 0x45	; 69
    2874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	8d 8b       	std	Y+21, r24	; 0x15
    287e:	9e 8b       	std	Y+22, r25	; 0x16
    2880:	af 8b       	std	Y+23, r26	; 0x17
    2882:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2884:	6d 89       	ldd	r22, Y+21	; 0x15
    2886:	7e 89       	ldd	r23, Y+22	; 0x16
    2888:	8f 89       	ldd	r24, Y+23	; 0x17
    288a:	98 8d       	ldd	r25, Y+24	; 0x18
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e8       	ldi	r20, 0x80	; 128
    2892:	5f e3       	ldi	r21, 0x3F	; 63
    2894:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2898:	88 23       	and	r24, r24
    289a:	2c f4       	brge	.+10     	; 0x28a6 <SevenSeg_Send+0x25a>
		__ticks = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9c 8b       	std	Y+20, r25	; 0x14
    28a2:	8b 8b       	std	Y+19, r24	; 0x13
    28a4:	3f c0       	rjmp	.+126    	; 0x2924 <SevenSeg_Send+0x2d8>
	else if (__tmp > 65535)
    28a6:	6d 89       	ldd	r22, Y+21	; 0x15
    28a8:	7e 89       	ldd	r23, Y+22	; 0x16
    28aa:	8f 89       	ldd	r24, Y+23	; 0x17
    28ac:	98 8d       	ldd	r25, Y+24	; 0x18
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	57 e4       	ldi	r21, 0x47	; 71
    28b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	4c f5       	brge	.+82     	; 0x2910 <SevenSeg_Send+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28be:	69 8d       	ldd	r22, Y+25	; 0x19
    28c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	51 e4       	ldi	r21, 0x41	; 65
    28ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	8b 8b       	std	Y+19, r24	; 0x13
    28e6:	0f c0       	rjmp	.+30     	; 0x2906 <SevenSeg_Send+0x2ba>
    28e8:	80 e9       	ldi	r24, 0x90	; 144
    28ea:	91 e0       	ldi	r25, 0x01	; 1
    28ec:	9a 8b       	std	Y+18, r25	; 0x12
    28ee:	89 8b       	std	Y+17, r24	; 0x11
    28f0:	89 89       	ldd	r24, Y+17	; 0x11
    28f2:	9a 89       	ldd	r25, Y+18	; 0x12
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <SevenSeg_Send+0x2a8>
    28f8:	9a 8b       	std	Y+18, r25	; 0x12
    28fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fc:	8b 89       	ldd	r24, Y+19	; 0x13
    28fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	9c 8b       	std	Y+20, r25	; 0x14
    2904:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2906:	8b 89       	ldd	r24, Y+19	; 0x13
    2908:	9c 89       	ldd	r25, Y+20	; 0x14
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	69 f7       	brne	.-38     	; 0x28e8 <SevenSeg_Send+0x29c>
    290e:	14 c0       	rjmp	.+40     	; 0x2938 <SevenSeg_Send+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2910:	6d 89       	ldd	r22, Y+21	; 0x15
    2912:	7e 89       	ldd	r23, Y+22	; 0x16
    2914:	8f 89       	ldd	r24, Y+23	; 0x17
    2916:	98 8d       	ldd	r25, Y+24	; 0x18
    2918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	9c 8b       	std	Y+20, r25	; 0x14
    2922:	8b 8b       	std	Y+19, r24	; 0x13
    2924:	8b 89       	ldd	r24, Y+19	; 0x13
    2926:	9c 89       	ldd	r25, Y+20	; 0x14
    2928:	98 8b       	std	Y+16, r25	; 0x10
    292a:	8f 87       	std	Y+15, r24	; 0x0f
    292c:	8f 85       	ldd	r24, Y+15	; 0x0f
    292e:	98 89       	ldd	r25, Y+16	; 0x10
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <SevenSeg_Send+0x2e4>
    2934:	98 8b       	std	Y+16, r25	; 0x10
    2936:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_4);
    2938:	8e e0       	ldi	r24, 0x0E	; 14
    293a:	0e 94 b6 12 	call	0x256c	; 0x256c <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num4);
    293e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2940:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <SevenSeg_SendOneSeg>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a8 ec       	ldi	r26, 0xC8	; 200
    294a:	b2 e4       	ldi	r27, 0x42	; 66
    294c:	8b 87       	std	Y+11, r24	; 0x0b
    294e:	9c 87       	std	Y+12, r25	; 0x0c
    2950:	ad 87       	std	Y+13, r26	; 0x0d
    2952:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	6b 85       	ldd	r22, Y+11	; 0x0b
    2956:	7c 85       	ldd	r23, Y+12	; 0x0c
    2958:	8d 85       	ldd	r24, Y+13	; 0x0d
    295a:	9e 85       	ldd	r25, Y+14	; 0x0e
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a e7       	ldi	r20, 0x7A	; 122
    2962:	55 e4       	ldi	r21, 0x45	; 69
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8f 83       	std	Y+7, r24	; 0x07
    296e:	98 87       	std	Y+8, r25	; 0x08
    2970:	a9 87       	std	Y+9, r26	; 0x09
    2972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2974:	6f 81       	ldd	r22, Y+7	; 0x07
    2976:	78 85       	ldd	r23, Y+8	; 0x08
    2978:	89 85       	ldd	r24, Y+9	; 0x09
    297a:	9a 85       	ldd	r25, Y+10	; 0x0a
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <SevenSeg_Send+0x34a>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <SevenSeg_Send+0x3c8>
	else if (__tmp > 65535)
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <SevenSeg_Send+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <SevenSeg_Send+0x3aa>
    29d8:	80 e9       	ldi	r24, 0x90	; 144
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	8b 83       	std	Y+3, r24	; 0x03
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <SevenSeg_Send+0x398>
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <SevenSeg_Send+0x38c>
    29fe:	14 c0       	rjmp	.+40     	; 0x2a28 <SevenSeg_Send+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <SevenSeg_Send+0x3d4>
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);

}
    2a28:	ec 96       	adiw	r28, 0x3c	; 60
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <SevenSeg_SendOneSeg>:
void SevenSeg_SendOneSeg(u8 number) //SevenSeg_Type type ,
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	0f 92       	push	r0
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	89 83       	std	Y+1, r24	; 0x01
//	SevenSeg_SegEnable(seg);
	Dio_WriteChannel(PB_0, GET_BIT(number, 0));
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	98 2f       	mov	r25, r24
    2a4a:	91 70       	andi	r25, 0x01	; 1
    2a4c:	88 e0       	ldi	r24, 0x08	; 8
    2a4e:	69 2f       	mov	r22, r25
    2a50:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(number, 1));
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	86 95       	lsr	r24
    2a58:	98 2f       	mov	r25, r24
    2a5a:	91 70       	andi	r25, 0x01	; 1
    2a5c:	89 e0       	ldi	r24, 0x09	; 9
    2a5e:	69 2f       	mov	r22, r25
    2a60:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(number, 2));
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	86 95       	lsr	r24
    2a68:	86 95       	lsr	r24
    2a6a:	98 2f       	mov	r25, r24
    2a6c:	91 70       	andi	r25, 0x01	; 1
    2a6e:	8a e0       	ldi	r24, 0x0A	; 10
    2a70:	69 2f       	mov	r22, r25
    2a72:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(number, 3));
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	86 95       	lsr	r24
    2a7a:	86 95       	lsr	r24
    2a7c:	86 95       	lsr	r24
    2a7e:	98 2f       	mov	r25, r24
    2a80:	91 70       	andi	r25, 0x01	; 1
    2a82:	8c e0       	ldi	r24, 0x0C	; 12
    2a84:	69 2f       	mov	r22, r25
    2a86:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
}
    2a8a:	0f 90       	pop	r0
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <Lcd_SendCMD>:
 *      Author: AhmedAbogabl
 */

#include "LCD.h"

void Lcd_SendCMD(u8 cmd) {
    2a92:	0f 93       	push	r16
    2a94:	1f 93       	push	r17
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	c1 56       	subi	r28, 0x61	; 97
    2aa0:	d0 40       	sbci	r29, 0x00	; 0
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	fe 01       	movw	r30, r28
    2aae:	ef 59       	subi	r30, 0x9F	; 159
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 83       	st	Z, r24
	// Set RS to command mode
	Dio_WriteChannel(LCD_RS, STD_LOW);
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>

	// Send the high nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 4));
    2abc:	fe 01       	movw	r30, r28
    2abe:	ef 59       	subi	r30, 0x9F	; 159
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	82 95       	swap	r24
    2ac6:	8f 70       	andi	r24, 0x0F	; 15
    2ac8:	98 2f       	mov	r25, r24
    2aca:	91 70       	andi	r25, 0x01	; 1
    2acc:	88 e0       	ldi	r24, 0x08	; 8
    2ace:	69 2f       	mov	r22, r25
    2ad0:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 5));
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ef 59       	subi	r30, 0x9F	; 159
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	82 95       	swap	r24
    2ade:	86 95       	lsr	r24
    2ae0:	87 70       	andi	r24, 0x07	; 7
    2ae2:	98 2f       	mov	r25, r24
    2ae4:	91 70       	andi	r25, 0x01	; 1
    2ae6:	89 e0       	ldi	r24, 0x09	; 9
    2ae8:	69 2f       	mov	r22, r25
    2aea:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 6));
    2aee:	fe 01       	movw	r30, r28
    2af0:	ef 59       	subi	r30, 0x9F	; 159
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	80 81       	ld	r24, Z
    2af6:	82 95       	swap	r24
    2af8:	86 95       	lsr	r24
    2afa:	86 95       	lsr	r24
    2afc:	83 70       	andi	r24, 0x03	; 3
    2afe:	98 2f       	mov	r25, r24
    2b00:	91 70       	andi	r25, 0x01	; 1
    2b02:	8a e0       	ldi	r24, 0x0A	; 10
    2b04:	69 2f       	mov	r22, r25
    2b06:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 7));
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	ef 59       	subi	r30, 0x9F	; 159
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	98 2f       	mov	r25, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	99 27       	eor	r25, r25
    2b18:	99 1f       	adc	r25, r25
    2b1a:	8c e0       	ldi	r24, 0x0C	; 12
    2b1c:	69 2f       	mov	r22, r25
    2b1e:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e3 5a       	subi	r30, 0xA3	; 163
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e8       	ldi	r26, 0x80	; 128
    2b36:	bf e3       	ldi	r27, 0x3F	; 63
    2b38:	80 83       	st	Z, r24
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	a2 83       	std	Z+2, r26	; 0x02
    2b3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b40:	8e 01       	movw	r16, r28
    2b42:	07 5a       	subi	r16, 0xA7	; 167
    2b44:	1f 4f       	sbci	r17, 0xFF	; 255
    2b46:	fe 01       	movw	r30, r28
    2b48:	e3 5a       	subi	r30, 0xA3	; 163
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	2b ea       	ldi	r18, 0xAB	; 171
    2b56:	3a ea       	ldi	r19, 0xAA	; 170
    2b58:	4a ea       	ldi	r20, 0xAA	; 170
    2b5a:	50 e4       	ldi	r21, 0x40	; 64
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	f8 01       	movw	r30, r16
    2b66:	80 83       	st	Z, r24
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	a2 83       	std	Z+2, r26	; 0x02
    2b6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e7 5a       	subi	r30, 0xA7	; 167
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	34 f4       	brge	.+12     	; 0x2b98 <Lcd_SendCMD+0x106>
		__ticks = 1;
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e8 5a       	subi	r30, 0xA8	; 168
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	80 83       	st	Z, r24
    2b96:	e0 c0       	rjmp	.+448    	; 0x2d58 <Lcd_SendCMD+0x2c6>
	else if (__tmp > 255)
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e7 5a       	subi	r30, 0xA7	; 167
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	53 e4       	ldi	r21, 0x43	; 67
    2bae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	0c f0       	brlt	.+2      	; 0x2bb8 <Lcd_SendCMD+0x126>
    2bb6:	c0 c0       	rjmp	.+384    	; 0x2d38 <Lcd_SendCMD+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e3 5a       	subi	r30, 0xA3	; 163
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	60 81       	ld	r22, Z
    2bc0:	71 81       	ldd	r23, Z+1	; 0x01
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	93 81       	ldd	r25, Z+3	; 0x03
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	4a e7       	ldi	r20, 0x7A	; 122
    2bcc:	54 e4       	ldi	r21, 0x44	; 68
    2bce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ec 5a       	subi	r30, 0xAC	; 172
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 83       	st	Z, r24
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	a2 83       	std	Z+2, r26	; 0x02
    2be2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	8e 01       	movw	r16, r28
    2be6:	00 5b       	subi	r16, 0xB0	; 176
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	ec 5a       	subi	r30, 0xAC	; 172
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	4a e7       	ldi	r20, 0x7A	; 122
    2bfe:	55 e4       	ldi	r21, 0x45	; 69
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	f8 01       	movw	r30, r16
    2c0a:	80 83       	st	Z, r24
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	a2 83       	std	Z+2, r26	; 0x02
    2c10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c12:	fe 01       	movw	r30, r28
    2c14:	e0 5b       	subi	r30, 0xB0	; 176
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e8       	ldi	r20, 0x80	; 128
    2c26:	5f e3       	ldi	r21, 0x3F	; 63
    2c28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c2c:	88 23       	and	r24, r24
    2c2e:	44 f4       	brge	.+16     	; 0x2c40 <Lcd_SendCMD+0x1ae>
		__ticks = 1;
    2c30:	fe 01       	movw	r30, r28
    2c32:	e2 5b       	subi	r30, 0xB2	; 178
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	80 83       	st	Z, r24
    2c3e:	64 c0       	rjmp	.+200    	; 0x2d08 <Lcd_SendCMD+0x276>
	else if (__tmp > 65535)
    2c40:	fe 01       	movw	r30, r28
    2c42:	e0 5b       	subi	r30, 0xB0	; 176
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	60 81       	ld	r22, Z
    2c48:	71 81       	ldd	r23, Z+1	; 0x01
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	3f ef       	ldi	r19, 0xFF	; 255
    2c52:	4f e7       	ldi	r20, 0x7F	; 127
    2c54:	57 e4       	ldi	r21, 0x47	; 71
    2c56:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c5a:	18 16       	cp	r1, r24
    2c5c:	0c f0       	brlt	.+2      	; 0x2c60 <Lcd_SendCMD+0x1ce>
    2c5e:	43 c0       	rjmp	.+134    	; 0x2ce6 <Lcd_SendCMD+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c60:	fe 01       	movw	r30, r28
    2c62:	ec 5a       	subi	r30, 0xAC	; 172
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e2       	ldi	r20, 0x20	; 32
    2c74:	51 e4       	ldi	r21, 0x41	; 65
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	8e 01       	movw	r16, r28
    2c80:	02 5b       	subi	r16, 0xB2	; 178
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	f8 01       	movw	r30, r16
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
    2c96:	1f c0       	rjmp	.+62     	; 0x2cd6 <Lcd_SendCMD+0x244>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e4 5b       	subi	r30, 0xB4	; 180
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 e9       	ldi	r24, 0x90	; 144
    2ca0:	91 e0       	ldi	r25, 0x01	; 1
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e4 5b       	subi	r30, 0xB4	; 180
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <Lcd_SendCMD+0x21e>
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e4 5b       	subi	r30, 0xB4	; 180
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbe:	de 01       	movw	r26, r28
    2cc0:	a2 5b       	subi	r26, 0xB2	; 178
    2cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e2 5b       	subi	r30, 0xB2	; 178
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	11 96       	adiw	r26, 0x01	; 1
    2cd2:	9c 93       	st	X, r25
    2cd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	e2 5b       	subi	r30, 0xB2	; 178
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	d1 f6       	brne	.-76     	; 0x2c98 <Lcd_SendCMD+0x206>
    2ce4:	4b c0       	rjmp	.+150    	; 0x2d7c <Lcd_SendCMD+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce6:	8e 01       	movw	r16, r28
    2ce8:	02 5b       	subi	r16, 0xB2	; 178
    2cea:	1f 4f       	sbci	r17, 0xFF	; 255
    2cec:	fe 01       	movw	r30, r28
    2cee:	e0 5b       	subi	r30, 0xB0	; 176
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	f8 01       	movw	r30, r16
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
    2d08:	de 01       	movw	r26, r28
    2d0a:	a6 5b       	subi	r26, 0xB6	; 182
    2d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e2 5b       	subi	r30, 0xB2	; 178
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	11 96       	adiw	r26, 0x01	; 1
    2d1a:	9c 93       	st	X, r25
    2d1c:	8e 93       	st	-X, r24
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e6 5b       	subi	r30, 0xB6	; 182
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	80 81       	ld	r24, Z
    2d26:	91 81       	ldd	r25, Z+1	; 0x01
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <Lcd_SendCMD+0x296>
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e6 5b       	subi	r30, 0xB6	; 182
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	22 c0       	rjmp	.+68     	; 0x2d7c <Lcd_SendCMD+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d38:	8e 01       	movw	r16, r28
    2d3a:	08 5a       	subi	r16, 0xA8	; 168
    2d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e7 5a       	subi	r30, 0xA7	; 167
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	f8 01       	movw	r30, r16
    2d56:	80 83       	st	Z, r24
    2d58:	de 01       	movw	r26, r28
    2d5a:	a7 5b       	subi	r26, 0xB7	; 183
    2d5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e8 5a       	subi	r30, 0xA8	; 168
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e7 5b       	subi	r30, 0xB7	; 183
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	8a 95       	dec	r24
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <Lcd_SendCMD+0x2de>
    2d74:	fe 01       	movw	r30, r28
    2d76:	e7 5b       	subi	r30, 0xB7	; 183
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    2d7c:	82 e0       	ldi	r24, 0x02	; 2
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    2d84:	fe 01       	movw	r30, r28
    2d86:	eb 5b       	subi	r30, 0xBB	; 187
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	a0 e8       	ldi	r26, 0x80	; 128
    2d90:	bf e3       	ldi	r27, 0x3F	; 63
    2d92:	80 83       	st	Z, r24
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	a2 83       	std	Z+2, r26	; 0x02
    2d98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d9a:	8e 01       	movw	r16, r28
    2d9c:	0f 5b       	subi	r16, 0xBF	; 191
    2d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2da0:	fe 01       	movw	r30, r28
    2da2:	eb 5b       	subi	r30, 0xBB	; 187
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	60 81       	ld	r22, Z
    2da8:	71 81       	ldd	r23, Z+1	; 0x01
    2daa:	82 81       	ldd	r24, Z+2	; 0x02
    2dac:	93 81       	ldd	r25, Z+3	; 0x03
    2dae:	2b ea       	ldi	r18, 0xAB	; 171
    2db0:	3a ea       	ldi	r19, 0xAA	; 170
    2db2:	4a ea       	ldi	r20, 0xAA	; 170
    2db4:	50 e4       	ldi	r21, 0x40	; 64
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	80 83       	st	Z, r24
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	a2 83       	std	Z+2, r26	; 0x02
    2dc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ef 5b       	subi	r30, 0xBF	; 191
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	34 f4       	brge	.+12     	; 0x2df2 <Lcd_SendCMD+0x360>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	fe 01       	movw	r30, r28
    2dea:	e0 5c       	subi	r30, 0xC0	; 192
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 83       	st	Z, r24
    2df0:	9d c0       	rjmp	.+314    	; 0x2f2c <Lcd_SendCMD+0x49a>
	else if (__tmp > 255)
    2df2:	fe 01       	movw	r30, r28
    2df4:	ef 5b       	subi	r30, 0xBF	; 191
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	53 e4       	ldi	r21, 0x43	; 67
    2e08:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	0c f0       	brlt	.+2      	; 0x2e12 <Lcd_SendCMD+0x380>
    2e10:	7e c0       	rjmp	.+252    	; 0x2f0e <Lcd_SendCMD+0x47c>
	{
		_delay_ms(__us / 1000.0);
    2e12:	fe 01       	movw	r30, r28
    2e14:	eb 5b       	subi	r30, 0xBB	; 187
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a e7       	ldi	r20, 0x7A	; 122
    2e26:	54 e4       	ldi	r21, 0x44	; 68
    2e28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8c af       	std	Y+60, r24	; 0x3c
    2e32:	9d af       	std	Y+61, r25	; 0x3d
    2e34:	ae af       	std	Y+62, r26	; 0x3e
    2e36:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e38:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e3a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	4a e7       	ldi	r20, 0x7A	; 122
    2e46:	55 e4       	ldi	r21, 0x45	; 69
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	88 af       	std	Y+56, r24	; 0x38
    2e52:	99 af       	std	Y+57, r25	; 0x39
    2e54:	aa af       	std	Y+58, r26	; 0x3a
    2e56:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2e58:	68 ad       	ldd	r22, Y+56	; 0x38
    2e5a:	79 ad       	ldd	r23, Y+57	; 0x39
    2e5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e5e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e8       	ldi	r20, 0x80	; 128
    2e66:	5f e3       	ldi	r21, 0x3F	; 63
    2e68:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e6c:	88 23       	and	r24, r24
    2e6e:	2c f4       	brge	.+10     	; 0x2e7a <Lcd_SendCMD+0x3e8>
		__ticks = 1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9f ab       	std	Y+55, r25	; 0x37
    2e76:	8e ab       	std	Y+54, r24	; 0x36
    2e78:	3f c0       	rjmp	.+126    	; 0x2ef8 <Lcd_SendCMD+0x466>
	else if (__tmp > 65535)
    2e7a:	68 ad       	ldd	r22, Y+56	; 0x38
    2e7c:	79 ad       	ldd	r23, Y+57	; 0x39
    2e7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e80:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	3f ef       	ldi	r19, 0xFF	; 255
    2e86:	4f e7       	ldi	r20, 0x7F	; 127
    2e88:	57 e4       	ldi	r21, 0x47	; 71
    2e8a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e8e:	18 16       	cp	r1, r24
    2e90:	4c f5       	brge	.+82     	; 0x2ee4 <Lcd_SendCMD+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e92:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e94:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e96:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e98:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e2       	ldi	r20, 0x20	; 32
    2ea0:	51 e4       	ldi	r21, 0x41	; 65
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9f ab       	std	Y+55, r25	; 0x37
    2eb8:	8e ab       	std	Y+54, r24	; 0x36
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <Lcd_SendCMD+0x448>
    2ebc:	80 e9       	ldi	r24, 0x90	; 144
    2ebe:	91 e0       	ldi	r25, 0x01	; 1
    2ec0:	9d ab       	std	Y+53, r25	; 0x35
    2ec2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ec4:	8c a9       	ldd	r24, Y+52	; 0x34
    2ec6:	9d a9       	ldd	r25, Y+53	; 0x35
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <Lcd_SendCMD+0x436>
    2ecc:	9d ab       	std	Y+53, r25	; 0x35
    2ece:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed0:	8e a9       	ldd	r24, Y+54	; 0x36
    2ed2:	9f a9       	ldd	r25, Y+55	; 0x37
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	9f ab       	std	Y+55, r25	; 0x37
    2ed8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eda:	8e a9       	ldd	r24, Y+54	; 0x36
    2edc:	9f a9       	ldd	r25, Y+55	; 0x37
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <Lcd_SendCMD+0x42a>
    2ee2:	2d c0       	rjmp	.+90     	; 0x2f3e <Lcd_SendCMD+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	68 ad       	ldd	r22, Y+56	; 0x38
    2ee6:	79 ad       	ldd	r23, Y+57	; 0x39
    2ee8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2eea:	9b ad       	ldd	r25, Y+59	; 0x3b
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9f ab       	std	Y+55, r25	; 0x37
    2ef6:	8e ab       	std	Y+54, r24	; 0x36
    2ef8:	8e a9       	ldd	r24, Y+54	; 0x36
    2efa:	9f a9       	ldd	r25, Y+55	; 0x37
    2efc:	9b ab       	std	Y+51, r25	; 0x33
    2efe:	8a ab       	std	Y+50, r24	; 0x32
    2f00:	8a a9       	ldd	r24, Y+50	; 0x32
    2f02:	9b a9       	ldd	r25, Y+51	; 0x33
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <Lcd_SendCMD+0x472>
    2f08:	9b ab       	std	Y+51, r25	; 0x33
    2f0a:	8a ab       	std	Y+50, r24	; 0x32
    2f0c:	18 c0       	rjmp	.+48     	; 0x2f3e <Lcd_SendCMD+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ef 5b       	subi	r30, 0xBF	; 191
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	fe 01       	movw	r30, r28
    2f26:	e0 5c       	subi	r30, 0xC0	; 192
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 83       	st	Z, r24
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e0 5c       	subi	r30, 0xC0	; 192
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 81       	ld	r24, Z
    2f34:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f36:	89 a9       	ldd	r24, Y+49	; 0x31
    2f38:	8a 95       	dec	r24
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <Lcd_SendCMD+0x4a6>
    2f3c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 0));
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ef 59       	subi	r30, 0x9F	; 159
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	98 2f       	mov	r25, r24
    2f48:	91 70       	andi	r25, 0x01	; 1
    2f4a:	88 e0       	ldi	r24, 0x08	; 8
    2f4c:	69 2f       	mov	r22, r25
    2f4e:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 1));
    2f52:	fe 01       	movw	r30, r28
    2f54:	ef 59       	subi	r30, 0x9F	; 159
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	86 95       	lsr	r24
    2f5c:	98 2f       	mov	r25, r24
    2f5e:	91 70       	andi	r25, 0x01	; 1
    2f60:	89 e0       	ldi	r24, 0x09	; 9
    2f62:	69 2f       	mov	r22, r25
    2f64:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 2));
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ef 59       	subi	r30, 0x9F	; 159
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	86 95       	lsr	r24
    2f72:	86 95       	lsr	r24
    2f74:	98 2f       	mov	r25, r24
    2f76:	91 70       	andi	r25, 0x01	; 1
    2f78:	8a e0       	ldi	r24, 0x0A	; 10
    2f7a:	69 2f       	mov	r22, r25
    2f7c:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 3));
    2f80:	fe 01       	movw	r30, r28
    2f82:	ef 59       	subi	r30, 0x9F	; 159
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	86 95       	lsr	r24
    2f8a:	86 95       	lsr	r24
    2f8c:	86 95       	lsr	r24
    2f8e:	98 2f       	mov	r25, r24
    2f90:	91 70       	andi	r25, 0x01	; 1
    2f92:	8c e0       	ldi	r24, 0x0C	; 12
    2f94:	69 2f       	mov	r22, r25
    2f96:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	61 e0       	ldi	r22, 0x01	; 1
    2f9e:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e8       	ldi	r26, 0x80	; 128
    2fa8:	bf e3       	ldi	r27, 0x3F	; 63
    2faa:	8d a7       	std	Y+45, r24	; 0x2d
    2fac:	9e a7       	std	Y+46, r25	; 0x2e
    2fae:	af a7       	std	Y+47, r26	; 0x2f
    2fb0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fb2:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fb4:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fba:	2b ea       	ldi	r18, 0xAB	; 171
    2fbc:	3a ea       	ldi	r19, 0xAA	; 170
    2fbe:	4a ea       	ldi	r20, 0xAA	; 170
    2fc0:	50 e4       	ldi	r21, 0x40	; 64
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	89 a7       	std	Y+41, r24	; 0x29
    2fcc:	9a a7       	std	Y+42, r25	; 0x2a
    2fce:	ab a7       	std	Y+43, r26	; 0x2b
    2fd0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2fd2:	69 a5       	ldd	r22, Y+41	; 0x29
    2fd4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	1c f4       	brge	.+6      	; 0x2ff0 <Lcd_SendCMD+0x55e>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	88 a7       	std	Y+40, r24	; 0x28
    2fee:	91 c0       	rjmp	.+290    	; 0x3112 <Lcd_SendCMD+0x680>
	else if (__tmp > 255)
    2ff0:	69 a5       	ldd	r22, Y+41	; 0x29
    2ff2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ff4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	53 e4       	ldi	r21, 0x43	; 67
    3000:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	0c f0       	brlt	.+2      	; 0x300a <Lcd_SendCMD+0x578>
    3008:	7b c0       	rjmp	.+246    	; 0x3100 <Lcd_SendCMD+0x66e>
	{
		_delay_ms(__us / 1000.0);
    300a:	6d a5       	ldd	r22, Y+45	; 0x2d
    300c:	7e a5       	ldd	r23, Y+46	; 0x2e
    300e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3010:	98 a9       	ldd	r25, Y+48	; 0x30
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	4a e7       	ldi	r20, 0x7A	; 122
    3018:	54 e4       	ldi	r21, 0x44	; 68
    301a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8c a3       	std	Y+36, r24	; 0x24
    3024:	9d a3       	std	Y+37, r25	; 0x25
    3026:	ae a3       	std	Y+38, r26	; 0x26
    3028:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302a:	6c a1       	ldd	r22, Y+36	; 0x24
    302c:	7d a1       	ldd	r23, Y+37	; 0x25
    302e:	8e a1       	ldd	r24, Y+38	; 0x26
    3030:	9f a1       	ldd	r25, Y+39	; 0x27
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	4a e7       	ldi	r20, 0x7A	; 122
    3038:	55 e4       	ldi	r21, 0x45	; 69
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	88 a3       	std	Y+32, r24	; 0x20
    3044:	99 a3       	std	Y+33, r25	; 0x21
    3046:	aa a3       	std	Y+34, r26	; 0x22
    3048:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    304a:	68 a1       	ldd	r22, Y+32	; 0x20
    304c:	79 a1       	ldd	r23, Y+33	; 0x21
    304e:	8a a1       	ldd	r24, Y+34	; 0x22
    3050:	9b a1       	ldd	r25, Y+35	; 0x23
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e8       	ldi	r20, 0x80	; 128
    3058:	5f e3       	ldi	r21, 0x3F	; 63
    305a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    305e:	88 23       	and	r24, r24
    3060:	2c f4       	brge	.+10     	; 0x306c <Lcd_SendCMD+0x5da>
		__ticks = 1;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	9f 8f       	std	Y+31, r25	; 0x1f
    3068:	8e 8f       	std	Y+30, r24	; 0x1e
    306a:	3f c0       	rjmp	.+126    	; 0x30ea <Lcd_SendCMD+0x658>
	else if (__tmp > 65535)
    306c:	68 a1       	ldd	r22, Y+32	; 0x20
    306e:	79 a1       	ldd	r23, Y+33	; 0x21
    3070:	8a a1       	ldd	r24, Y+34	; 0x22
    3072:	9b a1       	ldd	r25, Y+35	; 0x23
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	3f ef       	ldi	r19, 0xFF	; 255
    3078:	4f e7       	ldi	r20, 0x7F	; 127
    307a:	57 e4       	ldi	r21, 0x47	; 71
    307c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3080:	18 16       	cp	r1, r24
    3082:	4c f5       	brge	.+82     	; 0x30d6 <Lcd_SendCMD+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3084:	6c a1       	ldd	r22, Y+36	; 0x24
    3086:	7d a1       	ldd	r23, Y+37	; 0x25
    3088:	8e a1       	ldd	r24, Y+38	; 0x26
    308a:	9f a1       	ldd	r25, Y+39	; 0x27
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e2       	ldi	r20, 0x20	; 32
    3092:	51 e4       	ldi	r21, 0x41	; 65
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9f 8f       	std	Y+31, r25	; 0x1f
    30aa:	8e 8f       	std	Y+30, r24	; 0x1e
    30ac:	0f c0       	rjmp	.+30     	; 0x30cc <Lcd_SendCMD+0x63a>
    30ae:	80 e9       	ldi	r24, 0x90	; 144
    30b0:	91 e0       	ldi	r25, 0x01	; 1
    30b2:	9d 8f       	std	Y+29, r25	; 0x1d
    30b4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <Lcd_SendCMD+0x628>
    30be:	9d 8f       	std	Y+29, r25	; 0x1d
    30c0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	9f 8f       	std	Y+31, r25	; 0x1f
    30ca:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	69 f7       	brne	.-38     	; 0x30ae <Lcd_SendCMD+0x61c>
    30d4:	24 c0       	rjmp	.+72     	; 0x311e <Lcd_SendCMD+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d6:	68 a1       	ldd	r22, Y+32	; 0x20
    30d8:	79 a1       	ldd	r23, Y+33	; 0x21
    30da:	8a a1       	ldd	r24, Y+34	; 0x22
    30dc:	9b a1       	ldd	r25, Y+35	; 0x23
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9f 8f       	std	Y+31, r25	; 0x1f
    30e8:	8e 8f       	std	Y+30, r24	; 0x1e
    30ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30ee:	9b 8f       	std	Y+27, r25	; 0x1b
    30f0:	8a 8f       	std	Y+26, r24	; 0x1a
    30f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <Lcd_SendCMD+0x664>
    30fa:	9b 8f       	std	Y+27, r25	; 0x1b
    30fc:	8a 8f       	std	Y+26, r24	; 0x1a
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <Lcd_SendCMD+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3100:	69 a5       	ldd	r22, Y+41	; 0x29
    3102:	7a a5       	ldd	r23, Y+42	; 0x2a
    3104:	8b a5       	ldd	r24, Y+43	; 0x2b
    3106:	9c a5       	ldd	r25, Y+44	; 0x2c
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	88 a7       	std	Y+40, r24	; 0x28
    3112:	88 a5       	ldd	r24, Y+40	; 0x28
    3114:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3116:	89 8d       	ldd	r24, Y+25	; 0x19
    3118:	8a 95       	dec	r24
    311a:	f1 f7       	brne	.-4      	; 0x3118 <Lcd_SendCMD+0x686>
    311c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a0 e8       	ldi	r26, 0x80	; 128
    312c:	bf e3       	ldi	r27, 0x3F	; 63
    312e:	8d 8b       	std	Y+21, r24	; 0x15
    3130:	9e 8b       	std	Y+22, r25	; 0x16
    3132:	af 8b       	std	Y+23, r26	; 0x17
    3134:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3136:	6d 89       	ldd	r22, Y+21	; 0x15
    3138:	7e 89       	ldd	r23, Y+22	; 0x16
    313a:	8f 89       	ldd	r24, Y+23	; 0x17
    313c:	98 8d       	ldd	r25, Y+24	; 0x18
    313e:	2b ea       	ldi	r18, 0xAB	; 171
    3140:	3a ea       	ldi	r19, 0xAA	; 170
    3142:	4a ea       	ldi	r20, 0xAA	; 170
    3144:	50 e4       	ldi	r21, 0x40	; 64
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	89 8b       	std	Y+17, r24	; 0x11
    3150:	9a 8b       	std	Y+18, r25	; 0x12
    3152:	ab 8b       	std	Y+19, r26	; 0x13
    3154:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3156:	69 89       	ldd	r22, Y+17	; 0x11
    3158:	7a 89       	ldd	r23, Y+18	; 0x12
    315a:	8b 89       	ldd	r24, Y+19	; 0x13
    315c:	9c 89       	ldd	r25, Y+20	; 0x14
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e8       	ldi	r20, 0x80	; 128
    3164:	5f e3       	ldi	r21, 0x3F	; 63
    3166:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    316a:	88 23       	and	r24, r24
    316c:	1c f4       	brge	.+6      	; 0x3174 <Lcd_SendCMD+0x6e2>
		__ticks = 1;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	88 8b       	std	Y+16, r24	; 0x10
    3172:	91 c0       	rjmp	.+290    	; 0x3296 <Lcd_SendCMD+0x804>
	else if (__tmp > 255)
    3174:	69 89       	ldd	r22, Y+17	; 0x11
    3176:	7a 89       	ldd	r23, Y+18	; 0x12
    3178:	8b 89       	ldd	r24, Y+19	; 0x13
    317a:	9c 89       	ldd	r25, Y+20	; 0x14
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	4f e7       	ldi	r20, 0x7F	; 127
    3182:	53 e4       	ldi	r21, 0x43	; 67
    3184:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3188:	18 16       	cp	r1, r24
    318a:	0c f0       	brlt	.+2      	; 0x318e <Lcd_SendCMD+0x6fc>
    318c:	7b c0       	rjmp	.+246    	; 0x3284 <Lcd_SendCMD+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    318e:	6d 89       	ldd	r22, Y+21	; 0x15
    3190:	7e 89       	ldd	r23, Y+22	; 0x16
    3192:	8f 89       	ldd	r24, Y+23	; 0x17
    3194:	98 8d       	ldd	r25, Y+24	; 0x18
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	4a e7       	ldi	r20, 0x7A	; 122
    319c:	54 e4       	ldi	r21, 0x44	; 68
    319e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	8c 87       	std	Y+12, r24	; 0x0c
    31a8:	9d 87       	std	Y+13, r25	; 0x0d
    31aa:	ae 87       	std	Y+14, r26	; 0x0e
    31ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    31b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    31b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    31b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	4a e7       	ldi	r20, 0x7A	; 122
    31bc:	55 e4       	ldi	r21, 0x45	; 69
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	88 87       	std	Y+8, r24	; 0x08
    31c8:	99 87       	std	Y+9, r25	; 0x09
    31ca:	aa 87       	std	Y+10, r26	; 0x0a
    31cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31ce:	68 85       	ldd	r22, Y+8	; 0x08
    31d0:	79 85       	ldd	r23, Y+9	; 0x09
    31d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e8       	ldi	r20, 0x80	; 128
    31dc:	5f e3       	ldi	r21, 0x3F	; 63
    31de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31e2:	88 23       	and	r24, r24
    31e4:	2c f4       	brge	.+10     	; 0x31f0 <Lcd_SendCMD+0x75e>
		__ticks = 1;
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	9f 83       	std	Y+7, r25	; 0x07
    31ec:	8e 83       	std	Y+6, r24	; 0x06
    31ee:	3f c0       	rjmp	.+126    	; 0x326e <Lcd_SendCMD+0x7dc>
	else if (__tmp > 65535)
    31f0:	68 85       	ldd	r22, Y+8	; 0x08
    31f2:	79 85       	ldd	r23, Y+9	; 0x09
    31f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	3f ef       	ldi	r19, 0xFF	; 255
    31fc:	4f e7       	ldi	r20, 0x7F	; 127
    31fe:	57 e4       	ldi	r21, 0x47	; 71
    3200:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3204:	18 16       	cp	r1, r24
    3206:	4c f5       	brge	.+82     	; 0x325a <Lcd_SendCMD+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3208:	6c 85       	ldd	r22, Y+12	; 0x0c
    320a:	7d 85       	ldd	r23, Y+13	; 0x0d
    320c:	8e 85       	ldd	r24, Y+14	; 0x0e
    320e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	40 e2       	ldi	r20, 0x20	; 32
    3216:	51 e4       	ldi	r21, 0x41	; 65
    3218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	9f 83       	std	Y+7, r25	; 0x07
    322e:	8e 83       	std	Y+6, r24	; 0x06
    3230:	0f c0       	rjmp	.+30     	; 0x3250 <Lcd_SendCMD+0x7be>
    3232:	80 e9       	ldi	r24, 0x90	; 144
    3234:	91 e0       	ldi	r25, 0x01	; 1
    3236:	9d 83       	std	Y+5, r25	; 0x05
    3238:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	9d 81       	ldd	r25, Y+5	; 0x05
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <Lcd_SendCMD+0x7ac>
    3242:	9d 83       	std	Y+5, r25	; 0x05
    3244:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3246:	8e 81       	ldd	r24, Y+6	; 0x06
    3248:	9f 81       	ldd	r25, Y+7	; 0x07
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	9f 83       	std	Y+7, r25	; 0x07
    324e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3250:	8e 81       	ldd	r24, Y+6	; 0x06
    3252:	9f 81       	ldd	r25, Y+7	; 0x07
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	69 f7       	brne	.-38     	; 0x3232 <Lcd_SendCMD+0x7a0>
    3258:	24 c0       	rjmp	.+72     	; 0x32a2 <Lcd_SendCMD+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    325a:	68 85       	ldd	r22, Y+8	; 0x08
    325c:	79 85       	ldd	r23, Y+9	; 0x09
    325e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3260:	9b 85       	ldd	r25, Y+11	; 0x0b
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	9f 83       	std	Y+7, r25	; 0x07
    326c:	8e 83       	std	Y+6, r24	; 0x06
    326e:	8e 81       	ldd	r24, Y+6	; 0x06
    3270:	9f 81       	ldd	r25, Y+7	; 0x07
    3272:	9b 83       	std	Y+3, r25	; 0x03
    3274:	8a 83       	std	Y+2, r24	; 0x02
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	9b 81       	ldd	r25, Y+3	; 0x03
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <Lcd_SendCMD+0x7e8>
    327e:	9b 83       	std	Y+3, r25	; 0x03
    3280:	8a 83       	std	Y+2, r24	; 0x02
    3282:	0f c0       	rjmp	.+30     	; 0x32a2 <Lcd_SendCMD+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3284:	69 89       	ldd	r22, Y+17	; 0x11
    3286:	7a 89       	ldd	r23, Y+18	; 0x12
    3288:	8b 89       	ldd	r24, Y+19	; 0x13
    328a:	9c 89       	ldd	r25, Y+20	; 0x14
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	88 8b       	std	Y+16, r24	; 0x10
    3296:	88 89       	ldd	r24, Y+16	; 0x10
    3298:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	8a 95       	dec	r24
    329e:	f1 f7       	brne	.-4      	; 0x329c <Lcd_SendCMD+0x80a>
    32a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);  // Wait for the command to execute
}
    32a2:	cf 59       	subi	r28, 0x9F	; 159
    32a4:	df 4f       	sbci	r29, 0xFF	; 255
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	08 95       	ret

000032ba <Lcd_SendData>:

void Lcd_SendData(u8 data) {
    32ba:	0f 93       	push	r16
    32bc:	1f 93       	push	r17
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	c1 56       	subi	r28, 0x61	; 97
    32c8:	d0 40       	sbci	r29, 0x00	; 0
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
    32d4:	fe 01       	movw	r30, r28
    32d6:	ef 59       	subi	r30, 0x9F	; 159
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 83       	st	Z, r24

	// Set RS to data mode
//	SET_BIT(PORTA, LCD_RS);
	Dio_WriteChannel(LCD_RS, STD_HIGH);
    32dc:	83 e0       	ldi	r24, 0x03	; 3
    32de:	61 e0       	ldi	r22, 0x01	; 1
    32e0:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	// Send the high nibble

	Dio_WriteChannel(PB_0, GET_BIT(data, 4));
    32e4:	fe 01       	movw	r30, r28
    32e6:	ef 59       	subi	r30, 0x9F	; 159
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	82 95       	swap	r24
    32ee:	8f 70       	andi	r24, 0x0F	; 15
    32f0:	98 2f       	mov	r25, r24
    32f2:	91 70       	andi	r25, 0x01	; 1
    32f4:	88 e0       	ldi	r24, 0x08	; 8
    32f6:	69 2f       	mov	r22, r25
    32f8:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 5));
    32fc:	fe 01       	movw	r30, r28
    32fe:	ef 59       	subi	r30, 0x9F	; 159
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	82 95       	swap	r24
    3306:	86 95       	lsr	r24
    3308:	87 70       	andi	r24, 0x07	; 7
    330a:	98 2f       	mov	r25, r24
    330c:	91 70       	andi	r25, 0x01	; 1
    330e:	89 e0       	ldi	r24, 0x09	; 9
    3310:	69 2f       	mov	r22, r25
    3312:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 6));
    3316:	fe 01       	movw	r30, r28
    3318:	ef 59       	subi	r30, 0x9F	; 159
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	82 95       	swap	r24
    3320:	86 95       	lsr	r24
    3322:	86 95       	lsr	r24
    3324:	83 70       	andi	r24, 0x03	; 3
    3326:	98 2f       	mov	r25, r24
    3328:	91 70       	andi	r25, 0x01	; 1
    332a:	8a e0       	ldi	r24, 0x0A	; 10
    332c:	69 2f       	mov	r22, r25
    332e:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 7));
    3332:	fe 01       	movw	r30, r28
    3334:	ef 59       	subi	r30, 0x9F	; 159
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	80 81       	ld	r24, Z
    333a:	98 2f       	mov	r25, r24
    333c:	99 1f       	adc	r25, r25
    333e:	99 27       	eor	r25, r25
    3340:	99 1f       	adc	r25, r25
    3342:	8c e0       	ldi	r24, 0x0C	; 12
    3344:	69 2f       	mov	r22, r25
    3346:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(LCD_EN, STD_HIGH);
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	61 e0       	ldi	r22, 0x01	; 1
    334e:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    3352:	fe 01       	movw	r30, r28
    3354:	e3 5a       	subi	r30, 0xA3	; 163
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	a0 e8       	ldi	r26, 0x80	; 128
    335e:	bf e3       	ldi	r27, 0x3F	; 63
    3360:	80 83       	st	Z, r24
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	a2 83       	std	Z+2, r26	; 0x02
    3366:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3368:	8e 01       	movw	r16, r28
    336a:	07 5a       	subi	r16, 0xA7	; 167
    336c:	1f 4f       	sbci	r17, 0xFF	; 255
    336e:	fe 01       	movw	r30, r28
    3370:	e3 5a       	subi	r30, 0xA3	; 163
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	93 81       	ldd	r25, Z+3	; 0x03
    337c:	2b ea       	ldi	r18, 0xAB	; 171
    337e:	3a ea       	ldi	r19, 0xAA	; 170
    3380:	4a ea       	ldi	r20, 0xAA	; 170
    3382:	50 e4       	ldi	r21, 0x40	; 64
    3384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	f8 01       	movw	r30, r16
    338e:	80 83       	st	Z, r24
    3390:	91 83       	std	Z+1, r25	; 0x01
    3392:	a2 83       	std	Z+2, r26	; 0x02
    3394:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3396:	fe 01       	movw	r30, r28
    3398:	e7 5a       	subi	r30, 0xA7	; 167
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	60 81       	ld	r22, Z
    339e:	71 81       	ldd	r23, Z+1	; 0x01
    33a0:	82 81       	ldd	r24, Z+2	; 0x02
    33a2:	93 81       	ldd	r25, Z+3	; 0x03
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	5f e3       	ldi	r21, 0x3F	; 63
    33ac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33b0:	88 23       	and	r24, r24
    33b2:	34 f4       	brge	.+12     	; 0x33c0 <Lcd_SendData+0x106>
		__ticks = 1;
    33b4:	fe 01       	movw	r30, r28
    33b6:	e8 5a       	subi	r30, 0xA8	; 168
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	80 83       	st	Z, r24
    33be:	e0 c0       	rjmp	.+448    	; 0x3580 <Lcd_SendData+0x2c6>
	else if (__tmp > 255)
    33c0:	fe 01       	movw	r30, r28
    33c2:	e7 5a       	subi	r30, 0xA7	; 167
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	60 81       	ld	r22, Z
    33c8:	71 81       	ldd	r23, Z+1	; 0x01
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	93 81       	ldd	r25, Z+3	; 0x03
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	4f e7       	ldi	r20, 0x7F	; 127
    33d4:	53 e4       	ldi	r21, 0x43	; 67
    33d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33da:	18 16       	cp	r1, r24
    33dc:	0c f0       	brlt	.+2      	; 0x33e0 <Lcd_SendData+0x126>
    33de:	c0 c0       	rjmp	.+384    	; 0x3560 <Lcd_SendData+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    33e0:	fe 01       	movw	r30, r28
    33e2:	e3 5a       	subi	r30, 0xA3	; 163
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	60 81       	ld	r22, Z
    33e8:	71 81       	ldd	r23, Z+1	; 0x01
    33ea:	82 81       	ldd	r24, Z+2	; 0x02
    33ec:	93 81       	ldd	r25, Z+3	; 0x03
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4a e7       	ldi	r20, 0x7A	; 122
    33f4:	54 e4       	ldi	r21, 0x44	; 68
    33f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	fe 01       	movw	r30, r28
    3400:	ec 5a       	subi	r30, 0xAC	; 172
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	80 83       	st	Z, r24
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	a2 83       	std	Z+2, r26	; 0x02
    340a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340c:	8e 01       	movw	r16, r28
    340e:	00 5b       	subi	r16, 0xB0	; 176
    3410:	1f 4f       	sbci	r17, 0xFF	; 255
    3412:	fe 01       	movw	r30, r28
    3414:	ec 5a       	subi	r30, 0xAC	; 172
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	60 81       	ld	r22, Z
    341a:	71 81       	ldd	r23, Z+1	; 0x01
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	93 81       	ldd	r25, Z+3	; 0x03
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	4a e7       	ldi	r20, 0x7A	; 122
    3426:	55 e4       	ldi	r21, 0x45	; 69
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	f8 01       	movw	r30, r16
    3432:	80 83       	st	Z, r24
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	a2 83       	std	Z+2, r26	; 0x02
    3438:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    343a:	fe 01       	movw	r30, r28
    343c:	e0 5b       	subi	r30, 0xB0	; 176
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	60 81       	ld	r22, Z
    3442:	71 81       	ldd	r23, Z+1	; 0x01
    3444:	82 81       	ldd	r24, Z+2	; 0x02
    3446:	93 81       	ldd	r25, Z+3	; 0x03
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	5f e3       	ldi	r21, 0x3F	; 63
    3450:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3454:	88 23       	and	r24, r24
    3456:	44 f4       	brge	.+16     	; 0x3468 <Lcd_SendData+0x1ae>
		__ticks = 1;
    3458:	fe 01       	movw	r30, r28
    345a:	e2 5b       	subi	r30, 0xB2	; 178
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	91 83       	std	Z+1, r25	; 0x01
    3464:	80 83       	st	Z, r24
    3466:	64 c0       	rjmp	.+200    	; 0x3530 <Lcd_SendData+0x276>
	else if (__tmp > 65535)
    3468:	fe 01       	movw	r30, r28
    346a:	e0 5b       	subi	r30, 0xB0	; 176
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	60 81       	ld	r22, Z
    3470:	71 81       	ldd	r23, Z+1	; 0x01
    3472:	82 81       	ldd	r24, Z+2	; 0x02
    3474:	93 81       	ldd	r25, Z+3	; 0x03
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	3f ef       	ldi	r19, 0xFF	; 255
    347a:	4f e7       	ldi	r20, 0x7F	; 127
    347c:	57 e4       	ldi	r21, 0x47	; 71
    347e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3482:	18 16       	cp	r1, r24
    3484:	0c f0       	brlt	.+2      	; 0x3488 <Lcd_SendData+0x1ce>
    3486:	43 c0       	rjmp	.+134    	; 0x350e <Lcd_SendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3488:	fe 01       	movw	r30, r28
    348a:	ec 5a       	subi	r30, 0xAC	; 172
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	60 81       	ld	r22, Z
    3490:	71 81       	ldd	r23, Z+1	; 0x01
    3492:	82 81       	ldd	r24, Z+2	; 0x02
    3494:	93 81       	ldd	r25, Z+3	; 0x03
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e2       	ldi	r20, 0x20	; 32
    349c:	51 e4       	ldi	r21, 0x41	; 65
    349e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	8e 01       	movw	r16, r28
    34a8:	02 5b       	subi	r16, 0xB2	; 178
    34aa:	1f 4f       	sbci	r17, 0xFF	; 255
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	f8 01       	movw	r30, r16
    34ba:	91 83       	std	Z+1, r25	; 0x01
    34bc:	80 83       	st	Z, r24
    34be:	1f c0       	rjmp	.+62     	; 0x34fe <Lcd_SendData+0x244>
    34c0:	fe 01       	movw	r30, r28
    34c2:	e4 5b       	subi	r30, 0xB4	; 180
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	80 e9       	ldi	r24, 0x90	; 144
    34c8:	91 e0       	ldi	r25, 0x01	; 1
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34ce:	fe 01       	movw	r30, r28
    34d0:	e4 5b       	subi	r30, 0xB4	; 180
    34d2:	ff 4f       	sbci	r31, 0xFF	; 255
    34d4:	80 81       	ld	r24, Z
    34d6:	91 81       	ldd	r25, Z+1	; 0x01
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <Lcd_SendData+0x21e>
    34dc:	fe 01       	movw	r30, r28
    34de:	e4 5b       	subi	r30, 0xB4	; 180
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e6:	de 01       	movw	r26, r28
    34e8:	a2 5b       	subi	r26, 0xB2	; 178
    34ea:	bf 4f       	sbci	r27, 0xFF	; 255
    34ec:	fe 01       	movw	r30, r28
    34ee:	e2 5b       	subi	r30, 0xB2	; 178
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	11 96       	adiw	r26, 0x01	; 1
    34fa:	9c 93       	st	X, r25
    34fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fe:	fe 01       	movw	r30, r28
    3500:	e2 5b       	subi	r30, 0xB2	; 178
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 81       	ld	r24, Z
    3506:	91 81       	ldd	r25, Z+1	; 0x01
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	d1 f6       	brne	.-76     	; 0x34c0 <Lcd_SendData+0x206>
    350c:	4b c0       	rjmp	.+150    	; 0x35a4 <Lcd_SendData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350e:	8e 01       	movw	r16, r28
    3510:	02 5b       	subi	r16, 0xB2	; 178
    3512:	1f 4f       	sbci	r17, 0xFF	; 255
    3514:	fe 01       	movw	r30, r28
    3516:	e0 5b       	subi	r30, 0xB0	; 176
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	93 81       	ldd	r25, Z+3	; 0x03
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	f8 01       	movw	r30, r16
    352c:	91 83       	std	Z+1, r25	; 0x01
    352e:	80 83       	st	Z, r24
    3530:	de 01       	movw	r26, r28
    3532:	a6 5b       	subi	r26, 0xB6	; 182
    3534:	bf 4f       	sbci	r27, 0xFF	; 255
    3536:	fe 01       	movw	r30, r28
    3538:	e2 5b       	subi	r30, 0xB2	; 178
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	80 81       	ld	r24, Z
    353e:	91 81       	ldd	r25, Z+1	; 0x01
    3540:	11 96       	adiw	r26, 0x01	; 1
    3542:	9c 93       	st	X, r25
    3544:	8e 93       	st	-X, r24
    3546:	fe 01       	movw	r30, r28
    3548:	e6 5b       	subi	r30, 0xB6	; 182
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	f1 f7       	brne	.-4      	; 0x3550 <Lcd_SendData+0x296>
    3554:	fe 01       	movw	r30, r28
    3556:	e6 5b       	subi	r30, 0xB6	; 182
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	80 83       	st	Z, r24
    355e:	22 c0       	rjmp	.+68     	; 0x35a4 <Lcd_SendData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3560:	8e 01       	movw	r16, r28
    3562:	08 5a       	subi	r16, 0xA8	; 168
    3564:	1f 4f       	sbci	r17, 0xFF	; 255
    3566:	fe 01       	movw	r30, r28
    3568:	e7 5a       	subi	r30, 0xA7	; 167
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	f8 01       	movw	r30, r16
    357e:	80 83       	st	Z, r24
    3580:	de 01       	movw	r26, r28
    3582:	a7 5b       	subi	r26, 0xB7	; 183
    3584:	bf 4f       	sbci	r27, 0xFF	; 255
    3586:	fe 01       	movw	r30, r28
    3588:	e8 5a       	subi	r30, 0xA8	; 168
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	80 81       	ld	r24, Z
    358e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3590:	fe 01       	movw	r30, r28
    3592:	e7 5b       	subi	r30, 0xB7	; 183
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	8a 95       	dec	r24
    359a:	f1 f7       	brne	.-4      	; 0x3598 <Lcd_SendData+0x2de>
    359c:	fe 01       	movw	r30, r28
    359e:	e7 5b       	subi	r30, 0xB7	; 183
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    35a4:	82 e0       	ldi	r24, 0x02	; 2
    35a6:	60 e0       	ldi	r22, 0x00	; 0
    35a8:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    35ac:	fe 01       	movw	r30, r28
    35ae:	eb 5b       	subi	r30, 0xBB	; 187
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	a0 e8       	ldi	r26, 0x80	; 128
    35b8:	bf e3       	ldi	r27, 0x3F	; 63
    35ba:	80 83       	st	Z, r24
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	a2 83       	std	Z+2, r26	; 0x02
    35c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35c2:	8e 01       	movw	r16, r28
    35c4:	0f 5b       	subi	r16, 0xBF	; 191
    35c6:	1f 4f       	sbci	r17, 0xFF	; 255
    35c8:	fe 01       	movw	r30, r28
    35ca:	eb 5b       	subi	r30, 0xBB	; 187
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	60 81       	ld	r22, Z
    35d0:	71 81       	ldd	r23, Z+1	; 0x01
    35d2:	82 81       	ldd	r24, Z+2	; 0x02
    35d4:	93 81       	ldd	r25, Z+3	; 0x03
    35d6:	2b ea       	ldi	r18, 0xAB	; 171
    35d8:	3a ea       	ldi	r19, 0xAA	; 170
    35da:	4a ea       	ldi	r20, 0xAA	; 170
    35dc:	50 e4       	ldi	r21, 0x40	; 64
    35de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	f8 01       	movw	r30, r16
    35e8:	80 83       	st	Z, r24
    35ea:	91 83       	std	Z+1, r25	; 0x01
    35ec:	a2 83       	std	Z+2, r26	; 0x02
    35ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35f0:	fe 01       	movw	r30, r28
    35f2:	ef 5b       	subi	r30, 0xBF	; 191
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	60 81       	ld	r22, Z
    35f8:	71 81       	ldd	r23, Z+1	; 0x01
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e8       	ldi	r20, 0x80	; 128
    3604:	5f e3       	ldi	r21, 0x3F	; 63
    3606:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    360a:	88 23       	and	r24, r24
    360c:	34 f4       	brge	.+12     	; 0x361a <Lcd_SendData+0x360>
		__ticks = 1;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	fe 01       	movw	r30, r28
    3612:	e0 5c       	subi	r30, 0xC0	; 192
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	80 83       	st	Z, r24
    3618:	9d c0       	rjmp	.+314    	; 0x3754 <Lcd_SendData+0x49a>
	else if (__tmp > 255)
    361a:	fe 01       	movw	r30, r28
    361c:	ef 5b       	subi	r30, 0xBF	; 191
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	4f e7       	ldi	r20, 0x7F	; 127
    362e:	53 e4       	ldi	r21, 0x43	; 67
    3630:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3634:	18 16       	cp	r1, r24
    3636:	0c f0       	brlt	.+2      	; 0x363a <Lcd_SendData+0x380>
    3638:	7e c0       	rjmp	.+252    	; 0x3736 <Lcd_SendData+0x47c>
	{
		_delay_ms(__us / 1000.0);
    363a:	fe 01       	movw	r30, r28
    363c:	eb 5b       	subi	r30, 0xBB	; 187
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	60 81       	ld	r22, Z
    3642:	71 81       	ldd	r23, Z+1	; 0x01
    3644:	82 81       	ldd	r24, Z+2	; 0x02
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	4a e7       	ldi	r20, 0x7A	; 122
    364e:	54 e4       	ldi	r21, 0x44	; 68
    3650:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	8c af       	std	Y+60, r24	; 0x3c
    365a:	9d af       	std	Y+61, r25	; 0x3d
    365c:	ae af       	std	Y+62, r26	; 0x3e
    365e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3660:	6c ad       	ldd	r22, Y+60	; 0x3c
    3662:	7d ad       	ldd	r23, Y+61	; 0x3d
    3664:	8e ad       	ldd	r24, Y+62	; 0x3e
    3666:	9f ad       	ldd	r25, Y+63	; 0x3f
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	4a e7       	ldi	r20, 0x7A	; 122
    366e:	55 e4       	ldi	r21, 0x45	; 69
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	88 af       	std	Y+56, r24	; 0x38
    367a:	99 af       	std	Y+57, r25	; 0x39
    367c:	aa af       	std	Y+58, r26	; 0x3a
    367e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3680:	68 ad       	ldd	r22, Y+56	; 0x38
    3682:	79 ad       	ldd	r23, Y+57	; 0x39
    3684:	8a ad       	ldd	r24, Y+58	; 0x3a
    3686:	9b ad       	ldd	r25, Y+59	; 0x3b
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e8       	ldi	r20, 0x80	; 128
    368e:	5f e3       	ldi	r21, 0x3F	; 63
    3690:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3694:	88 23       	and	r24, r24
    3696:	2c f4       	brge	.+10     	; 0x36a2 <Lcd_SendData+0x3e8>
		__ticks = 1;
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9f ab       	std	Y+55, r25	; 0x37
    369e:	8e ab       	std	Y+54, r24	; 0x36
    36a0:	3f c0       	rjmp	.+126    	; 0x3720 <Lcd_SendData+0x466>
	else if (__tmp > 65535)
    36a2:	68 ad       	ldd	r22, Y+56	; 0x38
    36a4:	79 ad       	ldd	r23, Y+57	; 0x39
    36a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    36a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	3f ef       	ldi	r19, 0xFF	; 255
    36ae:	4f e7       	ldi	r20, 0x7F	; 127
    36b0:	57 e4       	ldi	r21, 0x47	; 71
    36b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36b6:	18 16       	cp	r1, r24
    36b8:	4c f5       	brge	.+82     	; 0x370c <Lcd_SendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    36bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    36be:	8e ad       	ldd	r24, Y+62	; 0x3e
    36c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e2       	ldi	r20, 0x20	; 32
    36c8:	51 e4       	ldi	r21, 0x41	; 65
    36ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	bc 01       	movw	r22, r24
    36d4:	cd 01       	movw	r24, r26
    36d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	9f ab       	std	Y+55, r25	; 0x37
    36e0:	8e ab       	std	Y+54, r24	; 0x36
    36e2:	0f c0       	rjmp	.+30     	; 0x3702 <Lcd_SendData+0x448>
    36e4:	80 e9       	ldi	r24, 0x90	; 144
    36e6:	91 e0       	ldi	r25, 0x01	; 1
    36e8:	9d ab       	std	Y+53, r25	; 0x35
    36ea:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36ec:	8c a9       	ldd	r24, Y+52	; 0x34
    36ee:	9d a9       	ldd	r25, Y+53	; 0x35
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <Lcd_SendData+0x436>
    36f4:	9d ab       	std	Y+53, r25	; 0x35
    36f6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f8:	8e a9       	ldd	r24, Y+54	; 0x36
    36fa:	9f a9       	ldd	r25, Y+55	; 0x37
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	9f ab       	std	Y+55, r25	; 0x37
    3700:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3702:	8e a9       	ldd	r24, Y+54	; 0x36
    3704:	9f a9       	ldd	r25, Y+55	; 0x37
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	69 f7       	brne	.-38     	; 0x36e4 <Lcd_SendData+0x42a>
    370a:	2d c0       	rjmp	.+90     	; 0x3766 <Lcd_SendData+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370c:	68 ad       	ldd	r22, Y+56	; 0x38
    370e:	79 ad       	ldd	r23, Y+57	; 0x39
    3710:	8a ad       	ldd	r24, Y+58	; 0x3a
    3712:	9b ad       	ldd	r25, Y+59	; 0x3b
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	9f ab       	std	Y+55, r25	; 0x37
    371e:	8e ab       	std	Y+54, r24	; 0x36
    3720:	8e a9       	ldd	r24, Y+54	; 0x36
    3722:	9f a9       	ldd	r25, Y+55	; 0x37
    3724:	9b ab       	std	Y+51, r25	; 0x33
    3726:	8a ab       	std	Y+50, r24	; 0x32
    3728:	8a a9       	ldd	r24, Y+50	; 0x32
    372a:	9b a9       	ldd	r25, Y+51	; 0x33
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	f1 f7       	brne	.-4      	; 0x372c <Lcd_SendData+0x472>
    3730:	9b ab       	std	Y+51, r25	; 0x33
    3732:	8a ab       	std	Y+50, r24	; 0x32
    3734:	18 c0       	rjmp	.+48     	; 0x3766 <Lcd_SendData+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3736:	fe 01       	movw	r30, r28
    3738:	ef 5b       	subi	r30, 0xBF	; 191
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	60 81       	ld	r22, Z
    373e:	71 81       	ldd	r23, Z+1	; 0x01
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	93 81       	ldd	r25, Z+3	; 0x03
    3744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	fe 01       	movw	r30, r28
    374e:	e0 5c       	subi	r30, 0xC0	; 192
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	80 83       	st	Z, r24
    3754:	fe 01       	movw	r30, r28
    3756:	e0 5c       	subi	r30, 0xC0	; 192
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	80 81       	ld	r24, Z
    375c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    375e:	89 a9       	ldd	r24, Y+49	; 0x31
    3760:	8a 95       	dec	r24
    3762:	f1 f7       	brne	.-4      	; 0x3760 <Lcd_SendData+0x4a6>
    3764:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(data, 0));
    3766:	fe 01       	movw	r30, r28
    3768:	ef 59       	subi	r30, 0x9F	; 159
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 81       	ld	r24, Z
    376e:	98 2f       	mov	r25, r24
    3770:	91 70       	andi	r25, 0x01	; 1
    3772:	88 e0       	ldi	r24, 0x08	; 8
    3774:	69 2f       	mov	r22, r25
    3776:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 1));
    377a:	fe 01       	movw	r30, r28
    377c:	ef 59       	subi	r30, 0x9F	; 159
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 81       	ld	r24, Z
    3782:	86 95       	lsr	r24
    3784:	98 2f       	mov	r25, r24
    3786:	91 70       	andi	r25, 0x01	; 1
    3788:	89 e0       	ldi	r24, 0x09	; 9
    378a:	69 2f       	mov	r22, r25
    378c:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 2));
    3790:	fe 01       	movw	r30, r28
    3792:	ef 59       	subi	r30, 0x9F	; 159
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	80 81       	ld	r24, Z
    3798:	86 95       	lsr	r24
    379a:	86 95       	lsr	r24
    379c:	98 2f       	mov	r25, r24
    379e:	91 70       	andi	r25, 0x01	; 1
    37a0:	8a e0       	ldi	r24, 0x0A	; 10
    37a2:	69 2f       	mov	r22, r25
    37a4:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 3));
    37a8:	fe 01       	movw	r30, r28
    37aa:	ef 59       	subi	r30, 0x9F	; 159
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	86 95       	lsr	r24
    37b2:	86 95       	lsr	r24
    37b4:	86 95       	lsr	r24
    37b6:	98 2f       	mov	r25, r24
    37b8:	91 70       	andi	r25, 0x01	; 1
    37ba:	8c e0       	ldi	r24, 0x0C	; 12
    37bc:	69 2f       	mov	r22, r25
    37be:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    37c2:	82 e0       	ldi	r24, 0x02	; 2
    37c4:	61 e0       	ldi	r22, 0x01	; 1
    37c6:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	a0 e8       	ldi	r26, 0x80	; 128
    37d0:	bf e3       	ldi	r27, 0x3F	; 63
    37d2:	8d a7       	std	Y+45, r24	; 0x2d
    37d4:	9e a7       	std	Y+46, r25	; 0x2e
    37d6:	af a7       	std	Y+47, r26	; 0x2f
    37d8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37da:	6d a5       	ldd	r22, Y+45	; 0x2d
    37dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    37de:	8f a5       	ldd	r24, Y+47	; 0x2f
    37e0:	98 a9       	ldd	r25, Y+48	; 0x30
    37e2:	2b ea       	ldi	r18, 0xAB	; 171
    37e4:	3a ea       	ldi	r19, 0xAA	; 170
    37e6:	4a ea       	ldi	r20, 0xAA	; 170
    37e8:	50 e4       	ldi	r21, 0x40	; 64
    37ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	89 a7       	std	Y+41, r24	; 0x29
    37f4:	9a a7       	std	Y+42, r25	; 0x2a
    37f6:	ab a7       	std	Y+43, r26	; 0x2b
    37f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    37fa:	69 a5       	ldd	r22, Y+41	; 0x29
    37fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    37fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3800:	9c a5       	ldd	r25, Y+44	; 0x2c
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	40 e8       	ldi	r20, 0x80	; 128
    3808:	5f e3       	ldi	r21, 0x3F	; 63
    380a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    380e:	88 23       	and	r24, r24
    3810:	1c f4       	brge	.+6      	; 0x3818 <Lcd_SendData+0x55e>
		__ticks = 1;
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	88 a7       	std	Y+40, r24	; 0x28
    3816:	91 c0       	rjmp	.+290    	; 0x393a <Lcd_SendData+0x680>
	else if (__tmp > 255)
    3818:	69 a5       	ldd	r22, Y+41	; 0x29
    381a:	7a a5       	ldd	r23, Y+42	; 0x2a
    381c:	8b a5       	ldd	r24, Y+43	; 0x2b
    381e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	53 e4       	ldi	r21, 0x43	; 67
    3828:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	0c f0       	brlt	.+2      	; 0x3832 <Lcd_SendData+0x578>
    3830:	7b c0       	rjmp	.+246    	; 0x3928 <Lcd_SendData+0x66e>
	{
		_delay_ms(__us / 1000.0);
    3832:	6d a5       	ldd	r22, Y+45	; 0x2d
    3834:	7e a5       	ldd	r23, Y+46	; 0x2e
    3836:	8f a5       	ldd	r24, Y+47	; 0x2f
    3838:	98 a9       	ldd	r25, Y+48	; 0x30
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	4a e7       	ldi	r20, 0x7A	; 122
    3840:	54 e4       	ldi	r21, 0x44	; 68
    3842:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	8c a3       	std	Y+36, r24	; 0x24
    384c:	9d a3       	std	Y+37, r25	; 0x25
    384e:	ae a3       	std	Y+38, r26	; 0x26
    3850:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3852:	6c a1       	ldd	r22, Y+36	; 0x24
    3854:	7d a1       	ldd	r23, Y+37	; 0x25
    3856:	8e a1       	ldd	r24, Y+38	; 0x26
    3858:	9f a1       	ldd	r25, Y+39	; 0x27
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	4a e7       	ldi	r20, 0x7A	; 122
    3860:	55 e4       	ldi	r21, 0x45	; 69
    3862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	88 a3       	std	Y+32, r24	; 0x20
    386c:	99 a3       	std	Y+33, r25	; 0x21
    386e:	aa a3       	std	Y+34, r26	; 0x22
    3870:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3872:	68 a1       	ldd	r22, Y+32	; 0x20
    3874:	79 a1       	ldd	r23, Y+33	; 0x21
    3876:	8a a1       	ldd	r24, Y+34	; 0x22
    3878:	9b a1       	ldd	r25, Y+35	; 0x23
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	40 e8       	ldi	r20, 0x80	; 128
    3880:	5f e3       	ldi	r21, 0x3F	; 63
    3882:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3886:	88 23       	and	r24, r24
    3888:	2c f4       	brge	.+10     	; 0x3894 <Lcd_SendData+0x5da>
		__ticks = 1;
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	9f 8f       	std	Y+31, r25	; 0x1f
    3890:	8e 8f       	std	Y+30, r24	; 0x1e
    3892:	3f c0       	rjmp	.+126    	; 0x3912 <Lcd_SendData+0x658>
	else if (__tmp > 65535)
    3894:	68 a1       	ldd	r22, Y+32	; 0x20
    3896:	79 a1       	ldd	r23, Y+33	; 0x21
    3898:	8a a1       	ldd	r24, Y+34	; 0x22
    389a:	9b a1       	ldd	r25, Y+35	; 0x23
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	3f ef       	ldi	r19, 0xFF	; 255
    38a0:	4f e7       	ldi	r20, 0x7F	; 127
    38a2:	57 e4       	ldi	r21, 0x47	; 71
    38a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    38a8:	18 16       	cp	r1, r24
    38aa:	4c f5       	brge	.+82     	; 0x38fe <Lcd_SendData+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ac:	6c a1       	ldd	r22, Y+36	; 0x24
    38ae:	7d a1       	ldd	r23, Y+37	; 0x25
    38b0:	8e a1       	ldd	r24, Y+38	; 0x26
    38b2:	9f a1       	ldd	r25, Y+39	; 0x27
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e2       	ldi	r20, 0x20	; 32
    38ba:	51 e4       	ldi	r21, 0x41	; 65
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	bc 01       	movw	r22, r24
    38c6:	cd 01       	movw	r24, r26
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	9f 8f       	std	Y+31, r25	; 0x1f
    38d2:	8e 8f       	std	Y+30, r24	; 0x1e
    38d4:	0f c0       	rjmp	.+30     	; 0x38f4 <Lcd_SendData+0x63a>
    38d6:	80 e9       	ldi	r24, 0x90	; 144
    38d8:	91 e0       	ldi	r25, 0x01	; 1
    38da:	9d 8f       	std	Y+29, r25	; 0x1d
    38dc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38e2:	01 97       	sbiw	r24, 0x01	; 1
    38e4:	f1 f7       	brne	.-4      	; 0x38e2 <Lcd_SendData+0x628>
    38e6:	9d 8f       	std	Y+29, r25	; 0x1d
    38e8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	9f 8f       	std	Y+31, r25	; 0x1f
    38f2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	69 f7       	brne	.-38     	; 0x38d6 <Lcd_SendData+0x61c>
    38fc:	24 c0       	rjmp	.+72     	; 0x3946 <Lcd_SendData+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fe:	68 a1       	ldd	r22, Y+32	; 0x20
    3900:	79 a1       	ldd	r23, Y+33	; 0x21
    3902:	8a a1       	ldd	r24, Y+34	; 0x22
    3904:	9b a1       	ldd	r25, Y+35	; 0x23
    3906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	9f 8f       	std	Y+31, r25	; 0x1f
    3910:	8e 8f       	std	Y+30, r24	; 0x1e
    3912:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3914:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3916:	9b 8f       	std	Y+27, r25	; 0x1b
    3918:	8a 8f       	std	Y+26, r24	; 0x1a
    391a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    391c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <Lcd_SendData+0x664>
    3922:	9b 8f       	std	Y+27, r25	; 0x1b
    3924:	8a 8f       	std	Y+26, r24	; 0x1a
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <Lcd_SendData+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3928:	69 a5       	ldd	r22, Y+41	; 0x29
    392a:	7a a5       	ldd	r23, Y+42	; 0x2a
    392c:	8b a5       	ldd	r24, Y+43	; 0x2b
    392e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	88 a7       	std	Y+40, r24	; 0x28
    393a:	88 a5       	ldd	r24, Y+40	; 0x28
    393c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    393e:	89 8d       	ldd	r24, Y+25	; 0x19
    3940:	8a 95       	dec	r24
    3942:	f1 f7       	brne	.-4      	; 0x3940 <Lcd_SendData+0x686>
    3944:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3946:	82 e0       	ldi	r24, 0x02	; 2
    3948:	60 e0       	ldi	r22, 0x00	; 0
    394a:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	a0 e2       	ldi	r26, 0x20	; 32
    3954:	b1 e4       	ldi	r27, 0x41	; 65
    3956:	8d 8b       	std	Y+21, r24	; 0x15
    3958:	9e 8b       	std	Y+22, r25	; 0x16
    395a:	af 8b       	std	Y+23, r26	; 0x17
    395c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    395e:	6d 89       	ldd	r22, Y+21	; 0x15
    3960:	7e 89       	ldd	r23, Y+22	; 0x16
    3962:	8f 89       	ldd	r24, Y+23	; 0x17
    3964:	98 8d       	ldd	r25, Y+24	; 0x18
    3966:	2b ea       	ldi	r18, 0xAB	; 171
    3968:	3a ea       	ldi	r19, 0xAA	; 170
    396a:	4a ea       	ldi	r20, 0xAA	; 170
    396c:	50 e4       	ldi	r21, 0x40	; 64
    396e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	89 8b       	std	Y+17, r24	; 0x11
    3978:	9a 8b       	std	Y+18, r25	; 0x12
    397a:	ab 8b       	std	Y+19, r26	; 0x13
    397c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    397e:	69 89       	ldd	r22, Y+17	; 0x11
    3980:	7a 89       	ldd	r23, Y+18	; 0x12
    3982:	8b 89       	ldd	r24, Y+19	; 0x13
    3984:	9c 89       	ldd	r25, Y+20	; 0x14
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 e8       	ldi	r20, 0x80	; 128
    398c:	5f e3       	ldi	r21, 0x3F	; 63
    398e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3992:	88 23       	and	r24, r24
    3994:	1c f4       	brge	.+6      	; 0x399c <Lcd_SendData+0x6e2>
		__ticks = 1;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	88 8b       	std	Y+16, r24	; 0x10
    399a:	91 c0       	rjmp	.+290    	; 0x3abe <Lcd_SendData+0x804>
	else if (__tmp > 255)
    399c:	69 89       	ldd	r22, Y+17	; 0x11
    399e:	7a 89       	ldd	r23, Y+18	; 0x12
    39a0:	8b 89       	ldd	r24, Y+19	; 0x13
    39a2:	9c 89       	ldd	r25, Y+20	; 0x14
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	4f e7       	ldi	r20, 0x7F	; 127
    39aa:	53 e4       	ldi	r21, 0x43	; 67
    39ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39b0:	18 16       	cp	r1, r24
    39b2:	0c f0       	brlt	.+2      	; 0x39b6 <Lcd_SendData+0x6fc>
    39b4:	7b c0       	rjmp	.+246    	; 0x3aac <Lcd_SendData+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    39b6:	6d 89       	ldd	r22, Y+21	; 0x15
    39b8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ba:	8f 89       	ldd	r24, Y+23	; 0x17
    39bc:	98 8d       	ldd	r25, Y+24	; 0x18
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	4a e7       	ldi	r20, 0x7A	; 122
    39c4:	54 e4       	ldi	r21, 0x44	; 68
    39c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	8c 87       	std	Y+12, r24	; 0x0c
    39d0:	9d 87       	std	Y+13, r25	; 0x0d
    39d2:	ae 87       	std	Y+14, r26	; 0x0e
    39d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    39d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    39da:	8e 85       	ldd	r24, Y+14	; 0x0e
    39dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	4a e7       	ldi	r20, 0x7A	; 122
    39e4:	55 e4       	ldi	r21, 0x45	; 69
    39e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	88 87       	std	Y+8, r24	; 0x08
    39f0:	99 87       	std	Y+9, r25	; 0x09
    39f2:	aa 87       	std	Y+10, r26	; 0x0a
    39f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    39f6:	68 85       	ldd	r22, Y+8	; 0x08
    39f8:	79 85       	ldd	r23, Y+9	; 0x09
    39fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    39fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e8       	ldi	r20, 0x80	; 128
    3a04:	5f e3       	ldi	r21, 0x3F	; 63
    3a06:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a0a:	88 23       	and	r24, r24
    3a0c:	2c f4       	brge	.+10     	; 0x3a18 <Lcd_SendData+0x75e>
		__ticks = 1;
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	9f 83       	std	Y+7, r25	; 0x07
    3a14:	8e 83       	std	Y+6, r24	; 0x06
    3a16:	3f c0       	rjmp	.+126    	; 0x3a96 <Lcd_SendData+0x7dc>
	else if (__tmp > 65535)
    3a18:	68 85       	ldd	r22, Y+8	; 0x08
    3a1a:	79 85       	ldd	r23, Y+9	; 0x09
    3a1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	3f ef       	ldi	r19, 0xFF	; 255
    3a24:	4f e7       	ldi	r20, 0x7F	; 127
    3a26:	57 e4       	ldi	r21, 0x47	; 71
    3a28:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a2c:	18 16       	cp	r1, r24
    3a2e:	4c f5       	brge	.+82     	; 0x3a82 <Lcd_SendData+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a30:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a32:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a34:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a36:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e2       	ldi	r20, 0x20	; 32
    3a3e:	51 e4       	ldi	r21, 0x41	; 65
    3a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	bc 01       	movw	r22, r24
    3a4a:	cd 01       	movw	r24, r26
    3a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9f 83       	std	Y+7, r25	; 0x07
    3a56:	8e 83       	std	Y+6, r24	; 0x06
    3a58:	0f c0       	rjmp	.+30     	; 0x3a78 <Lcd_SendData+0x7be>
    3a5a:	80 e9       	ldi	r24, 0x90	; 144
    3a5c:	91 e0       	ldi	r25, 0x01	; 1
    3a5e:	9d 83       	std	Y+5, r25	; 0x05
    3a60:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a62:	8c 81       	ldd	r24, Y+4	; 0x04
    3a64:	9d 81       	ldd	r25, Y+5	; 0x05
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <Lcd_SendData+0x7ac>
    3a6a:	9d 83       	std	Y+5, r25	; 0x05
    3a6c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a70:	9f 81       	ldd	r25, Y+7	; 0x07
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	9f 83       	std	Y+7, r25	; 0x07
    3a76:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a78:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	69 f7       	brne	.-38     	; 0x3a5a <Lcd_SendData+0x7a0>
    3a80:	24 c0       	rjmp	.+72     	; 0x3aca <Lcd_SendData+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a82:	68 85       	ldd	r22, Y+8	; 0x08
    3a84:	79 85       	ldd	r23, Y+9	; 0x09
    3a86:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a88:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	9f 83       	std	Y+7, r25	; 0x07
    3a94:	8e 83       	std	Y+6, r24	; 0x06
    3a96:	8e 81       	ldd	r24, Y+6	; 0x06
    3a98:	9f 81       	ldd	r25, Y+7	; 0x07
    3a9a:	9b 83       	std	Y+3, r25	; 0x03
    3a9c:	8a 83       	std	Y+2, r24	; 0x02
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	f1 f7       	brne	.-4      	; 0x3aa2 <Lcd_SendData+0x7e8>
    3aa6:	9b 83       	std	Y+3, r25	; 0x03
    3aa8:	8a 83       	std	Y+2, r24	; 0x02
    3aaa:	0f c0       	rjmp	.+30     	; 0x3aca <Lcd_SendData+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3aac:	69 89       	ldd	r22, Y+17	; 0x11
    3aae:	7a 89       	ldd	r23, Y+18	; 0x12
    3ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	88 8b       	std	Y+16, r24	; 0x10
    3abe:	88 89       	ldd	r24, Y+16	; 0x10
    3ac0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	8a 95       	dec	r24
    3ac6:	f1 f7       	brne	.-4      	; 0x3ac4 <Lcd_SendData+0x80a>
    3ac8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);  // Wait for the data to be displayed
}
    3aca:	cf 59       	subi	r28, 0x9F	; 159
    3acc:	df 4f       	sbci	r29, 0xFF	; 255
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	cf 91       	pop	r28
    3ada:	df 91       	pop	r29
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	08 95       	ret

00003ae2 <Lcd_GoTo>:

void Lcd_GoTo(u8 row,u8 col){
    3ae2:	df 93       	push	r29
    3ae4:	cf 93       	push	r28
    3ae6:	00 d0       	rcall	.+0      	; 0x3ae8 <Lcd_GoTo+0x6>
    3ae8:	00 d0       	rcall	.+0      	; 0x3aea <Lcd_GoTo+0x8>
    3aea:	cd b7       	in	r28, 0x3d	; 61
    3aec:	de b7       	in	r29, 0x3e	; 62
    3aee:	89 83       	std	Y+1, r24	; 0x01
    3af0:	6a 83       	std	Y+2, r22	; 0x02
	col--;
    3af2:	8a 81       	ldd	r24, Y+2	; 0x02
    3af4:	81 50       	subi	r24, 0x01	; 1
    3af6:	8a 83       	std	Y+2, r24	; 0x02
	switch (row){
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	28 2f       	mov	r18, r24
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	3c 83       	std	Y+4, r19	; 0x04
    3b00:	2b 83       	std	Y+3, r18	; 0x03
    3b02:	8b 81       	ldd	r24, Y+3	; 0x03
    3b04:	9c 81       	ldd	r25, Y+4	; 0x04
    3b06:	82 30       	cpi	r24, 0x02	; 2
    3b08:	91 05       	cpc	r25, r1
    3b0a:	d9 f0       	breq	.+54     	; 0x3b42 <Lcd_GoTo+0x60>
    3b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    3b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    3b10:	23 30       	cpi	r18, 0x03	; 3
    3b12:	31 05       	cpc	r19, r1
    3b14:	34 f4       	brge	.+12     	; 0x3b22 <Lcd_GoTo+0x40>
    3b16:	8b 81       	ldd	r24, Y+3	; 0x03
    3b18:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1a:	81 30       	cpi	r24, 0x01	; 1
    3b1c:	91 05       	cpc	r25, r1
    3b1e:	61 f0       	breq	.+24     	; 0x3b38 <Lcd_GoTo+0x56>
    3b20:	1e c0       	rjmp	.+60     	; 0x3b5e <Lcd_GoTo+0x7c>
    3b22:	2b 81       	ldd	r18, Y+3	; 0x03
    3b24:	3c 81       	ldd	r19, Y+4	; 0x04
    3b26:	23 30       	cpi	r18, 0x03	; 3
    3b28:	31 05       	cpc	r19, r1
    3b2a:	81 f0       	breq	.+32     	; 0x3b4c <Lcd_GoTo+0x6a>
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	84 30       	cpi	r24, 0x04	; 4
    3b32:	91 05       	cpc	r25, r1
    3b34:	81 f0       	breq	.+32     	; 0x3b56 <Lcd_GoTo+0x74>
    3b36:	13 c0       	rjmp	.+38     	; 0x3b5e <Lcd_GoTo+0x7c>
	        case ROW1:
	        	Lcd_SendCMD(0x80+col);
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	80 58       	subi	r24, 0x80	; 128
    3b3c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
    3b40:	0e c0       	rjmp	.+28     	; 0x3b5e <Lcd_GoTo+0x7c>
	        break;
	        case ROW2:
	        	Lcd_SendCMD(0xC0+col);
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	80 54       	subi	r24, 0x40	; 64
    3b46:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
    3b4a:	09 c0       	rjmp	.+18     	; 0x3b5e <Lcd_GoTo+0x7c>
	        break;
	        case ROW3:
	        	Lcd_SendCMD(0x94+col);
    3b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4e:	8c 56       	subi	r24, 0x6C	; 108
    3b50:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
    3b54:	04 c0       	rjmp	.+8      	; 0x3b5e <Lcd_GoTo+0x7c>
	        break;
	        case ROW4:
	        	Lcd_SendCMD(0xD4+col);
    3b56:	8a 81       	ldd	r24, Y+2	; 0x02
    3b58:	8c 52       	subi	r24, 0x2C	; 44
    3b5a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
	        break;
	        default:break;

	    }
}
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <Lcd_PutChar>:

void Lcd_PutChar (u8 character)
{
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	0f 92       	push	r0
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	89 83       	std	Y+1, r24	; 0x01
	Lcd_SendData(character);
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Lcd_SendData>
}
    3b7e:	0f 90       	pop	r0
    3b80:	cf 91       	pop	r28
    3b82:	df 91       	pop	r29
    3b84:	08 95       	ret

00003b86 <Lcd_PutInt>:

void Lcd_PutInt(u32 Number)
{
    3b86:	df 93       	push	r29
    3b88:	cf 93       	push	r28
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <Lcd_PutInt+0x6>
    3b8c:	00 d0       	rcall	.+0      	; 0x3b8e <Lcd_PutInt+0x8>
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
    3b92:	69 83       	std	Y+1, r22	; 0x01
    3b94:	7a 83       	std	Y+2, r23	; 0x02
    3b96:	8b 83       	std	Y+3, r24	; 0x03
    3b98:	9c 83       	std	Y+4, r25	; 0x04

	if(Number == 0 )
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9e:	ab 81       	ldd	r26, Y+3	; 0x03
    3ba0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	a1 05       	cpc	r26, r1
    3ba6:	b1 05       	cpc	r27, r1
    3ba8:	19 f1       	breq	.+70     	; 0x3bf0 <Lcd_PutInt+0x6a>
		return ;
	else
		Lcd_PutInt(Number/10);
    3baa:	89 81       	ldd	r24, Y+1	; 0x01
    3bac:	9a 81       	ldd	r25, Y+2	; 0x02
    3bae:	ab 81       	ldd	r26, Y+3	; 0x03
    3bb0:	bc 81       	ldd	r27, Y+4	; 0x04
    3bb2:	2a e0       	ldi	r18, 0x0A	; 10
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	bc 01       	movw	r22, r24
    3bbc:	cd 01       	movw	r24, r26
    3bbe:	0e 94 df 24 	call	0x49be	; 0x49be <__udivmodsi4>
    3bc2:	da 01       	movw	r26, r20
    3bc4:	c9 01       	movw	r24, r18
    3bc6:	bc 01       	movw	r22, r24
    3bc8:	cd 01       	movw	r24, r26
    3bca:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <Lcd_PutInt>
	///if(Number<255)
	 Lcd_SendData((Number%10)+0x30);
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd2:	ab 81       	ldd	r26, Y+3	; 0x03
    3bd4:	bc 81       	ldd	r27, Y+4	; 0x04
    3bd6:	2a e0       	ldi	r18, 0x0A	; 10
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	40 e0       	ldi	r20, 0x00	; 0
    3bdc:	50 e0       	ldi	r21, 0x00	; 0
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	0e 94 df 24 	call	0x49be	; 0x49be <__udivmodsi4>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	80 5d       	subi	r24, 0xD0	; 208
    3bec:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Lcd_SendData>
}
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	cf 91       	pop	r28
    3bfa:	df 91       	pop	r29
    3bfc:	08 95       	ret

00003bfe <Lcd_Init>:

void Lcd_Init(void) {
    3bfe:	0f 93       	push	r16
    3c00:	1f 93       	push	r17
    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
    3c0a:	c6 54       	subi	r28, 0x46	; 70
    3c0c:	d0 40       	sbci	r29, 0x00	; 0
    3c0e:	0f b6       	in	r0, 0x3f	; 63
    3c10:	f8 94       	cli
    3c12:	de bf       	out	0x3e, r29	; 62
    3c14:	0f be       	out	0x3f, r0	; 63
    3c16:	cd bf       	out	0x3d, r28	; 61
    3c18:	fe 01       	movw	r30, r28
    3c1a:	ed 5b       	subi	r30, 0xBD	; 189
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	a8 e4       	ldi	r26, 0x48	; 72
    3c24:	b2 e4       	ldi	r27, 0x42	; 66
    3c26:	80 83       	st	Z, r24
    3c28:	91 83       	std	Z+1, r25	; 0x01
    3c2a:	a2 83       	std	Z+2, r26	; 0x02
    3c2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2e:	8e 01       	movw	r16, r28
    3c30:	01 5c       	subi	r16, 0xC1	; 193
    3c32:	1f 4f       	sbci	r17, 0xFF	; 255
    3c34:	fe 01       	movw	r30, r28
    3c36:	ed 5b       	subi	r30, 0xBD	; 189
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	60 81       	ld	r22, Z
    3c3c:	71 81       	ldd	r23, Z+1	; 0x01
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	4a e7       	ldi	r20, 0x7A	; 122
    3c48:	55 e4       	ldi	r21, 0x45	; 69
    3c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	f8 01       	movw	r30, r16
    3c54:	80 83       	st	Z, r24
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	a2 83       	std	Z+2, r26	; 0x02
    3c5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	ff 96       	adiw	r30, 0x3f	; 63
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	40 e8       	ldi	r20, 0x80	; 128
    3c6e:	5f e3       	ldi	r21, 0x3F	; 63
    3c70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c74:	88 23       	and	r24, r24
    3c76:	2c f4       	brge	.+10     	; 0x3c82 <Lcd_Init+0x84>
		__ticks = 1;
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	9e af       	std	Y+62, r25	; 0x3e
    3c7e:	8d af       	std	Y+61, r24	; 0x3d
    3c80:	46 c0       	rjmp	.+140    	; 0x3d0e <Lcd_Init+0x110>
	else if (__tmp > 65535)
    3c82:	fe 01       	movw	r30, r28
    3c84:	ff 96       	adiw	r30, 0x3f	; 63
    3c86:	60 81       	ld	r22, Z
    3c88:	71 81       	ldd	r23, Z+1	; 0x01
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	3f ef       	ldi	r19, 0xFF	; 255
    3c92:	4f e7       	ldi	r20, 0x7F	; 127
    3c94:	57 e4       	ldi	r21, 0x47	; 71
    3c96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c9a:	18 16       	cp	r1, r24
    3c9c:	64 f5       	brge	.+88     	; 0x3cf6 <Lcd_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	ed 5b       	subi	r30, 0xBD	; 189
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	60 81       	ld	r22, Z
    3ca6:	71 81       	ldd	r23, Z+1	; 0x01
    3ca8:	82 81       	ldd	r24, Z+2	; 0x02
    3caa:	93 81       	ldd	r25, Z+3	; 0x03
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e2       	ldi	r20, 0x20	; 32
    3cb2:	51 e4       	ldi	r21, 0x41	; 65
    3cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	bc 01       	movw	r22, r24
    3cbe:	cd 01       	movw	r24, r26
    3cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	9e af       	std	Y+62, r25	; 0x3e
    3cca:	8d af       	std	Y+61, r24	; 0x3d
    3ccc:	0f c0       	rjmp	.+30     	; 0x3cec <Lcd_Init+0xee>
    3cce:	80 e9       	ldi	r24, 0x90	; 144
    3cd0:	91 e0       	ldi	r25, 0x01	; 1
    3cd2:	9c af       	std	Y+60, r25	; 0x3c
    3cd4:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cd6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cd8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3cda:	01 97       	sbiw	r24, 0x01	; 1
    3cdc:	f1 f7       	brne	.-4      	; 0x3cda <Lcd_Init+0xdc>
    3cde:	9c af       	std	Y+60, r25	; 0x3c
    3ce0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ce2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ce4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ce6:	01 97       	sbiw	r24, 0x01	; 1
    3ce8:	9e af       	std	Y+62, r25	; 0x3e
    3cea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cec:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cee:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cf0:	00 97       	sbiw	r24, 0x00	; 0
    3cf2:	69 f7       	brne	.-38     	; 0x3cce <Lcd_Init+0xd0>
    3cf4:	16 c0       	rjmp	.+44     	; 0x3d22 <Lcd_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	ff 96       	adiw	r30, 0x3f	; 63
    3cfa:	60 81       	ld	r22, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	9e af       	std	Y+62, r25	; 0x3e
    3d0c:	8d af       	std	Y+61, r24	; 0x3d
    3d0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d10:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d12:	9a af       	std	Y+58, r25	; 0x3a
    3d14:	89 af       	std	Y+57, r24	; 0x39
    3d16:	89 ad       	ldd	r24, Y+57	; 0x39
    3d18:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	f1 f7       	brne	.-4      	; 0x3d1a <Lcd_Init+0x11c>
    3d1e:	9a af       	std	Y+58, r25	; 0x3a
    3d20:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	Lcd_SendCMD(HOME);
    3d22:	82 e0       	ldi	r24, 0x02	; 2
    3d24:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
	Lcd_SendCMD(FOUR_BIT);
    3d28:	88 e2       	ldi	r24, 0x28	; 40
    3d2a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	a0 e8       	ldi	r26, 0x80	; 128
    3d34:	bf e3       	ldi	r27, 0x3F	; 63
    3d36:	8d ab       	std	Y+53, r24	; 0x35
    3d38:	9e ab       	std	Y+54, r25	; 0x36
    3d3a:	af ab       	std	Y+55, r26	; 0x37
    3d3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d3e:	6d a9       	ldd	r22, Y+53	; 0x35
    3d40:	7e a9       	ldd	r23, Y+54	; 0x36
    3d42:	8f a9       	ldd	r24, Y+55	; 0x37
    3d44:	98 ad       	ldd	r25, Y+56	; 0x38
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	4a e7       	ldi	r20, 0x7A	; 122
    3d4c:	55 e4       	ldi	r21, 0x45	; 69
    3d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	89 ab       	std	Y+49, r24	; 0x31
    3d58:	9a ab       	std	Y+50, r25	; 0x32
    3d5a:	ab ab       	std	Y+51, r26	; 0x33
    3d5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    3d60:	7a a9       	ldd	r23, Y+50	; 0x32
    3d62:	8b a9       	ldd	r24, Y+51	; 0x33
    3d64:	9c a9       	ldd	r25, Y+52	; 0x34
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	40 e8       	ldi	r20, 0x80	; 128
    3d6c:	5f e3       	ldi	r21, 0x3F	; 63
    3d6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d72:	88 23       	and	r24, r24
    3d74:	2c f4       	brge	.+10     	; 0x3d80 <Lcd_Init+0x182>
		__ticks = 1;
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	98 ab       	std	Y+48, r25	; 0x30
    3d7c:	8f a7       	std	Y+47, r24	; 0x2f
    3d7e:	3f c0       	rjmp	.+126    	; 0x3dfe <Lcd_Init+0x200>
	else if (__tmp > 65535)
    3d80:	69 a9       	ldd	r22, Y+49	; 0x31
    3d82:	7a a9       	ldd	r23, Y+50	; 0x32
    3d84:	8b a9       	ldd	r24, Y+51	; 0x33
    3d86:	9c a9       	ldd	r25, Y+52	; 0x34
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	3f ef       	ldi	r19, 0xFF	; 255
    3d8c:	4f e7       	ldi	r20, 0x7F	; 127
    3d8e:	57 e4       	ldi	r21, 0x47	; 71
    3d90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d94:	18 16       	cp	r1, r24
    3d96:	4c f5       	brge	.+82     	; 0x3dea <Lcd_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d98:	6d a9       	ldd	r22, Y+53	; 0x35
    3d9a:	7e a9       	ldd	r23, Y+54	; 0x36
    3d9c:	8f a9       	ldd	r24, Y+55	; 0x37
    3d9e:	98 ad       	ldd	r25, Y+56	; 0x38
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e2       	ldi	r20, 0x20	; 32
    3da6:	51 e4       	ldi	r21, 0x41	; 65
    3da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	bc 01       	movw	r22, r24
    3db2:	cd 01       	movw	r24, r26
    3db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	98 ab       	std	Y+48, r25	; 0x30
    3dbe:	8f a7       	std	Y+47, r24	; 0x2f
    3dc0:	0f c0       	rjmp	.+30     	; 0x3de0 <Lcd_Init+0x1e2>
    3dc2:	80 e9       	ldi	r24, 0x90	; 144
    3dc4:	91 e0       	ldi	r25, 0x01	; 1
    3dc6:	9e a7       	std	Y+46, r25	; 0x2e
    3dc8:	8d a7       	std	Y+45, r24	; 0x2d
    3dca:	8d a5       	ldd	r24, Y+45	; 0x2d
    3dcc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <Lcd_Init+0x1d0>
    3dd2:	9e a7       	std	Y+46, r25	; 0x2e
    3dd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    3dda:	01 97       	sbiw	r24, 0x01	; 1
    3ddc:	98 ab       	std	Y+48, r25	; 0x30
    3dde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3de2:	98 a9       	ldd	r25, Y+48	; 0x30
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	69 f7       	brne	.-38     	; 0x3dc2 <Lcd_Init+0x1c4>
    3de8:	14 c0       	rjmp	.+40     	; 0x3e12 <Lcd_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dea:	69 a9       	ldd	r22, Y+49	; 0x31
    3dec:	7a a9       	ldd	r23, Y+50	; 0x32
    3dee:	8b a9       	ldd	r24, Y+51	; 0x33
    3df0:	9c a9       	ldd	r25, Y+52	; 0x34
    3df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df6:	dc 01       	movw	r26, r24
    3df8:	cb 01       	movw	r24, r22
    3dfa:	98 ab       	std	Y+48, r25	; 0x30
    3dfc:	8f a7       	std	Y+47, r24	; 0x2f
    3dfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e00:	98 a9       	ldd	r25, Y+48	; 0x30
    3e02:	9c a7       	std	Y+44, r25	; 0x2c
    3e04:	8b a7       	std	Y+43, r24	; 0x2b
    3e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e08:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <Lcd_Init+0x20c>
    3e0e:	9c a7       	std	Y+44, r25	; 0x2c
    3e10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Lcd_SendCMD(CURSER_ON);
    3e12:	8f e0       	ldi	r24, 0x0F	; 15
    3e14:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	a0 e8       	ldi	r26, 0x80	; 128
    3e1e:	bf e3       	ldi	r27, 0x3F	; 63
    3e20:	8f a3       	std	Y+39, r24	; 0x27
    3e22:	98 a7       	std	Y+40, r25	; 0x28
    3e24:	a9 a7       	std	Y+41, r26	; 0x29
    3e26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e28:	6f a1       	ldd	r22, Y+39	; 0x27
    3e2a:	78 a5       	ldd	r23, Y+40	; 0x28
    3e2c:	89 a5       	ldd	r24, Y+41	; 0x29
    3e2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	4a e7       	ldi	r20, 0x7A	; 122
    3e36:	55 e4       	ldi	r21, 0x45	; 69
    3e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	8b a3       	std	Y+35, r24	; 0x23
    3e42:	9c a3       	std	Y+36, r25	; 0x24
    3e44:	ad a3       	std	Y+37, r26	; 0x25
    3e46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e48:	6b a1       	ldd	r22, Y+35	; 0x23
    3e4a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	40 e8       	ldi	r20, 0x80	; 128
    3e56:	5f e3       	ldi	r21, 0x3F	; 63
    3e58:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e5c:	88 23       	and	r24, r24
    3e5e:	2c f4       	brge	.+10     	; 0x3e6a <Lcd_Init+0x26c>
		__ticks = 1;
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	9a a3       	std	Y+34, r25	; 0x22
    3e66:	89 a3       	std	Y+33, r24	; 0x21
    3e68:	3f c0       	rjmp	.+126    	; 0x3ee8 <Lcd_Init+0x2ea>
	else if (__tmp > 65535)
    3e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3e70:	9e a1       	ldd	r25, Y+38	; 0x26
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	3f ef       	ldi	r19, 0xFF	; 255
    3e76:	4f e7       	ldi	r20, 0x7F	; 127
    3e78:	57 e4       	ldi	r21, 0x47	; 71
    3e7a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e7e:	18 16       	cp	r1, r24
    3e80:	4c f5       	brge	.+82     	; 0x3ed4 <Lcd_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e82:	6f a1       	ldd	r22, Y+39	; 0x27
    3e84:	78 a5       	ldd	r23, Y+40	; 0x28
    3e86:	89 a5       	ldd	r24, Y+41	; 0x29
    3e88:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e2       	ldi	r20, 0x20	; 32
    3e90:	51 e4       	ldi	r21, 0x41	; 65
    3e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	bc 01       	movw	r22, r24
    3e9c:	cd 01       	movw	r24, r26
    3e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	9a a3       	std	Y+34, r25	; 0x22
    3ea8:	89 a3       	std	Y+33, r24	; 0x21
    3eaa:	0f c0       	rjmp	.+30     	; 0x3eca <Lcd_Init+0x2cc>
    3eac:	80 e9       	ldi	r24, 0x90	; 144
    3eae:	91 e0       	ldi	r25, 0x01	; 1
    3eb0:	98 a3       	std	Y+32, r25	; 0x20
    3eb2:	8f 8f       	std	Y+31, r24	; 0x1f
    3eb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3eb6:	98 a1       	ldd	r25, Y+32	; 0x20
    3eb8:	01 97       	sbiw	r24, 0x01	; 1
    3eba:	f1 f7       	brne	.-4      	; 0x3eb8 <Lcd_Init+0x2ba>
    3ebc:	98 a3       	std	Y+32, r25	; 0x20
    3ebe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	9a a3       	std	Y+34, r25	; 0x22
    3ec8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eca:	89 a1       	ldd	r24, Y+33	; 0x21
    3ecc:	9a a1       	ldd	r25, Y+34	; 0x22
    3ece:	00 97       	sbiw	r24, 0x00	; 0
    3ed0:	69 f7       	brne	.-38     	; 0x3eac <Lcd_Init+0x2ae>
    3ed2:	14 c0       	rjmp	.+40     	; 0x3efc <Lcd_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ed6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ed8:	8d a1       	ldd	r24, Y+37	; 0x25
    3eda:	9e a1       	ldd	r25, Y+38	; 0x26
    3edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	9a a3       	std	Y+34, r25	; 0x22
    3ee6:	89 a3       	std	Y+33, r24	; 0x21
    3ee8:	89 a1       	ldd	r24, Y+33	; 0x21
    3eea:	9a a1       	ldd	r25, Y+34	; 0x22
    3eec:	9e 8f       	std	Y+30, r25	; 0x1e
    3eee:	8d 8f       	std	Y+29, r24	; 0x1d
    3ef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ef2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	f1 f7       	brne	.-4      	; 0x3ef4 <Lcd_Init+0x2f6>
    3ef8:	9e 8f       	std	Y+30, r25	; 0x1e
    3efa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_SendCMD(CLEAR);
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	a0 e8       	ldi	r26, 0x80	; 128
    3f08:	bf e3       	ldi	r27, 0x3F	; 63
    3f0a:	89 8f       	std	Y+25, r24	; 0x19
    3f0c:	9a 8f       	std	Y+26, r25	; 0x1a
    3f0e:	ab 8f       	std	Y+27, r26	; 0x1b
    3f10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f12:	69 8d       	ldd	r22, Y+25	; 0x19
    3f14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	4a e7       	ldi	r20, 0x7A	; 122
    3f20:	55 e4       	ldi	r21, 0x45	; 69
    3f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	8d 8b       	std	Y+21, r24	; 0x15
    3f2c:	9e 8b       	std	Y+22, r25	; 0x16
    3f2e:	af 8b       	std	Y+23, r26	; 0x17
    3f30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f32:	6d 89       	ldd	r22, Y+21	; 0x15
    3f34:	7e 89       	ldd	r23, Y+22	; 0x16
    3f36:	8f 89       	ldd	r24, Y+23	; 0x17
    3f38:	98 8d       	ldd	r25, Y+24	; 0x18
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	40 e8       	ldi	r20, 0x80	; 128
    3f40:	5f e3       	ldi	r21, 0x3F	; 63
    3f42:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f46:	88 23       	and	r24, r24
    3f48:	2c f4       	brge	.+10     	; 0x3f54 <Lcd_Init+0x356>
		__ticks = 1;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	9c 8b       	std	Y+20, r25	; 0x14
    3f50:	8b 8b       	std	Y+19, r24	; 0x13
    3f52:	3f c0       	rjmp	.+126    	; 0x3fd2 <Lcd_Init+0x3d4>
	else if (__tmp > 65535)
    3f54:	6d 89       	ldd	r22, Y+21	; 0x15
    3f56:	7e 89       	ldd	r23, Y+22	; 0x16
    3f58:	8f 89       	ldd	r24, Y+23	; 0x17
    3f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	3f ef       	ldi	r19, 0xFF	; 255
    3f60:	4f e7       	ldi	r20, 0x7F	; 127
    3f62:	57 e4       	ldi	r21, 0x47	; 71
    3f64:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f68:	18 16       	cp	r1, r24
    3f6a:	4c f5       	brge	.+82     	; 0x3fbe <Lcd_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6c:	69 8d       	ldd	r22, Y+25	; 0x19
    3f6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	40 e2       	ldi	r20, 0x20	; 32
    3f7a:	51 e4       	ldi	r21, 0x41	; 65
    3f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	bc 01       	movw	r22, r24
    3f86:	cd 01       	movw	r24, r26
    3f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	9c 8b       	std	Y+20, r25	; 0x14
    3f92:	8b 8b       	std	Y+19, r24	; 0x13
    3f94:	0f c0       	rjmp	.+30     	; 0x3fb4 <Lcd_Init+0x3b6>
    3f96:	80 e9       	ldi	r24, 0x90	; 144
    3f98:	91 e0       	ldi	r25, 0x01	; 1
    3f9a:	9a 8b       	std	Y+18, r25	; 0x12
    3f9c:	89 8b       	std	Y+17, r24	; 0x11
    3f9e:	89 89       	ldd	r24, Y+17	; 0x11
    3fa0:	9a 89       	ldd	r25, Y+18	; 0x12
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	f1 f7       	brne	.-4      	; 0x3fa2 <Lcd_Init+0x3a4>
    3fa6:	9a 8b       	std	Y+18, r25	; 0x12
    3fa8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3faa:	8b 89       	ldd	r24, Y+19	; 0x13
    3fac:	9c 89       	ldd	r25, Y+20	; 0x14
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	9c 8b       	std	Y+20, r25	; 0x14
    3fb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    3fb6:	9c 89       	ldd	r25, Y+20	; 0x14
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	69 f7       	brne	.-38     	; 0x3f96 <Lcd_Init+0x398>
    3fbc:	14 c0       	rjmp	.+40     	; 0x3fe6 <Lcd_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    3fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    3fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    3fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    3fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fca:	dc 01       	movw	r26, r24
    3fcc:	cb 01       	movw	r24, r22
    3fce:	9c 8b       	std	Y+20, r25	; 0x14
    3fd0:	8b 8b       	std	Y+19, r24	; 0x13
    3fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fd6:	98 8b       	std	Y+16, r25	; 0x10
    3fd8:	8f 87       	std	Y+15, r24	; 0x0f
    3fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fdc:	98 89       	ldd	r25, Y+16	; 0x10
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f7       	brne	.-4      	; 0x3fde <Lcd_Init+0x3e0>
    3fe2:	98 8b       	std	Y+16, r25	; 0x10
    3fe4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_SendCMD(MODE);
    3fe6:	86 e0       	ldi	r24, 0x06	; 6
    3fe8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	a0 e8       	ldi	r26, 0x80	; 128
    3ff2:	bf e3       	ldi	r27, 0x3F	; 63
    3ff4:	8b 87       	std	Y+11, r24	; 0x0b
    3ff6:	9c 87       	std	Y+12, r25	; 0x0c
    3ff8:	ad 87       	std	Y+13, r26	; 0x0d
    3ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4000:	8d 85       	ldd	r24, Y+13	; 0x0d
    4002:	9e 85       	ldd	r25, Y+14	; 0x0e
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	4a e7       	ldi	r20, 0x7A	; 122
    400a:	55 e4       	ldi	r21, 0x45	; 69
    400c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	8f 83       	std	Y+7, r24	; 0x07
    4016:	98 87       	std	Y+8, r25	; 0x08
    4018:	a9 87       	std	Y+9, r26	; 0x09
    401a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    401c:	6f 81       	ldd	r22, Y+7	; 0x07
    401e:	78 85       	ldd	r23, Y+8	; 0x08
    4020:	89 85       	ldd	r24, Y+9	; 0x09
    4022:	9a 85       	ldd	r25, Y+10	; 0x0a
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4030:	88 23       	and	r24, r24
    4032:	2c f4       	brge	.+10     	; 0x403e <Lcd_Init+0x440>
		__ticks = 1;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	8d 83       	std	Y+5, r24	; 0x05
    403c:	3f c0       	rjmp	.+126    	; 0x40bc <Lcd_Init+0x4be>
	else if (__tmp > 65535)
    403e:	6f 81       	ldd	r22, Y+7	; 0x07
    4040:	78 85       	ldd	r23, Y+8	; 0x08
    4042:	89 85       	ldd	r24, Y+9	; 0x09
    4044:	9a 85       	ldd	r25, Y+10	; 0x0a
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	3f ef       	ldi	r19, 0xFF	; 255
    404a:	4f e7       	ldi	r20, 0x7F	; 127
    404c:	57 e4       	ldi	r21, 0x47	; 71
    404e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4052:	18 16       	cp	r1, r24
    4054:	4c f5       	brge	.+82     	; 0x40a8 <Lcd_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4056:	6b 85       	ldd	r22, Y+11	; 0x0b
    4058:	7c 85       	ldd	r23, Y+12	; 0x0c
    405a:	8d 85       	ldd	r24, Y+13	; 0x0d
    405c:	9e 85       	ldd	r25, Y+14	; 0x0e
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e2       	ldi	r20, 0x20	; 32
    4064:	51 e4       	ldi	r21, 0x41	; 65
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	bc 01       	movw	r22, r24
    4070:	cd 01       	movw	r24, r26
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	9e 83       	std	Y+6, r25	; 0x06
    407c:	8d 83       	std	Y+5, r24	; 0x05
    407e:	0f c0       	rjmp	.+30     	; 0x409e <Lcd_Init+0x4a0>
    4080:	80 e9       	ldi	r24, 0x90	; 144
    4082:	91 e0       	ldi	r25, 0x01	; 1
    4084:	9c 83       	std	Y+4, r25	; 0x04
    4086:	8b 83       	std	Y+3, r24	; 0x03
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
    408a:	9c 81       	ldd	r25, Y+4	; 0x04
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	f1 f7       	brne	.-4      	; 0x408c <Lcd_Init+0x48e>
    4090:	9c 83       	std	Y+4, r25	; 0x04
    4092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4094:	8d 81       	ldd	r24, Y+5	; 0x05
    4096:	9e 81       	ldd	r25, Y+6	; 0x06
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	9e 83       	std	Y+6, r25	; 0x06
    409c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409e:	8d 81       	ldd	r24, Y+5	; 0x05
    40a0:	9e 81       	ldd	r25, Y+6	; 0x06
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	69 f7       	brne	.-38     	; 0x4080 <Lcd_Init+0x482>
    40a6:	14 c0       	rjmp	.+40     	; 0x40d0 <Lcd_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a8:	6f 81       	ldd	r22, Y+7	; 0x07
    40aa:	78 85       	ldd	r23, Y+8	; 0x08
    40ac:	89 85       	ldd	r24, Y+9	; 0x09
    40ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	9e 83       	std	Y+6, r25	; 0x06
    40ba:	8d 83       	std	Y+5, r24	; 0x05
    40bc:	8d 81       	ldd	r24, Y+5	; 0x05
    40be:	9e 81       	ldd	r25, Y+6	; 0x06
    40c0:	9a 83       	std	Y+2, r25	; 0x02
    40c2:	89 83       	std	Y+1, r24	; 0x01
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	9a 81       	ldd	r25, Y+2	; 0x02
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	f1 f7       	brne	.-4      	; 0x40c8 <Lcd_Init+0x4ca>
    40cc:	9a 83       	std	Y+2, r25	; 0x02
    40ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Lcd_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    40d0:	8c e0       	ldi	r24, 0x0C	; 12
    40d2:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
	Lcd_SendCMD(SET_DDRAM_ADDR);
    40d6:	80 e8       	ldi	r24, 0x80	; 128
    40d8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
}
    40dc:	ca 5b       	subi	r28, 0xBA	; 186
    40de:	df 4f       	sbci	r29, 0xFF	; 255
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	f8 94       	cli
    40e4:	de bf       	out	0x3e, r29	; 62
    40e6:	0f be       	out	0x3f, r0	; 63
    40e8:	cd bf       	out	0x3d, r28	; 61
    40ea:	cf 91       	pop	r28
    40ec:	df 91       	pop	r29
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	08 95       	ret

000040f4 <Lcd_Clear>:
void Lcd_Clear(void){
    40f4:	df 93       	push	r29
    40f6:	cf 93       	push	r28
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
Lcd_SendCMD(CLEAR);
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Lcd_SendCMD>
}
    4102:	cf 91       	pop	r28
    4104:	df 91       	pop	r29
    4106:	08 95       	ret

00004108 <Lcd_PutString>:


void Lcd_PutString (u8* str)
{
    4108:	df 93       	push	r29
    410a:	cf 93       	push	r28
    410c:	00 d0       	rcall	.+0      	; 0x410e <Lcd_PutString+0x6>
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
    4112:	9a 83       	std	Y+2, r25	; 0x02
    4114:	89 83       	std	Y+1, r24	; 0x01
    4116:	0a c0       	rjmp	.+20     	; 0x412c <Lcd_PutString+0x24>
	 while (*str !='\0'){
		Lcd_PutChar(*str);
    4118:	e9 81       	ldd	r30, Y+1	; 0x01
    411a:	fa 81       	ldd	r31, Y+2	; 0x02
    411c:	80 81       	ld	r24, Z
    411e:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <Lcd_PutChar>
		str++;
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	9a 81       	ldd	r25, Y+2	; 0x02
    4126:	01 96       	adiw	r24, 0x01	; 1
    4128:	9a 83       	std	Y+2, r25	; 0x02
    412a:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_PutString (u8* str)
{
	 while (*str !='\0'){
    412c:	e9 81       	ldd	r30, Y+1	; 0x01
    412e:	fa 81       	ldd	r31, Y+2	; 0x02
    4130:	80 81       	ld	r24, Z
    4132:	88 23       	and	r24, r24
    4134:	89 f7       	brne	.-30     	; 0x4118 <Lcd_PutString+0x10>
		Lcd_PutChar(*str);
		str++;
		}
}
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	cf 91       	pop	r28
    413c:	df 91       	pop	r29
    413e:	08 95       	ret

00004140 <lcd4_disply_char_at_X_Y>:

void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    4140:	df 93       	push	r29
    4142:	cf 93       	push	r28
    4144:	00 d0       	rcall	.+0      	; 0x4146 <lcd4_disply_char_at_X_Y+0x6>
    4146:	0f 92       	push	r0
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    414c:	89 83       	std	Y+1, r24	; 0x01
    414e:	6a 83       	std	Y+2, r22	; 0x02
    4150:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoTo(row, col);
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	6b 81       	ldd	r22, Y+3	; 0x03
    4156:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <Lcd_GoTo>
	Lcd_SendData(data);
    415a:	89 81       	ldd	r24, Y+1	; 0x01
    415c:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Lcd_SendData>
}
    4160:	0f 90       	pop	r0
    4162:	0f 90       	pop	r0
    4164:	0f 90       	pop	r0
    4166:	cf 91       	pop	r28
    4168:	df 91       	pop	r29
    416a:	08 95       	ret

0000416c <Lcd_PutString_x_Y>:


void Lcd_PutString_x_Y(u8* data, u8 row, u8 col)
{
    416c:	df 93       	push	r29
    416e:	cf 93       	push	r28
    4170:	00 d0       	rcall	.+0      	; 0x4172 <Lcd_PutString_x_Y+0x6>
    4172:	00 d0       	rcall	.+0      	; 0x4174 <Lcd_PutString_x_Y+0x8>
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
    4178:	9a 83       	std	Y+2, r25	; 0x02
    417a:	89 83       	std	Y+1, r24	; 0x01
    417c:	6b 83       	std	Y+3, r22	; 0x03
    417e:	4c 83       	std	Y+4, r20	; 0x04
	Lcd_GoTo(row, col);
    4180:	8b 81       	ldd	r24, Y+3	; 0x03
    4182:	6c 81       	ldd	r22, Y+4	; 0x04
    4184:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <Lcd_GoTo>
	Lcd_PutString(data);
    4188:	89 81       	ldd	r24, Y+1	; 0x01
    418a:	9a 81       	ldd	r25, Y+2	; 0x02
    418c:	0e 94 84 20 	call	0x4108	; 0x4108 <Lcd_PutString>
}
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	cf 91       	pop	r28
    419a:	df 91       	pop	r29
    419c:	08 95       	ret

0000419e <Action>:


//#define SPI_SLAVE_TEST_ISR

void Action(u8 copy_u8RxData)
{
    419e:	df 93       	push	r29
    41a0:	cf 93       	push	r28
    41a2:	0f 92       	push	r0
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8RxData == 2)
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	82 30       	cpi	r24, 0x02	; 2
    41ae:	19 f4       	brne	.+6      	; 0x41b6 <Action+0x18>
		Dio_FlipChannel(PA_4);
    41b0:	84 e0       	ldi	r24, 0x04	; 4
    41b2:	0e 94 a2 11 	call	0x2344	; 0x2344 <Dio_FlipChannel>
//	_delay_ms(300);
}
    41b6:	0f 90       	pop	r0
    41b8:	cf 91       	pop	r28
    41ba:	df 91       	pop	r29
    41bc:	08 95       	ret

000041be <main>:


int main(){
    41be:	0f 93       	push	r16
    41c0:	1f 93       	push	r17
    41c2:	df 93       	push	r29
    41c4:	cf 93       	push	r28
    41c6:	cd b7       	in	r28, 0x3d	; 61
    41c8:	de b7       	in	r29, 0x3e	; 62
    41ca:	c3 56       	subi	r28, 0x63	; 99
    41cc:	d0 40       	sbci	r29, 0x00	; 0
    41ce:	0f b6       	in	r0, 0x3f	; 63
    41d0:	f8 94       	cli
    41d2:	de bf       	out	0x3e, r29	; 62
    41d4:	0f be       	out	0x3f, r0	; 63
    41d6:	cd bf       	out	0x3d, r28	; 61
	Port_Init(pin_cfg);
    41d8:	88 e6       	ldi	r24, 0x68	; 104
    41da:	91 e0       	ldi	r25, 0x01	; 1
    41dc:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <Port_Init>

	//slave select low
//	Dio_WriteChannel(PB_4,STD_LOW);
	Dio_WriteChannel(PA_4,STD_LOW);
    41e0:	84 e0       	ldi	r24, 0x04	; 4
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	0e 94 25 10 	call	0x204a	; 0x204a <Dio_WriteChannel>
	GI_voidEnable();
    41e8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <GI_voidEnable>

	SPI_voidInit();
    41ec:	0e 94 97 0b 	call	0x172e	; 0x172e <SPI_voidInit>
    41f0:	fe 01       	movw	r30, r28
    41f2:	e1 5a       	subi	r30, 0xA1	; 161
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	a8 ec       	ldi	r26, 0xC8	; 200
    41fc:	b2 e4       	ldi	r27, 0x42	; 66
    41fe:	80 83       	st	Z, r24
    4200:	91 83       	std	Z+1, r25	; 0x01
    4202:	a2 83       	std	Z+2, r26	; 0x02
    4204:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4206:	8e 01       	movw	r16, r28
    4208:	05 5a       	subi	r16, 0xA5	; 165
    420a:	1f 4f       	sbci	r17, 0xFF	; 255
    420c:	fe 01       	movw	r30, r28
    420e:	e1 5a       	subi	r30, 0xA1	; 161
    4210:	ff 4f       	sbci	r31, 0xFF	; 255
    4212:	60 81       	ld	r22, Z
    4214:	71 81       	ldd	r23, Z+1	; 0x01
    4216:	82 81       	ldd	r24, Z+2	; 0x02
    4218:	93 81       	ldd	r25, Z+3	; 0x03
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	4a e7       	ldi	r20, 0x7A	; 122
    4220:	55 e4       	ldi	r21, 0x45	; 69
    4222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	f8 01       	movw	r30, r16
    422c:	80 83       	st	Z, r24
    422e:	91 83       	std	Z+1, r25	; 0x01
    4230:	a2 83       	std	Z+2, r26	; 0x02
    4232:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4234:	fe 01       	movw	r30, r28
    4236:	e5 5a       	subi	r30, 0xA5	; 165
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	60 81       	ld	r22, Z
    423c:	71 81       	ldd	r23, Z+1	; 0x01
    423e:	82 81       	ldd	r24, Z+2	; 0x02
    4240:	93 81       	ldd	r25, Z+3	; 0x03
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 e8       	ldi	r20, 0x80	; 128
    4248:	5f e3       	ldi	r21, 0x3F	; 63
    424a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    424e:	88 23       	and	r24, r24
    4250:	44 f4       	brge	.+16     	; 0x4262 <main+0xa4>
		__ticks = 1;
    4252:	fe 01       	movw	r30, r28
    4254:	e7 5a       	subi	r30, 0xA7	; 167
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	91 83       	std	Z+1, r25	; 0x01
    425e:	80 83       	st	Z, r24
    4260:	64 c0       	rjmp	.+200    	; 0x432a <main+0x16c>
	else if (__tmp > 65535)
    4262:	fe 01       	movw	r30, r28
    4264:	e5 5a       	subi	r30, 0xA5	; 165
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	60 81       	ld	r22, Z
    426a:	71 81       	ldd	r23, Z+1	; 0x01
    426c:	82 81       	ldd	r24, Z+2	; 0x02
    426e:	93 81       	ldd	r25, Z+3	; 0x03
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	3f ef       	ldi	r19, 0xFF	; 255
    4274:	4f e7       	ldi	r20, 0x7F	; 127
    4276:	57 e4       	ldi	r21, 0x47	; 71
    4278:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    427c:	18 16       	cp	r1, r24
    427e:	0c f0       	brlt	.+2      	; 0x4282 <main+0xc4>
    4280:	43 c0       	rjmp	.+134    	; 0x4308 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4282:	fe 01       	movw	r30, r28
    4284:	e1 5a       	subi	r30, 0xA1	; 161
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	60 81       	ld	r22, Z
    428a:	71 81       	ldd	r23, Z+1	; 0x01
    428c:	82 81       	ldd	r24, Z+2	; 0x02
    428e:	93 81       	ldd	r25, Z+3	; 0x03
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	40 e2       	ldi	r20, 0x20	; 32
    4296:	51 e4       	ldi	r21, 0x41	; 65
    4298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	8e 01       	movw	r16, r28
    42a2:	07 5a       	subi	r16, 0xA7	; 167
    42a4:	1f 4f       	sbci	r17, 0xFF	; 255
    42a6:	bc 01       	movw	r22, r24
    42a8:	cd 01       	movw	r24, r26
    42aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	f8 01       	movw	r30, r16
    42b4:	91 83       	std	Z+1, r25	; 0x01
    42b6:	80 83       	st	Z, r24
    42b8:	1f c0       	rjmp	.+62     	; 0x42f8 <main+0x13a>
    42ba:	fe 01       	movw	r30, r28
    42bc:	e9 5a       	subi	r30, 0xA9	; 169
    42be:	ff 4f       	sbci	r31, 0xFF	; 255
    42c0:	80 e9       	ldi	r24, 0x90	; 144
    42c2:	91 e0       	ldi	r25, 0x01	; 1
    42c4:	91 83       	std	Z+1, r25	; 0x01
    42c6:	80 83       	st	Z, r24
    42c8:	fe 01       	movw	r30, r28
    42ca:	e9 5a       	subi	r30, 0xA9	; 169
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	80 81       	ld	r24, Z
    42d0:	91 81       	ldd	r25, Z+1	; 0x01
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	f1 f7       	brne	.-4      	; 0x42d2 <main+0x114>
    42d6:	fe 01       	movw	r30, r28
    42d8:	e9 5a       	subi	r30, 0xA9	; 169
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	91 83       	std	Z+1, r25	; 0x01
    42de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e0:	de 01       	movw	r26, r28
    42e2:	a7 5a       	subi	r26, 0xA7	; 167
    42e4:	bf 4f       	sbci	r27, 0xFF	; 255
    42e6:	fe 01       	movw	r30, r28
    42e8:	e7 5a       	subi	r30, 0xA7	; 167
    42ea:	ff 4f       	sbci	r31, 0xFF	; 255
    42ec:	80 81       	ld	r24, Z
    42ee:	91 81       	ldd	r25, Z+1	; 0x01
    42f0:	01 97       	sbiw	r24, 0x01	; 1
    42f2:	11 96       	adiw	r26, 0x01	; 1
    42f4:	9c 93       	st	X, r25
    42f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42f8:	fe 01       	movw	r30, r28
    42fa:	e7 5a       	subi	r30, 0xA7	; 167
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	80 81       	ld	r24, Z
    4300:	91 81       	ldd	r25, Z+1	; 0x01
    4302:	00 97       	sbiw	r24, 0x00	; 0
    4304:	d1 f6       	brne	.-76     	; 0x42ba <main+0xfc>
    4306:	27 c0       	rjmp	.+78     	; 0x4356 <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4308:	8e 01       	movw	r16, r28
    430a:	07 5a       	subi	r16, 0xA7	; 167
    430c:	1f 4f       	sbci	r17, 0xFF	; 255
    430e:	fe 01       	movw	r30, r28
    4310:	e5 5a       	subi	r30, 0xA5	; 165
    4312:	ff 4f       	sbci	r31, 0xFF	; 255
    4314:	60 81       	ld	r22, Z
    4316:	71 81       	ldd	r23, Z+1	; 0x01
    4318:	82 81       	ldd	r24, Z+2	; 0x02
    431a:	93 81       	ldd	r25, Z+3	; 0x03
    431c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	f8 01       	movw	r30, r16
    4326:	91 83       	std	Z+1, r25	; 0x01
    4328:	80 83       	st	Z, r24
    432a:	de 01       	movw	r26, r28
    432c:	ab 5a       	subi	r26, 0xAB	; 171
    432e:	bf 4f       	sbci	r27, 0xFF	; 255
    4330:	fe 01       	movw	r30, r28
    4332:	e7 5a       	subi	r30, 0xA7	; 167
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	80 81       	ld	r24, Z
    4338:	91 81       	ldd	r25, Z+1	; 0x01
    433a:	8d 93       	st	X+, r24
    433c:	9c 93       	st	X, r25
    433e:	fe 01       	movw	r30, r28
    4340:	eb 5a       	subi	r30, 0xAB	; 171
    4342:	ff 4f       	sbci	r31, 0xFF	; 255
    4344:	80 81       	ld	r24, Z
    4346:	91 81       	ldd	r25, Z+1	; 0x01
    4348:	01 97       	sbiw	r24, 0x01	; 1
    434a:	f1 f7       	brne	.-4      	; 0x4348 <main+0x18a>
    434c:	fe 01       	movw	r30, r28
    434e:	eb 5a       	subi	r30, 0xAB	; 171
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	91 83       	std	Z+1, r25	; 0x01
    4354:	80 83       	st	Z, r24
    4356:	fe 01       	movw	r30, r28
    4358:	ef 5a       	subi	r30, 0xAF	; 175
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	a8 ec       	ldi	r26, 0xC8	; 200
    4362:	b2 e4       	ldi	r27, 0x42	; 66
    4364:	80 83       	st	Z, r24
    4366:	91 83       	std	Z+1, r25	; 0x01
    4368:	a2 83       	std	Z+2, r26	; 0x02
    436a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    436c:	8e 01       	movw	r16, r28
    436e:	03 5b       	subi	r16, 0xB3	; 179
    4370:	1f 4f       	sbci	r17, 0xFF	; 255
    4372:	fe 01       	movw	r30, r28
    4374:	ef 5a       	subi	r30, 0xAF	; 175
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	60 81       	ld	r22, Z
    437a:	71 81       	ldd	r23, Z+1	; 0x01
    437c:	82 81       	ldd	r24, Z+2	; 0x02
    437e:	93 81       	ldd	r25, Z+3	; 0x03
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	4a e7       	ldi	r20, 0x7A	; 122
    4386:	55 e4       	ldi	r21, 0x45	; 69
    4388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	f8 01       	movw	r30, r16
    4392:	80 83       	st	Z, r24
    4394:	91 83       	std	Z+1, r25	; 0x01
    4396:	a2 83       	std	Z+2, r26	; 0x02
    4398:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    439a:	fe 01       	movw	r30, r28
    439c:	e3 5b       	subi	r30, 0xB3	; 179
    439e:	ff 4f       	sbci	r31, 0xFF	; 255
    43a0:	60 81       	ld	r22, Z
    43a2:	71 81       	ldd	r23, Z+1	; 0x01
    43a4:	82 81       	ldd	r24, Z+2	; 0x02
    43a6:	93 81       	ldd	r25, Z+3	; 0x03
    43a8:	20 e0       	ldi	r18, 0x00	; 0
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	40 e8       	ldi	r20, 0x80	; 128
    43ae:	5f e3       	ldi	r21, 0x3F	; 63
    43b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    43b4:	88 23       	and	r24, r24
    43b6:	44 f4       	brge	.+16     	; 0x43c8 <main+0x20a>
		__ticks = 1;
    43b8:	fe 01       	movw	r30, r28
    43ba:	e5 5b       	subi	r30, 0xB5	; 181
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	91 83       	std	Z+1, r25	; 0x01
    43c4:	80 83       	st	Z, r24
    43c6:	64 c0       	rjmp	.+200    	; 0x4490 <main+0x2d2>
	else if (__tmp > 65535)
    43c8:	fe 01       	movw	r30, r28
    43ca:	e3 5b       	subi	r30, 0xB3	; 179
    43cc:	ff 4f       	sbci	r31, 0xFF	; 255
    43ce:	60 81       	ld	r22, Z
    43d0:	71 81       	ldd	r23, Z+1	; 0x01
    43d2:	82 81       	ldd	r24, Z+2	; 0x02
    43d4:	93 81       	ldd	r25, Z+3	; 0x03
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	3f ef       	ldi	r19, 0xFF	; 255
    43da:	4f e7       	ldi	r20, 0x7F	; 127
    43dc:	57 e4       	ldi	r21, 0x47	; 71
    43de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    43e2:	18 16       	cp	r1, r24
    43e4:	0c f0       	brlt	.+2      	; 0x43e8 <main+0x22a>
    43e6:	43 c0       	rjmp	.+134    	; 0x446e <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e8:	fe 01       	movw	r30, r28
    43ea:	ef 5a       	subi	r30, 0xAF	; 175
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	60 81       	ld	r22, Z
    43f0:	71 81       	ldd	r23, Z+1	; 0x01
    43f2:	82 81       	ldd	r24, Z+2	; 0x02
    43f4:	93 81       	ldd	r25, Z+3	; 0x03
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e2       	ldi	r20, 0x20	; 32
    43fc:	51 e4       	ldi	r21, 0x41	; 65
    43fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	8e 01       	movw	r16, r28
    4408:	05 5b       	subi	r16, 0xB5	; 181
    440a:	1f 4f       	sbci	r17, 0xFF	; 255
    440c:	bc 01       	movw	r22, r24
    440e:	cd 01       	movw	r24, r26
    4410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	f8 01       	movw	r30, r16
    441a:	91 83       	std	Z+1, r25	; 0x01
    441c:	80 83       	st	Z, r24
    441e:	1f c0       	rjmp	.+62     	; 0x445e <main+0x2a0>
    4420:	fe 01       	movw	r30, r28
    4422:	e7 5b       	subi	r30, 0xB7	; 183
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	80 e9       	ldi	r24, 0x90	; 144
    4428:	91 e0       	ldi	r25, 0x01	; 1
    442a:	91 83       	std	Z+1, r25	; 0x01
    442c:	80 83       	st	Z, r24
    442e:	fe 01       	movw	r30, r28
    4430:	e7 5b       	subi	r30, 0xB7	; 183
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	80 81       	ld	r24, Z
    4436:	91 81       	ldd	r25, Z+1	; 0x01
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	f1 f7       	brne	.-4      	; 0x4438 <main+0x27a>
    443c:	fe 01       	movw	r30, r28
    443e:	e7 5b       	subi	r30, 0xB7	; 183
    4440:	ff 4f       	sbci	r31, 0xFF	; 255
    4442:	91 83       	std	Z+1, r25	; 0x01
    4444:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4446:	de 01       	movw	r26, r28
    4448:	a5 5b       	subi	r26, 0xB5	; 181
    444a:	bf 4f       	sbci	r27, 0xFF	; 255
    444c:	fe 01       	movw	r30, r28
    444e:	e5 5b       	subi	r30, 0xB5	; 181
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	80 81       	ld	r24, Z
    4454:	91 81       	ldd	r25, Z+1	; 0x01
    4456:	01 97       	sbiw	r24, 0x01	; 1
    4458:	11 96       	adiw	r26, 0x01	; 1
    445a:	9c 93       	st	X, r25
    445c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445e:	fe 01       	movw	r30, r28
    4460:	e5 5b       	subi	r30, 0xB5	; 181
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	80 81       	ld	r24, Z
    4466:	91 81       	ldd	r25, Z+1	; 0x01
    4468:	00 97       	sbiw	r24, 0x00	; 0
    446a:	d1 f6       	brne	.-76     	; 0x4420 <main+0x262>
    446c:	27 c0       	rjmp	.+78     	; 0x44bc <main+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    446e:	8e 01       	movw	r16, r28
    4470:	05 5b       	subi	r16, 0xB5	; 181
    4472:	1f 4f       	sbci	r17, 0xFF	; 255
    4474:	fe 01       	movw	r30, r28
    4476:	e3 5b       	subi	r30, 0xB3	; 179
    4478:	ff 4f       	sbci	r31, 0xFF	; 255
    447a:	60 81       	ld	r22, Z
    447c:	71 81       	ldd	r23, Z+1	; 0x01
    447e:	82 81       	ldd	r24, Z+2	; 0x02
    4480:	93 81       	ldd	r25, Z+3	; 0x03
    4482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	f8 01       	movw	r30, r16
    448c:	91 83       	std	Z+1, r25	; 0x01
    448e:	80 83       	st	Z, r24
    4490:	de 01       	movw	r26, r28
    4492:	a9 5b       	subi	r26, 0xB9	; 185
    4494:	bf 4f       	sbci	r27, 0xFF	; 255
    4496:	fe 01       	movw	r30, r28
    4498:	e5 5b       	subi	r30, 0xB5	; 181
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	80 81       	ld	r24, Z
    449e:	91 81       	ldd	r25, Z+1	; 0x01
    44a0:	8d 93       	st	X+, r24
    44a2:	9c 93       	st	X, r25
    44a4:	fe 01       	movw	r30, r28
    44a6:	e9 5b       	subi	r30, 0xB9	; 185
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	80 81       	ld	r24, Z
    44ac:	91 81       	ldd	r25, Z+1	; 0x01
    44ae:	01 97       	sbiw	r24, 0x01	; 1
    44b0:	f1 f7       	brne	.-4      	; 0x44ae <main+0x2f0>
    44b2:	fe 01       	movw	r30, r28
    44b4:	e9 5b       	subi	r30, 0xB9	; 185
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	91 83       	std	Z+1, r25	; 0x01
    44ba:	80 83       	st	Z, r24
    44bc:	fe 01       	movw	r30, r28
    44be:	ed 5b       	subi	r30, 0xBD	; 189
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	80 e0       	ldi	r24, 0x00	; 0
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	a8 ec       	ldi	r26, 0xC8	; 200
    44c8:	b2 e4       	ldi	r27, 0x42	; 66
    44ca:	80 83       	st	Z, r24
    44cc:	91 83       	std	Z+1, r25	; 0x01
    44ce:	a2 83       	std	Z+2, r26	; 0x02
    44d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d2:	8e 01       	movw	r16, r28
    44d4:	01 5c       	subi	r16, 0xC1	; 193
    44d6:	1f 4f       	sbci	r17, 0xFF	; 255
    44d8:	fe 01       	movw	r30, r28
    44da:	ed 5b       	subi	r30, 0xBD	; 189
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	60 81       	ld	r22, Z
    44e0:	71 81       	ldd	r23, Z+1	; 0x01
    44e2:	82 81       	ldd	r24, Z+2	; 0x02
    44e4:	93 81       	ldd	r25, Z+3	; 0x03
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	4a e7       	ldi	r20, 0x7A	; 122
    44ec:	55 e4       	ldi	r21, 0x45	; 69
    44ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	f8 01       	movw	r30, r16
    44f8:	80 83       	st	Z, r24
    44fa:	91 83       	std	Z+1, r25	; 0x01
    44fc:	a2 83       	std	Z+2, r26	; 0x02
    44fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4500:	fe 01       	movw	r30, r28
    4502:	ff 96       	adiw	r30, 0x3f	; 63
    4504:	60 81       	ld	r22, Z
    4506:	71 81       	ldd	r23, Z+1	; 0x01
    4508:	82 81       	ldd	r24, Z+2	; 0x02
    450a:	93 81       	ldd	r25, Z+3	; 0x03
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	40 e8       	ldi	r20, 0x80	; 128
    4512:	5f e3       	ldi	r21, 0x3F	; 63
    4514:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4518:	88 23       	and	r24, r24
    451a:	2c f4       	brge	.+10     	; 0x4526 <main+0x368>
		__ticks = 1;
    451c:	81 e0       	ldi	r24, 0x01	; 1
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	9e af       	std	Y+62, r25	; 0x3e
    4522:	8d af       	std	Y+61, r24	; 0x3d
    4524:	46 c0       	rjmp	.+140    	; 0x45b2 <main+0x3f4>
	else if (__tmp > 65535)
    4526:	fe 01       	movw	r30, r28
    4528:	ff 96       	adiw	r30, 0x3f	; 63
    452a:	60 81       	ld	r22, Z
    452c:	71 81       	ldd	r23, Z+1	; 0x01
    452e:	82 81       	ldd	r24, Z+2	; 0x02
    4530:	93 81       	ldd	r25, Z+3	; 0x03
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	3f ef       	ldi	r19, 0xFF	; 255
    4536:	4f e7       	ldi	r20, 0x7F	; 127
    4538:	57 e4       	ldi	r21, 0x47	; 71
    453a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    453e:	18 16       	cp	r1, r24
    4540:	64 f5       	brge	.+88     	; 0x459a <main+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4542:	fe 01       	movw	r30, r28
    4544:	ed 5b       	subi	r30, 0xBD	; 189
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	60 81       	ld	r22, Z
    454a:	71 81       	ldd	r23, Z+1	; 0x01
    454c:	82 81       	ldd	r24, Z+2	; 0x02
    454e:	93 81       	ldd	r25, Z+3	; 0x03
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	40 e2       	ldi	r20, 0x20	; 32
    4556:	51 e4       	ldi	r21, 0x41	; 65
    4558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	bc 01       	movw	r22, r24
    4562:	cd 01       	movw	r24, r26
    4564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4568:	dc 01       	movw	r26, r24
    456a:	cb 01       	movw	r24, r22
    456c:	9e af       	std	Y+62, r25	; 0x3e
    456e:	8d af       	std	Y+61, r24	; 0x3d
    4570:	0f c0       	rjmp	.+30     	; 0x4590 <main+0x3d2>
    4572:	80 e9       	ldi	r24, 0x90	; 144
    4574:	91 e0       	ldi	r25, 0x01	; 1
    4576:	9c af       	std	Y+60, r25	; 0x3c
    4578:	8b af       	std	Y+59, r24	; 0x3b
    457a:	8b ad       	ldd	r24, Y+59	; 0x3b
    457c:	9c ad       	ldd	r25, Y+60	; 0x3c
    457e:	01 97       	sbiw	r24, 0x01	; 1
    4580:	f1 f7       	brne	.-4      	; 0x457e <main+0x3c0>
    4582:	9c af       	std	Y+60, r25	; 0x3c
    4584:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4586:	8d ad       	ldd	r24, Y+61	; 0x3d
    4588:	9e ad       	ldd	r25, Y+62	; 0x3e
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	9e af       	std	Y+62, r25	; 0x3e
    458e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4590:	8d ad       	ldd	r24, Y+61	; 0x3d
    4592:	9e ad       	ldd	r25, Y+62	; 0x3e
    4594:	00 97       	sbiw	r24, 0x00	; 0
    4596:	69 f7       	brne	.-38     	; 0x4572 <main+0x3b4>
    4598:	16 c0       	rjmp	.+44     	; 0x45c6 <main+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    459a:	fe 01       	movw	r30, r28
    459c:	ff 96       	adiw	r30, 0x3f	; 63
    459e:	60 81       	ld	r22, Z
    45a0:	71 81       	ldd	r23, Z+1	; 0x01
    45a2:	82 81       	ldd	r24, Z+2	; 0x02
    45a4:	93 81       	ldd	r25, Z+3	; 0x03
    45a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
    45ae:	9e af       	std	Y+62, r25	; 0x3e
    45b0:	8d af       	std	Y+61, r24	; 0x3d
    45b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    45b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    45b6:	9a af       	std	Y+58, r25	; 0x3a
    45b8:	89 af       	std	Y+57, r24	; 0x39
    45ba:	89 ad       	ldd	r24, Y+57	; 0x39
    45bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	f1 f7       	brne	.-4      	; 0x45be <main+0x400>
    45c2:	9a af       	std	Y+58, r25	; 0x3a
    45c4:	89 af       	std	Y+57, r24	; 0x39
//	while(1)
	{


		_delay_ms(100);
		SPI_voidTransieve(0,&Local_u8RXData);
    45c6:	9e 01       	movw	r18, r28
    45c8:	2d 59       	subi	r18, 0x9D	; 157
    45ca:	3f 4f       	sbci	r19, 0xFF	; 255
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	b9 01       	movw	r22, r18
    45d0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_voidTransieve>
    45d4:	80 e0       	ldi	r24, 0x00	; 0
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	a8 ec       	ldi	r26, 0xC8	; 200
    45da:	b2 e4       	ldi	r27, 0x42	; 66
    45dc:	8d ab       	std	Y+53, r24	; 0x35
    45de:	9e ab       	std	Y+54, r25	; 0x36
    45e0:	af ab       	std	Y+55, r26	; 0x37
    45e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45e4:	6d a9       	ldd	r22, Y+53	; 0x35
    45e6:	7e a9       	ldd	r23, Y+54	; 0x36
    45e8:	8f a9       	ldd	r24, Y+55	; 0x37
    45ea:	98 ad       	ldd	r25, Y+56	; 0x38
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	4a e7       	ldi	r20, 0x7A	; 122
    45f2:	55 e4       	ldi	r21, 0x45	; 69
    45f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f8:	dc 01       	movw	r26, r24
    45fa:	cb 01       	movw	r24, r22
    45fc:	89 ab       	std	Y+49, r24	; 0x31
    45fe:	9a ab       	std	Y+50, r25	; 0x32
    4600:	ab ab       	std	Y+51, r26	; 0x33
    4602:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4604:	69 a9       	ldd	r22, Y+49	; 0x31
    4606:	7a a9       	ldd	r23, Y+50	; 0x32
    4608:	8b a9       	ldd	r24, Y+51	; 0x33
    460a:	9c a9       	ldd	r25, Y+52	; 0x34
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	40 e8       	ldi	r20, 0x80	; 128
    4612:	5f e3       	ldi	r21, 0x3F	; 63
    4614:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4618:	88 23       	and	r24, r24
    461a:	2c f4       	brge	.+10     	; 0x4626 <main+0x468>
		__ticks = 1;
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	98 ab       	std	Y+48, r25	; 0x30
    4622:	8f a7       	std	Y+47, r24	; 0x2f
    4624:	3f c0       	rjmp	.+126    	; 0x46a4 <main+0x4e6>
	else if (__tmp > 65535)
    4626:	69 a9       	ldd	r22, Y+49	; 0x31
    4628:	7a a9       	ldd	r23, Y+50	; 0x32
    462a:	8b a9       	ldd	r24, Y+51	; 0x33
    462c:	9c a9       	ldd	r25, Y+52	; 0x34
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	3f ef       	ldi	r19, 0xFF	; 255
    4632:	4f e7       	ldi	r20, 0x7F	; 127
    4634:	57 e4       	ldi	r21, 0x47	; 71
    4636:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    463a:	18 16       	cp	r1, r24
    463c:	4c f5       	brge	.+82     	; 0x4690 <main+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    463e:	6d a9       	ldd	r22, Y+53	; 0x35
    4640:	7e a9       	ldd	r23, Y+54	; 0x36
    4642:	8f a9       	ldd	r24, Y+55	; 0x37
    4644:	98 ad       	ldd	r25, Y+56	; 0x38
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	40 e2       	ldi	r20, 0x20	; 32
    464c:	51 e4       	ldi	r21, 0x41	; 65
    464e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4652:	dc 01       	movw	r26, r24
    4654:	cb 01       	movw	r24, r22
    4656:	bc 01       	movw	r22, r24
    4658:	cd 01       	movw	r24, r26
    465a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465e:	dc 01       	movw	r26, r24
    4660:	cb 01       	movw	r24, r22
    4662:	98 ab       	std	Y+48, r25	; 0x30
    4664:	8f a7       	std	Y+47, r24	; 0x2f
    4666:	0f c0       	rjmp	.+30     	; 0x4686 <main+0x4c8>
    4668:	80 e9       	ldi	r24, 0x90	; 144
    466a:	91 e0       	ldi	r25, 0x01	; 1
    466c:	9e a7       	std	Y+46, r25	; 0x2e
    466e:	8d a7       	std	Y+45, r24	; 0x2d
    4670:	8d a5       	ldd	r24, Y+45	; 0x2d
    4672:	9e a5       	ldd	r25, Y+46	; 0x2e
    4674:	01 97       	sbiw	r24, 0x01	; 1
    4676:	f1 f7       	brne	.-4      	; 0x4674 <main+0x4b6>
    4678:	9e a7       	std	Y+46, r25	; 0x2e
    467a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    467c:	8f a5       	ldd	r24, Y+47	; 0x2f
    467e:	98 a9       	ldd	r25, Y+48	; 0x30
    4680:	01 97       	sbiw	r24, 0x01	; 1
    4682:	98 ab       	std	Y+48, r25	; 0x30
    4684:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4686:	8f a5       	ldd	r24, Y+47	; 0x2f
    4688:	98 a9       	ldd	r25, Y+48	; 0x30
    468a:	00 97       	sbiw	r24, 0x00	; 0
    468c:	69 f7       	brne	.-38     	; 0x4668 <main+0x4aa>
    468e:	14 c0       	rjmp	.+40     	; 0x46b8 <main+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4690:	69 a9       	ldd	r22, Y+49	; 0x31
    4692:	7a a9       	ldd	r23, Y+50	; 0x32
    4694:	8b a9       	ldd	r24, Y+51	; 0x33
    4696:	9c a9       	ldd	r25, Y+52	; 0x34
    4698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    469c:	dc 01       	movw	r26, r24
    469e:	cb 01       	movw	r24, r22
    46a0:	98 ab       	std	Y+48, r25	; 0x30
    46a2:	8f a7       	std	Y+47, r24	; 0x2f
    46a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    46a6:	98 a9       	ldd	r25, Y+48	; 0x30
    46a8:	9c a7       	std	Y+44, r25	; 0x2c
    46aa:	8b a7       	std	Y+43, r24	; 0x2b
    46ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    46ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    46b0:	01 97       	sbiw	r24, 0x01	; 1
    46b2:	f1 f7       	brne	.-4      	; 0x46b0 <main+0x4f2>
    46b4:	9c a7       	std	Y+44, r25	; 0x2c
    46b6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		SPI_voidTransieve(1,&Local_u8RXData);
    46b8:	9e 01       	movw	r18, r28
    46ba:	2d 59       	subi	r18, 0x9D	; 157
    46bc:	3f 4f       	sbci	r19, 0xFF	; 255
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	b9 01       	movw	r22, r18
    46c2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_voidTransieve>
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	a8 ec       	ldi	r26, 0xC8	; 200
    46cc:	b2 e4       	ldi	r27, 0x42	; 66
    46ce:	8f a3       	std	Y+39, r24	; 0x27
    46d0:	98 a7       	std	Y+40, r25	; 0x28
    46d2:	a9 a7       	std	Y+41, r26	; 0x29
    46d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46d6:	6f a1       	ldd	r22, Y+39	; 0x27
    46d8:	78 a5       	ldd	r23, Y+40	; 0x28
    46da:	89 a5       	ldd	r24, Y+41	; 0x29
    46dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    46de:	20 e0       	ldi	r18, 0x00	; 0
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	4a e7       	ldi	r20, 0x7A	; 122
    46e4:	55 e4       	ldi	r21, 0x45	; 69
    46e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ea:	dc 01       	movw	r26, r24
    46ec:	cb 01       	movw	r24, r22
    46ee:	8b a3       	std	Y+35, r24	; 0x23
    46f0:	9c a3       	std	Y+36, r25	; 0x24
    46f2:	ad a3       	std	Y+37, r26	; 0x25
    46f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46f6:	6b a1       	ldd	r22, Y+35	; 0x23
    46f8:	7c a1       	ldd	r23, Y+36	; 0x24
    46fa:	8d a1       	ldd	r24, Y+37	; 0x25
    46fc:	9e a1       	ldd	r25, Y+38	; 0x26
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	40 e8       	ldi	r20, 0x80	; 128
    4704:	5f e3       	ldi	r21, 0x3F	; 63
    4706:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    470a:	88 23       	and	r24, r24
    470c:	2c f4       	brge	.+10     	; 0x4718 <main+0x55a>
		__ticks = 1;
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	9a a3       	std	Y+34, r25	; 0x22
    4714:	89 a3       	std	Y+33, r24	; 0x21
    4716:	3f c0       	rjmp	.+126    	; 0x4796 <main+0x5d8>
	else if (__tmp > 65535)
    4718:	6b a1       	ldd	r22, Y+35	; 0x23
    471a:	7c a1       	ldd	r23, Y+36	; 0x24
    471c:	8d a1       	ldd	r24, Y+37	; 0x25
    471e:	9e a1       	ldd	r25, Y+38	; 0x26
    4720:	20 e0       	ldi	r18, 0x00	; 0
    4722:	3f ef       	ldi	r19, 0xFF	; 255
    4724:	4f e7       	ldi	r20, 0x7F	; 127
    4726:	57 e4       	ldi	r21, 0x47	; 71
    4728:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    472c:	18 16       	cp	r1, r24
    472e:	4c f5       	brge	.+82     	; 0x4782 <main+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4730:	6f a1       	ldd	r22, Y+39	; 0x27
    4732:	78 a5       	ldd	r23, Y+40	; 0x28
    4734:	89 a5       	ldd	r24, Y+41	; 0x29
    4736:	9a a5       	ldd	r25, Y+42	; 0x2a
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	40 e2       	ldi	r20, 0x20	; 32
    473e:	51 e4       	ldi	r21, 0x41	; 65
    4740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	bc 01       	movw	r22, r24
    474a:	cd 01       	movw	r24, r26
    474c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4750:	dc 01       	movw	r26, r24
    4752:	cb 01       	movw	r24, r22
    4754:	9a a3       	std	Y+34, r25	; 0x22
    4756:	89 a3       	std	Y+33, r24	; 0x21
    4758:	0f c0       	rjmp	.+30     	; 0x4778 <main+0x5ba>
    475a:	80 e9       	ldi	r24, 0x90	; 144
    475c:	91 e0       	ldi	r25, 0x01	; 1
    475e:	98 a3       	std	Y+32, r25	; 0x20
    4760:	8f 8f       	std	Y+31, r24	; 0x1f
    4762:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4764:	98 a1       	ldd	r25, Y+32	; 0x20
    4766:	01 97       	sbiw	r24, 0x01	; 1
    4768:	f1 f7       	brne	.-4      	; 0x4766 <main+0x5a8>
    476a:	98 a3       	std	Y+32, r25	; 0x20
    476c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    476e:	89 a1       	ldd	r24, Y+33	; 0x21
    4770:	9a a1       	ldd	r25, Y+34	; 0x22
    4772:	01 97       	sbiw	r24, 0x01	; 1
    4774:	9a a3       	std	Y+34, r25	; 0x22
    4776:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4778:	89 a1       	ldd	r24, Y+33	; 0x21
    477a:	9a a1       	ldd	r25, Y+34	; 0x22
    477c:	00 97       	sbiw	r24, 0x00	; 0
    477e:	69 f7       	brne	.-38     	; 0x475a <main+0x59c>
    4780:	14 c0       	rjmp	.+40     	; 0x47aa <main+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4782:	6b a1       	ldd	r22, Y+35	; 0x23
    4784:	7c a1       	ldd	r23, Y+36	; 0x24
    4786:	8d a1       	ldd	r24, Y+37	; 0x25
    4788:	9e a1       	ldd	r25, Y+38	; 0x26
    478a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	9a a3       	std	Y+34, r25	; 0x22
    4794:	89 a3       	std	Y+33, r24	; 0x21
    4796:	89 a1       	ldd	r24, Y+33	; 0x21
    4798:	9a a1       	ldd	r25, Y+34	; 0x22
    479a:	9e 8f       	std	Y+30, r25	; 0x1e
    479c:	8d 8f       	std	Y+29, r24	; 0x1d
    479e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47a2:	01 97       	sbiw	r24, 0x01	; 1
    47a4:	f1 f7       	brne	.-4      	; 0x47a2 <main+0x5e4>
    47a6:	9e 8f       	std	Y+30, r25	; 0x1e
    47a8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		SPI_voidTransieve(2,&Local_u8RXData);
    47aa:	9e 01       	movw	r18, r28
    47ac:	2d 59       	subi	r18, 0x9D	; 157
    47ae:	3f 4f       	sbci	r19, 0xFF	; 255
    47b0:	82 e0       	ldi	r24, 0x02	; 2
    47b2:	b9 01       	movw	r22, r18
    47b4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_voidTransieve>
    47b8:	80 e0       	ldi	r24, 0x00	; 0
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	a8 ec       	ldi	r26, 0xC8	; 200
    47be:	b2 e4       	ldi	r27, 0x42	; 66
    47c0:	89 8f       	std	Y+25, r24	; 0x19
    47c2:	9a 8f       	std	Y+26, r25	; 0x1a
    47c4:	ab 8f       	std	Y+27, r26	; 0x1b
    47c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c8:	69 8d       	ldd	r22, Y+25	; 0x19
    47ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47d0:	20 e0       	ldi	r18, 0x00	; 0
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	4a e7       	ldi	r20, 0x7A	; 122
    47d6:	55 e4       	ldi	r21, 0x45	; 69
    47d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47dc:	dc 01       	movw	r26, r24
    47de:	cb 01       	movw	r24, r22
    47e0:	8d 8b       	std	Y+21, r24	; 0x15
    47e2:	9e 8b       	std	Y+22, r25	; 0x16
    47e4:	af 8b       	std	Y+23, r26	; 0x17
    47e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47e8:	6d 89       	ldd	r22, Y+21	; 0x15
    47ea:	7e 89       	ldd	r23, Y+22	; 0x16
    47ec:	8f 89       	ldd	r24, Y+23	; 0x17
    47ee:	98 8d       	ldd	r25, Y+24	; 0x18
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e8       	ldi	r20, 0x80	; 128
    47f6:	5f e3       	ldi	r21, 0x3F	; 63
    47f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    47fc:	88 23       	and	r24, r24
    47fe:	2c f4       	brge	.+10     	; 0x480a <main+0x64c>
		__ticks = 1;
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	9c 8b       	std	Y+20, r25	; 0x14
    4806:	8b 8b       	std	Y+19, r24	; 0x13
    4808:	3f c0       	rjmp	.+126    	; 0x4888 <main+0x6ca>
	else if (__tmp > 65535)
    480a:	6d 89       	ldd	r22, Y+21	; 0x15
    480c:	7e 89       	ldd	r23, Y+22	; 0x16
    480e:	8f 89       	ldd	r24, Y+23	; 0x17
    4810:	98 8d       	ldd	r25, Y+24	; 0x18
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	3f ef       	ldi	r19, 0xFF	; 255
    4816:	4f e7       	ldi	r20, 0x7F	; 127
    4818:	57 e4       	ldi	r21, 0x47	; 71
    481a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    481e:	18 16       	cp	r1, r24
    4820:	4c f5       	brge	.+82     	; 0x4874 <main+0x6b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4822:	69 8d       	ldd	r22, Y+25	; 0x19
    4824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	40 e2       	ldi	r20, 0x20	; 32
    4830:	51 e4       	ldi	r21, 0x41	; 65
    4832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4836:	dc 01       	movw	r26, r24
    4838:	cb 01       	movw	r24, r22
    483a:	bc 01       	movw	r22, r24
    483c:	cd 01       	movw	r24, r26
    483e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	9c 8b       	std	Y+20, r25	; 0x14
    4848:	8b 8b       	std	Y+19, r24	; 0x13
    484a:	0f c0       	rjmp	.+30     	; 0x486a <main+0x6ac>
    484c:	80 e9       	ldi	r24, 0x90	; 144
    484e:	91 e0       	ldi	r25, 0x01	; 1
    4850:	9a 8b       	std	Y+18, r25	; 0x12
    4852:	89 8b       	std	Y+17, r24	; 0x11
    4854:	89 89       	ldd	r24, Y+17	; 0x11
    4856:	9a 89       	ldd	r25, Y+18	; 0x12
    4858:	01 97       	sbiw	r24, 0x01	; 1
    485a:	f1 f7       	brne	.-4      	; 0x4858 <main+0x69a>
    485c:	9a 8b       	std	Y+18, r25	; 0x12
    485e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4860:	8b 89       	ldd	r24, Y+19	; 0x13
    4862:	9c 89       	ldd	r25, Y+20	; 0x14
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	9c 8b       	std	Y+20, r25	; 0x14
    4868:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    486a:	8b 89       	ldd	r24, Y+19	; 0x13
    486c:	9c 89       	ldd	r25, Y+20	; 0x14
    486e:	00 97       	sbiw	r24, 0x00	; 0
    4870:	69 f7       	brne	.-38     	; 0x484c <main+0x68e>
    4872:	14 c0       	rjmp	.+40     	; 0x489c <main+0x6de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4874:	6d 89       	ldd	r22, Y+21	; 0x15
    4876:	7e 89       	ldd	r23, Y+22	; 0x16
    4878:	8f 89       	ldd	r24, Y+23	; 0x17
    487a:	98 8d       	ldd	r25, Y+24	; 0x18
    487c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4880:	dc 01       	movw	r26, r24
    4882:	cb 01       	movw	r24, r22
    4884:	9c 8b       	std	Y+20, r25	; 0x14
    4886:	8b 8b       	std	Y+19, r24	; 0x13
    4888:	8b 89       	ldd	r24, Y+19	; 0x13
    488a:	9c 89       	ldd	r25, Y+20	; 0x14
    488c:	98 8b       	std	Y+16, r25	; 0x10
    488e:	8f 87       	std	Y+15, r24	; 0x0f
    4890:	8f 85       	ldd	r24, Y+15	; 0x0f
    4892:	98 89       	ldd	r25, Y+16	; 0x10
    4894:	01 97       	sbiw	r24, 0x01	; 1
    4896:	f1 f7       	brne	.-4      	; 0x4894 <main+0x6d6>
    4898:	98 8b       	std	Y+16, r25	; 0x10
    489a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		SPI_voidTransieve(3,&Local_u8RXData);
    489c:	9e 01       	movw	r18, r28
    489e:	2d 59       	subi	r18, 0x9D	; 157
    48a0:	3f 4f       	sbci	r19, 0xFF	; 255
    48a2:	83 e0       	ldi	r24, 0x03	; 3
    48a4:	b9 01       	movw	r22, r18
    48a6:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SPI_voidTransieve>
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	aa e7       	ldi	r26, 0x7A	; 122
    48b0:	b4 e4       	ldi	r27, 0x44	; 68
    48b2:	8b 87       	std	Y+11, r24	; 0x0b
    48b4:	9c 87       	std	Y+12, r25	; 0x0c
    48b6:	ad 87       	std	Y+13, r26	; 0x0d
    48b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    48bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    48be:	8d 85       	ldd	r24, Y+13	; 0x0d
    48c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	4a e7       	ldi	r20, 0x7A	; 122
    48c8:	55 e4       	ldi	r21, 0x45	; 69
    48ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ce:	dc 01       	movw	r26, r24
    48d0:	cb 01       	movw	r24, r22
    48d2:	8f 83       	std	Y+7, r24	; 0x07
    48d4:	98 87       	std	Y+8, r25	; 0x08
    48d6:	a9 87       	std	Y+9, r26	; 0x09
    48d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48da:	6f 81       	ldd	r22, Y+7	; 0x07
    48dc:	78 85       	ldd	r23, Y+8	; 0x08
    48de:	89 85       	ldd	r24, Y+9	; 0x09
    48e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	40 e8       	ldi	r20, 0x80	; 128
    48e8:	5f e3       	ldi	r21, 0x3F	; 63
    48ea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48ee:	88 23       	and	r24, r24
    48f0:	2c f4       	brge	.+10     	; 0x48fc <main+0x73e>
		__ticks = 1;
    48f2:	81 e0       	ldi	r24, 0x01	; 1
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	9e 83       	std	Y+6, r25	; 0x06
    48f8:	8d 83       	std	Y+5, r24	; 0x05
    48fa:	3f c0       	rjmp	.+126    	; 0x497a <main+0x7bc>
	else if (__tmp > 65535)
    48fc:	6f 81       	ldd	r22, Y+7	; 0x07
    48fe:	78 85       	ldd	r23, Y+8	; 0x08
    4900:	89 85       	ldd	r24, Y+9	; 0x09
    4902:	9a 85       	ldd	r25, Y+10	; 0x0a
    4904:	20 e0       	ldi	r18, 0x00	; 0
    4906:	3f ef       	ldi	r19, 0xFF	; 255
    4908:	4f e7       	ldi	r20, 0x7F	; 127
    490a:	57 e4       	ldi	r21, 0x47	; 71
    490c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4910:	18 16       	cp	r1, r24
    4912:	4c f5       	brge	.+82     	; 0x4966 <main+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4914:	6b 85       	ldd	r22, Y+11	; 0x0b
    4916:	7c 85       	ldd	r23, Y+12	; 0x0c
    4918:	8d 85       	ldd	r24, Y+13	; 0x0d
    491a:	9e 85       	ldd	r25, Y+14	; 0x0e
    491c:	20 e0       	ldi	r18, 0x00	; 0
    491e:	30 e0       	ldi	r19, 0x00	; 0
    4920:	40 e2       	ldi	r20, 0x20	; 32
    4922:	51 e4       	ldi	r21, 0x41	; 65
    4924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4928:	dc 01       	movw	r26, r24
    492a:	cb 01       	movw	r24, r22
    492c:	bc 01       	movw	r22, r24
    492e:	cd 01       	movw	r24, r26
    4930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	9e 83       	std	Y+6, r25	; 0x06
    493a:	8d 83       	std	Y+5, r24	; 0x05
    493c:	0f c0       	rjmp	.+30     	; 0x495c <main+0x79e>
    493e:	80 e9       	ldi	r24, 0x90	; 144
    4940:	91 e0       	ldi	r25, 0x01	; 1
    4942:	9c 83       	std	Y+4, r25	; 0x04
    4944:	8b 83       	std	Y+3, r24	; 0x03
    4946:	8b 81       	ldd	r24, Y+3	; 0x03
    4948:	9c 81       	ldd	r25, Y+4	; 0x04
    494a:	01 97       	sbiw	r24, 0x01	; 1
    494c:	f1 f7       	brne	.-4      	; 0x494a <main+0x78c>
    494e:	9c 83       	std	Y+4, r25	; 0x04
    4950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4952:	8d 81       	ldd	r24, Y+5	; 0x05
    4954:	9e 81       	ldd	r25, Y+6	; 0x06
    4956:	01 97       	sbiw	r24, 0x01	; 1
    4958:	9e 83       	std	Y+6, r25	; 0x06
    495a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    495c:	8d 81       	ldd	r24, Y+5	; 0x05
    495e:	9e 81       	ldd	r25, Y+6	; 0x06
    4960:	00 97       	sbiw	r24, 0x00	; 0
    4962:	69 f7       	brne	.-38     	; 0x493e <main+0x780>
    4964:	14 c0       	rjmp	.+40     	; 0x498e <main+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4966:	6f 81       	ldd	r22, Y+7	; 0x07
    4968:	78 85       	ldd	r23, Y+8	; 0x08
    496a:	89 85       	ldd	r24, Y+9	; 0x09
    496c:	9a 85       	ldd	r25, Y+10	; 0x0a
    496e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4972:	dc 01       	movw	r26, r24
    4974:	cb 01       	movw	r24, r22
    4976:	9e 83       	std	Y+6, r25	; 0x06
    4978:	8d 83       	std	Y+5, r24	; 0x05
    497a:	8d 81       	ldd	r24, Y+5	; 0x05
    497c:	9e 81       	ldd	r25, Y+6	; 0x06
    497e:	9a 83       	std	Y+2, r25	; 0x02
    4980:	89 83       	std	Y+1, r24	; 0x01
    4982:	89 81       	ldd	r24, Y+1	; 0x01
    4984:	9a 81       	ldd	r25, Y+2	; 0x02
    4986:	01 97       	sbiw	r24, 0x01	; 1
    4988:	f1 f7       	brne	.-4      	; 0x4986 <main+0x7c8>
    498a:	9a 83       	std	Y+2, r25	; 0x02
    498c:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1000);
		exit(0);
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 38 25 	call	0x4a70	; 0x4a70 <_exit>

00004996 <__udivmodhi4>:
    4996:	aa 1b       	sub	r26, r26
    4998:	bb 1b       	sub	r27, r27
    499a:	51 e1       	ldi	r21, 0x11	; 17
    499c:	07 c0       	rjmp	.+14     	; 0x49ac <__udivmodhi4_ep>

0000499e <__udivmodhi4_loop>:
    499e:	aa 1f       	adc	r26, r26
    49a0:	bb 1f       	adc	r27, r27
    49a2:	a6 17       	cp	r26, r22
    49a4:	b7 07       	cpc	r27, r23
    49a6:	10 f0       	brcs	.+4      	; 0x49ac <__udivmodhi4_ep>
    49a8:	a6 1b       	sub	r26, r22
    49aa:	b7 0b       	sbc	r27, r23

000049ac <__udivmodhi4_ep>:
    49ac:	88 1f       	adc	r24, r24
    49ae:	99 1f       	adc	r25, r25
    49b0:	5a 95       	dec	r21
    49b2:	a9 f7       	brne	.-22     	; 0x499e <__udivmodhi4_loop>
    49b4:	80 95       	com	r24
    49b6:	90 95       	com	r25
    49b8:	bc 01       	movw	r22, r24
    49ba:	cd 01       	movw	r24, r26
    49bc:	08 95       	ret

000049be <__udivmodsi4>:
    49be:	a1 e2       	ldi	r26, 0x21	; 33
    49c0:	1a 2e       	mov	r1, r26
    49c2:	aa 1b       	sub	r26, r26
    49c4:	bb 1b       	sub	r27, r27
    49c6:	fd 01       	movw	r30, r26
    49c8:	0d c0       	rjmp	.+26     	; 0x49e4 <__udivmodsi4_ep>

000049ca <__udivmodsi4_loop>:
    49ca:	aa 1f       	adc	r26, r26
    49cc:	bb 1f       	adc	r27, r27
    49ce:	ee 1f       	adc	r30, r30
    49d0:	ff 1f       	adc	r31, r31
    49d2:	a2 17       	cp	r26, r18
    49d4:	b3 07       	cpc	r27, r19
    49d6:	e4 07       	cpc	r30, r20
    49d8:	f5 07       	cpc	r31, r21
    49da:	20 f0       	brcs	.+8      	; 0x49e4 <__udivmodsi4_ep>
    49dc:	a2 1b       	sub	r26, r18
    49de:	b3 0b       	sbc	r27, r19
    49e0:	e4 0b       	sbc	r30, r20
    49e2:	f5 0b       	sbc	r31, r21

000049e4 <__udivmodsi4_ep>:
    49e4:	66 1f       	adc	r22, r22
    49e6:	77 1f       	adc	r23, r23
    49e8:	88 1f       	adc	r24, r24
    49ea:	99 1f       	adc	r25, r25
    49ec:	1a 94       	dec	r1
    49ee:	69 f7       	brne	.-38     	; 0x49ca <__udivmodsi4_loop>
    49f0:	60 95       	com	r22
    49f2:	70 95       	com	r23
    49f4:	80 95       	com	r24
    49f6:	90 95       	com	r25
    49f8:	9b 01       	movw	r18, r22
    49fa:	ac 01       	movw	r20, r24
    49fc:	bd 01       	movw	r22, r26
    49fe:	cf 01       	movw	r24, r30
    4a00:	08 95       	ret

00004a02 <__prologue_saves__>:
    4a02:	2f 92       	push	r2
    4a04:	3f 92       	push	r3
    4a06:	4f 92       	push	r4
    4a08:	5f 92       	push	r5
    4a0a:	6f 92       	push	r6
    4a0c:	7f 92       	push	r7
    4a0e:	8f 92       	push	r8
    4a10:	9f 92       	push	r9
    4a12:	af 92       	push	r10
    4a14:	bf 92       	push	r11
    4a16:	cf 92       	push	r12
    4a18:	df 92       	push	r13
    4a1a:	ef 92       	push	r14
    4a1c:	ff 92       	push	r15
    4a1e:	0f 93       	push	r16
    4a20:	1f 93       	push	r17
    4a22:	cf 93       	push	r28
    4a24:	df 93       	push	r29
    4a26:	cd b7       	in	r28, 0x3d	; 61
    4a28:	de b7       	in	r29, 0x3e	; 62
    4a2a:	ca 1b       	sub	r28, r26
    4a2c:	db 0b       	sbc	r29, r27
    4a2e:	0f b6       	in	r0, 0x3f	; 63
    4a30:	f8 94       	cli
    4a32:	de bf       	out	0x3e, r29	; 62
    4a34:	0f be       	out	0x3f, r0	; 63
    4a36:	cd bf       	out	0x3d, r28	; 61
    4a38:	09 94       	ijmp

00004a3a <__epilogue_restores__>:
    4a3a:	2a 88       	ldd	r2, Y+18	; 0x12
    4a3c:	39 88       	ldd	r3, Y+17	; 0x11
    4a3e:	48 88       	ldd	r4, Y+16	; 0x10
    4a40:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a42:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a44:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a46:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a48:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a4c:	b9 84       	ldd	r11, Y+9	; 0x09
    4a4e:	c8 84       	ldd	r12, Y+8	; 0x08
    4a50:	df 80       	ldd	r13, Y+7	; 0x07
    4a52:	ee 80       	ldd	r14, Y+6	; 0x06
    4a54:	fd 80       	ldd	r15, Y+5	; 0x05
    4a56:	0c 81       	ldd	r16, Y+4	; 0x04
    4a58:	1b 81       	ldd	r17, Y+3	; 0x03
    4a5a:	aa 81       	ldd	r26, Y+2	; 0x02
    4a5c:	b9 81       	ldd	r27, Y+1	; 0x01
    4a5e:	ce 0f       	add	r28, r30
    4a60:	d1 1d       	adc	r29, r1
    4a62:	0f b6       	in	r0, 0x3f	; 63
    4a64:	f8 94       	cli
    4a66:	de bf       	out	0x3e, r29	; 62
    4a68:	0f be       	out	0x3f, r0	; 63
    4a6a:	cd bf       	out	0x3d, r28	; 61
    4a6c:	ed 01       	movw	r28, r26
    4a6e:	08 95       	ret

00004a70 <_exit>:
    4a70:	f8 94       	cli

00004a72 <__stop_program>:
    4a72:	ff cf       	rjmp	.-2      	; 0x4a72 <__stop_program>
