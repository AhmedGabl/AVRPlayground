
DCMOTOR_H_BRIDGE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00001dc6  00001e5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000cc  008000cc  00001ec6  2**0
                  ALLOC
  3 .stab         00001968  00000000  00000000  00001ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000160d  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000050ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000089d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000958b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_10>
      2c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <main>
      8a:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TMR0_voidSetDelay_ms_usingCTC+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
     b54:	ec e5       	ldi	r30, 0x5C	; 92
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	89 ef       	ldi	r24, 0xF9	; 249
     b5a:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	cc 01       	movw	r24, r24
     b62:	a0 e0       	ldi	r26, 0x00	; 0
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	80 93 d6 00 	sts	0x00D6, r24
     b6a:	90 93 d7 00 	sts	0x00D7, r25
     b6e:	a0 93 d8 00 	sts	0x00D8, r26
     b72:	b0 93 d9 00 	sts	0x00D9, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle) && (0 <= copy_u8DutyCycle)) {
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	85 36       	cpi	r24, 0x65	; 101
     b90:	d0 f4       	brcc	.+52     	; 0xbc6 <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
     b92:	ec e5       	ldi	r30, 0x5C	; 92
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	48 2f       	mov	r20, r24
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	ca 01       	movw	r24, r20
     b9e:	9c 01       	movw	r18, r24
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	c9 01       	movw	r24, r18
     ba6:	96 95       	lsr	r25
     ba8:	98 2f       	mov	r25, r24
     baa:	88 27       	eor	r24, r24
     bac:	97 95       	ror	r25
     bae:	87 95       	ror	r24
     bb0:	82 1b       	sub	r24, r18
     bb2:	93 0b       	sbc	r25, r19
     bb4:	84 0f       	add	r24, r20
     bb6:	95 1f       	adc	r25, r21
     bb8:	24 e6       	ldi	r18, 0x64	; 100
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	b9 01       	movw	r22, r18
     bbe:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__udivmodhi4>
     bc2:	cb 01       	movw	r24, r22
     bc4:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
     bc6:	0f 90       	pop	r0
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
     bd6:	a3 e5       	ldi	r26, 0x53	; 83
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e3 e5       	ldi	r30, 0x53	; 83
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
     be4:	a3 e5       	ldi	r26, 0x53	; 83
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e3 e5       	ldi	r30, 0x53	; 83
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	87 7f       	andi	r24, 0xF7	; 247
     bf0:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
     bf2:	a3 e5       	ldi	r26, 0x53	; 83
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e3 e5       	ldi	r30, 0x53	; 83
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8f 7e       	andi	r24, 0xEF	; 239
     bfe:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
     c00:	a3 e5       	ldi	r26, 0x53	; 83
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e3 e5       	ldi	r30, 0x53	; 83
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 62       	ori	r24, 0x20	; 32
     c0c:	8c 93       	st	X, r24
#endif

#endif
}
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
     c1c:	a3 e5       	ldi	r26, 0x53	; 83
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e3 e5       	ldi	r30, 0x53	; 83
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	81 60       	ori	r24, 0x01	; 1
     c28:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
     c2a:	a3 e5       	ldi	r26, 0x53	; 83
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e3 e5       	ldi	r30, 0x53	; 83
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	82 60       	ori	r24, 0x02	; 2
     c36:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     c38:	a3 e5       	ldi	r26, 0x53	; 83
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e3 e5       	ldi	r30, 0x53	; 83
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	8b 7f       	andi	r24, 0xFB	; 251
     c44:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
     c54:	a3 e5       	ldi	r26, 0x53	; 83
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e3 e5       	ldi	r30, 0x53	; 83
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8e 7f       	andi	r24, 0xFE	; 254
     c60:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     c62:	a3 e5       	ldi	r26, 0x53	; 83
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e3 e5       	ldi	r30, 0x53	; 83
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8d 7f       	andi	r24, 0xFD	; 253
     c6e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     c70:	a3 e5       	ldi	r26, 0x53	; 83
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e3 e5       	ldi	r30, 0x53	; 83
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8b 7f       	andi	r24, 0xFB	; 251
     c7c:	8c 93       	st	X, r24
}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <TMR0_voidSetCallBackOVF+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	31 f0       	breq	.+12     	; 0xca6 <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	90 93 cd 00 	sts	0x00CD, r25
     ca2:	80 93 cc 00 	sts	0x00CC, r24
}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <TMR0_voidSetCallBackCTC+0x6>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	31 f0       	breq	.+12     	; 0xcd2 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	90 93 cf 00 	sts	0x00CF, r25
     cce:	80 93 ce 00 	sts	0x00CE, r24
}
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	5f 93       	push	r21
     cee:	6f 93       	push	r22
     cf0:	7f 93       	push	r23
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	af 93       	push	r26
     cf8:	bf 93       	push	r27
     cfa:	ef 93       	push	r30
     cfc:	ff 93       	push	r31
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
     d06:	80 91 d0 00 	lds	r24, 0x00D0
     d0a:	90 91 d1 00 	lds	r25, 0x00D1
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	90 93 d1 00 	sts	0x00D1, r25
     d14:	80 93 d0 00 	sts	0x00D0, r24

	if (TMR0_ovCount == local_u16ovCounter) {
     d18:	80 91 d0 00 	lds	r24, 0x00D0
     d1c:	90 91 d1 00 	lds	r25, 0x00D1
     d20:	8a 30       	cpi	r24, 0x0A	; 10
     d22:	91 05       	cpc	r25, r1
     d24:	99 f4       	brne	.+38     	; 0xd4c <__vector_11+0x70>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
     d26:	e2 e5       	ldi	r30, 0x52	; 82
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	81 e7       	ldi	r24, 0x71	; 113
     d2c:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
     d2e:	10 92 d1 00 	sts	0x00D1, r1
     d32:	10 92 d0 00 	sts	0x00D0, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
     d36:	80 91 cc 00 	lds	r24, 0x00CC
     d3a:	90 91 cd 00 	lds	r25, 0x00CD
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	29 f0       	breq	.+10     	; 0xd4c <__vector_11+0x70>
			TMR0_privatePtrToCAllBackOVF();
     d42:	e0 91 cc 00 	lds	r30, 0x00CC
     d46:	f0 91 cd 00 	lds	r31, 0x00CD
     d4a:	09 95       	icall
		}
	}
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
     d66:	2f 91       	pop	r18
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
     d9c:	80 91 d2 00 	lds	r24, 0x00D2
     da0:	90 91 d3 00 	lds	r25, 0x00D3
     da4:	a0 91 d4 00 	lds	r26, 0x00D4
     da8:	b0 91 d5 00 	lds	r27, 0x00D5
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	a1 1d       	adc	r26, r1
     db0:	b1 1d       	adc	r27, r1
     db2:	80 93 d2 00 	sts	0x00D2, r24
     db6:	90 93 d3 00 	sts	0x00D3, r25
     dba:	a0 93 d4 00 	sts	0x00D4, r26
     dbe:	b0 93 d5 00 	sts	0x00D5, r27

	if (private_ctcCounter == local_u32CTCCounter) {
     dc2:	20 91 d6 00 	lds	r18, 0x00D6
     dc6:	30 91 d7 00 	lds	r19, 0x00D7
     dca:	40 91 d8 00 	lds	r20, 0x00D8
     dce:	50 91 d9 00 	lds	r21, 0x00D9
     dd2:	80 91 d2 00 	lds	r24, 0x00D2
     dd6:	90 91 d3 00 	lds	r25, 0x00D3
     dda:	a0 91 d4 00 	lds	r26, 0x00D4
     dde:	b0 91 d5 00 	lds	r27, 0x00D5
     de2:	28 17       	cp	r18, r24
     de4:	39 07       	cpc	r19, r25
     de6:	4a 07       	cpc	r20, r26
     de8:	5b 07       	cpc	r21, r27
     dea:	99 f4       	brne	.+38     	; 0xe12 <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
     dec:	10 92 d2 00 	sts	0x00D2, r1
     df0:	10 92 d3 00 	sts	0x00D3, r1
     df4:	10 92 d4 00 	sts	0x00D4, r1
     df8:	10 92 d5 00 	sts	0x00D5, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
     dfc:	80 91 ce 00 	lds	r24, 0x00CE
     e00:	90 91 cf 00 	lds	r25, 0x00CF
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	29 f0       	breq	.+10     	; 0xe12 <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
     e08:	e0 91 ce 00 	lds	r30, 0x00CE
     e0c:	f0 91 cf 00 	lds	r31, 0x00CF
     e10:	09 95       	icall
		}
	}
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
     e44:	ec e5       	ldi	r30, 0x5C	; 92
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	80 83       	st	Z, r24
}
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <Port_Init+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <Port_Init+0x8>
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <Port_Init+0xa>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
     e66:	1a 82       	std	Y+2, r1	; 0x02
     e68:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
     e6a:	1a 82       	std	Y+2, r1	; 0x02
     e6c:	19 82       	std	Y+1, r1	; 0x01
     e6e:	ea c1       	rjmp	.+980    	; 0x1244 <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
     e70:	29 81       	ldd	r18, Y+1	; 0x01
     e72:	3a 81       	ldd	r19, Y+2	; 0x02
     e74:	c9 01       	movw	r24, r18
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	28 0f       	add	r18, r24
     e7c:	39 1f       	adc	r19, r25
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	fc 01       	movw	r30, r24
     e84:	e2 0f       	add	r30, r18
     e86:	f3 1f       	adc	r31, r19
     e88:	80 81       	ld	r24, Z
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	3e 83       	std	Y+6, r19	; 0x06
     e90:	2d 83       	std	Y+5, r18	; 0x05
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <Port_Init+0x4a>
     e9c:	85 c0       	rjmp	.+266    	; 0xfa8 <Port_Init+0x154>
     e9e:	2d 81       	ldd	r18, Y+5	; 0x05
     ea0:	3e 81       	ldd	r19, Y+6	; 0x06
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <Port_Init+0x5e>
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	71 f0       	breq	.+28     	; 0xecc <Port_Init+0x78>
     eb0:	c4 c1       	rjmp	.+904    	; 0x123a <Port_Init+0x3e6>
     eb2:	2d 81       	ldd	r18, Y+5	; 0x05
     eb4:	3e 81       	ldd	r19, Y+6	; 0x06
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <Port_Init+0x6a>
     ebc:	e3 c0       	rjmp	.+454    	; 0x1084 <Port_Init+0x230>
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <Port_Init+0x76>
     ec8:	4b c1       	rjmp	.+662    	; 0x1160 <Port_Init+0x30c>
     eca:	b7 c1       	rjmp	.+878    	; 0x123a <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
     ecc:	29 81       	ldd	r18, Y+1	; 0x01
     ece:	3a 81       	ldd	r19, Y+2	; 0x02
     ed0:	c9 01       	movw	r24, r18
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	28 0f       	add	r18, r24
     ed8:	39 1f       	adc	r19, r25
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	fc 01       	movw	r30, r24
     ee0:	e2 0f       	add	r30, r18
     ee2:	f3 1f       	adc	r31, r19
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	01 f5       	brne	.+64     	; 0xf2a <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
     eea:	aa e3       	ldi	r26, 0x3A	; 58
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e3       	ldi	r30, 0x3A	; 58
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	29 81       	ldd	r18, Y+1	; 0x01
     ef8:	3a 81       	ldd	r19, Y+2	; 0x02
     efa:	c9 01       	movw	r24, r18
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	28 0f       	add	r18, r24
     f02:	39 1f       	adc	r19, r25
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	fc 01       	movw	r30, r24
     f0a:	e2 0f       	add	r30, r18
     f0c:	f3 1f       	adc	r31, r19
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <Port_Init+0xcc>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <Port_Init+0xc8>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	88 c1       	rjmp	.+784    	; 0x123a <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
     f2a:	aa e3       	ldi	r26, 0x3A	; 58
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ea e3       	ldi	r30, 0x3A	; 58
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	29 81       	ldd	r18, Y+1	; 0x01
     f38:	3a 81       	ldd	r19, Y+2	; 0x02
     f3a:	c9 01       	movw	r24, r18
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	28 0f       	add	r18, r24
     f42:	39 1f       	adc	r19, r25
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	fc 01       	movw	r30, r24
     f4a:	e2 0f       	add	r30, r18
     f4c:	f3 1f       	adc	r31, r19
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <Port_Init+0x10a>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	2a 95       	dec	r18
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <Port_Init+0x106>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
     f68:	ab e3       	ldi	r26, 0x3B	; 59
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	eb e3       	ldi	r30, 0x3B	; 59
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	29 81       	ldd	r18, Y+1	; 0x01
     f76:	3a 81       	ldd	r19, Y+2	; 0x02
     f78:	c9 01       	movw	r24, r18
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	28 0f       	add	r18, r24
     f80:	39 1f       	adc	r19, r25
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	81 81       	ldd	r24, Z+1	; 0x01
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <Port_Init+0x14a>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <Port_Init+0x146>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	49 c1       	rjmp	.+658    	; 0x123a <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
     fa8:	29 81       	ldd	r18, Y+1	; 0x01
     faa:	3a 81       	ldd	r19, Y+2	; 0x02
     fac:	c9 01       	movw	r24, r18
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	28 0f       	add	r18, r24
     fb4:	39 1f       	adc	r19, r25
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	fc 01       	movw	r30, r24
     fbc:	e2 0f       	add	r30, r18
     fbe:	f3 1f       	adc	r31, r19
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	01 f5       	brne	.+64     	; 0x1006 <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
     fc6:	a7 e3       	ldi	r26, 0x37	; 55
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e3       	ldi	r30, 0x37	; 55
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	29 81       	ldd	r18, Y+1	; 0x01
     fd4:	3a 81       	ldd	r19, Y+2	; 0x02
     fd6:	c9 01       	movw	r24, r18
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	28 0f       	add	r18, r24
     fde:	39 1f       	adc	r19, r25
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	fc 01       	movw	r30, r24
     fe6:	e2 0f       	add	r30, r18
     fe8:	f3 1f       	adc	r31, r19
     fea:	81 81       	ldd	r24, Z+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <Port_Init+0x1a8>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <Port_Init+0x1a4>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	1a c1       	rjmp	.+564    	; 0x123a <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1006:	a7 e3       	ldi	r26, 0x37	; 55
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e7 e3       	ldi	r30, 0x37	; 55
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	29 81       	ldd	r18, Y+1	; 0x01
    1014:	3a 81       	ldd	r19, Y+2	; 0x02
    1016:	c9 01       	movw	r24, r18
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	28 0f       	add	r18, r24
    101e:	39 1f       	adc	r19, r25
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	fc 01       	movw	r30, r24
    1026:	e2 0f       	add	r30, r18
    1028:	f3 1f       	adc	r31, r19
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <Port_Init+0x1e6>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	2a 95       	dec	r18
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <Port_Init+0x1e2>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    1044:	a8 e3       	ldi	r26, 0x38	; 56
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e8 e3       	ldi	r30, 0x38	; 56
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	29 81       	ldd	r18, Y+1	; 0x01
    1052:	3a 81       	ldd	r19, Y+2	; 0x02
    1054:	c9 01       	movw	r24, r18
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	28 0f       	add	r18, r24
    105c:	39 1f       	adc	r19, r25
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	fc 01       	movw	r30, r24
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	81 81       	ldd	r24, Z+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <Port_Init+0x226>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <Port_Init+0x222>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	db c0       	rjmp	.+438    	; 0x123a <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1084:	29 81       	ldd	r18, Y+1	; 0x01
    1086:	3a 81       	ldd	r19, Y+2	; 0x02
    1088:	c9 01       	movw	r24, r18
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	28 0f       	add	r18, r24
    1090:	39 1f       	adc	r19, r25
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	fc 01       	movw	r30, r24
    1098:	e2 0f       	add	r30, r18
    109a:	f3 1f       	adc	r31, r19
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	01 f5       	brne	.+64     	; 0x10e2 <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e4 e3       	ldi	r30, 0x34	; 52
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	3a 81       	ldd	r19, Y+2	; 0x02
    10b2:	c9 01       	movw	r24, r18
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	28 0f       	add	r18, r24
    10ba:	39 1f       	adc	r19, r25
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	fc 01       	movw	r30, r24
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	81 81       	ldd	r24, Z+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <Port_Init+0x284>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <Port_Init+0x280>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	ac c0       	rjmp	.+344    	; 0x123a <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    10e2:	a4 e3       	ldi	r26, 0x34	; 52
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e4 e3       	ldi	r30, 0x34	; 52
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	29 81       	ldd	r18, Y+1	; 0x01
    10f0:	3a 81       	ldd	r19, Y+2	; 0x02
    10f2:	c9 01       	movw	r24, r18
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	28 0f       	add	r18, r24
    10fa:	39 1f       	adc	r19, r25
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	fc 01       	movw	r30, r24
    1102:	e2 0f       	add	r30, r18
    1104:	f3 1f       	adc	r31, r19
    1106:	81 81       	ldd	r24, Z+1	; 0x01
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <Port_Init+0x2c2>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	2a 95       	dec	r18
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <Port_Init+0x2be>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    1120:	a5 e3       	ldi	r26, 0x35	; 53
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e3       	ldi	r30, 0x35	; 53
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	29 81       	ldd	r18, Y+1	; 0x01
    112e:	3a 81       	ldd	r19, Y+2	; 0x02
    1130:	c9 01       	movw	r24, r18
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	28 0f       	add	r18, r24
    1138:	39 1f       	adc	r19, r25
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	fc 01       	movw	r30, r24
    1140:	e2 0f       	add	r30, r18
    1142:	f3 1f       	adc	r31, r19
    1144:	81 81       	ldd	r24, Z+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <Port_Init+0x302>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <Port_Init+0x2fe>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	6d c0       	rjmp	.+218    	; 0x123a <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1160:	29 81       	ldd	r18, Y+1	; 0x01
    1162:	3a 81       	ldd	r19, Y+2	; 0x02
    1164:	c9 01       	movw	r24, r18
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	28 0f       	add	r18, r24
    116c:	39 1f       	adc	r19, r25
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	01 f5       	brne	.+64     	; 0x11be <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    117e:	a1 e3       	ldi	r26, 0x31	; 49
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e1 e3       	ldi	r30, 0x31	; 49
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	29 81       	ldd	r18, Y+1	; 0x01
    118c:	3a 81       	ldd	r19, Y+2	; 0x02
    118e:	c9 01       	movw	r24, r18
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	28 0f       	add	r18, r24
    1196:	39 1f       	adc	r19, r25
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	fc 01       	movw	r30, r24
    119e:	e2 0f       	add	r30, r18
    11a0:	f3 1f       	adc	r31, r19
    11a2:	81 81       	ldd	r24, Z+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <Port_Init+0x360>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <Port_Init+0x35c>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	3e c0       	rjmp	.+124    	; 0x123a <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    11be:	a1 e3       	ldi	r26, 0x31	; 49
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e1 e3       	ldi	r30, 0x31	; 49
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	29 81       	ldd	r18, Y+1	; 0x01
    11cc:	3a 81       	ldd	r19, Y+2	; 0x02
    11ce:	c9 01       	movw	r24, r18
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	28 0f       	add	r18, r24
    11d6:	39 1f       	adc	r19, r25
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	81 81       	ldd	r24, Z+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <Port_Init+0x39e>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	2a 95       	dec	r18
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <Port_Init+0x39a>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    11fc:	a2 e3       	ldi	r26, 0x32	; 50
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e2 e3       	ldi	r30, 0x32	; 50
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	3a 81       	ldd	r19, Y+2	; 0x02
    120c:	c9 01       	movw	r24, r18
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	28 0f       	add	r18, r24
    1214:	39 1f       	adc	r19, r25
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	fc 01       	movw	r30, r24
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	81 81       	ldd	r24, Z+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <Port_Init+0x3de>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <Port_Init+0x3da>
    1236:	84 2b       	or	r24, r20
    1238:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	80 32       	cpi	r24, 0x20	; 32
    124a:	91 05       	cpc	r25, r1
    124c:	0c f4       	brge	.+2      	; 0x1250 <Port_Init+0x3fc>
    124e:	10 ce       	rjmp	.-992    	; 0xe70 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    1250:	26 96       	adiw	r28, 0x06	; 6
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <Dio_WriteChannel+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <Dio_WriteChannel+0x8>
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8a 83       	std	Y+2, r24	; 0x02
    1272:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	86 95       	lsr	r24
    1278:	86 95       	lsr	r24
    127a:	86 95       	lsr	r24
    127c:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	3d 83       	std	Y+5, r19	; 0x05
    1286:	2c 83       	std	Y+4, r18	; 0x04
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	91 05       	cpc	r25, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <Dio_WriteChannel+0x32>
    1292:	43 c0       	rjmp	.+134    	; 0x131a <Dio_WriteChannel+0xb8>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <Dio_WriteChannel+0x46>
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <Dio_WriteChannel+0x60>
    12a6:	ce c0       	rjmp	.+412    	; 0x1444 <Dio_WriteChannel+0x1e2>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <Dio_WriteChannel+0x52>
    12b2:	65 c0       	rjmp	.+202    	; 0x137e <Dio_WriteChannel+0x11c>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <Dio_WriteChannel+0x5e>
    12be:	91 c0       	rjmp	.+290    	; 0x13e2 <Dio_WriteChannel+0x180>
    12c0:	c1 c0       	rjmp	.+386    	; 0x1444 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	a1 f4       	brne	.+40     	; 0x12f0 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    12c8:	ab e3       	ldi	r26, 0x3B	; 59
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <Dio_WriteChannel+0x84>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <Dio_WriteChannel+0x80>
    12ea:	84 2b       	or	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	aa c0       	rjmp	.+340    	; 0x1444 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    12f0:	ab e3       	ldi	r26, 0x3B	; 59
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <Dio_WriteChannel+0xac>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <Dio_WriteChannel+0xa8>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	95 c0       	rjmp	.+298    	; 0x1444 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	b9 f4       	brne	.+46     	; 0x134e <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    1320:	a8 e3       	ldi	r26, 0x38	; 56
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e8 e3       	ldi	r30, 0x38	; 56
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9c 01       	movw	r18, r24
    1334:	27 70       	andi	r18, 0x07	; 7
    1336:	30 70       	andi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <Dio_WriteChannel+0xe2>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <Dio_WriteChannel+0xde>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	7b c0       	rjmp	.+246    	; 0x1444 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    134e:	a8 e3       	ldi	r26, 0x38	; 56
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e8 e3       	ldi	r30, 0x38	; 56
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 01       	movw	r18, r24
    1362:	27 70       	andi	r18, 0x07	; 7
    1364:	30 70       	andi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <Dio_WriteChannel+0x110>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <Dio_WriteChannel+0x10c>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	63 c0       	rjmp	.+198    	; 0x1444 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	b9 f4       	brne	.+46     	; 0x13b2 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    1384:	a5 e3       	ldi	r26, 0x35	; 53
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e3       	ldi	r30, 0x35	; 53
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9c 01       	movw	r18, r24
    1398:	27 70       	andi	r18, 0x07	; 7
    139a:	30 70       	andi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <Dio_WriteChannel+0x146>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <Dio_WriteChannel+0x142>
    13ac:	84 2b       	or	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	49 c0       	rjmp	.+146    	; 0x1444 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    13b2:	a5 e3       	ldi	r26, 0x35	; 53
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e3       	ldi	r30, 0x35	; 53
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9c 01       	movw	r18, r24
    13c6:	27 70       	andi	r18, 0x07	; 7
    13c8:	30 70       	andi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <Dio_WriteChannel+0x174>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <Dio_WriteChannel+0x170>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	31 c0       	rjmp	.+98     	; 0x1444 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	b9 f4       	brne	.+46     	; 0x1416 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    13e8:	a2 e3       	ldi	r26, 0x32	; 50
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9c 01       	movw	r18, r24
    13fc:	27 70       	andi	r18, 0x07	; 7
    13fe:	30 70       	andi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <Dio_WriteChannel+0x1aa>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <Dio_WriteChannel+0x1a6>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	17 c0       	rjmp	.+46     	; 0x1444 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    1416:	a2 e3       	ldi	r26, 0x32	; 50
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e2 e3       	ldi	r30, 0x32	; 50
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9c 01       	movw	r18, r24
    142a:	27 70       	andi	r18, 0x07	; 7
    142c:	30 70       	andi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <Dio_WriteChannel+0x1d8>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <Dio_WriteChannel+0x1d4>
    143e:	80 95       	com	r24
    1440:	84 23       	and	r24, r20
    1442:	8c 93       	st	X, r24
		}
		break;
	}
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <Dio_ReadChannel+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <Dio_ReadChannel+0x8>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	86 95       	lsr	r24
    1468:	86 95       	lsr	r24
    146a:	86 95       	lsr	r24
    146c:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3d 83       	std	Y+5, r19	; 0x05
    1476:	2c 83       	std	Y+4, r18	; 0x04
    1478:	4c 81       	ldd	r20, Y+4	; 0x04
    147a:	5d 81       	ldd	r21, Y+5	; 0x05
    147c:	41 30       	cpi	r20, 0x01	; 1
    147e:	51 05       	cpc	r21, r1
    1480:	49 f1       	breq	.+82     	; 0x14d4 <Dio_ReadChannel+0x80>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	91 05       	cpc	r25, r1
    148a:	34 f4       	brge	.+12     	; 0x1498 <Dio_ReadChannel+0x44>
    148c:	2c 81       	ldd	r18, Y+4	; 0x04
    148e:	3d 81       	ldd	r19, Y+5	; 0x05
    1490:	21 15       	cp	r18, r1
    1492:	31 05       	cpc	r19, r1
    1494:	69 f0       	breq	.+26     	; 0x14b0 <Dio_ReadChannel+0x5c>
    1496:	59 c0       	rjmp	.+178    	; 0x154a <Dio_ReadChannel+0xf6>
    1498:	4c 81       	ldd	r20, Y+4	; 0x04
    149a:	5d 81       	ldd	r21, Y+5	; 0x05
    149c:	42 30       	cpi	r20, 0x02	; 2
    149e:	51 05       	cpc	r21, r1
    14a0:	69 f1       	breq	.+90     	; 0x14fc <Dio_ReadChannel+0xa8>
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <Dio_ReadChannel+0x5a>
    14ac:	3b c0       	rjmp	.+118    	; 0x1524 <Dio_ReadChannel+0xd0>
    14ae:	4d c0       	rjmp	.+154    	; 0x154a <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    14b0:	e9 e3       	ldi	r30, 0x39	; 57
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a9 01       	movw	r20, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <Dio_ReadChannel+0x74>
    14c4:	55 95       	asr	r21
    14c6:	47 95       	ror	r20
    14c8:	8a 95       	dec	r24
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <Dio_ReadChannel+0x70>
    14cc:	ca 01       	movw	r24, r20
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	3b c0       	rjmp	.+118    	; 0x154a <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    14d4:	e6 e3       	ldi	r30, 0x36	; 54
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	87 70       	andi	r24, 0x07	; 7
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <Dio_ReadChannel+0x9c>
    14ec:	55 95       	asr	r21
    14ee:	47 95       	ror	r20
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <Dio_ReadChannel+0x98>
    14f4:	ca 01       	movw	r24, r20
    14f6:	81 70       	andi	r24, 0x01	; 1
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	27 c0       	rjmp	.+78     	; 0x154a <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    14fc:	e3 e3       	ldi	r30, 0x33	; 51
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	87 70       	andi	r24, 0x07	; 7
    150e:	90 70       	andi	r25, 0x00	; 0
    1510:	a9 01       	movw	r20, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <Dio_ReadChannel+0xc4>
    1514:	55 95       	asr	r21
    1516:	47 95       	ror	r20
    1518:	8a 95       	dec	r24
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <Dio_ReadChannel+0xc0>
    151c:	ca 01       	movw	r24, r20
    151e:	81 70       	andi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	13 c0       	rjmp	.+38     	; 0x154a <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    1524:	e0 e3       	ldi	r30, 0x30	; 48
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	87 70       	andi	r24, 0x07	; 7
    1536:	90 70       	andi	r25, 0x00	; 0
    1538:	a9 01       	movw	r20, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <Dio_ReadChannel+0xec>
    153c:	55 95       	asr	r21
    153e:	47 95       	ror	r20
    1540:	8a 95       	dec	r24
    1542:	e2 f7       	brpl	.-8      	; 0x153c <Dio_ReadChannel+0xe8>
    1544:	ca 01       	movw	r24, r20
    1546:	81 70       	andi	r24, 0x01	; 1
    1548:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <Dio_FlipChannel+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <Dio_FlipChannel+0x8>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	86 95       	lsr	r24
    156e:	86 95       	lsr	r24
    1570:	86 95       	lsr	r24
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	3c 83       	std	Y+4, r19	; 0x04
    1578:	2b 83       	std	Y+3, r18	; 0x03
    157a:	4b 81       	ldd	r20, Y+3	; 0x03
    157c:	5c 81       	ldd	r21, Y+4	; 0x04
    157e:	41 30       	cpi	r20, 0x01	; 1
    1580:	51 05       	cpc	r21, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <Dio_FlipChannel+0x2a>
    1584:	3c c0       	rjmp	.+120    	; 0x15fe <Dio_FlipChannel+0xa2>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	91 05       	cpc	r25, r1
    158e:	34 f4       	brge	.+12     	; 0x159c <Dio_FlipChannel+0x40>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	21 15       	cp	r18, r1
    1596:	31 05       	cpc	r19, r1
    1598:	71 f0       	breq	.+28     	; 0x15b6 <Dio_FlipChannel+0x5a>
    159a:	ab c0       	rjmp	.+342    	; 0x16f2 <Dio_FlipChannel+0x196>
    159c:	4b 81       	ldd	r20, Y+3	; 0x03
    159e:	5c 81       	ldd	r21, Y+4	; 0x04
    15a0:	42 30       	cpi	r20, 0x02	; 2
    15a2:	51 05       	cpc	r21, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <Dio_FlipChannel+0x4c>
    15a6:	54 c0       	rjmp	.+168    	; 0x1650 <Dio_FlipChannel+0xf4>
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <Dio_FlipChannel+0x58>
    15b2:	77 c0       	rjmp	.+238    	; 0x16a2 <Dio_FlipChannel+0x146>
    15b4:	9e c0       	rjmp	.+316    	; 0x16f2 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    15b6:	ab e3       	ldi	r26, 0x3B	; 59
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	eb e3       	ldi	r30, 0x3B	; 59
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <Dio_FlipChannel+0x76>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	2a 95       	dec	r18
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <Dio_FlipChannel+0x72>
    15d6:	84 27       	eor	r24, r20
    15d8:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    15da:	eb e3       	ldi	r30, 0x3B	; 59
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <Dio_FlipChannel+0x96>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <Dio_FlipChannel+0x92>
    15f6:	ca 01       	movw	r24, r20
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	7a c0       	rjmp	.+244    	; 0x16f2 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    15fe:	a8 e3       	ldi	r26, 0x38	; 56
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e8 e3       	ldi	r30, 0x38	; 56
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9c 01       	movw	r18, r24
    1612:	27 70       	andi	r18, 0x07	; 7
    1614:	30 70       	andi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <Dio_FlipChannel+0xc4>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	2a 95       	dec	r18
    1622:	e2 f7       	brpl	.-8      	; 0x161c <Dio_FlipChannel+0xc0>
    1624:	84 27       	eor	r24, r20
    1626:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    1628:	e8 e3       	ldi	r30, 0x38	; 56
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	87 70       	andi	r24, 0x07	; 7
    163a:	90 70       	andi	r25, 0x00	; 0
    163c:	a9 01       	movw	r20, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <Dio_FlipChannel+0xe8>
    1640:	55 95       	asr	r21
    1642:	47 95       	ror	r20
    1644:	8a 95       	dec	r24
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <Dio_FlipChannel+0xe4>
    1648:	ca 01       	movw	r24, r20
    164a:	81 70       	andi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	51 c0       	rjmp	.+162    	; 0x16f2 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    1650:	a5 e3       	ldi	r26, 0x35	; 53
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e5 e3       	ldi	r30, 0x35	; 53
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9c 01       	movw	r18, r24
    1664:	27 70       	andi	r18, 0x07	; 7
    1666:	30 70       	andi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <Dio_FlipChannel+0x116>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	2a 95       	dec	r18
    1674:	e2 f7       	brpl	.-8      	; 0x166e <Dio_FlipChannel+0x112>
    1676:	84 27       	eor	r24, r20
    1678:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    167a:	e5 e3       	ldi	r30, 0x35	; 53
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	88 2f       	mov	r24, r24
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	87 70       	andi	r24, 0x07	; 7
    168c:	90 70       	andi	r25, 0x00	; 0
    168e:	a9 01       	movw	r20, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <Dio_FlipChannel+0x13a>
    1692:	55 95       	asr	r21
    1694:	47 95       	ror	r20
    1696:	8a 95       	dec	r24
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <Dio_FlipChannel+0x136>
    169a:	ca 01       	movw	r24, r20
    169c:	81 70       	andi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	28 c0       	rjmp	.+80     	; 0x16f2 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    16a2:	a2 e3       	ldi	r26, 0x32	; 50
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e2 e3       	ldi	r30, 0x32	; 50
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9c 01       	movw	r18, r24
    16b6:	27 70       	andi	r18, 0x07	; 7
    16b8:	30 70       	andi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <Dio_FlipChannel+0x168>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	2a 95       	dec	r18
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <Dio_FlipChannel+0x164>
    16c8:	84 27       	eor	r24, r20
    16ca:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    16cc:	e2 e3       	ldi	r30, 0x32	; 50
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	87 70       	andi	r24, 0x07	; 7
    16de:	90 70       	andi	r25, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <Dio_FlipChannel+0x18c>
    16e4:	55 95       	asr	r21
    16e6:	47 95       	ror	r20
    16e8:	8a 95       	dec	r24
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <Dio_FlipChannel+0x188>
    16ec:	ca 01       	movw	r24, r20
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <Dio_WritePort+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <Dio_WritePort+0x8>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	3c 83       	std	Y+4, r19	; 0x04
    171a:	2b 83       	std	Y+3, r18	; 0x03
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	91 05       	cpc	r25, r1
    1724:	d1 f0       	breq	.+52     	; 0x175a <Dio_WritePort+0x58>
    1726:	2b 81       	ldd	r18, Y+3	; 0x03
    1728:	3c 81       	ldd	r19, Y+4	; 0x04
    172a:	22 30       	cpi	r18, 0x02	; 2
    172c:	31 05       	cpc	r19, r1
    172e:	2c f4       	brge	.+10     	; 0x173a <Dio_WritePort+0x38>
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	61 f0       	breq	.+24     	; 0x1750 <Dio_WritePort+0x4e>
    1738:	1e c0       	rjmp	.+60     	; 0x1776 <Dio_WritePort+0x74>
    173a:	2b 81       	ldd	r18, Y+3	; 0x03
    173c:	3c 81       	ldd	r19, Y+4	; 0x04
    173e:	22 30       	cpi	r18, 0x02	; 2
    1740:	31 05       	cpc	r19, r1
    1742:	81 f0       	breq	.+32     	; 0x1764 <Dio_WritePort+0x62>
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	83 30       	cpi	r24, 0x03	; 3
    174a:	91 05       	cpc	r25, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <Dio_WritePort+0x6c>
    174e:	13 c0       	rjmp	.+38     	; 0x1776 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    1750:	eb e3       	ldi	r30, 0x3B	; 59
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	80 83       	st	Z, r24
    1758:	0e c0       	rjmp	.+28     	; 0x1776 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    175a:	e8 e3       	ldi	r30, 0x38	; 56
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	80 83       	st	Z, r24
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    1764:	e5 e3       	ldi	r30, 0x35	; 53
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 83       	st	Z, r24
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    176e:	e2 e3       	ldi	r30, 0x32	; 50
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
		break;
	}
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <DCM_voidOn>:
#include "../../MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"
#include "DCM_interface.h"


/* Function to turn on the DC motor */
void DCM_voidOn(u8 Copy_u8Direction) {
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
    /* Turns on the DC motor, sets direction, enables PWM, and starts motor control. */
    Dio_WriteChannel(DCM_EN, STD_HIGH);  // Enable the DC motor
    1790:	8e e0       	ldi	r24, 0x0E	; 14
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	0e 94 31 09 	call	0x1262	; 0x1262 <Dio_WriteChannel>
    Dio_WriteChannel(DCM_DIR, Copy_u8Direction);  // Set motor direction
    1798:	8d e0       	ldi	r24, 0x0D	; 13
    179a:	69 81       	ldd	r22, Y+1	; 0x01
    179c:	0e 94 31 09 	call	0x1262	; 0x1262 <Dio_WriteChannel>
    DCM_voidControlSpeed(INITIAL_SPEED);  // Control motor speed
    17a0:	89 e1       	ldi	r24, 0x19	; 25
    17a2:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <DCM_voidControlSpeed>
}
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <DCM_voidControlSpeed>:

/* Function to control the speed of the DC motor */
void DCM_voidControlSpeed(u8 Copy_u8Speed) {
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
    /* Controls the DC motor speed using PWM mode from Timer0. */
    TMR0_voidSetDutyCycleForPWM(Copy_u8Speed);  // Set PWM Duty Cycle
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	0e 94 c0 05 	call	0xb80	; 0xb80 <TMR0_voidSetDutyCycleForPWM>
    TMR0_voidStart();  // Start Timer0 for PWM operation
    17c0:	0e 94 0a 06 	call	0xc14	; 0xc14 <TMR0_voidStart>
}
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <DCM_voidOff>:

/* Function to turn off the DC motor */
void DCM_voidOff(void) {
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    /* Turns off the DC motor and stops Timer0 PWM. */
    Dio_WriteChannel(DCM_EN, STD_LOW);  // Disable the DC motor
    17d4:	8e e0       	ldi	r24, 0x0E	; 14
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	0e 94 31 09 	call	0x1262	; 0x1262 <Dio_WriteChannel>
    TMR0_voidStop();  // Stop Timer0
    17dc:	0e 94 26 06 	call	0xc4c	; 0xc4c <TMR0_voidStop>
}
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <main>:
#include "MCAL/PORT/PORT.h"
#include <util/delay.h>
#include "MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"
#include "HAL/DC_MOTOR_H_BRIDGE/DCM_interface.h"

int main() {
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	c7 54       	subi	r28, 0x47	; 71
    17f4:	d0 40       	sbci	r29, 0x00	; 0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    Port_Init(pin_cfg);
    1800:	88 e6       	ldi	r24, 0x68	; 104
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 2a 07 	call	0xe54	; 0xe54 <Port_Init>
    TMR0_voidInit();
    1808:	0e 94 e7 05 	call	0xbce	; 0xbce <TMR0_voidInit>

    u8 speed = 0;
    180c:	fe 01       	movw	r30, r28
    180e:	e9 5b       	subi	r30, 0xB9	; 185
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	10 82       	st	Z, r1
    while (1) {
        // Rotate the motor in Counter Clockwise (CCW) direction
        DCM_voidOn(DCM_CCW);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	0e 94 c2 0b 	call	0x1784	; 0x1784 <DCM_voidOn>
    181a:	94 c0       	rjmp	.+296    	; 0x1944 <main+0x15e>
        // Increase speed gradually up to 100
        while (speed <= 100) {
            DCM_voidControlSpeed(speed); // Control the motor speed
    181c:	fe 01       	movw	r30, r28
    181e:	e9 5b       	subi	r30, 0xB9	; 185
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <DCM_voidControlSpeed>
    1828:	fe 01       	movw	r30, r28
    182a:	ed 5b       	subi	r30, 0xBD	; 189
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a8 e4       	ldi	r26, 0x48	; 72
    1834:	b2 e4       	ldi	r27, 0x42	; 66
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183e:	8e 01       	movw	r16, r28
    1840:	01 5c       	subi	r16, 0xC1	; 193
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	fe 01       	movw	r30, r28
    1846:	ed 5b       	subi	r30, 0xBD	; 189
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4a e7       	ldi	r20, 0x7A	; 122
    1858:	55 e4       	ldi	r21, 0x45	; 69
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	f8 01       	movw	r30, r16
    1864:	80 83       	st	Z, r24
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	a2 83       	std	Z+2, r26	; 0x02
    186a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    186c:	fe 01       	movw	r30, r28
    186e:	ff 96       	adiw	r30, 0x3f	; 63
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1884:	88 23       	and	r24, r24
    1886:	2c f4       	brge	.+10     	; 0x1892 <main+0xac>
		__ticks = 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9e af       	std	Y+62, r25	; 0x3e
    188e:	8d af       	std	Y+61, r24	; 0x3d
    1890:	46 c0       	rjmp	.+140    	; 0x191e <main+0x138>
	else if (__tmp > 65535)
    1892:	fe 01       	movw	r30, r28
    1894:	ff 96       	adiw	r30, 0x3f	; 63
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	64 f5       	brge	.+88     	; 0x1906 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	fe 01       	movw	r30, r28
    18b0:	ed 5b       	subi	r30, 0xBD	; 189
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9e af       	std	Y+62, r25	; 0x3e
    18da:	8d af       	std	Y+61, r24	; 0x3d
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <main+0x116>
    18de:	80 e9       	ldi	r24, 0x90	; 144
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	9c af       	std	Y+60, r25	; 0x3c
    18e4:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    18e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <main+0x104>
    18ee:	9c af       	std	Y+60, r25	; 0x3c
    18f0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	9e af       	std	Y+62, r25	; 0x3e
    18fa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    18fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	69 f7       	brne	.-38     	; 0x18de <main+0xf8>
    1904:	16 c0       	rjmp	.+44     	; 0x1932 <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1906:	fe 01       	movw	r30, r28
    1908:	ff 96       	adiw	r30, 0x3f	; 63
    190a:	60 81       	ld	r22, Z
    190c:	71 81       	ldd	r23, Z+1	; 0x01
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9e af       	std	Y+62, r25	; 0x3e
    191c:	8d af       	std	Y+61, r24	; 0x3d
    191e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1920:	9e ad       	ldd	r25, Y+62	; 0x3e
    1922:	9a af       	std	Y+58, r25	; 0x3a
    1924:	89 af       	std	Y+57, r24	; 0x39
    1926:	89 ad       	ldd	r24, Y+57	; 0x39
    1928:	9a ad       	ldd	r25, Y+58	; 0x3a
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <main+0x144>
    192e:	9a af       	std	Y+58, r25	; 0x3a
    1930:	89 af       	std	Y+57, r24	; 0x39
            _delay_ms(50);               // Delay
            speed++;                     // Increment speed
    1932:	de 01       	movw	r26, r28
    1934:	a9 5b       	subi	r26, 0xB9	; 185
    1936:	bf 4f       	sbci	r27, 0xFF	; 255
    1938:	fe 01       	movw	r30, r28
    193a:	e9 5b       	subi	r30, 0xB9	; 185
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	8c 93       	st	X, r24
    u8 speed = 0;
    while (1) {
        // Rotate the motor in Counter Clockwise (CCW) direction
        DCM_voidOn(DCM_CCW);
        // Increase speed gradually up to 100
        while (speed <= 100) {
    1944:	fe 01       	movw	r30, r28
    1946:	e9 5b       	subi	r30, 0xB9	; 185
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	85 36       	cpi	r24, 0x65	; 101
    194e:	08 f4       	brcc	.+2      	; 0x1952 <main+0x16c>
    1950:	65 cf       	rjmp	.-310    	; 0x181c <main+0x36>
            DCM_voidControlSpeed(speed); // Control the motor speed
            _delay_ms(50);               // Delay
            speed++;                     // Increment speed
        }

        speed = 0; // Reset speed
    1952:	fe 01       	movw	r30, r28
    1954:	e9 5b       	subi	r30, 0xB9	; 185
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	10 82       	st	Z, r1
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a8 e4       	ldi	r26, 0x48	; 72
    1960:	b3 e4       	ldi	r27, 0x43	; 67
    1962:	8d ab       	std	Y+53, r24	; 0x35
    1964:	9e ab       	std	Y+54, r25	; 0x36
    1966:	af ab       	std	Y+55, r26	; 0x37
    1968:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196a:	6d a9       	ldd	r22, Y+53	; 0x35
    196c:	7e a9       	ldd	r23, Y+54	; 0x36
    196e:	8f a9       	ldd	r24, Y+55	; 0x37
    1970:	98 ad       	ldd	r25, Y+56	; 0x38
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4a e7       	ldi	r20, 0x7A	; 122
    1978:	55 e4       	ldi	r21, 0x45	; 69
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	89 ab       	std	Y+49, r24	; 0x31
    1984:	9a ab       	std	Y+50, r25	; 0x32
    1986:	ab ab       	std	Y+51, r26	; 0x33
    1988:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    198a:	69 a9       	ldd	r22, Y+49	; 0x31
    198c:	7a a9       	ldd	r23, Y+50	; 0x32
    198e:	8b a9       	ldd	r24, Y+51	; 0x33
    1990:	9c a9       	ldd	r25, Y+52	; 0x34
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e8       	ldi	r20, 0x80	; 128
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199e:	88 23       	and	r24, r24
    19a0:	2c f4       	brge	.+10     	; 0x19ac <main+0x1c6>
		__ticks = 1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	98 ab       	std	Y+48, r25	; 0x30
    19a8:	8f a7       	std	Y+47, r24	; 0x2f
    19aa:	3f c0       	rjmp	.+126    	; 0x1a2a <main+0x244>
	else if (__tmp > 65535)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c0:	18 16       	cp	r1, r24
    19c2:	4c f5       	brge	.+82     	; 0x1a16 <main+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c4:	6d a9       	ldd	r22, Y+53	; 0x35
    19c6:	7e a9       	ldd	r23, Y+54	; 0x36
    19c8:	8f a9       	ldd	r24, Y+55	; 0x37
    19ca:	98 ad       	ldd	r25, Y+56	; 0x38
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	51 e4       	ldi	r21, 0x41	; 65
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	98 ab       	std	Y+48, r25	; 0x30
    19ea:	8f a7       	std	Y+47, r24	; 0x2f
    19ec:	0f c0       	rjmp	.+30     	; 0x1a0c <main+0x226>
    19ee:	80 e9       	ldi	r24, 0x90	; 144
    19f0:	91 e0       	ldi	r25, 0x01	; 1
    19f2:	9e a7       	std	Y+46, r25	; 0x2e
    19f4:	8d a7       	std	Y+45, r24	; 0x2d
    19f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    19f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <main+0x214>
    19fe:	9e a7       	std	Y+46, r25	; 0x2e
    1a00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a04:	98 a9       	ldd	r25, Y+48	; 0x30
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	98 ab       	std	Y+48, r25	; 0x30
    1a0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	69 f7       	brne	.-38     	; 0x19ee <main+0x208>
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <main+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a16:	69 a9       	ldd	r22, Y+49	; 0x31
    1a18:	7a a9       	ldd	r23, Y+50	; 0x32
    1a1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	98 ab       	std	Y+48, r25	; 0x30
    1a28:	8f a7       	std	Y+47, r24	; 0x2f
    1a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2e:	9c a7       	std	Y+44, r25	; 0x2c
    1a30:	8b a7       	std	Y+43, r24	; 0x2b
    1a32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a34:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <main+0x250>
    1a3a:	9c a7       	std	Y+44, r25	; 0x2c
    1a3c:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(200);

        // Rotate the motor in Clockwise (CW) direction
        DCM_voidOn(DCM_CW);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	0e 94 c2 0b 	call	0x1784	; 0x1784 <DCM_voidOn>
    1a44:	81 c0       	rjmp	.+258    	; 0x1b48 <main+0x362>

        // Increase speed gradually up to 100
        while (speed <= 100) {
            DCM_voidControlSpeed(speed); // Control the motor speed
    1a46:	fe 01       	movw	r30, r28
    1a48:	e9 5b       	subi	r30, 0xB9	; 185
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <DCM_voidControlSpeed>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a8 e4       	ldi	r26, 0x48	; 72
    1a58:	b2 e4       	ldi	r27, 0x42	; 66
    1a5a:	8f a3       	std	Y+39, r24	; 0x27
    1a5c:	98 a7       	std	Y+40, r25	; 0x28
    1a5e:	a9 a7       	std	Y+41, r26	; 0x29
    1a60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6f a1       	ldd	r22, Y+39	; 0x27
    1a64:	78 a5       	ldd	r23, Y+40	; 0x28
    1a66:	89 a5       	ldd	r24, Y+41	; 0x29
    1a68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	55 e4       	ldi	r21, 0x45	; 69
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8b a3       	std	Y+35, r24	; 0x23
    1a7c:	9c a3       	std	Y+36, r25	; 0x24
    1a7e:	ad a3       	std	Y+37, r26	; 0x25
    1a80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a82:	6b a1       	ldd	r22, Y+35	; 0x23
    1a84:	7c a1       	ldd	r23, Y+36	; 0x24
    1a86:	8d a1       	ldd	r24, Y+37	; 0x25
    1a88:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <main+0x2be>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9a a3       	std	Y+34, r25	; 0x22
    1aa0:	89 a3       	std	Y+33, r24	; 0x21
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <main+0x33c>
	else if (__tmp > 65535)
    1aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6f a1       	ldd	r22, Y+39	; 0x27
    1abe:	78 a5       	ldd	r23, Y+40	; 0x28
    1ac0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ac2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9a a3       	std	Y+34, r25	; 0x22
    1ae2:	89 a3       	std	Y+33, r24	; 0x21
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <main+0x31e>
    1ae6:	80 e9       	ldi	r24, 0x90	; 144
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	98 a3       	std	Y+32, r25	; 0x20
    1aec:	8f 8f       	std	Y+31, r24	; 0x1f
    1aee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1af0:	98 a1       	ldd	r25, Y+32	; 0x20
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <main+0x30c>
    1af6:	98 a3       	std	Y+32, r25	; 0x20
    1af8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	89 a1       	ldd	r24, Y+33	; 0x21
    1afc:	9a a1       	ldd	r25, Y+34	; 0x22
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9a a3       	std	Y+34, r25	; 0x22
    1b02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	89 a1       	ldd	r24, Y+33	; 0x21
    1b06:	9a a1       	ldd	r25, Y+34	; 0x22
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <main+0x300>
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <main+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b10:	7c a1       	ldd	r23, Y+36	; 0x24
    1b12:	8d a1       	ldd	r24, Y+37	; 0x25
    1b14:	9e a1       	ldd	r25, Y+38	; 0x26
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9a a3       	std	Y+34, r25	; 0x22
    1b20:	89 a3       	std	Y+33, r24	; 0x21
    1b22:	89 a1       	ldd	r24, Y+33	; 0x21
    1b24:	9a a1       	ldd	r25, Y+34	; 0x22
    1b26:	9e 8f       	std	Y+30, r25	; 0x1e
    1b28:	8d 8f       	std	Y+29, r24	; 0x1d
    1b2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <main+0x348>
    1b32:	9e 8f       	std	Y+30, r25	; 0x1e
    1b34:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(50);
            speed++;                     // Increment speed
    1b36:	de 01       	movw	r26, r28
    1b38:	a9 5b       	subi	r26, 0xB9	; 185
    1b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e9 5b       	subi	r30, 0xB9	; 185
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	8c 93       	st	X, r24

        // Rotate the motor in Clockwise (CW) direction
        DCM_voidOn(DCM_CW);

        // Increase speed gradually up to 100
        while (speed <= 100) {
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e9 5b       	subi	r30, 0xB9	; 185
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 81       	ld	r24, Z
    1b50:	85 36       	cpi	r24, 0x65	; 101
    1b52:	08 f4       	brcc	.+2      	; 0x1b56 <main+0x370>
    1b54:	78 cf       	rjmp	.-272    	; 0x1a46 <main+0x260>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a8 e4       	ldi	r26, 0x48	; 72
    1b5c:	b2 e4       	ldi	r27, 0x42	; 66
    1b5e:	89 8f       	std	Y+25, r24	; 0x19
    1b60:	9a 8f       	std	Y+26, r25	; 0x1a
    1b62:	ab 8f       	std	Y+27, r26	; 0x1b
    1b64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b66:	69 8d       	ldd	r22, Y+25	; 0x19
    1b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4a e7       	ldi	r20, 0x7A	; 122
    1b74:	55 e4       	ldi	r21, 0x45	; 69
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8d 8b       	std	Y+21, r24	; 0x15
    1b80:	9e 8b       	std	Y+22, r25	; 0x16
    1b82:	af 8b       	std	Y+23, r26	; 0x17
    1b84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b86:	6d 89       	ldd	r22, Y+21	; 0x15
    1b88:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <main+0x3c2>
		__ticks = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9c 8b       	std	Y+20, r25	; 0x14
    1ba4:	8b 8b       	std	Y+19, r24	; 0x13
    1ba6:	3f c0       	rjmp	.+126    	; 0x1c26 <main+0x440>
	else if (__tmp > 65535)
    1ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    1baa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	4c f5       	brge	.+82     	; 0x1c12 <main+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e2       	ldi	r20, 0x20	; 32
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9c 8b       	std	Y+20, r25	; 0x14
    1be6:	8b 8b       	std	Y+19, r24	; 0x13
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <main+0x422>
    1bea:	80 e9       	ldi	r24, 0x90	; 144
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	9a 8b       	std	Y+18, r25	; 0x12
    1bf0:	89 8b       	std	Y+17, r24	; 0x11
    1bf2:	89 89       	ldd	r24, Y+17	; 0x11
    1bf4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <main+0x410>
    1bfa:	9a 8b       	std	Y+18, r25	; 0x12
    1bfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <main+0x404>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <main+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	98 8b       	std	Y+16, r25	; 0x10
    1c2c:	8f 87       	std	Y+15, r24	; 0x0f
    1c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c30:	98 89       	ldd	r25, Y+16	; 0x10
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <main+0x44c>
    1c36:	98 8b       	std	Y+16, r25	; 0x10
    1c38:	8f 87       	std	Y+15, r24	; 0x0f
            speed++;                     // Increment speed
        }

        // Turn off the motor and wait for 3 seconds
        _delay_ms(50);
        DCM_voidOff();   // Turn off the motor
    1c3a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <DCM_voidOff>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e8       	ldi	r25, 0x80	; 128
    1c42:	ab e3       	ldi	r26, 0x3B	; 59
    1c44:	b5 e4       	ldi	r27, 0x45	; 69
    1c46:	8b 87       	std	Y+11, r24	; 0x0b
    1c48:	9c 87       	std	Y+12, r25	; 0x0c
    1c4a:	ad 87       	std	Y+13, r26	; 0x0d
    1c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a e7       	ldi	r20, 0x7A	; 122
    1c5c:	55 e4       	ldi	r21, 0x45	; 69
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8f 83       	std	Y+7, r24	; 0x07
    1c68:	98 87       	std	Y+8, r25	; 0x08
    1c6a:	a9 87       	std	Y+9, r26	; 0x09
    1c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c70:	78 85       	ldd	r23, Y+8	; 0x08
    1c72:	89 85       	ldd	r24, Y+9	; 0x09
    1c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <main+0x4aa>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	3f c0       	rjmp	.+126    	; 0x1d0e <main+0x528>
	else if (__tmp > 65535)
    1c90:	6f 81       	ldd	r22, Y+7	; 0x07
    1c92:	78 85       	ldd	r23, Y+8	; 0x08
    1c94:	89 85       	ldd	r24, Y+9	; 0x09
    1c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	4c f5       	brge	.+82     	; 0x1cfa <main+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9e 83       	std	Y+6, r25	; 0x06
    1cce:	8d 83       	std	Y+5, r24	; 0x05
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <main+0x50a>
    1cd2:	80 e9       	ldi	r24, 0x90	; 144
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <main+0x4f8>
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <main+0x4ec>
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <main+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <main+0x534>
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(3000); // Delay for 3 seconds
        speed = 0;       // Reset speed
    1d22:	fe 01       	movw	r30, r28
    1d24:	e9 5b       	subi	r30, 0xB9	; 185
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	10 82       	st	Z, r1
    1d2a:	74 cd       	rjmp	.-1304   	; 0x1814 <main+0x2e>

00001d2c <__udivmodhi4>:
    1d2c:	aa 1b       	sub	r26, r26
    1d2e:	bb 1b       	sub	r27, r27
    1d30:	51 e1       	ldi	r21, 0x11	; 17
    1d32:	07 c0       	rjmp	.+14     	; 0x1d42 <__udivmodhi4_ep>

00001d34 <__udivmodhi4_loop>:
    1d34:	aa 1f       	adc	r26, r26
    1d36:	bb 1f       	adc	r27, r27
    1d38:	a6 17       	cp	r26, r22
    1d3a:	b7 07       	cpc	r27, r23
    1d3c:	10 f0       	brcs	.+4      	; 0x1d42 <__udivmodhi4_ep>
    1d3e:	a6 1b       	sub	r26, r22
    1d40:	b7 0b       	sbc	r27, r23

00001d42 <__udivmodhi4_ep>:
    1d42:	88 1f       	adc	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	5a 95       	dec	r21
    1d48:	a9 f7       	brne	.-22     	; 0x1d34 <__udivmodhi4_loop>
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	08 95       	ret

00001d54 <__prologue_saves__>:
    1d54:	2f 92       	push	r2
    1d56:	3f 92       	push	r3
    1d58:	4f 92       	push	r4
    1d5a:	5f 92       	push	r5
    1d5c:	6f 92       	push	r6
    1d5e:	7f 92       	push	r7
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	ca 1b       	sub	r28, r26
    1d7e:	db 0b       	sbc	r29, r27
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	09 94       	ijmp

00001d8c <__epilogue_restores__>:
    1d8c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d8e:	39 88       	ldd	r3, Y+17	; 0x11
    1d90:	48 88       	ldd	r4, Y+16	; 0x10
    1d92:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d94:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d96:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d98:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d9e:	b9 84       	ldd	r11, Y+9	; 0x09
    1da0:	c8 84       	ldd	r12, Y+8	; 0x08
    1da2:	df 80       	ldd	r13, Y+7	; 0x07
    1da4:	ee 80       	ldd	r14, Y+6	; 0x06
    1da6:	fd 80       	ldd	r15, Y+5	; 0x05
    1da8:	0c 81       	ldd	r16, Y+4	; 0x04
    1daa:	1b 81       	ldd	r17, Y+3	; 0x03
    1dac:	aa 81       	ldd	r26, Y+2	; 0x02
    1dae:	b9 81       	ldd	r27, Y+1	; 0x01
    1db0:	ce 0f       	add	r28, r30
    1db2:	d1 1d       	adc	r29, r1
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	ed 01       	movw	r28, r26
    1dc0:	08 95       	ret

00001dc2 <_exit>:
    1dc2:	f8 94       	cli

00001dc4 <__stop_program>:
    1dc4:	ff cf       	rjmp	.-2      	; 0x1dc4 <__stop_program>
