
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  00002654  000026e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008000dc  008000dc  00002764  2**0
                  ALLOC
  3 .stab         00002e98  00000000  00000000  00002764  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024f0  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b680  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c23b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_1>
       8:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__vector_2>
       c:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__vector_10>
      2c:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <main>
      8a:	0c 94 28 13 	jmp	0x2650	; 0x2650 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
static void(*UART_RX_Fptr)(u8 RXdata)=NULL;
//static void(*UART_TX_Fptr)(void)=NULL;


void UART_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//baud rate 9600
	UBRRL= (1000000/((BAUDRATE)))-1;
     b4e:	e9 e2       	ldi	r30, 0x29	; 41
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	87 e6       	ldi	r24, 0x67	; 103
     b54:	80 83       	st	Z, r24

	//normal speed
	CLR_BIT(UCSRA,U2X);
     b56:	ab e2       	ldi	r26, 0x2B	; 43
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	8c 93       	st	X, r24


	//frame (stop ,data ,parity) 1 STOP NO PARITY 8 DATA

	// ENABLE RX TX
	SET_BIT(UCSRB,RXEN);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 61       	ori	r24, 0x10	; 16
     b70:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     b72:	aa e2       	ldi	r26, 0x2A	; 42
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ea e2       	ldi	r30, 0x2A	; 42
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	88 60       	ori	r24, 0x08	; 8
     b7e:	8c 93       	st	X, r24
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <UART_Send>:

void UART_Send(u8 data)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA,UDRE));
     b92:	eb e2       	ldi	r30, 0x2B	; 43
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 95       	swap	r24
     b9a:	86 95       	lsr	r24
     b9c:	87 70       	andi	r24, 0x07	; 7
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	90 70       	andi	r25, 0x00	; 0
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	a1 f3       	breq	.-24     	; 0xb92 <UART_Send+0xc>
	UDR=data;
     baa:	ec e2       	ldi	r30, 0x2C	; 44
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	80 83       	st	Z, r24
}
     bb2:	0f 90       	pop	r0
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <UART_SendNoBlock>:

void UART_SendNoBlock(u8 data)
{
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	0f 92       	push	r0
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
     bc6:	ec e2       	ldi	r30, 0x2C	; 44
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	80 83       	st	Z, r24
}
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <UART_ReceiveNoBlock>:

u8 UART_ReceiveNoBlock(void)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     bde:	ec e2       	ldi	r30, 0x2C	; 44
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <UART_Receive>:




u8 UART_Receive(void)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC));
     bf2:	eb e2       	ldi	r30, 0x2B	; 43
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	88 23       	and	r24, r24
     bfa:	dc f7       	brge	.-10     	; 0xbf2 <UART_Receive+0x8>
	return UDR;
     bfc:	ec e2       	ldi	r30, 0x2C	; 44
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
}
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <UART_ReceivePerodic>:


u8 UART_ReceivePerodic(u8*pdata)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <UART_ReceivePerodic+0x6>
     c0e:	0f 92       	push	r0
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	9a 83       	std	Y+2, r25	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(UCSRA,RXC))
     c18:	eb e2       	ldi	r30, 0x2B	; 43
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	88 23       	and	r24, r24
     c20:	4c f4       	brge	.+18     	; 0xc34 <UART_ReceivePerodic+0x2c>
	{

		*pdata=UDR;
     c22:	ec e2       	ldi	r30, 0x2C	; 44
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	80 83       	st	Z, r24
		return 1;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	8b 83       	std	Y+3, r24	; 0x03
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <UART_ReceivePerodic+0x2e>
	}
	return 0;
     c34:	1b 82       	std	Y+3, r1	; 0x03
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <UART_RX_InterruptEnable>:



void UART_RX_InterruptEnable(void)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
     c4c:	aa e2       	ldi	r26, 0x2A	; 42
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	ea e2       	ldi	r30, 0x2A	; 42
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	80 68       	ori	r24, 0x80	; 128
     c58:	8c 93       	st	X, r24
}
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <UART_RX_InterruptDisable>:

void UART_RX_InterruptDisable(void)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
     c68:	aa e2       	ldi	r26, 0x2A	; 42
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	ea e2       	ldi	r30, 0x2A	; 42
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8f 77       	andi	r24, 0x7F	; 127
     c74:	8c 93       	st	X, r24
}
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <UART_RX_SetCallBack>:
//{
//	CLR_BIT(UCSRB,TXCIE);
//}

void UART_RX_SetCallBack(void (*LocalFptr)(u8))
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	00 d0       	rcall	.+0      	; 0xc82 <UART_RX_SetCallBack+0x6>
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	9a 83       	std	Y+2, r25	; 0x02
     c88:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	90 93 dd 00 	sts	0x00DD, r25
     c92:	80 93 dc 00 	sts	0x00DC, r24
}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <__vector_13>:
//}


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     ca0:	1f 92       	push	r1
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	0f 92       	push	r0
     ca8:	11 24       	eor	r1, r1
     caa:	2f 93       	push	r18
     cac:	3f 93       	push	r19
     cae:	4f 93       	push	r20
     cb0:	5f 93       	push	r21
     cb2:	6f 93       	push	r22
     cb4:	7f 93       	push	r23
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	ef 93       	push	r30
     cc0:	ff 93       	push	r31
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr!=NULL)
     cca:	80 91 dc 00 	lds	r24, 0x00DC
     cce:	90 91 dd 00 	lds	r25, 0x00DD
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	41 f0       	breq	.+16     	; 0xce6 <__vector_13+0x46>
	{
		UART_RX_Fptr(UDR);
     cd6:	e0 91 dc 00 	lds	r30, 0x00DC
     cda:	f0 91 dd 00 	lds	r31, 0x00DD
     cde:	ac e2       	ldi	r26, 0x2C	; 44
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	8c 91       	ld	r24, X
     ce4:	09 95       	icall
	}
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	1f 90       	pop	r1
     d0a:	18 95       	reti

00000d0c <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <TMR0_voidSetDelay_ms_usingCTC+0x6>
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	9a 83       	std	Y+2, r25	; 0x02
     d18:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
     d1a:	ec e5       	ldi	r30, 0x5C	; 92
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	89 ef       	ldi	r24, 0xF9	; 249
     d20:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	cc 01       	movw	r24, r24
     d28:	a0 e0       	ldi	r26, 0x00	; 0
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	80 93 e8 00 	sts	0x00E8, r24
     d30:	90 93 e9 00 	sts	0x00E9, r25
     d34:	a0 93 ea 00 	sts	0x00EA, r26
     d38:	b0 93 eb 00 	sts	0x00EB, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	// Enable Output Compare Match Interrupt (OCI)
	SET_BIT(TIMSK, OCIE0);

#elif TMR0_MODE == TMR0_NORMAL_MODE
	// Select normal mode
	CLR_BIT(TCCR0, WGM00);
     d62:	a3 e5       	ldi	r26, 0x53	; 83
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e3 e5       	ldi	r30, 0x53	; 83
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8f 7b       	andi	r24, 0xBF	; 191
     d6e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
     d70:	a3 e5       	ldi	r26, 0x53	; 83
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e3 e5       	ldi	r30, 0x53	; 83
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	87 7f       	andi	r24, 0xF7	; 247
     d7c:	8c 93       	st	X, r24
	// Initialize timer with a preload value
	TCNT0 = TMR0_PRELOAD_VALUE;
     d7e:	e2 e5       	ldi	r30, 0x52	; 82
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	81 e7       	ldi	r24, 0x71	; 113
     d84:	80 83       	st	Z, r24
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE0);
     d86:	a9 e5       	ldi	r26, 0x59	; 89
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e9 e5       	ldi	r30, 0x59	; 89
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);
#endif

#endif
}
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
     da2:	a3 e5       	ldi	r26, 0x53	; 83
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e3 e5       	ldi	r30, 0x53	; 83
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	81 60       	ori	r24, 0x01	; 1
     dae:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
     db0:	a3 e5       	ldi	r26, 0x53	; 83
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e3 e5       	ldi	r30, 0x53	; 83
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	82 60       	ori	r24, 0x02	; 2
     dbc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     dbe:	a3 e5       	ldi	r26, 0x53	; 83
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e3 e5       	ldi	r30, 0x53	; 83
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8b 7f       	andi	r24, 0xFB	; 251
     dca:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
     dda:	a3 e5       	ldi	r26, 0x53	; 83
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e3 e5       	ldi	r30, 0x53	; 83
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     de8:	a3 e5       	ldi	r26, 0x53	; 83
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e3 e5       	ldi	r30, 0x53	; 83
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8d 7f       	andi	r24, 0xFD	; 253
     df4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     df6:	a3 e5       	ldi	r26, 0x53	; 83
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e3 e5       	ldi	r30, 0x53	; 83
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8b 7f       	andi	r24, 0xFB	; 251
     e02:	8c 93       	st	X, r24
}
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <TMR0_voidSetCallBackOVF+0x6>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	31 f0       	breq	.+12     	; 0xe2c <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	90 93 df 00 	sts	0x00DF, r25
     e28:	80 93 de 00 	sts	0x00DE, r24
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <TMR0_voidSetCallBackCTC+0x6>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	31 f0       	breq	.+12     	; 0xe58 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	90 93 e1 00 	sts	0x00E1, r25
     e54:	80 93 e0 00 	sts	0x00E0, r24
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	2f 93       	push	r18
     e6e:	3f 93       	push	r19
     e70:	4f 93       	push	r20
     e72:	5f 93       	push	r21
     e74:	6f 93       	push	r22
     e76:	7f 93       	push	r23
     e78:	8f 93       	push	r24
     e7a:	9f 93       	push	r25
     e7c:	af 93       	push	r26
     e7e:	bf 93       	push	r27
     e80:	ef 93       	push	r30
     e82:	ff 93       	push	r31
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
     e8c:	80 91 e2 00 	lds	r24, 0x00E2
     e90:	90 91 e3 00 	lds	r25, 0x00E3
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	90 93 e3 00 	sts	0x00E3, r25
     e9a:	80 93 e2 00 	sts	0x00E2, r24

	if (TMR0_ovCount == local_u16ovCounter) {
     e9e:	80 91 e2 00 	lds	r24, 0x00E2
     ea2:	90 91 e3 00 	lds	r25, 0x00E3
     ea6:	8a 30       	cpi	r24, 0x0A	; 10
     ea8:	91 05       	cpc	r25, r1
     eaa:	99 f4       	brne	.+38     	; 0xed2 <__vector_11+0x70>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
     eac:	e2 e5       	ldi	r30, 0x52	; 82
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	81 e7       	ldi	r24, 0x71	; 113
     eb2:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
     eb4:	10 92 e3 00 	sts	0x00E3, r1
     eb8:	10 92 e2 00 	sts	0x00E2, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
     ebc:	80 91 de 00 	lds	r24, 0x00DE
     ec0:	90 91 df 00 	lds	r25, 0x00DF
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	29 f0       	breq	.+10     	; 0xed2 <__vector_11+0x70>
			TMR0_privatePtrToCAllBackOVF();
     ec8:	e0 91 de 00 	lds	r30, 0x00DE
     ecc:	f0 91 df 00 	lds	r31, 0x00DF
     ed0:	09 95       	icall
		}
	}
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	2f 93       	push	r18
     f04:	3f 93       	push	r19
     f06:	4f 93       	push	r20
     f08:	5f 93       	push	r21
     f0a:	6f 93       	push	r22
     f0c:	7f 93       	push	r23
     f0e:	8f 93       	push	r24
     f10:	9f 93       	push	r25
     f12:	af 93       	push	r26
     f14:	bf 93       	push	r27
     f16:	ef 93       	push	r30
     f18:	ff 93       	push	r31
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
     f22:	80 91 e4 00 	lds	r24, 0x00E4
     f26:	90 91 e5 00 	lds	r25, 0x00E5
     f2a:	a0 91 e6 00 	lds	r26, 0x00E6
     f2e:	b0 91 e7 00 	lds	r27, 0x00E7
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	a1 1d       	adc	r26, r1
     f36:	b1 1d       	adc	r27, r1
     f38:	80 93 e4 00 	sts	0x00E4, r24
     f3c:	90 93 e5 00 	sts	0x00E5, r25
     f40:	a0 93 e6 00 	sts	0x00E6, r26
     f44:	b0 93 e7 00 	sts	0x00E7, r27

	if (private_ctcCounter == local_u32CTCCounter) {
     f48:	20 91 e8 00 	lds	r18, 0x00E8
     f4c:	30 91 e9 00 	lds	r19, 0x00E9
     f50:	40 91 ea 00 	lds	r20, 0x00EA
     f54:	50 91 eb 00 	lds	r21, 0x00EB
     f58:	80 91 e4 00 	lds	r24, 0x00E4
     f5c:	90 91 e5 00 	lds	r25, 0x00E5
     f60:	a0 91 e6 00 	lds	r26, 0x00E6
     f64:	b0 91 e7 00 	lds	r27, 0x00E7
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	4a 07       	cpc	r20, r26
     f6e:	5b 07       	cpc	r21, r27
     f70:	99 f4       	brne	.+38     	; 0xf98 <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
     f72:	10 92 e4 00 	sts	0x00E4, r1
     f76:	10 92 e5 00 	sts	0x00E5, r1
     f7a:	10 92 e6 00 	sts	0x00E6, r1
     f7e:	10 92 e7 00 	sts	0x00E7, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
     f82:	80 91 e0 00 	lds	r24, 0x00E0
     f86:	90 91 e1 00 	lds	r25, 0x00E1
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	29 f0       	breq	.+10     	; 0xf98 <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
     f8e:	e0 91 e0 00 	lds	r30, 0x00E0
     f92:	f0 91 e1 00 	lds	r31, 0x00E1
     f96:	09 95       	icall
		}
	}
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
     fca:	ec e5       	ldi	r30, 0x5C	; 92
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	80 83       	st	Z, r24
}
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <Port_Init+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <Port_Init+0x8>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <Port_Init+0xa>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	9c 83       	std	Y+4, r25	; 0x04
     fea:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
     fec:	1a 82       	std	Y+2, r1	; 0x02
     fee:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
     ff0:	1a 82       	std	Y+2, r1	; 0x02
     ff2:	19 82       	std	Y+1, r1	; 0x01
     ff4:	ea c1       	rjmp	.+980    	; 0x13ca <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
     ff6:	29 81       	ldd	r18, Y+1	; 0x01
     ff8:	3a 81       	ldd	r19, Y+2	; 0x02
     ffa:	c9 01       	movw	r24, r18
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	28 0f       	add	r18, r24
    1002:	39 1f       	adc	r19, r25
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	fc 01       	movw	r30, r24
    100a:	e2 0f       	add	r30, r18
    100c:	f3 1f       	adc	r31, r19
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3e 83       	std	Y+6, r19	; 0x06
    1016:	2d 83       	std	Y+5, r18	; 0x05
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <Port_Init+0x4a>
    1022:	85 c0       	rjmp	.+266    	; 0x112e <Port_Init+0x154>
    1024:	2d 81       	ldd	r18, Y+5	; 0x05
    1026:	3e 81       	ldd	r19, Y+6	; 0x06
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	2c f4       	brge	.+10     	; 0x1038 <Port_Init+0x5e>
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	71 f0       	breq	.+28     	; 0x1052 <Port_Init+0x78>
    1036:	c4 c1       	rjmp	.+904    	; 0x13c0 <Port_Init+0x3e6>
    1038:	2d 81       	ldd	r18, Y+5	; 0x05
    103a:	3e 81       	ldd	r19, Y+6	; 0x06
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <Port_Init+0x6a>
    1042:	e3 c0       	rjmp	.+454    	; 0x120a <Port_Init+0x230>
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	91 05       	cpc	r25, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <Port_Init+0x76>
    104e:	4b c1       	rjmp	.+662    	; 0x12e6 <Port_Init+0x30c>
    1050:	b7 c1       	rjmp	.+878    	; 0x13c0 <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1052:	29 81       	ldd	r18, Y+1	; 0x01
    1054:	3a 81       	ldd	r19, Y+2	; 0x02
    1056:	c9 01       	movw	r24, r18
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	28 0f       	add	r18, r24
    105e:	39 1f       	adc	r19, r25
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	fc 01       	movw	r30, r24
    1066:	e2 0f       	add	r30, r18
    1068:	f3 1f       	adc	r31, r19
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	01 f5       	brne	.+64     	; 0x10b0 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1070:	aa e3       	ldi	r26, 0x3A	; 58
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ea e3       	ldi	r30, 0x3A	; 58
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	29 81       	ldd	r18, Y+1	; 0x01
    107e:	3a 81       	ldd	r19, Y+2	; 0x02
    1080:	c9 01       	movw	r24, r18
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	28 0f       	add	r18, r24
    1088:	39 1f       	adc	r19, r25
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	fc 01       	movw	r30, r24
    1090:	e2 0f       	add	r30, r18
    1092:	f3 1f       	adc	r31, r19
    1094:	81 81       	ldd	r24, Z+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <Port_Init+0xcc>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <Port_Init+0xc8>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	88 c1       	rjmp	.+784    	; 0x13c0 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    10b0:	aa e3       	ldi	r26, 0x3A	; 58
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ea e3       	ldi	r30, 0x3A	; 58
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	29 81       	ldd	r18, Y+1	; 0x01
    10be:	3a 81       	ldd	r19, Y+2	; 0x02
    10c0:	c9 01       	movw	r24, r18
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	28 0f       	add	r18, r24
    10c8:	39 1f       	adc	r19, r25
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	fc 01       	movw	r30, r24
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	81 81       	ldd	r24, Z+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <Port_Init+0x10a>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	2a 95       	dec	r18
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <Port_Init+0x106>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
    10ee:	ab e3       	ldi	r26, 0x3B	; 59
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	eb e3       	ldi	r30, 0x3B	; 59
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	29 81       	ldd	r18, Y+1	; 0x01
    10fc:	3a 81       	ldd	r19, Y+2	; 0x02
    10fe:	c9 01       	movw	r24, r18
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	28 0f       	add	r18, r24
    1106:	39 1f       	adc	r19, r25
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	fc 01       	movw	r30, r24
    110e:	e2 0f       	add	r30, r18
    1110:	f3 1f       	adc	r31, r19
    1112:	81 81       	ldd	r24, Z+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <Port_Init+0x14a>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <Port_Init+0x146>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	49 c1       	rjmp	.+658    	; 0x13c0 <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    112e:	29 81       	ldd	r18, Y+1	; 0x01
    1130:	3a 81       	ldd	r19, Y+2	; 0x02
    1132:	c9 01       	movw	r24, r18
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	28 0f       	add	r18, r24
    113a:	39 1f       	adc	r19, r25
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	fc 01       	movw	r30, r24
    1142:	e2 0f       	add	r30, r18
    1144:	f3 1f       	adc	r31, r19
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	01 f5       	brne	.+64     	; 0x118c <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
    114c:	a7 e3       	ldi	r26, 0x37	; 55
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e7 e3       	ldi	r30, 0x37	; 55
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	29 81       	ldd	r18, Y+1	; 0x01
    115a:	3a 81       	ldd	r19, Y+2	; 0x02
    115c:	c9 01       	movw	r24, r18
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	28 0f       	add	r18, r24
    1164:	39 1f       	adc	r19, r25
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	fc 01       	movw	r30, r24
    116c:	e2 0f       	add	r30, r18
    116e:	f3 1f       	adc	r31, r19
    1170:	81 81       	ldd	r24, Z+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <Port_Init+0x1a8>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <Port_Init+0x1a4>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	1a c1       	rjmp	.+564    	; 0x13c0 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    118c:	a7 e3       	ldi	r26, 0x37	; 55
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e7 e3       	ldi	r30, 0x37	; 55
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	29 81       	ldd	r18, Y+1	; 0x01
    119a:	3a 81       	ldd	r19, Y+2	; 0x02
    119c:	c9 01       	movw	r24, r18
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	28 0f       	add	r18, r24
    11a4:	39 1f       	adc	r19, r25
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	fc 01       	movw	r30, r24
    11ac:	e2 0f       	add	r30, r18
    11ae:	f3 1f       	adc	r31, r19
    11b0:	81 81       	ldd	r24, Z+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <Port_Init+0x1e6>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	2a 95       	dec	r18
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <Port_Init+0x1e2>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    11ca:	a8 e3       	ldi	r26, 0x38	; 56
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e8 e3       	ldi	r30, 0x38	; 56
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	29 81       	ldd	r18, Y+1	; 0x01
    11d8:	3a 81       	ldd	r19, Y+2	; 0x02
    11da:	c9 01       	movw	r24, r18
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	28 0f       	add	r18, r24
    11e2:	39 1f       	adc	r19, r25
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	fc 01       	movw	r30, r24
    11ea:	e2 0f       	add	r30, r18
    11ec:	f3 1f       	adc	r31, r19
    11ee:	81 81       	ldd	r24, Z+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <Port_Init+0x226>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <Port_Init+0x222>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	db c0       	rjmp	.+438    	; 0x13c0 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    120a:	29 81       	ldd	r18, Y+1	; 0x01
    120c:	3a 81       	ldd	r19, Y+2	; 0x02
    120e:	c9 01       	movw	r24, r18
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	28 0f       	add	r18, r24
    1216:	39 1f       	adc	r19, r25
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	fc 01       	movw	r30, r24
    121e:	e2 0f       	add	r30, r18
    1220:	f3 1f       	adc	r31, r19
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	01 f5       	brne	.+64     	; 0x1268 <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1228:	a4 e3       	ldi	r26, 0x34	; 52
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e4 e3       	ldi	r30, 0x34	; 52
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	29 81       	ldd	r18, Y+1	; 0x01
    1236:	3a 81       	ldd	r19, Y+2	; 0x02
    1238:	c9 01       	movw	r24, r18
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	28 0f       	add	r18, r24
    1240:	39 1f       	adc	r19, r25
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	fc 01       	movw	r30, r24
    1248:	e2 0f       	add	r30, r18
    124a:	f3 1f       	adc	r31, r19
    124c:	81 81       	ldd	r24, Z+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <Port_Init+0x284>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <Port_Init+0x280>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	ac c0       	rjmp	.+344    	; 0x13c0 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1268:	a4 e3       	ldi	r26, 0x34	; 52
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e4 e3       	ldi	r30, 0x34	; 52
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	29 81       	ldd	r18, Y+1	; 0x01
    1276:	3a 81       	ldd	r19, Y+2	; 0x02
    1278:	c9 01       	movw	r24, r18
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	28 0f       	add	r18, r24
    1280:	39 1f       	adc	r19, r25
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	fc 01       	movw	r30, r24
    1288:	e2 0f       	add	r30, r18
    128a:	f3 1f       	adc	r31, r19
    128c:	81 81       	ldd	r24, Z+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 c0       	rjmp	.+4      	; 0x129c <Port_Init+0x2c2>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	2a 95       	dec	r18
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <Port_Init+0x2be>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    12a6:	a5 e3       	ldi	r26, 0x35	; 53
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e3       	ldi	r30, 0x35	; 53
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	29 81       	ldd	r18, Y+1	; 0x01
    12b4:	3a 81       	ldd	r19, Y+2	; 0x02
    12b6:	c9 01       	movw	r24, r18
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	28 0f       	add	r18, r24
    12be:	39 1f       	adc	r19, r25
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	fc 01       	movw	r30, r24
    12c6:	e2 0f       	add	r30, r18
    12c8:	f3 1f       	adc	r31, r19
    12ca:	81 81       	ldd	r24, Z+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <Port_Init+0x302>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <Port_Init+0x2fe>
    12e0:	84 2b       	or	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	6d c0       	rjmp	.+218    	; 0x13c0 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    12e6:	29 81       	ldd	r18, Y+1	; 0x01
    12e8:	3a 81       	ldd	r19, Y+2	; 0x02
    12ea:	c9 01       	movw	r24, r18
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	28 0f       	add	r18, r24
    12f2:	39 1f       	adc	r19, r25
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	fc 01       	movw	r30, r24
    12fa:	e2 0f       	add	r30, r18
    12fc:	f3 1f       	adc	r31, r19
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	01 f5       	brne	.+64     	; 0x1344 <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1304:	a1 e3       	ldi	r26, 0x31	; 49
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e1 e3       	ldi	r30, 0x31	; 49
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	29 81       	ldd	r18, Y+1	; 0x01
    1312:	3a 81       	ldd	r19, Y+2	; 0x02
    1314:	c9 01       	movw	r24, r18
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	28 0f       	add	r18, r24
    131c:	39 1f       	adc	r19, r25
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	fc 01       	movw	r30, r24
    1324:	e2 0f       	add	r30, r18
    1326:	f3 1f       	adc	r31, r19
    1328:	81 81       	ldd	r24, Z+1	; 0x01
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <Port_Init+0x360>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <Port_Init+0x35c>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	3e c0       	rjmp	.+124    	; 0x13c0 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1344:	a1 e3       	ldi	r26, 0x31	; 49
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e1 e3       	ldi	r30, 0x31	; 49
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	29 81       	ldd	r18, Y+1	; 0x01
    1352:	3a 81       	ldd	r19, Y+2	; 0x02
    1354:	c9 01       	movw	r24, r18
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	28 0f       	add	r18, r24
    135c:	39 1f       	adc	r19, r25
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	fc 01       	movw	r30, r24
    1364:	e2 0f       	add	r30, r18
    1366:	f3 1f       	adc	r31, r19
    1368:	81 81       	ldd	r24, Z+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <Port_Init+0x39e>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	2a 95       	dec	r18
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <Port_Init+0x39a>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    1382:	a2 e3       	ldi	r26, 0x32	; 50
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	29 81       	ldd	r18, Y+1	; 0x01
    1390:	3a 81       	ldd	r19, Y+2	; 0x02
    1392:	c9 01       	movw	r24, r18
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	28 0f       	add	r18, r24
    139a:	39 1f       	adc	r19, r25
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	fc 01       	movw	r30, r24
    13a2:	e2 0f       	add	r30, r18
    13a4:	f3 1f       	adc	r31, r19
    13a6:	81 81       	ldd	r24, Z+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <Port_Init+0x3de>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <Port_Init+0x3da>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	80 32       	cpi	r24, 0x20	; 32
    13d0:	91 05       	cpc	r25, r1
    13d2:	0c f4       	brge	.+2      	; 0x13d6 <Port_Init+0x3fc>
    13d4:	10 ce       	rjmp	.-992    	; 0xff6 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    13d6:	26 96       	adiw	r28, 0x06	; 6
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    13f0:	af e5       	ldi	r26, 0x5F	; 95
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef e5       	ldi	r30, 0x5F	; 95
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 68       	ori	r24, 0x80	; 128
    13fc:	8c 93       	st	X, r24
}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <GI_voidDisable>:

void GI_voidDisable(void)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    140c:	af e5       	ldi	r26, 0x5F	; 95
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ef e5       	ldi	r30, 0x5F	; 95
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 77       	andi	r24, 0x7F	; 127
    1418:	8c 93       	st	X, r24
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	28 97       	sbiw	r28, 0x08	; 8
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	38 87       	std	Y+8, r19	; 0x08
    1440:	2f 83       	std	Y+7, r18	; 0x07
    1442:	8f 81       	ldd	r24, Y+7	; 0x07
    1444:	98 85       	ldd	r25, Y+8	; 0x08
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <EXTI_voidInit+0x2e>
    144c:	5a c0       	rjmp	.+180    	; 0x1502 <EXTI_voidInit+0xe2>
    144e:	2f 81       	ldd	r18, Y+7	; 0x07
    1450:	38 85       	ldd	r19, Y+8	; 0x08
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <EXTI_voidInit+0x3a>
    1458:	a3 c0       	rjmp	.+326    	; 0x15a0 <EXTI_voidInit+0x180>
    145a:	8f 81       	ldd	r24, Y+7	; 0x07
    145c:	98 85       	ldd	r25, Y+8	; 0x08
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	09 f0       	breq	.+2      	; 0x1464 <EXTI_voidInit+0x44>
    1462:	b3 c0       	rjmp	.+358    	; 0x15ca <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3e 83       	std	Y+6, r19	; 0x06
    146c:	2d 83       	std	Y+5, r18	; 0x05
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	39 f1       	breq	.+78     	; 0x14c6 <EXTI_voidInit+0xa6>
    1478:	2d 81       	ldd	r18, Y+5	; 0x05
    147a:	3e 81       	ldd	r19, Y+6	; 0x06
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	99 f0       	breq	.+38     	; 0x14a8 <EXTI_voidInit+0x88>
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	69 f1       	breq	.+90     	; 0x14e4 <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    148a:	a5 e5       	ldi	r26, 0x55	; 85
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e5       	ldi	r30, 0x55	; 85
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	81 60       	ori	r24, 0x01	; 1
    1496:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1498:	a5 e5       	ldi	r26, 0x55	; 85
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e5 e5       	ldi	r30, 0x55	; 85
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	82 60       	ori	r24, 0x02	; 2
    14a4:	8c 93       	st	X, r24
    14a6:	91 c0       	rjmp	.+290    	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    14b6:	a5 e5       	ldi	r26, 0x55	; 85
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e5       	ldi	r30, 0x55	; 85
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	82 60       	ori	r24, 0x02	; 2
    14c2:	8c 93       	st	X, r24
    14c4:	82 c0       	rjmp	.+260    	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    14d4:	a5 e5       	ldi	r26, 0x55	; 85
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e5       	ldi	r30, 0x55	; 85
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8d 7f       	andi	r24, 0xFD	; 253
    14e0:	8c 93       	st	X, r24
    14e2:	73 c0       	rjmp	.+230    	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    14e4:	a5 e5       	ldi	r26, 0x55	; 85
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e5       	ldi	r30, 0x55	; 85
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8e 7f       	andi	r24, 0xFE	; 254
    14f0:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    14f2:	a5 e5       	ldi	r26, 0x55	; 85
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e5       	ldi	r30, 0x55	; 85
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8d 7f       	andi	r24, 0xFD	; 253
    14fe:	8c 93       	st	X, r24
    1500:	64 c0       	rjmp	.+200    	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3c 83       	std	Y+4, r19	; 0x04
    150a:	2b 83       	std	Y+3, r18	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	39 f1       	breq	.+78     	; 0x1564 <EXTI_voidInit+0x144>
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	3c 81       	ldd	r19, Y+4	; 0x04
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	99 f0       	breq	.+38     	; 0x1546 <EXTI_voidInit+0x126>
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	69 f1       	breq	.+90     	; 0x1582 <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    1528:	a5 e5       	ldi	r26, 0x55	; 85
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e5 e5       	ldi	r30, 0x55	; 85
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    1536:	a5 e5       	ldi	r26, 0x55	; 85
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e5       	ldi	r30, 0x55	; 85
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	88 60       	ori	r24, 0x08	; 8
    1542:	8c 93       	st	X, r24
    1544:	42 c0       	rjmp	.+132    	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    1546:	a5 e5       	ldi	r26, 0x55	; 85
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e5       	ldi	r30, 0x55	; 85
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8b 7f       	andi	r24, 0xFB	; 251
    1552:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	88 60       	ori	r24, 0x08	; 8
    1560:	8c 93       	st	X, r24
    1562:	33 c0       	rjmp	.+102    	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    1564:	a5 e5       	ldi	r26, 0x55	; 85
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e5 e5       	ldi	r30, 0x55	; 85
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	84 60       	ori	r24, 0x04	; 4
    1570:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    1572:	a5 e5       	ldi	r26, 0x55	; 85
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e5 e5       	ldi	r30, 0x55	; 85
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	87 7f       	andi	r24, 0xF7	; 247
    157e:	8c 93       	st	X, r24
    1580:	24 c0       	rjmp	.+72     	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8b 7f       	andi	r24, 0xFB	; 251
    158e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    1590:	a5 e5       	ldi	r26, 0x55	; 85
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e5       	ldi	r30, 0x55	; 85
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	87 7f       	andi	r24, 0xF7	; 247
    159c:	8c 93       	st	X, r24
    159e:	15 c0       	rjmp	.+42     	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	91 05       	cpc	r25, r1
    15aa:	41 f0       	breq	.+16     	; 0x15bc <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    15ac:	a4 e5       	ldi	r26, 0x54	; 84
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e4 e5       	ldi	r30, 0x54	; 84
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 64       	ori	r24, 0x40	; 64
    15b8:	8c 93       	st	X, r24
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    15bc:	a4 e5       	ldi	r26, 0x54	; 84
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e4 e5       	ldi	r30, 0x54	; 84
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8f 7b       	andi	r24, 0xBF	; 191
    15c8:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    15ca:	28 96       	adiw	r28, 0x08	; 8
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <EXTI_voidEnable+0x6>
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	3b 83       	std	Y+3, r19	; 0x03
    15f2:	2a 83       	std	Y+2, r18	; 0x02
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	9b 81       	ldd	r25, Y+3	; 0x03
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	91 05       	cpc	r25, r1
    15fc:	89 f0       	breq	.+34     	; 0x1620 <EXTI_voidEnable+0x44>
    15fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1600:	3b 81       	ldd	r19, Y+3	; 0x03
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	a1 f0       	breq	.+40     	; 0x1630 <EXTI_voidEnable+0x54>
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	9b 81       	ldd	r25, Y+3	; 0x03
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	b9 f4       	brne	.+46     	; 0x163e <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    1610:	ab e5       	ldi	r26, 0x5B	; 91
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	eb e5       	ldi	r30, 0x5B	; 91
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 64       	ori	r24, 0x40	; 64
    161c:	8c 93       	st	X, r24
    161e:	0f c0       	rjmp	.+30     	; 0x163e <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    1620:	ab e5       	ldi	r26, 0x5B	; 91
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e5       	ldi	r30, 0x5B	; 91
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	80 68       	ori	r24, 0x80	; 128
    162c:	8c 93       	st	X, r24
    162e:	07 c0       	rjmp	.+14     	; 0x163e <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    1630:	ab e5       	ldi	r26, 0x5B	; 91
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	eb e5       	ldi	r30, 0x5B	; 91
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 62       	ori	r24, 0x20	; 32
    163c:	8c 93       	st	X, r24
        break;
    }
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <EXTI_voidDisable+0x6>
    1650:	0f 92       	push	r0
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3b 83       	std	Y+3, r19	; 0x03
    1660:	2a 83       	std	Y+2, r18	; 0x02
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	9b 81       	ldd	r25, Y+3	; 0x03
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	89 f0       	breq	.+34     	; 0x168e <EXTI_voidDisable+0x44>
    166c:	2a 81       	ldd	r18, Y+2	; 0x02
    166e:	3b 81       	ldd	r19, Y+3	; 0x03
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	a1 f0       	breq	.+40     	; 0x169e <EXTI_voidDisable+0x54>
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	9b 81       	ldd	r25, Y+3	; 0x03
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	b9 f4       	brne	.+46     	; 0x16ac <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    167e:	ab e5       	ldi	r26, 0x5B	; 91
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	eb e5       	ldi	r30, 0x5B	; 91
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 7b       	andi	r24, 0xBF	; 191
    168a:	8c 93       	st	X, r24
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    168e:	ab e5       	ldi	r26, 0x5B	; 91
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	eb e5       	ldi	r30, 0x5B	; 91
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8f 77       	andi	r24, 0x7F	; 127
    169a:	8c 93       	st	X, r24
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    169e:	ab e5       	ldi	r26, 0x5B	; 91
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	eb e5       	ldi	r30, 0x5B	; 91
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8f 7d       	andi	r24, 0xDF	; 223
    16aa:	8c 93       	st	X, r24
        break;
    }
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <EXTRI_voidSetCallBackINT+0x6>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <EXTRI_voidSetCallBackINT+0x8>
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	7b 83       	std	Y+3, r23	; 0x03
    16ca:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	9b 81       	ldd	r25, Y+3	; 0x03
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	39 f1       	breq	.+78     	; 0x1722 <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3d 83       	std	Y+5, r19	; 0x05
    16dc:	2c 83       	std	Y+4, r18	; 0x04
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	91 05       	cpc	r25, r1
    16e6:	81 f0       	breq	.+32     	; 0x1708 <EXTRI_voidSetCallBackINT+0x50>
    16e8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ea:	3d 81       	ldd	r19, Y+5	; 0x05
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	91 f0       	breq	.+36     	; 0x1716 <EXTRI_voidSetCallBackINT+0x5e>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	a1 f4       	brne	.+40     	; 0x1722 <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	9b 81       	ldd	r25, Y+3	; 0x03
    16fe:	90 93 ed 00 	sts	0x00ED, r25
    1702:	80 93 ec 00 	sts	0x00EC, r24
    1706:	0d c0       	rjmp	.+26     	; 0x1722 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	9b 81       	ldd	r25, Y+3	; 0x03
    170c:	90 93 ef 00 	sts	0x00EF, r25
    1710:	80 93 ee 00 	sts	0x00EE, r24
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	9b 81       	ldd	r25, Y+3	; 0x03
    171a:	90 93 f1 00 	sts	0x00F1, r25
    171e:	80 93 f0 00 	sts	0x00F0, r24
            break;
        default:
            break;
        }
    }
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    175c:	80 91 ec 00 	lds	r24, 0x00EC
    1760:	90 91 ed 00 	lds	r25, 0x00ED
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	29 f0       	breq	.+10     	; 0x1772 <__vector_1+0x40>
        private_pCallBackINT0();
    1768:	e0 91 ec 00 	lds	r30, 0x00EC
    176c:	f0 91 ed 00 	lds	r31, 0x00ED
    1770:	09 95       	icall
    }
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	ff 91       	pop	r31
    1778:	ef 91       	pop	r30
    177a:	bf 91       	pop	r27
    177c:	af 91       	pop	r26
    177e:	9f 91       	pop	r25
    1780:	8f 91       	pop	r24
    1782:	7f 91       	pop	r23
    1784:	6f 91       	pop	r22
    1786:	5f 91       	pop	r21
    1788:	4f 91       	pop	r20
    178a:	3f 91       	pop	r19
    178c:	2f 91       	pop	r18
    178e:	0f 90       	pop	r0
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	0f 90       	pop	r0
    1794:	1f 90       	pop	r1
    1796:	18 95       	reti

00001798 <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    1798:	1f 92       	push	r1
    179a:	0f 92       	push	r0
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	0f 92       	push	r0
    17a0:	11 24       	eor	r1, r1
    17a2:	2f 93       	push	r18
    17a4:	3f 93       	push	r19
    17a6:	4f 93       	push	r20
    17a8:	5f 93       	push	r21
    17aa:	6f 93       	push	r22
    17ac:	7f 93       	push	r23
    17ae:	8f 93       	push	r24
    17b0:	9f 93       	push	r25
    17b2:	af 93       	push	r26
    17b4:	bf 93       	push	r27
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    17c2:	80 91 ee 00 	lds	r24, 0x00EE
    17c6:	90 91 ef 00 	lds	r25, 0x00EF
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	29 f0       	breq	.+10     	; 0x17d8 <__vector_2+0x40>
        private_pCallBackINT1();
    17ce:	e0 91 ee 00 	lds	r30, 0x00EE
    17d2:	f0 91 ef 00 	lds	r31, 0x00EF
    17d6:	09 95       	icall
    }
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	ff 91       	pop	r31
    17de:	ef 91       	pop	r30
    17e0:	bf 91       	pop	r27
    17e2:	af 91       	pop	r26
    17e4:	9f 91       	pop	r25
    17e6:	8f 91       	pop	r24
    17e8:	7f 91       	pop	r23
    17ea:	6f 91       	pop	r22
    17ec:	5f 91       	pop	r21
    17ee:	4f 91       	pop	r20
    17f0:	3f 91       	pop	r19
    17f2:	2f 91       	pop	r18
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    1828:	80 91 f0 00 	lds	r24, 0x00F0
    182c:	90 91 f1 00 	lds	r25, 0x00F1
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	29 f0       	breq	.+10     	; 0x183e <__vector_3+0x40>
        private_pCallBackINT2();
    1834:	e0 91 f0 00 	lds	r30, 0x00F0
    1838:	f0 91 f1 00 	lds	r31, 0x00F1
    183c:	09 95       	icall
    }
}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	ff 91       	pop	r31
    1844:	ef 91       	pop	r30
    1846:	bf 91       	pop	r27
    1848:	af 91       	pop	r26
    184a:	9f 91       	pop	r25
    184c:	8f 91       	pop	r24
    184e:	7f 91       	pop	r23
    1850:	6f 91       	pop	r22
    1852:	5f 91       	pop	r21
    1854:	4f 91       	pop	r20
    1856:	3f 91       	pop	r19
    1858:	2f 91       	pop	r18
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <Dio_WriteChannel+0x6>
    186a:	00 d0       	rcall	.+0      	; 0x186c <Dio_WriteChannel+0x8>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	86 95       	lsr	r24
    187a:	86 95       	lsr	r24
    187c:	86 95       	lsr	r24
    187e:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3d 83       	std	Y+5, r19	; 0x05
    1888:	2c 83       	std	Y+4, r18	; 0x04
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <Dio_WriteChannel+0x32>
    1894:	43 c0       	rjmp	.+134    	; 0x191c <Dio_WriteChannel+0xb8>
    1896:	2c 81       	ldd	r18, Y+4	; 0x04
    1898:	3d 81       	ldd	r19, Y+5	; 0x05
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	2c f4       	brge	.+10     	; 0x18aa <Dio_WriteChannel+0x46>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	71 f0       	breq	.+28     	; 0x18c4 <Dio_WriteChannel+0x60>
    18a8:	ce c0       	rjmp	.+412    	; 0x1a46 <Dio_WriteChannel+0x1e2>
    18aa:	2c 81       	ldd	r18, Y+4	; 0x04
    18ac:	3d 81       	ldd	r19, Y+5	; 0x05
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <Dio_WriteChannel+0x52>
    18b4:	65 c0       	rjmp	.+202    	; 0x1980 <Dio_WriteChannel+0x11c>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <Dio_WriteChannel+0x5e>
    18c0:	91 c0       	rjmp	.+290    	; 0x19e4 <Dio_WriteChannel+0x180>
    18c2:	c1 c0       	rjmp	.+386    	; 0x1a46 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	a1 f4       	brne	.+40     	; 0x18f2 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    18ca:	ab e3       	ldi	r26, 0x3B	; 59
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e3       	ldi	r30, 0x3B	; 59
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <Dio_WriteChannel+0x84>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <Dio_WriteChannel+0x80>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	aa c0       	rjmp	.+340    	; 0x1a46 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    18f2:	ab e3       	ldi	r26, 0x3B	; 59
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	eb e3       	ldi	r30, 0x3B	; 59
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <Dio_WriteChannel+0xac>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <Dio_WriteChannel+0xa8>
    1914:	80 95       	com	r24
    1916:	84 23       	and	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	95 c0       	rjmp	.+298    	; 0x1a46 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	b9 f4       	brne	.+46     	; 0x1950 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    1922:	a8 e3       	ldi	r26, 0x38	; 56
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e8 e3       	ldi	r30, 0x38	; 56
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 01       	movw	r18, r24
    1936:	27 70       	andi	r18, 0x07	; 7
    1938:	30 70       	andi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <Dio_WriteChannel+0xe2>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <Dio_WriteChannel+0xde>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	7b c0       	rjmp	.+246    	; 0x1a46 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    1950:	a8 e3       	ldi	r26, 0x38	; 56
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e8 e3       	ldi	r30, 0x38	; 56
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9c 01       	movw	r18, r24
    1964:	27 70       	andi	r18, 0x07	; 7
    1966:	30 70       	andi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 2e       	mov	r0, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <Dio_WriteChannel+0x110>
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	0a 94       	dec	r0
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <Dio_WriteChannel+0x10c>
    1978:	80 95       	com	r24
    197a:	84 23       	and	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	63 c0       	rjmp	.+198    	; 0x1a46 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	b9 f4       	brne	.+46     	; 0x19b4 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    1986:	a5 e3       	ldi	r26, 0x35	; 53
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e5 e3       	ldi	r30, 0x35	; 53
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9c 01       	movw	r18, r24
    199a:	27 70       	andi	r18, 0x07	; 7
    199c:	30 70       	andi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <Dio_WriteChannel+0x146>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <Dio_WriteChannel+0x142>
    19ae:	84 2b       	or	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	49 c0       	rjmp	.+146    	; 0x1a46 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    19b4:	a5 e3       	ldi	r26, 0x35	; 53
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e5 e3       	ldi	r30, 0x35	; 53
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9c 01       	movw	r18, r24
    19c8:	27 70       	andi	r18, 0x07	; 7
    19ca:	30 70       	andi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <Dio_WriteChannel+0x174>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <Dio_WriteChannel+0x170>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	31 c0       	rjmp	.+98     	; 0x1a46 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	b9 f4       	brne	.+46     	; 0x1a18 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    19ea:	a2 e3       	ldi	r26, 0x32	; 50
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e2 e3       	ldi	r30, 0x32	; 50
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	88 2f       	mov	r24, r24
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 01       	movw	r18, r24
    19fe:	27 70       	andi	r18, 0x07	; 7
    1a00:	30 70       	andi	r19, 0x00	; 0
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 2e       	mov	r0, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <Dio_WriteChannel+0x1aa>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	0a 94       	dec	r0
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <Dio_WriteChannel+0x1a6>
    1a12:	84 2b       	or	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    1a18:	a2 e3       	ldi	r26, 0x32	; 50
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e2 e3       	ldi	r30, 0x32	; 50
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9c 01       	movw	r18, r24
    1a2c:	27 70       	andi	r18, 0x07	; 7
    1a2e:	30 70       	andi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <Dio_WriteChannel+0x1d8>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <Dio_WriteChannel+0x1d4>
    1a40:	80 95       	com	r24
    1a42:	84 23       	and	r24, r20
    1a44:	8c 93       	st	X, r24
		}
		break;
	}
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <Dio_ReadChannel+0x6>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <Dio_ReadChannel+0x8>
    1a5e:	0f 92       	push	r0
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	86 95       	lsr	r24
    1a6a:	86 95       	lsr	r24
    1a6c:	86 95       	lsr	r24
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	3d 83       	std	Y+5, r19	; 0x05
    1a78:	2c 83       	std	Y+4, r18	; 0x04
    1a7a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a7c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7e:	41 30       	cpi	r20, 0x01	; 1
    1a80:	51 05       	cpc	r21, r1
    1a82:	49 f1       	breq	.+82     	; 0x1ad6 <Dio_ReadChannel+0x80>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	34 f4       	brge	.+12     	; 0x1a9a <Dio_ReadChannel+0x44>
    1a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a90:	3d 81       	ldd	r19, Y+5	; 0x05
    1a92:	21 15       	cp	r18, r1
    1a94:	31 05       	cpc	r19, r1
    1a96:	69 f0       	breq	.+26     	; 0x1ab2 <Dio_ReadChannel+0x5c>
    1a98:	59 c0       	rjmp	.+178    	; 0x1b4c <Dio_ReadChannel+0xf6>
    1a9a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a9c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a9e:	42 30       	cpi	r20, 0x02	; 2
    1aa0:	51 05       	cpc	r21, r1
    1aa2:	69 f1       	breq	.+90     	; 0x1afe <Dio_ReadChannel+0xa8>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 05       	cpc	r25, r1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <Dio_ReadChannel+0x5a>
    1aae:	3b c0       	rjmp	.+118    	; 0x1b26 <Dio_ReadChannel+0xd0>
    1ab0:	4d c0       	rjmp	.+154    	; 0x1b4c <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    1ab2:	e9 e3       	ldi	r30, 0x39	; 57
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <Dio_ReadChannel+0x74>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <Dio_ReadChannel+0x70>
    1ace:	ca 01       	movw	r24, r20
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	3b c0       	rjmp	.+118    	; 0x1b4c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    1ad6:	e6 e3       	ldi	r30, 0x36	; 54
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	87 70       	andi	r24, 0x07	; 7
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <Dio_ReadChannel+0x9c>
    1aee:	55 95       	asr	r21
    1af0:	47 95       	ror	r20
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <Dio_ReadChannel+0x98>
    1af6:	ca 01       	movw	r24, r20
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	27 c0       	rjmp	.+78     	; 0x1b4c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    1afe:	e3 e3       	ldi	r30, 0x33	; 51
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	87 70       	andi	r24, 0x07	; 7
    1b10:	90 70       	andi	r25, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <Dio_ReadChannel+0xc4>
    1b16:	55 95       	asr	r21
    1b18:	47 95       	ror	r20
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <Dio_ReadChannel+0xc0>
    1b1e:	ca 01       	movw	r24, r20
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	13 c0       	rjmp	.+38     	; 0x1b4c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    1b26:	e0 e3       	ldi	r30, 0x30	; 48
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	87 70       	andi	r24, 0x07	; 7
    1b38:	90 70       	andi	r25, 0x00	; 0
    1b3a:	a9 01       	movw	r20, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <Dio_ReadChannel+0xec>
    1b3e:	55 95       	asr	r21
    1b40:	47 95       	ror	r20
    1b42:	8a 95       	dec	r24
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <Dio_ReadChannel+0xe8>
    1b46:	ca 01       	movw	r24, r20
    1b48:	81 70       	andi	r24, 0x01	; 1
    1b4a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <Dio_FlipChannel+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <Dio_FlipChannel+0x8>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	86 95       	lsr	r24
    1b70:	86 95       	lsr	r24
    1b72:	86 95       	lsr	r24
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3c 83       	std	Y+4, r19	; 0x04
    1b7a:	2b 83       	std	Y+3, r18	; 0x03
    1b7c:	4b 81       	ldd	r20, Y+3	; 0x03
    1b7e:	5c 81       	ldd	r21, Y+4	; 0x04
    1b80:	41 30       	cpi	r20, 0x01	; 1
    1b82:	51 05       	cpc	r21, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <Dio_FlipChannel+0x2a>
    1b86:	3c c0       	rjmp	.+120    	; 0x1c00 <Dio_FlipChannel+0xa2>
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	82 30       	cpi	r24, 0x02	; 2
    1b8e:	91 05       	cpc	r25, r1
    1b90:	34 f4       	brge	.+12     	; 0x1b9e <Dio_FlipChannel+0x40>
    1b92:	2b 81       	ldd	r18, Y+3	; 0x03
    1b94:	3c 81       	ldd	r19, Y+4	; 0x04
    1b96:	21 15       	cp	r18, r1
    1b98:	31 05       	cpc	r19, r1
    1b9a:	71 f0       	breq	.+28     	; 0x1bb8 <Dio_FlipChannel+0x5a>
    1b9c:	ab c0       	rjmp	.+342    	; 0x1cf4 <Dio_FlipChannel+0x196>
    1b9e:	4b 81       	ldd	r20, Y+3	; 0x03
    1ba0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ba2:	42 30       	cpi	r20, 0x02	; 2
    1ba4:	51 05       	cpc	r21, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <Dio_FlipChannel+0x4c>
    1ba8:	54 c0       	rjmp	.+168    	; 0x1c52 <Dio_FlipChannel+0xf4>
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	83 30       	cpi	r24, 0x03	; 3
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <Dio_FlipChannel+0x58>
    1bb4:	77 c0       	rjmp	.+238    	; 0x1ca4 <Dio_FlipChannel+0x146>
    1bb6:	9e c0       	rjmp	.+316    	; 0x1cf4 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    1bb8:	ab e3       	ldi	r26, 0x3B	; 59
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	eb e3       	ldi	r30, 0x3B	; 59
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <Dio_FlipChannel+0x76>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	2a 95       	dec	r18
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <Dio_FlipChannel+0x72>
    1bd8:	84 27       	eor	r24, r20
    1bda:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    1bdc:	eb e3       	ldi	r30, 0x3B	; 59
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a9 01       	movw	r20, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <Dio_FlipChannel+0x96>
    1bf0:	55 95       	asr	r21
    1bf2:	47 95       	ror	r20
    1bf4:	8a 95       	dec	r24
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <Dio_FlipChannel+0x92>
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	81 70       	andi	r24, 0x01	; 1
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	7a c0       	rjmp	.+244    	; 0x1cf4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    1c00:	a8 e3       	ldi	r26, 0x38	; 56
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e8 e3       	ldi	r30, 0x38	; 56
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9c 01       	movw	r18, r24
    1c14:	27 70       	andi	r18, 0x07	; 7
    1c16:	30 70       	andi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <Dio_FlipChannel+0xc4>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	2a 95       	dec	r18
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <Dio_FlipChannel+0xc0>
    1c26:	84 27       	eor	r24, r20
    1c28:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    1c2a:	e8 e3       	ldi	r30, 0x38	; 56
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	87 70       	andi	r24, 0x07	; 7
    1c3c:	90 70       	andi	r25, 0x00	; 0
    1c3e:	a9 01       	movw	r20, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <Dio_FlipChannel+0xe8>
    1c42:	55 95       	asr	r21
    1c44:	47 95       	ror	r20
    1c46:	8a 95       	dec	r24
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <Dio_FlipChannel+0xe4>
    1c4a:	ca 01       	movw	r24, r20
    1c4c:	81 70       	andi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	51 c0       	rjmp	.+162    	; 0x1cf4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    1c52:	a5 e3       	ldi	r26, 0x35	; 53
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e5 e3       	ldi	r30, 0x35	; 53
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 01       	movw	r18, r24
    1c66:	27 70       	andi	r18, 0x07	; 7
    1c68:	30 70       	andi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <Dio_FlipChannel+0x116>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	2a 95       	dec	r18
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <Dio_FlipChannel+0x112>
    1c78:	84 27       	eor	r24, r20
    1c7a:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    1c7c:	e5 e3       	ldi	r30, 0x35	; 53
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	87 70       	andi	r24, 0x07	; 7
    1c8e:	90 70       	andi	r25, 0x00	; 0
    1c90:	a9 01       	movw	r20, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <Dio_FlipChannel+0x13a>
    1c94:	55 95       	asr	r21
    1c96:	47 95       	ror	r20
    1c98:	8a 95       	dec	r24
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <Dio_FlipChannel+0x136>
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	81 70       	andi	r24, 0x01	; 1
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	28 c0       	rjmp	.+80     	; 0x1cf4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    1ca4:	a2 e3       	ldi	r26, 0x32	; 50
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e2 e3       	ldi	r30, 0x32	; 50
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9c 01       	movw	r18, r24
    1cb8:	27 70       	andi	r18, 0x07	; 7
    1cba:	30 70       	andi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <Dio_FlipChannel+0x168>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	2a 95       	dec	r18
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <Dio_FlipChannel+0x164>
    1cca:	84 27       	eor	r24, r20
    1ccc:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    1cce:	e2 e3       	ldi	r30, 0x32	; 50
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	87 70       	andi	r24, 0x07	; 7
    1ce0:	90 70       	andi	r25, 0x00	; 0
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <Dio_FlipChannel+0x18c>
    1ce6:	55 95       	asr	r21
    1ce8:	47 95       	ror	r20
    1cea:	8a 95       	dec	r24
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <Dio_FlipChannel+0x188>
    1cee:	ca 01       	movw	r24, r20
    1cf0:	81 70       	andi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <Dio_WritePort+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <Dio_WritePort+0x8>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3c 83       	std	Y+4, r19	; 0x04
    1d1c:	2b 83       	std	Y+3, r18	; 0x03
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	d1 f0       	breq	.+52     	; 0x1d5c <Dio_WritePort+0x58>
    1d28:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <Dio_WritePort+0x38>
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	61 f0       	breq	.+24     	; 0x1d52 <Dio_WritePort+0x4e>
    1d3a:	1e c0       	rjmp	.+60     	; 0x1d78 <Dio_WritePort+0x74>
    1d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	81 f0       	breq	.+32     	; 0x1d66 <Dio_WritePort+0x62>
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	81 f0       	breq	.+32     	; 0x1d70 <Dio_WritePort+0x6c>
    1d50:	13 c0       	rjmp	.+38     	; 0x1d78 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    1d52:	eb e3       	ldi	r30, 0x3B	; 59
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	80 83       	st	Z, r24
    1d5a:	0e c0       	rjmp	.+28     	; 0x1d78 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    1d5c:	e8 e3       	ldi	r30, 0x38	; 56
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	80 83       	st	Z, r24
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    1d66:	e5 e3       	ldi	r30, 0x35	; 53
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	80 83       	st	Z, r24
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    1d70:	e2 e3       	ldi	r30, 0x32	; 50
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	80 83       	st	Z, r24
		break;
	}
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <ADC_Init>:
 */

#include "../includes/ADC_interface.h"  // Include the ADC interface header file
#include <avr/io.h>         // Include AVR I/O definitions
#include "../../DIO/DIO_interface.h"
void ADC_Init(void) {
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	// Set reference voltage to AVCC with external capacitor at AREF pin
#if ADC_AREF_MODE == ADC_AREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_AREF_MODE == ADC_AVCC
	SET_BIT(ADMUX,REFS0);
    1d8e:	a7 e2       	ldi	r26, 0x27	; 39
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e7 e2       	ldi	r30, 0x27	; 39
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	80 64       	ori	r24, 0x40	; 64
    1d9a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    1d9c:	a7 e2       	ldi	r26, 0x27	; 39
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e7 e2       	ldi	r30, 0x27	; 39
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8f 77       	andi	r24, 0x7F	; 127
    1da8:	8c 93       	st	X, r24
#endif

//	ADMUX = (1 << REFS0);

#if 	ADC_RESULT_ADJUSTMENT_MODE ==ADC_LEFT_ADJUST_THE_RESULT
	SET_BIT(ADMUX,ADLAR);
    1daa:	a7 e2       	ldi	r26, 0x27	; 39
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e7 e2       	ldi	r30, 0x27	; 39
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 62       	ori	r24, 0x20	; 32
    1db6:	8c 93       	st	X, r24
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_32
    SET_BIT(ADCSRA,ADPS0);
    CLR_BIT(ADCSRA,ADPS1);
    SET_BIT(ADCSRA,ADPS2);
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_64
    CLR_BIT(ADCSRA,ADPS0);
    1db8:	a6 e2       	ldi	r26, 0x26	; 38
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e6 e2       	ldi	r30, 0x26	; 38
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8e 7f       	andi	r24, 0xFE	; 254
    1dc4:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS1);
    1dc6:	a6 e2       	ldi	r26, 0x26	; 38
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e6 e2       	ldi	r30, 0x26	; 38
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	82 60       	ori	r24, 0x02	; 2
    1dd2:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS2);
    1dd4:	a6 e2       	ldi	r26, 0x26	; 38
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e6 e2       	ldi	r30, 0x26	; 38
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	84 60       	ori	r24, 0x04	; 4
    1de0:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS1);
    SET_BIT(ADCSRA,ADPS2);
#endif

    // Enable the ADC
   	     SET_BIT(ADCSRA,ADEN);
    1de2:	a6 e2       	ldi	r26, 0x26	; 38
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e6 e2       	ldi	r30, 0x26	; 38
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	80 68       	ori	r24, 0x80	; 128
    1dee:	8c 93       	st	X, r24
    //    ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
//	SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);

}
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <ADC_ReadChannel>:

u16 ADC_ReadChannel(u8 channel) {
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <ADC_ReadChannel+0x6>
    1dfc:	0f 92       	push	r0
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	8b 83       	std	Y+3, r24	; 0x03
	u16 result=0;
    1e04:	1a 82       	std	Y+2, r1	; 0x02
    1e06:	19 82       	std	Y+1, r1	; 0x01
	// Select the ADC channel           0x00000111
                //    0x1111 1000
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
    1e08:	a7 e2       	ldi	r26, 0x27	; 39
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e7 e2       	ldi	r30, 0x27	; 39
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	98 2f       	mov	r25, r24
    1e14:	98 7f       	andi	r25, 0xF8	; 248
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	87 70       	andi	r24, 0x07	; 7
    1e1a:	89 2b       	or	r24, r25
    1e1c:	8c 93       	st	X, r24

    // Start the conversion
    SET_BIT(ADCSRA,ADSC);
    1e1e:	a6 e2       	ldi	r26, 0x26	; 38
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e6 e2       	ldi	r30, 0x26	; 38
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 64       	ori	r24, 0x40	; 64
    1e2a:	8c 93       	st	X, r24
   // ADCSRA |= (1 << ADSC);

    // Wait for the conversion to complete
    while (ADCSRA & (1 << ADSC));
    1e2c:	e6 e2       	ldi	r30, 0x26	; 38
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	88 2f       	mov	r24, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	80 74       	andi	r24, 0x40	; 64
    1e38:	90 70       	andi	r25, 0x00	; 0
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	b9 f7       	brne	.-18     	; 0x1e2c <ADC_ReadChannel+0x36>

#if ADC_RESULT_ADJUSTMENT_MODE == ADC_LEFT_ADJUST_THE_RESULT
    // Return the ADC result as a 16-bit value (combining ADCL and ADCH)
    result=(ADCL>>6);
    1e3e:	e4 e2       	ldi	r30, 0x24	; 36
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	82 95       	swap	r24
    1e46:	86 95       	lsr	r24
    1e48:	86 95       	lsr	r24
    1e4a:	83 70       	andi	r24, 0x03	; 3
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
    result|=(ADCH<<2);
    1e54:	e5 e2       	ldi	r30, 0x25	; 37
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	9c 01       	movw	r18, r24
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	82 2b       	or	r24, r18
    1e6e:	93 2b       	or	r25, r19
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
    // Return the ADC result as a 16-bit value (combining ADCL and ADCH)
  result = ADCL;
  result|=(ADCH << 8);
    // result = (ADCH<<8) | ADCL;
    #endif
    return result;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <SevenSeg_SegEnable>:

#include "SEVEN_SEGMENT.h"
#include <avr/io.h>
#include <avr/delay.h>

void SevenSeg_SegEnable(SegNumber seg) {
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <SevenSeg_SegEnable+0x6>
    1e8a:	0f 92       	push	r0
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	89 83       	std	Y+1, r24	; 0x01
	switch (seg) {
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3b 83       	std	Y+3, r19	; 0x03
    1e9a:	2a 83       	std	Y+2, r18	; 0x02
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	b1 f0       	breq	.+44     	; 0x1ed2 <SevenSeg_SegEnable+0x4e>
    1ea6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ea8:	3b 81       	ldd	r19, Y+3	; 0x03
    1eaa:	24 30       	cpi	r18, 0x04	; 4
    1eac:	31 05       	cpc	r19, r1
    1eae:	34 f4       	brge	.+12     	; 0x1ebc <SevenSeg_SegEnable+0x38>
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	e9 f0       	breq	.+58     	; 0x1ef4 <SevenSeg_SegEnable+0x70>
    1eba:	4e c0       	rjmp	.+156    	; 0x1f58 <SevenSeg_SegEnable+0xd4>
    1ebc:	2a 81       	ldd	r18, Y+2	; 0x02
    1ebe:	3b 81       	ldd	r19, Y+3	; 0x03
    1ec0:	2d 30       	cpi	r18, 0x0D	; 13
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	41 f1       	breq	.+80     	; 0x1f16 <SevenSeg_SegEnable+0x92>
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eca:	8e 30       	cpi	r24, 0x0E	; 14
    1ecc:	91 05       	cpc	r25, r1
    1ece:	a1 f1       	breq	.+104    	; 0x1f38 <SevenSeg_SegEnable+0xb4>
    1ed0:	43 c0       	rjmp	.+134    	; 0x1f58 <SevenSeg_SegEnable+0xd4>
	case SEG_1:
		Dio_WriteChannel(SEG_2, 1);
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	61 e0       	ldi	r22, 0x01	; 1
    1ed6:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1eda:	8d e0       	ldi	r24, 0x0D	; 13
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1ee2:	8e e0       	ldi	r24, 0x0E	; 14
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 0);
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
    1ef2:	32 c0       	rjmp	.+100    	; 0x1f58 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_2:
		Dio_WriteChannel(SEG_1, 1);
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	61 e0       	ldi	r22, 0x01	; 1
    1ef8:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1efc:	8d e0       	ldi	r24, 0x0D	; 13
    1efe:	61 e0       	ldi	r22, 0x01	; 1
    1f00:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1f04:	8e e0       	ldi	r24, 0x0E	; 14
    1f06:	61 e0       	ldi	r22, 0x01	; 1
    1f08:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_2, 0);
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
    1f14:	21 c0       	rjmp	.+66     	; 0x1f58 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_3:
		Dio_WriteChannel(SEG_2, 1);
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1f1e:	83 e0       	ldi	r24, 0x03	; 3
    1f20:	61 e0       	ldi	r22, 0x01	; 1
    1f22:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1f26:	8e e0       	ldi	r24, 0x0E	; 14
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 0);
    1f2e:	8d e0       	ldi	r24, 0x0D	; 13
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
    1f36:	10 c0       	rjmp	.+32     	; 0x1f58 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_4:
		Dio_WriteChannel(SEG_2, 1);
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1f40:	8d e0       	ldi	r24, 0x0D	; 13
    1f42:	61 e0       	ldi	r22, 0x01	; 1
    1f44:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1f48:	83 e0       	ldi	r24, 0x03	; 3
    1f4a:	61 e0       	ldi	r22, 0x01	; 1
    1f4c:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 0);
    1f50:	8e e0       	ldi	r24, 0x0E	; 14
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>

		break;

	}

}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <SevenSeg_Send>:
//
//void SevenSeg_SegDisable(SegNumber seg){
//	Dio_WriteChannel(seg,1);
//}

void SevenSeg_Send(u8 num1, u8 num2, u8 num3, u8 num4) {
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	ec 97       	sbiw	r28, 0x3c	; 60
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	89 af       	std	Y+57, r24	; 0x39
    1f7a:	6a af       	std	Y+58, r22	; 0x3a
    1f7c:	4b af       	std	Y+59, r20	; 0x3b
    1f7e:	2c af       	std	Y+60, r18	; 0x3c

	SevenSeg_SegEnable(SEG_1);
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num1);
    1f86:	89 ad       	ldd	r24, Y+57	; 0x39
    1f88:	0e 94 a9 11 	call	0x2352	; 0x2352 <SevenSeg_SendOneSeg>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a8 ec       	ldi	r26, 0xC8	; 200
    1f92:	b2 e4       	ldi	r27, 0x42	; 66
    1f94:	8d ab       	std	Y+53, r24	; 0x35
    1f96:	9e ab       	std	Y+54, r25	; 0x36
    1f98:	af ab       	std	Y+55, r26	; 0x37
    1f9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4a e7       	ldi	r20, 0x7A	; 122
    1faa:	55 e4       	ldi	r21, 0x45	; 69
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	89 ab       	std	Y+49, r24	; 0x31
    1fb6:	9a ab       	std	Y+50, r25	; 0x32
    1fb8:	ab ab       	std	Y+51, r26	; 0x33
    1fba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fbc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fbe:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <SevenSeg_Send+0x7a>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	98 ab       	std	Y+48, r25	; 0x30
    1fda:	8f a7       	std	Y+47, r24	; 0x2f
    1fdc:	3f c0       	rjmp	.+126    	; 0x205c <SevenSeg_Send+0xf8>
	else if (__tmp > 65535)
    1fde:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	4f e7       	ldi	r20, 0x7F	; 127
    1fec:	57 e4       	ldi	r21, 0x47	; 71
    1fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	4c f5       	brge	.+82     	; 0x2048 <SevenSeg_Send+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff8:	7e a9       	ldd	r23, Y+54	; 0x36
    1ffa:	8f a9       	ldd	r24, Y+55	; 0x37
    1ffc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	98 ab       	std	Y+48, r25	; 0x30
    201c:	8f a7       	std	Y+47, r24	; 0x2f
    201e:	0f c0       	rjmp	.+30     	; 0x203e <SevenSeg_Send+0xda>
    2020:	80 e9       	ldi	r24, 0x90	; 144
    2022:	91 e0       	ldi	r25, 0x01	; 1
    2024:	9e a7       	std	Y+46, r25	; 0x2e
    2026:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2028:	8d a5       	ldd	r24, Y+45	; 0x2d
    202a:	9e a5       	ldd	r25, Y+46	; 0x2e
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <SevenSeg_Send+0xc8>
    2030:	9e a7       	std	Y+46, r25	; 0x2e
    2032:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	8f a5       	ldd	r24, Y+47	; 0x2f
    2036:	98 a9       	ldd	r25, Y+48	; 0x30
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	98 ab       	std	Y+48, r25	; 0x30
    203c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2040:	98 a9       	ldd	r25, Y+48	; 0x30
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	69 f7       	brne	.-38     	; 0x2020 <SevenSeg_Send+0xbc>
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <SevenSeg_Send+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	69 a9       	ldd	r22, Y+49	; 0x31
    204a:	7a a9       	ldd	r23, Y+50	; 0x32
    204c:	8b a9       	ldd	r24, Y+51	; 0x33
    204e:	9c a9       	ldd	r25, Y+52	; 0x34
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	98 ab       	std	Y+48, r25	; 0x30
    205a:	8f a7       	std	Y+47, r24	; 0x2f
    205c:	8f a5       	ldd	r24, Y+47	; 0x2f
    205e:	98 a9       	ldd	r25, Y+48	; 0x30
    2060:	9c a7       	std	Y+44, r25	; 0x2c
    2062:	8b a7       	std	Y+43, r24	; 0x2b
    2064:	8b a5       	ldd	r24, Y+43	; 0x2b
    2066:	9c a5       	ldd	r25, Y+44	; 0x2c
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <SevenSeg_Send+0x104>
    206c:	9c a7       	std	Y+44, r25	; 0x2c
    206e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_2);
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num2);
    2076:	8a ad       	ldd	r24, Y+58	; 0x3a
    2078:	0e 94 a9 11 	call	0x2352	; 0x2352 <SevenSeg_SendOneSeg>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a8 ec       	ldi	r26, 0xC8	; 200
    2082:	b2 e4       	ldi	r27, 0x42	; 66
    2084:	8f a3       	std	Y+39, r24	; 0x27
    2086:	98 a7       	std	Y+40, r25	; 0x28
    2088:	a9 a7       	std	Y+41, r26	; 0x29
    208a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6f a1       	ldd	r22, Y+39	; 0x27
    208e:	78 a5       	ldd	r23, Y+40	; 0x28
    2090:	89 a5       	ldd	r24, Y+41	; 0x29
    2092:	9a a5       	ldd	r25, Y+42	; 0x2a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a e7       	ldi	r20, 0x7A	; 122
    209a:	55 e4       	ldi	r21, 0x45	; 69
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8b a3       	std	Y+35, r24	; 0x23
    20a6:	9c a3       	std	Y+36, r25	; 0x24
    20a8:	ad a3       	std	Y+37, r26	; 0x25
    20aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ac:	6b a1       	ldd	r22, Y+35	; 0x23
    20ae:	7c a1       	ldd	r23, Y+36	; 0x24
    20b0:	8d a1       	ldd	r24, Y+37	; 0x25
    20b2:	9e a1       	ldd	r25, Y+38	; 0x26
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <SevenSeg_Send+0x16a>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9a a3       	std	Y+34, r25	; 0x22
    20ca:	89 a3       	std	Y+33, r24	; 0x21
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <SevenSeg_Send+0x1e8>
	else if (__tmp > 65535)
    20ce:	6b a1       	ldd	r22, Y+35	; 0x23
    20d0:	7c a1       	ldd	r23, Y+36	; 0x24
    20d2:	8d a1       	ldd	r24, Y+37	; 0x25
    20d4:	9e a1       	ldd	r25, Y+38	; 0x26
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <SevenSeg_Send+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6f a1       	ldd	r22, Y+39	; 0x27
    20e8:	78 a5       	ldd	r23, Y+40	; 0x28
    20ea:	89 a5       	ldd	r24, Y+41	; 0x29
    20ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9a a3       	std	Y+34, r25	; 0x22
    210c:	89 a3       	std	Y+33, r24	; 0x21
    210e:	0f c0       	rjmp	.+30     	; 0x212e <SevenSeg_Send+0x1ca>
    2110:	80 e9       	ldi	r24, 0x90	; 144
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	98 a3       	std	Y+32, r25	; 0x20
    2116:	8f 8f       	std	Y+31, r24	; 0x1f
    2118:	8f 8d       	ldd	r24, Y+31	; 0x1f
    211a:	98 a1       	ldd	r25, Y+32	; 0x20
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <SevenSeg_Send+0x1b8>
    2120:	98 a3       	std	Y+32, r25	; 0x20
    2122:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	89 a1       	ldd	r24, Y+33	; 0x21
    2126:	9a a1       	ldd	r25, Y+34	; 0x22
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9a a3       	std	Y+34, r25	; 0x22
    212c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	89 a1       	ldd	r24, Y+33	; 0x21
    2130:	9a a1       	ldd	r25, Y+34	; 0x22
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <SevenSeg_Send+0x1ac>
    2136:	14 c0       	rjmp	.+40     	; 0x2160 <SevenSeg_Send+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	6b a1       	ldd	r22, Y+35	; 0x23
    213a:	7c a1       	ldd	r23, Y+36	; 0x24
    213c:	8d a1       	ldd	r24, Y+37	; 0x25
    213e:	9e a1       	ldd	r25, Y+38	; 0x26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	9e 8f       	std	Y+30, r25	; 0x1e
    2152:	8d 8f       	std	Y+29, r24	; 0x1d
    2154:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2156:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <SevenSeg_Send+0x1f4>
    215c:	9e 8f       	std	Y+30, r25	; 0x1e
    215e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_3);
    2160:	8d e0       	ldi	r24, 0x0D	; 13
    2162:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num3);
    2166:	8b ad       	ldd	r24, Y+59	; 0x3b
    2168:	0e 94 a9 11 	call	0x2352	; 0x2352 <SevenSeg_SendOneSeg>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a8 ec       	ldi	r26, 0xC8	; 200
    2172:	b2 e4       	ldi	r27, 0x42	; 66
    2174:	89 8f       	std	Y+25, r24	; 0x19
    2176:	9a 8f       	std	Y+26, r25	; 0x1a
    2178:	ab 8f       	std	Y+27, r26	; 0x1b
    217a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	69 8d       	ldd	r22, Y+25	; 0x19
    217e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a e7       	ldi	r20, 0x7A	; 122
    218a:	55 e4       	ldi	r21, 0x45	; 69
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8d 8b       	std	Y+21, r24	; 0x15
    2196:	9e 8b       	std	Y+22, r25	; 0x16
    2198:	af 8b       	std	Y+23, r26	; 0x17
    219a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    219c:	6d 89       	ldd	r22, Y+21	; 0x15
    219e:	7e 89       	ldd	r23, Y+22	; 0x16
    21a0:	8f 89       	ldd	r24, Y+23	; 0x17
    21a2:	98 8d       	ldd	r25, Y+24	; 0x18
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <SevenSeg_Send+0x25a>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9c 8b       	std	Y+20, r25	; 0x14
    21ba:	8b 8b       	std	Y+19, r24	; 0x13
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <SevenSeg_Send+0x2d8>
	else if (__tmp > 65535)
    21be:	6d 89       	ldd	r22, Y+21	; 0x15
    21c0:	7e 89       	ldd	r23, Y+22	; 0x16
    21c2:	8f 89       	ldd	r24, Y+23	; 0x17
    21c4:	98 8d       	ldd	r25, Y+24	; 0x18
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <SevenSeg_Send+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	69 8d       	ldd	r22, Y+25	; 0x19
    21d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <SevenSeg_Send+0x2ba>
    2200:	80 e9       	ldi	r24, 0x90	; 144
    2202:	91 e0       	ldi	r25, 0x01	; 1
    2204:	9a 8b       	std	Y+18, r25	; 0x12
    2206:	89 8b       	std	Y+17, r24	; 0x11
    2208:	89 89       	ldd	r24, Y+17	; 0x11
    220a:	9a 89       	ldd	r25, Y+18	; 0x12
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <SevenSeg_Send+0x2a8>
    2210:	9a 8b       	std	Y+18, r25	; 0x12
    2212:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8b 89       	ldd	r24, Y+19	; 0x13
    2216:	9c 89       	ldd	r25, Y+20	; 0x14
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9c 8b       	std	Y+20, r25	; 0x14
    221c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8b 89       	ldd	r24, Y+19	; 0x13
    2220:	9c 89       	ldd	r25, Y+20	; 0x14
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <SevenSeg_Send+0x29c>
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <SevenSeg_Send+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6d 89       	ldd	r22, Y+21	; 0x15
    222a:	7e 89       	ldd	r23, Y+22	; 0x16
    222c:	8f 89       	ldd	r24, Y+23	; 0x17
    222e:	98 8d       	ldd	r25, Y+24	; 0x18
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9c 8b       	std	Y+20, r25	; 0x14
    223a:	8b 8b       	std	Y+19, r24	; 0x13
    223c:	8b 89       	ldd	r24, Y+19	; 0x13
    223e:	9c 89       	ldd	r25, Y+20	; 0x14
    2240:	98 8b       	std	Y+16, r25	; 0x10
    2242:	8f 87       	std	Y+15, r24	; 0x0f
    2244:	8f 85       	ldd	r24, Y+15	; 0x0f
    2246:	98 89       	ldd	r25, Y+16	; 0x10
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <SevenSeg_Send+0x2e4>
    224c:	98 8b       	std	Y+16, r25	; 0x10
    224e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_4);
    2250:	8e e0       	ldi	r24, 0x0E	; 14
    2252:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num4);
    2256:	8c ad       	ldd	r24, Y+60	; 0x3c
    2258:	0e 94 a9 11 	call	0x2352	; 0x2352 <SevenSeg_SendOneSeg>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a8 ec       	ldi	r26, 0xC8	; 200
    2262:	b2 e4       	ldi	r27, 0x42	; 66
    2264:	8b 87       	std	Y+11, r24	; 0x0b
    2266:	9c 87       	std	Y+12, r25	; 0x0c
    2268:	ad 87       	std	Y+13, r26	; 0x0d
    226a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	55 e4       	ldi	r21, 0x45	; 69
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8f 83       	std	Y+7, r24	; 0x07
    2286:	98 87       	std	Y+8, r25	; 0x08
    2288:	a9 87       	std	Y+9, r26	; 0x09
    228a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <SevenSeg_Send+0x34a>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <SevenSeg_Send+0x3c8>
	else if (__tmp > 65535)
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <SevenSeg_Send+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <SevenSeg_Send+0x3aa>
    22f0:	80 e9       	ldi	r24, 0x90	; 144
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	8b 83       	std	Y+3, r24	; 0x03
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <SevenSeg_Send+0x398>
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <SevenSeg_Send+0x38c>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <SevenSeg_Send+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <SevenSeg_Send+0x3d4>
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);

}
    2340:	ec 96       	adiw	r28, 0x3c	; 60
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <SevenSeg_SendOneSeg>:
void SevenSeg_SendOneSeg(u8 number) //SevenSeg_Type type ,
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	0f 92       	push	r0
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	89 83       	std	Y+1, r24	; 0x01
//	SevenSeg_SegEnable(seg);
	Dio_WriteChannel(PB_0, GET_BIT(number, 0));
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	98 2f       	mov	r25, r24
    2362:	91 70       	andi	r25, 0x01	; 1
    2364:	88 e0       	ldi	r24, 0x08	; 8
    2366:	69 2f       	mov	r22, r25
    2368:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(number, 1));
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	86 95       	lsr	r24
    2370:	98 2f       	mov	r25, r24
    2372:	91 70       	andi	r25, 0x01	; 1
    2374:	89 e0       	ldi	r24, 0x09	; 9
    2376:	69 2f       	mov	r22, r25
    2378:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(number, 2));
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	86 95       	lsr	r24
    2380:	86 95       	lsr	r24
    2382:	98 2f       	mov	r25, r24
    2384:	91 70       	andi	r25, 0x01	; 1
    2386:	8a e0       	ldi	r24, 0x0A	; 10
    2388:	69 2f       	mov	r22, r25
    238a:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(number, 3));
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	86 95       	lsr	r24
    2392:	86 95       	lsr	r24
    2394:	86 95       	lsr	r24
    2396:	98 2f       	mov	r25, r24
    2398:	91 70       	andi	r25, 0x01	; 1
    239a:	8c e0       	ldi	r24, 0x0C	; 12
    239c:	69 2f       	mov	r22, r25
    239e:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
}
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <KP_GetKey>:
#include "avr/delay.h"

u8 Keys[][4] = { { '7', '8', '9', '/' }, { '4', '5', '6', '*' }, { '1', '2',
				'3', '-' }, { '.', '0', '=', '+' } };

u8 KP_GetKey() {
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	27 97       	sbiw	r28, 0x07	; 7
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
	u8 i, j = 0;
    23be:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < 4; i++) {
    23c0:	1a 82       	std	Y+2, r1	; 0x02
    23c2:	61 c0       	rjmp	.+194    	; 0x2486 <KP_GetKey+0xdc>
		Dio_WriteChannel(col1, !(i == 0));
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	8f 83       	std	Y+7, r24	; 0x07
    23c8:	8f 81       	ldd	r24, Y+7	; 0x07
    23ca:	88 23       	and	r24, r24
    23cc:	11 f0       	breq	.+4      	; 0x23d2 <KP_GetKey+0x28>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	8f 83       	std	Y+7, r24	; 0x07
    23d2:	9f 81       	ldd	r25, Y+7	; 0x07
    23d4:	8f e1       	ldi	r24, 0x1F	; 31
    23d6:	69 2f       	mov	r22, r25
    23d8:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(col2, !(i == 1));
    23dc:	1e 82       	std	Y+6, r1	; 0x06
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	11 f0       	breq	.+4      	; 0x23e8 <KP_GetKey+0x3e>
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	8e 83       	std	Y+6, r24	; 0x06
    23e8:	8e e1       	ldi	r24, 0x1E	; 30
    23ea:	6e 81       	ldd	r22, Y+6	; 0x06
    23ec:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(col3, !(i == 2));
    23f0:	1d 82       	std	Y+5, r1	; 0x05
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	82 30       	cpi	r24, 0x02	; 2
    23f6:	11 f0       	breq	.+4      	; 0x23fc <KP_GetKey+0x52>
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	89 e1       	ldi	r24, 0x19	; 25
    23fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2400:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
		Dio_WriteChannel(col4, !(i == 3));
    2404:	1c 82       	std	Y+4, r1	; 0x04
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	83 30       	cpi	r24, 0x03	; 3
    240a:	11 f0       	breq	.+4      	; 0x2410 <KP_GetKey+0x66>
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	8c 83       	std	Y+4, r24	; 0x04
    2410:	8c e1       	ldi	r24, 0x1C	; 28
    2412:	6c 81       	ldd	r22, Y+4	; 0x04
    2414:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>

		if (!Dio_ReadChannel(row1)) {
    2418:	85 e1       	ldi	r24, 0x15	; 21
    241a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Dio_ReadChannel>
    241e:	88 23       	and	r24, r24
    2420:	41 f4       	brne	.+16     	; 0x2432 <KP_GetKey+0x88>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row1));break;
    2426:	85 e1       	ldi	r24, 0x15	; 21
    2428:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Dio_ReadChannel>
    242c:	88 23       	and	r24, r24
    242e:	d9 f3       	breq	.-10     	; 0x2426 <KP_GetKey+0x7c>
    2430:	2e c0       	rjmp	.+92     	; 0x248e <KP_GetKey+0xe4>

		}
		if (!Dio_ReadChannel(row2)) {
    2432:	84 e1       	ldi	r24, 0x14	; 20
    2434:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Dio_ReadChannel>
    2438:	88 23       	and	r24, r24
    243a:	41 f4       	brne	.+16     	; 0x244c <KP_GetKey+0xa2>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 2;
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row2));break;
    2440:	84 e1       	ldi	r24, 0x14	; 20
    2442:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Dio_ReadChannel>
    2446:	88 23       	and	r24, r24
    2448:	d9 f3       	breq	.-10     	; 0x2440 <KP_GetKey+0x96>
    244a:	21 c0       	rjmp	.+66     	; 0x248e <KP_GetKey+0xe4>


		}
		if (!Dio_ReadChannel(row3)) {
    244c:	83 e1       	ldi	r24, 0x13	; 19
    244e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Dio_ReadChannel>
    2452:	88 23       	and	r24, r24
    2454:	41 f4       	brne	.+16     	; 0x2466 <KP_GetKey+0xbc>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 3;
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row3));break;
    245a:	83 e1       	ldi	r24, 0x13	; 19
    245c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Dio_ReadChannel>
    2460:	88 23       	and	r24, r24
    2462:	d9 f3       	breq	.-10     	; 0x245a <KP_GetKey+0xb0>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <KP_GetKey+0xe4>

		}
		if (!Dio_ReadChannel(row4)) {
    2466:	82 e1       	ldi	r24, 0x12	; 18
    2468:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Dio_ReadChannel>
    246c:	88 23       	and	r24, r24
    246e:	41 f4       	brne	.+16     	; 0x2480 <KP_GetKey+0xd6>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 4;
    2470:	84 e0       	ldi	r24, 0x04	; 4
    2472:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row4));break;
    2474:	82 e1       	ldi	r24, 0x12	; 18
    2476:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Dio_ReadChannel>
    247a:	88 23       	and	r24, r24
    247c:	d9 f3       	breq	.-10     	; 0x2474 <KP_GetKey+0xca>
    247e:	07 c0       	rjmp	.+14     	; 0x248e <KP_GetKey+0xe4>
				'3', '-' }, { '.', '0', '=', '+' } };

u8 KP_GetKey() {
	u8 i, j = 0;

	for (i = 0; i < 4; i++) {
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	8f 5f       	subi	r24, 0xFF	; 255
    2484:	8a 83       	std	Y+2, r24	; 0x02
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	84 30       	cpi	r24, 0x04	; 4
    248a:	08 f4       	brcc	.+2      	; 0x248e <KP_GetKey+0xe4>
    248c:	9b cf       	rjmp	.-202    	; 0x23c4 <KP_GetKey+0x1a>
			j = 4;
			while (!Dio_ReadChannel(row4));break;

		}
	}
	Dio_WriteChannel(col1, STD_HIGH);
    248e:	8f e1       	ldi	r24, 0x1F	; 31
    2490:	61 e0       	ldi	r22, 0x01	; 1
    2492:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
	Dio_WriteChannel(col2, STD_HIGH);
    2496:	8e e1       	ldi	r24, 0x1E	; 30
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
	Dio_WriteChannel(col3, STD_HIGH);
    249e:	89 e1       	ldi	r24, 0x19	; 25
    24a0:	61 e0       	ldi	r22, 0x01	; 1
    24a2:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
	Dio_WriteChannel(col4, STD_HIGH);
    24a6:	8c e1       	ldi	r24, 0x1C	; 28
    24a8:	61 e0       	ldi	r22, 0x01	; 1
    24aa:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>


	if (j == 0)
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	88 23       	and	r24, r24
    24b2:	11 f4       	brne	.+4      	; 0x24b8 <KP_GetKey+0x10e>
		return 0;
    24b4:	1b 82       	std	Y+3, r1	; 0x03
    24b6:	15 c0       	rjmp	.+42     	; 0x24e2 <KP_GetKey+0x138>
	else
		return (Keys[j-1][i]);
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	ac 01       	movw	r20, r24
    24c0:	41 50       	subi	r20, 0x01	; 1
    24c2:	50 40       	sbci	r21, 0x00	; 0
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	ca 01       	movw	r24, r20
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	82 0f       	add	r24, r18
    24d6:	93 1f       	adc	r25, r19
    24d8:	fc 01       	movw	r30, r24
    24da:	e5 53       	subi	r30, 0x35	; 53
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 81       	ld	r24, Z
    24e0:	8b 83       	std	Y+3, r24	; 0x03
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    24e4:	27 96       	adiw	r28, 0x07	; 7
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <DCM_voidOn>:
/* MCAL */
#include "../../MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"
#include "DCM_interface.h"

void DCM_voidOn(u8 Copy_u8Direction)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <DCM_voidOn+0x6>
    24fc:	0f 92       	push	r0
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	89 83       	std	Y+1, r24	; 0x01
	/* Turn DC motor on using H-Bridge
	 By Setting PWM, Dir and Enable pins with high
	 or Dir Low depend on Copy_u8Direction*/
	Dio_WriteChannel(DCM_EN,STD_HIGH);
    2504:	8e e0       	ldi	r24, 0x0E	; 14
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
	Dio_WriteChannel(DCM_PWM,STD_HIGH);
    250c:	8b e0       	ldi	r24, 0x0B	; 11
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>

	switch(Copy_u8Direction)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3b 83       	std	Y+3, r19	; 0x03
    251c:	2a 83       	std	Y+2, r18	; 0x02
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	9b 81       	ldd	r25, Y+3	; 0x03
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	31 f0       	breq	.+12     	; 0x2532 <DCM_voidOn+0x3c>
    2526:	2a 81       	ldd	r18, Y+2	; 0x02
    2528:	3b 81       	ldd	r19, Y+3	; 0x03
    252a:	21 30       	cpi	r18, 0x01	; 1
    252c:	31 05       	cpc	r19, r1
    252e:	31 f0       	breq	.+12     	; 0x253c <DCM_voidOn+0x46>
    2530:	09 c0       	rjmp	.+18     	; 0x2544 <DCM_voidOn+0x4e>
		{
		case DCM_CW:
			Dio_WriteChannel(DCM_DIR, Copy_u8Direction);
    2532:	8d e0       	ldi	r24, 0x0D	; 13
    2534:	69 81       	ldd	r22, Y+1	; 0x01
    2536:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <DCM_voidOn+0x4e>
			break;
		case DCM_CCW:
			Dio_WriteChannel(DCM_DIR,Copy_u8Direction);
    253c:	8d e0       	ldi	r24, 0x0D	; 13
    253e:	69 81       	ldd	r22, Y+1	; 0x01
    2540:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
			break;
		default: break;
		}
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <DCM_voidControlSpeed>:


void DCM_voidControlSpeed(u8 Copy_u8Speed)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	0f 92       	push	r0
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	89 83       	std	Y+1, r24	; 0x01
	/* Controlling DC motor speed using PWM
	mode from TMR0 by setting Duty Cycle*/
	TMR0_voidInit();
    255c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TMR0_voidInit>
	TMR0_voidStart();
    2560:	0e 94 cd 06 	call	0xd9a	; 0xd9a <TMR0_voidStart>
	TMR0_voidSetDutyCycleForPWM(Copy_u8Speed);
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	0e 94 a3 06 	call	0xd46	; 0xd46 <TMR0_voidSetDutyCycleForPWM>
}
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <DCM_voidOff>:


void DCM_voidOff(void)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	/* Turn DC motor off using H-Bridge
	   By Setting Enable pin with low */

	Dio_WriteChannel(DCM_EN,STD_LOW);
    257a:	8e e0       	ldi	r24, 0x0E	; 14
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	0e 94 32 0c 	call	0x1864	; 0x1864 <Dio_WriteChannel>
}
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <LED>:

//#include "HAL/LCD/LCD_interface.h"
#include "MCAL/EXTI/includes/EXTI_interface.h"
#include "MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"

void LED (u8 data){
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	0f 92       	push	r0
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	89 83       	std	Y+1, r24	; 0x01
    UART_Send(data);
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	0e 94 c3 05 	call	0xb86	; 0xb86 <UART_Send>
}
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <main>:
u8 intdata=0;
int main() {
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
	Port_Init(pin_cfg);
    25ac:	88 e6       	ldi	r24, 0x68	; 104
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 ed 07 	call	0xfda	; 0xfda <Port_Init>
	GI_voidEnable();
    25b4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <GI_voidEnable>
	 // Initialize UART with baud rate 9600
	    UART_Init();
    25b8:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>

	    // Send a character 'A'
	    UART_Send('A');
    25bc:	81 e4       	ldi	r24, 0x41	; 65
    25be:	0e 94 c3 05 	call	0xb86	; 0xb86 <UART_Send>

	    // Receive and store the received character
	    u8 receivedData = UART_Receive();
    25c2:	0e 94 f5 05 	call	0xbea	; 0xbea <UART_Receive>
    25c6:	89 83       	std	Y+1, r24	; 0x01

	    // Check the received character
	    if (receivedData == 'A')
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	81 34       	cpi	r24, 0x41	; 65
    25cc:	19 f4       	brne	.+6      	; 0x25d4 <main+0x32>
//	        // If 'A' was received, send a 'B'
	        UART_Send('B');
    25ce:	82 e4       	ldi	r24, 0x42	; 66
    25d0:	0e 94 c3 05 	call	0xb86	; 0xb86 <UART_Send>


	    UART_RX_InterruptEnable();
    25d4:	0e 94 22 06 	call	0xc44	; 0xc44 <UART_RX_InterruptEnable>
	    UART_RX_SetCallBack(LED);
    25d8:	84 ec       	ldi	r24, 0xC4	; 196
    25da:	92 e1       	ldi	r25, 0x12	; 18
    25dc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <UART_RX_SetCallBack>
    25e0:	ff cf       	rjmp	.-2      	; 0x25e0 <main+0x3e>

000025e2 <__prologue_saves__>:
    25e2:	2f 92       	push	r2
    25e4:	3f 92       	push	r3
    25e6:	4f 92       	push	r4
    25e8:	5f 92       	push	r5
    25ea:	6f 92       	push	r6
    25ec:	7f 92       	push	r7
    25ee:	8f 92       	push	r8
    25f0:	9f 92       	push	r9
    25f2:	af 92       	push	r10
    25f4:	bf 92       	push	r11
    25f6:	cf 92       	push	r12
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	ca 1b       	sub	r28, r26
    260c:	db 0b       	sbc	r29, r27
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	09 94       	ijmp

0000261a <__epilogue_restores__>:
    261a:	2a 88       	ldd	r2, Y+18	; 0x12
    261c:	39 88       	ldd	r3, Y+17	; 0x11
    261e:	48 88       	ldd	r4, Y+16	; 0x10
    2620:	5f 84       	ldd	r5, Y+15	; 0x0f
    2622:	6e 84       	ldd	r6, Y+14	; 0x0e
    2624:	7d 84       	ldd	r7, Y+13	; 0x0d
    2626:	8c 84       	ldd	r8, Y+12	; 0x0c
    2628:	9b 84       	ldd	r9, Y+11	; 0x0b
    262a:	aa 84       	ldd	r10, Y+10	; 0x0a
    262c:	b9 84       	ldd	r11, Y+9	; 0x09
    262e:	c8 84       	ldd	r12, Y+8	; 0x08
    2630:	df 80       	ldd	r13, Y+7	; 0x07
    2632:	ee 80       	ldd	r14, Y+6	; 0x06
    2634:	fd 80       	ldd	r15, Y+5	; 0x05
    2636:	0c 81       	ldd	r16, Y+4	; 0x04
    2638:	1b 81       	ldd	r17, Y+3	; 0x03
    263a:	aa 81       	ldd	r26, Y+2	; 0x02
    263c:	b9 81       	ldd	r27, Y+1	; 0x01
    263e:	ce 0f       	add	r28, r30
    2640:	d1 1d       	adc	r29, r1
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	ed 01       	movw	r28, r26
    264e:	08 95       	ret

00002650 <_exit>:
    2650:	f8 94       	cli

00002652 <__stop_program>:
    2652:	ff cf       	rjmp	.-2      	; 0x2652 <__stop_program>
