
WATCHDOG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  000028de  00002972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  008001cc  008001cc  00002ade  2**0
                  ALLOC
  3 .stab         00002544  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bc6  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00006bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  00006dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  00006ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  00009901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  0000af3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000c2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  0000c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  0000c7be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_1>
       8:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__vector_2>
       c:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__vector_3>
      10:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_4>
      14:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__vector_10>
      2c:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3e       	cpi	r26, 0xEE	; 238
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 13 	call	0x26e8	; 0x26e8 <main>
      8a:	0c 94 6d 14 	jmp	0x28da	; 0x28da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 14 	jmp	0x286c	; 0x286c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 14 	jmp	0x286c	; 0x286c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e8 59       	subi	r30, 0x98	; 152
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <WDT_voidEnable>:
 * Description: Enables the Watchdog Timer (WDT) with the specified overflow time.
 * Parameters:
 *   - copy_u8Time: Time for WDT overflow, should be one of the WDT_TIME_X_X_MS options.
 */
void WDT_voidEnable(u8 copy_u8Time)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <WDT_voidEnable+0x6>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8Time)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3b 83       	std	Y+3, r19	; 0x03
     f04:	2a 83       	std	Y+2, r18	; 0x02
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	91 05       	cpc	r25, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <WDT_voidEnable+0x24>
     f10:	71 c0       	rjmp	.+226    	; 0xff4 <WDT_voidEnable+0x106>
     f12:	2a 81       	ldd	r18, Y+2	; 0x02
     f14:	3b 81       	ldd	r19, Y+3	; 0x03
     f16:	25 30       	cpi	r18, 0x05	; 5
     f18:	31 05       	cpc	r19, r1
     f1a:	8c f4       	brge	.+34     	; 0xf3e <WDT_voidEnable+0x50>
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	91 05       	cpc	r25, r1
     f24:	d9 f1       	breq	.+118    	; 0xf9c <WDT_voidEnable+0xae>
     f26:	2a 81       	ldd	r18, Y+2	; 0x02
     f28:	3b 81       	ldd	r19, Y+3	; 0x03
     f2a:	23 30       	cpi	r18, 0x03	; 3
     f2c:	31 05       	cpc	r19, r1
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <WDT_voidEnable+0x44>
     f30:	4b c0       	rjmp	.+150    	; 0xfc8 <WDT_voidEnable+0xda>
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	d1 f0       	breq	.+52     	; 0xf70 <WDT_voidEnable+0x82>
     f3c:	c8 c0       	rjmp	.+400    	; 0x10ce <WDT_voidEnable+0x1e0>
     f3e:	2a 81       	ldd	r18, Y+2	; 0x02
     f40:	3b 81       	ldd	r19, Y+3	; 0x03
     f42:	26 30       	cpi	r18, 0x06	; 6
     f44:	31 05       	cpc	r19, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <WDT_voidEnable+0x5c>
     f48:	81 c0       	rjmp	.+258    	; 0x104c <WDT_voidEnable+0x15e>
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	86 30       	cpi	r24, 0x06	; 6
     f50:	91 05       	cpc	r25, r1
     f52:	0c f4       	brge	.+2      	; 0xf56 <WDT_voidEnable+0x68>
     f54:	65 c0       	rjmp	.+202    	; 0x1020 <WDT_voidEnable+0x132>
     f56:	2a 81       	ldd	r18, Y+2	; 0x02
     f58:	3b 81       	ldd	r19, Y+3	; 0x03
     f5a:	27 30       	cpi	r18, 0x07	; 7
     f5c:	31 05       	cpc	r19, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <WDT_voidEnable+0x74>
     f60:	8b c0       	rjmp	.+278    	; 0x1078 <WDT_voidEnable+0x18a>
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	9b 81       	ldd	r25, Y+3	; 0x03
     f66:	88 30       	cpi	r24, 0x08	; 8
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <WDT_voidEnable+0x80>
     f6c:	9b c0       	rjmp	.+310    	; 0x10a4 <WDT_voidEnable+0x1b6>
     f6e:	af c0       	rjmp	.+350    	; 0x10ce <WDT_voidEnable+0x1e0>
    {
    // Select overflow time as 16.3ms
    case WDT_TIME_16_3_MS:
        CLR_BIT(WDTCR, WDP0);
     f70:	a1 e4       	ldi	r26, 0x41	; 65
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e1 e4       	ldi	r30, 0x41	; 65
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8e 7f       	andi	r24, 0xFE	; 254
     f7c:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
     f7e:	a1 e4       	ldi	r26, 0x41	; 65
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e1 e4       	ldi	r30, 0x41	; 65
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8d 7f       	andi	r24, 0xFD	; 253
     f8a:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
     f8c:	a1 e4       	ldi	r26, 0x41	; 65
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e1 e4       	ldi	r30, 0x41	; 65
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8b 7f       	andi	r24, 0xFB	; 251
     f98:	8c 93       	st	X, r24
     f9a:	99 c0       	rjmp	.+306    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 32.5ms
    case WDT_TIME_32_5_MS:
        SET_BIT(WDTCR, WDP0);
     f9c:	a1 e4       	ldi	r26, 0x41	; 65
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e1 e4       	ldi	r30, 0x41	; 65
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	81 60       	ori	r24, 0x01	; 1
     fa8:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
     faa:	a1 e4       	ldi	r26, 0x41	; 65
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e1 e4       	ldi	r30, 0x41	; 65
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
     fb8:	a1 e4       	ldi	r26, 0x41	; 65
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e4       	ldi	r30, 0x41	; 65
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8b 7f       	andi	r24, 0xFB	; 251
     fc4:	8c 93       	st	X, r24
     fc6:	83 c0       	rjmp	.+262    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 65ms
    case WDT_TIME_65_MS:
        CLR_BIT(WDTCR, WDP0);
     fc8:	a1 e4       	ldi	r26, 0x41	; 65
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e4       	ldi	r30, 0x41	; 65
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
     fd6:	a1 e4       	ldi	r26, 0x41	; 65
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e1 e4       	ldi	r30, 0x41	; 65
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
     fe4:	a1 e4       	ldi	r26, 0x41	; 65
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e1 e4       	ldi	r30, 0x41	; 65
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8b 7f       	andi	r24, 0xFB	; 251
     ff0:	8c 93       	st	X, r24
     ff2:	6d c0       	rjmp	.+218    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.13s
    case WDT_TIME_0_13_S:
        SET_BIT(WDTCR, WDP0);
     ff4:	a1 e4       	ldi	r26, 0x41	; 65
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e1 e4       	ldi	r30, 0x41	; 65
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	81 60       	ori	r24, 0x01	; 1
    1000:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1002:	a1 e4       	ldi	r26, 0x41	; 65
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e1 e4       	ldi	r30, 0x41	; 65
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	82 60       	ori	r24, 0x02	; 2
    100e:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    1010:	a1 e4       	ldi	r26, 0x41	; 65
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e1 e4       	ldi	r30, 0x41	; 65
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8b 7f       	andi	r24, 0xFB	; 251
    101c:	8c 93       	st	X, r24
    101e:	57 c0       	rjmp	.+174    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.26s
    case WDT_TIME_0_26_S:
        CLR_BIT(WDTCR, WDP0);
    1020:	a1 e4       	ldi	r26, 0x41	; 65
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e1 e4       	ldi	r30, 0x41	; 65
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    102e:	a1 e4       	ldi	r26, 0x41	; 65
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e4       	ldi	r30, 0x41	; 65
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8d 7f       	andi	r24, 0xFD	; 253
    103a:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    103c:	a1 e4       	ldi	r26, 0x41	; 65
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e1 e4       	ldi	r30, 0x41	; 65
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	84 60       	ori	r24, 0x04	; 4
    1048:	8c 93       	st	X, r24
    104a:	41 c0       	rjmp	.+130    	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.52s
    case WDT_TIME_0_52_S:
        SET_BIT(WDTCR, WDP0);
    104c:	a1 e4       	ldi	r26, 0x41	; 65
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e1 e4       	ldi	r30, 0x41	; 65
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    105a:	a1 e4       	ldi	r26, 0x41	; 65
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e1 e4       	ldi	r30, 0x41	; 65
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8d 7f       	andi	r24, 0xFD	; 253
    1066:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    1068:	a1 e4       	ldi	r26, 0x41	; 65
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e1 e4       	ldi	r30, 0x41	; 65
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	84 60       	ori	r24, 0x04	; 4
    1074:	8c 93       	st	X, r24
    1076:	2b c0       	rjmp	.+86     	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 1s
    case WDT_TIME_1_S:
        CLR_BIT(WDTCR, WDP0);
    1078:	a1 e4       	ldi	r26, 0x41	; 65
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e1 e4       	ldi	r30, 0x41	; 65
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8e 7f       	andi	r24, 0xFE	; 254
    1084:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1086:	a1 e4       	ldi	r26, 0x41	; 65
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e1 e4       	ldi	r30, 0x41	; 65
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    1094:	a1 e4       	ldi	r26, 0x41	; 65
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e1 e4       	ldi	r30, 0x41	; 65
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	8c 93       	st	X, r24
    10a2:	15 c0       	rjmp	.+42     	; 0x10ce <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 2.1s
    case WDT_TIME_2_1_S:
        SET_BIT(WDTCR, WDP0);
    10a4:	a1 e4       	ldi	r26, 0x41	; 65
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e1 e4       	ldi	r30, 0x41	; 65
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    10b2:	a1 e4       	ldi	r26, 0x41	; 65
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e4       	ldi	r30, 0x41	; 65
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    10c0:	a1 e4       	ldi	r26, 0x41	; 65
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e1 e4       	ldi	r30, 0x41	; 65
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	84 60       	ori	r24, 0x04	; 4
    10cc:	8c 93       	st	X, r24

    default:
        break;
    }
    //enable watch dog
    SET_BIT(WDTCR , WDE);
    10ce:	a1 e4       	ldi	r26, 0x41	; 65
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e1 e4       	ldi	r30, 0x41	; 65
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 60       	ori	r24, 0x08	; 8
    10da:	8c 93       	st	X, r24
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <WDT_voidDisable>:
/*
 * Function: WDT_voidDisable
 * Description: Disables the Watchdog Timer (WDT).
 */
void WDT_voidDisable(void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE) | (1<<WDE);
    10f0:	e1 e4       	ldi	r30, 0x41	; 65
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	88 e1       	ldi	r24, 0x18	; 24
    10f6:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
    10f8:	e1 e4       	ldi	r30, 0x41	; 65
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	10 82       	st	Z, r1
}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <TMR2_voidSetDelay_ms_usingCTC+0x6>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
    1112:	e3 e4       	ldi	r30, 0x43	; 67
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	89 ef       	ldi	r24, 0xF9	; 249
    1118:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	cc 01       	movw	r24, r24
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	80 93 d6 01 	sts	0x01D6, r24
    1128:	90 93 d7 01 	sts	0x01D7, r25
    112c:	a0 93 d8 01 	sts	0x01D8, r26
    1130:	b0 93 d9 01 	sts	0x01D9, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
#if TMR2_MODE == TMR2_FAST_PWM_MODE

	if ((100 >= copy_u8DutyCycle)) {
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	85 36       	cpi	r24, 0x65	; 101
    114e:	e0 f4       	brcc	.+56     	; 0x1188 <TMR2_voidSetDutyCycleForPWM+0x4a>
		OCR2 = 0;
		else
		OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;

#elif TMR2_PWM_MODE == TMR2_INVERTING
		copy_u8DutyCycle = 100 - copy_u8DutyCycle;
    1150:	94 e6       	ldi	r25, 0x64	; 100
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	29 2f       	mov	r18, r25
    1156:	28 1b       	sub	r18, r24
    1158:	82 2f       	mov	r24, r18
    115a:	89 83       	std	Y+1, r24	; 0x01
		if (copy_u8DutyCycle == 0)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	88 23       	and	r24, r24
    1160:	21 f4       	brne	.+8      	; 0x116a <TMR2_voidSetDutyCycleForPWM+0x2c>
			OCR2 = 0;
    1162:	e3 e4       	ldi	r30, 0x43	; 67
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	10 82       	st	Z, r1
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <TMR2_voidSetDutyCycleForPWM+0x4a>
		else
			OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;
    116a:	e3 e4       	ldi	r30, 0x43	; 67
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	98 2f       	mov	r25, r24
    1176:	88 27       	eor	r24, r24
    1178:	24 e6       	ldi	r18, 0x64	; 100
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	b9 01       	movw	r22, r18
    117e:	0e 94 00 14 	call	0x2800	; 0x2800 <__udivmodhi4>
    1182:	cb 01       	movw	r24, r22
    1184:	81 50       	subi	r24, 0x01	; 1
    1186:	80 83       	st	Z, r24
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);

#elif TMR2_MODE == TMR2_FAST_PWM_MODE
	// Select Fast PWM mode
	SET_BIT(TCCR2, WGM20);
    1198:	a5 e4       	ldi	r26, 0x45	; 69
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e5 e4       	ldi	r30, 0x45	; 69
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	80 64       	ori	r24, 0x40	; 64
    11a4:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
    11a6:	a5 e4       	ldi	r26, 0x45	; 69
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e4       	ldi	r30, 0x45	; 69
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	88 60       	ori	r24, 0x08	; 8
    11b2:	8c 93       	st	X, r24

#if TMR2_PWM_MODE == TMR2_INVERTING
	SET_BIT(TCCR2, COM20);
    11b4:	a5 e4       	ldi	r26, 0x45	; 69
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e4       	ldi	r30, 0x45	; 69
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 61       	ori	r24, 0x10	; 16
    11c0:	8c 93       	st	X, r24
	SET_BIT(TCCR2, COM21);
    11c2:	a5 e4       	ldi	r26, 0x45	; 69
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e5 e4       	ldi	r30, 0x45	; 69
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 62       	ori	r24, 0x20	; 32
    11ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    11de:	a5 e4       	ldi	r26, 0x45	; 69
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e4       	ldi	r30, 0x45	; 69
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    11ec:	a5 e4       	ldi	r26, 0x45	; 69
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e4       	ldi	r30, 0x45	; 69
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	82 60       	ori	r24, 0x02	; 2
    11f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    11fa:	a5 e4       	ldi	r26, 0x45	; 69
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e4       	ldi	r30, 0x45	; 69
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8b 7f       	andi	r24, 0xFB	; 251
    1206:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    1216:	a5 e4       	ldi	r26, 0x45	; 69
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e5 e4       	ldi	r30, 0x45	; 69
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8e 7f       	andi	r24, 0xFE	; 254
    1222:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    1224:	a5 e4       	ldi	r26, 0x45	; 69
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e4       	ldi	r30, 0x45	; 69
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8d 7f       	andi	r24, 0xFD	; 253
    1230:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    1232:	a5 e4       	ldi	r26, 0x45	; 69
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e4       	ldi	r30, 0x45	; 69
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8b 7f       	andi	r24, 0xFB	; 251
    123e:	8c 93       	st	X, r24
}
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <TMR2_voidSetCallBackOVF+0x6>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	31 f0       	breq	.+12     	; 0x1268 <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	90 93 cd 01 	sts	0x01CD, r25
    1264:	80 93 cc 01 	sts	0x01CC, r24
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <TMR2_voidSetCallBackCTC+0x6>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	31 f0       	breq	.+12     	; 0x1294 <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	90 93 cf 01 	sts	0x01CF, r25
    1290:	80 93 ce 01 	sts	0x01CE, r24
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    12c8:	80 91 d0 01 	lds	r24, 0x01D0
    12cc:	90 91 d1 01 	lds	r25, 0x01D1
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	90 93 d1 01 	sts	0x01D1, r25
    12d6:	80 93 d0 01 	sts	0x01D0, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    12da:	80 91 d0 01 	lds	r24, 0x01D0
    12de:	90 91 d1 01 	lds	r25, 0x01D1
    12e2:	23 e0       	ldi	r18, 0x03	; 3
    12e4:	81 3d       	cpi	r24, 0xD1	; 209
    12e6:	92 07       	cpc	r25, r18
    12e8:	99 f4       	brne	.+38     	; 0x1310 <__vector_5+0x72>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    12ea:	e4 e4       	ldi	r30, 0x44	; 68
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	81 e7       	ldi	r24, 0x71	; 113
    12f0:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    12f2:	10 92 d1 01 	sts	0x01D1, r1
    12f6:	10 92 d0 01 	sts	0x01D0, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    12fa:	80 91 cc 01 	lds	r24, 0x01CC
    12fe:	90 91 cd 01 	lds	r25, 0x01CD
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	29 f0       	breq	.+10     	; 0x1310 <__vector_5+0x72>
			TMR2_privatePtrToCAllBackOVF();
    1306:	e0 91 cc 01 	lds	r30, 0x01CC
    130a:	f0 91 cd 01 	lds	r31, 0x01CD
    130e:	09 95       	icall
		}
	}
}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1360:	80 91 d2 01 	lds	r24, 0x01D2
    1364:	90 91 d3 01 	lds	r25, 0x01D3
    1368:	a0 91 d4 01 	lds	r26, 0x01D4
    136c:	b0 91 d5 01 	lds	r27, 0x01D5
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	a1 1d       	adc	r26, r1
    1374:	b1 1d       	adc	r27, r1
    1376:	80 93 d2 01 	sts	0x01D2, r24
    137a:	90 93 d3 01 	sts	0x01D3, r25
    137e:	a0 93 d4 01 	sts	0x01D4, r26
    1382:	b0 93 d5 01 	sts	0x01D5, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1386:	20 91 d6 01 	lds	r18, 0x01D6
    138a:	30 91 d7 01 	lds	r19, 0x01D7
    138e:	40 91 d8 01 	lds	r20, 0x01D8
    1392:	50 91 d9 01 	lds	r21, 0x01D9
    1396:	80 91 d2 01 	lds	r24, 0x01D2
    139a:	90 91 d3 01 	lds	r25, 0x01D3
    139e:	a0 91 d4 01 	lds	r26, 0x01D4
    13a2:	b0 91 d5 01 	lds	r27, 0x01D5
    13a6:	28 17       	cp	r18, r24
    13a8:	39 07       	cpc	r19, r25
    13aa:	4a 07       	cpc	r20, r26
    13ac:	5b 07       	cpc	r21, r27
    13ae:	99 f4       	brne	.+38     	; 0x13d6 <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    13b0:	10 92 d2 01 	sts	0x01D2, r1
    13b4:	10 92 d3 01 	sts	0x01D3, r1
    13b8:	10 92 d4 01 	sts	0x01D4, r1
    13bc:	10 92 d5 01 	sts	0x01D5, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    13c0:	80 91 ce 01 	lds	r24, 0x01CE
    13c4:	90 91 cf 01 	lds	r25, 0x01CF
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    13cc:	e0 91 ce 01 	lds	r30, 0x01CE
    13d0:	f0 91 cf 01 	lds	r31, 0x01CF
    13d4:	09 95       	icall
		}
	}
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    1408:	e3 e4       	ldi	r30, 0x43	; 67
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	80 83       	st	Z, r24
}
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    142a:	06 e4       	ldi	r16, 0x46	; 70
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	9c 01       	movw	r18, r24
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	80 e9       	ldi	r24, 0x90	; 144
    143a:	90 ed       	ldi	r25, 0xD0	; 208
    143c:	a3 e0       	ldi	r26, 0x03	; 3
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 14 14 	call	0x2828	; 0x2828 <__udivmodsi4>
    1448:	da 01       	movw	r26, r20
    144a:	c9 01       	movw	r24, r18
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f8 01       	movw	r30, r16
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    146c:	00 d0       	rcall	.+0      	; 0x146e <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	69 83       	std	Y+1, r22	; 0x01
    1474:	7a 83       	std	Y+2, r23	; 0x02
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    147a:	69 81       	ldd	r22, Y+1	; 0x01
    147c:	7a 81       	ldd	r23, Y+2	; 0x02
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	48 ec       	ldi	r20, 0xC8	; 200
    1488:	52 e4       	ldi	r21, 0x42	; 66
    148a:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    148e:	18 16       	cp	r1, r24
    1490:	0c f4       	brge	.+2      	; 0x1494 <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    1492:	48 c0       	rjmp	.+144    	; 0x1524 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    1494:	69 81       	ldd	r22, Y+1	; 0x01
    1496:	7a 81       	ldd	r23, Y+2	; 0x02
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    14a8:	88 23       	and	r24, r24
    14aa:	29 f4       	brne	.+10     	; 0x14b6 <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    14ac:	ea e4       	ldi	r30, 0x4A	; 74
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	11 82       	std	Z+1, r1	; 0x01
    14b2:	10 82       	st	Z, r1
    14b4:	37 c0       	rjmp	.+110    	; 0x1524 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    14b6:	0a e4       	ldi	r16, 0x4A	; 74
    14b8:	10 e0       	ldi	r17, 0x00	; 0
    14ba:	e6 e4       	ldi	r30, 0x46	; 70
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	cc 01       	movw	r24, r24
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	29 81       	ldd	r18, Y+1	; 0x01
    14dc:	3a 81       	ldd	r19, Y+2	; 0x02
    14de:	4b 81       	ldd	r20, Y+3	; 0x03
    14e0:	5c 81       	ldd	r21, Y+4	; 0x04
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	48 ec       	ldi	r20, 0xC8	; 200
    14f4:	52 e4       	ldi	r21, 0x42	; 66
    14f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	f8 01       	movw	r30, r16
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	08 95       	ret

00001536 <TMR1_voidInit>:


void TMR1_voidInit(void) {
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    153e:	af e4       	ldi	r26, 0x4F	; 79
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ef e4       	ldi	r30, 0x4F	; 79
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8e 7f       	andi	r24, 0xFE	; 254
    154a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    154c:	af e4       	ldi	r26, 0x4F	; 79
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ef e4       	ldi	r30, 0x4F	; 79
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	82 60       	ori	r24, 0x02	; 2
    1558:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    155a:	ae e4       	ldi	r26, 0x4E	; 78
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ee e4       	ldi	r30, 0x4E	; 78
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 60       	ori	r24, 0x08	; 8
    1566:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1568:	ae e4       	ldi	r26, 0x4E	; 78
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ee e4       	ldi	r30, 0x4E	; 78
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 61       	ori	r24, 0x10	; 16
    1574:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    1576:	af e4       	ldi	r26, 0x4F	; 79
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	ef e4       	ldi	r30, 0x4F	; 79
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8f 7b       	andi	r24, 0xBF	; 191
    1582:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1584:	af e4       	ldi	r26, 0x4F	; 79
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	ef e4       	ldi	r30, 0x4F	; 79
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 68       	ori	r24, 0x80	; 128
    1590:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
#endif
	//TMR1_voidSetFrequencyMode14FastPWM(50);

#endif
}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <TMR1_voidSetCompareMatchValueA+0x6>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    15a6:	ea e4       	ldi	r30, 0x4A	; 74
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    15c4:	ae e4       	ldi	r26, 0x4E	; 78
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	ee e4       	ldi	r30, 0x4E	; 78
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	81 60       	ori	r24, 0x01	; 1
    15d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    15d2:	ae e4       	ldi	r26, 0x4E	; 78
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ee e4       	ldi	r30, 0x4E	; 78
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	82 60       	ori	r24, 0x02	; 2
    15de:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    15e0:	ae e4       	ldi	r26, 0x4E	; 78
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ee e4       	ldi	r30, 0x4E	; 78
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8b 7f       	andi	r24, 0xFB	; 251
    15ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    15fc:	ae e4       	ldi	r26, 0x4E	; 78
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ee e4       	ldi	r30, 0x4E	; 78
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8e 7f       	andi	r24, 0xFE	; 254
    1608:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    160a:	ae e4       	ldi	r26, 0x4E	; 78
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ee e4       	ldi	r30, 0x4E	; 78
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8d 7f       	andi	r24, 0xFD	; 253
    1616:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    1618:	ae e4       	ldi	r26, 0x4E	; 78
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ee e4       	ldi	r30, 0x4E	; 78
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8b 7f       	andi	r24, 0xFB	; 251
    1624:	8c 93       	st	X, r24
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    163a:	ec e5       	ldi	r30, 0x5C	; 92
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	89 ef       	ldi	r24, 0xF9	; 249
    1640:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	cc 01       	movw	r24, r24
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	80 93 e4 01 	sts	0x01E4, r24
    1650:	90 93 e5 01 	sts	0x01E5, r25
    1654:	a0 93 e6 01 	sts	0x01E6, r26
    1658:	b0 93 e7 01 	sts	0x01E7, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	85 36       	cpi	r24, 0x65	; 101
    1676:	d0 f4       	brcc	.+52     	; 0x16ac <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    1678:	ec e5       	ldi	r30, 0x5C	; 92
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	48 2f       	mov	r20, r24
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	ca 01       	movw	r24, r20
    1684:	9c 01       	movw	r18, r24
    1686:	22 0f       	add	r18, r18
    1688:	33 1f       	adc	r19, r19
    168a:	c9 01       	movw	r24, r18
    168c:	96 95       	lsr	r25
    168e:	98 2f       	mov	r25, r24
    1690:	88 27       	eor	r24, r24
    1692:	97 95       	ror	r25
    1694:	87 95       	ror	r24
    1696:	82 1b       	sub	r24, r18
    1698:	93 0b       	sbc	r25, r19
    169a:	84 0f       	add	r24, r20
    169c:	95 1f       	adc	r25, r21
    169e:	24 e6       	ldi	r18, 0x64	; 100
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	b9 01       	movw	r22, r18
    16a4:	0e 94 00 14 	call	0x2800	; 0x2800 <__udivmodhi4>
    16a8:	cb 01       	movw	r24, r22
    16aa:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    16bc:	a3 e5       	ldi	r26, 0x53	; 83
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e3 e5       	ldi	r30, 0x53	; 83
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 64       	ori	r24, 0x40	; 64
    16c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    16ca:	a3 e5       	ldi	r26, 0x53	; 83
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e3 e5       	ldi	r30, 0x53	; 83
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	87 7f       	andi	r24, 0xF7	; 247
    16d6:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    16d8:	a3 e5       	ldi	r26, 0x53	; 83
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e3 e5       	ldi	r30, 0x53	; 83
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7e       	andi	r24, 0xEF	; 239
    16e4:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    16e6:	a3 e5       	ldi	r26, 0x53	; 83
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e3 e5       	ldi	r30, 0x53	; 83
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 62       	ori	r24, 0x20	; 32
    16f2:	8c 93       	st	X, r24
#endif

#endif
}
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    1702:	a3 e5       	ldi	r26, 0x53	; 83
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e3 e5       	ldi	r30, 0x53	; 83
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	81 60       	ori	r24, 0x01	; 1
    170e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1710:	a3 e5       	ldi	r26, 0x53	; 83
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e3 e5       	ldi	r30, 0x53	; 83
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	82 60       	ori	r24, 0x02	; 2
    171c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    171e:	a3 e5       	ldi	r26, 0x53	; 83
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e3 e5       	ldi	r30, 0x53	; 83
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8b 7f       	andi	r24, 0xFB	; 251
    172a:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    173a:	a3 e5       	ldi	r26, 0x53	; 83
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 e5       	ldi	r30, 0x53	; 83
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1748:	a3 e5       	ldi	r26, 0x53	; 83
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e3 e5       	ldi	r30, 0x53	; 83
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8d 7f       	andi	r24, 0xFD	; 253
    1754:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1756:	a3 e5       	ldi	r26, 0x53	; 83
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e3 e5       	ldi	r30, 0x53	; 83
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8b 7f       	andi	r24, 0xFB	; 251
    1762:	8c 93       	st	X, r24
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <TMR0_voidSetCallBackOVF+0x6>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	31 f0       	breq	.+12     	; 0x178c <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	90 93 db 01 	sts	0x01DB, r25
    1788:	80 93 da 01 	sts	0x01DA, r24
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <TMR0_voidSetCallBackCTC+0x6>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	31 f0       	breq	.+12     	; 0x17b8 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	90 93 dd 01 	sts	0x01DD, r25
    17b4:	80 93 dc 01 	sts	0x01DC, r24
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    17ec:	80 91 de 01 	lds	r24, 0x01DE
    17f0:	90 91 df 01 	lds	r25, 0x01DF
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	90 93 df 01 	sts	0x01DF, r25
    17fa:	80 93 de 01 	sts	0x01DE, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    17fe:	80 91 de 01 	lds	r24, 0x01DE
    1802:	90 91 df 01 	lds	r25, 0x01DF
    1806:	23 e0       	ldi	r18, 0x03	; 3
    1808:	81 3d       	cpi	r24, 0xD1	; 209
    180a:	92 07       	cpc	r25, r18
    180c:	99 f4       	brne	.+38     	; 0x1834 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    180e:	e2 e5       	ldi	r30, 0x52	; 82
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	81 e7       	ldi	r24, 0x71	; 113
    1814:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    1816:	10 92 df 01 	sts	0x01DF, r1
    181a:	10 92 de 01 	sts	0x01DE, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    181e:	80 91 da 01 	lds	r24, 0x01DA
    1822:	90 91 db 01 	lds	r25, 0x01DB
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	29 f0       	breq	.+10     	; 0x1834 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    182a:	e0 91 da 01 	lds	r30, 0x01DA
    182e:	f0 91 db 01 	lds	r31, 0x01DB
    1832:	09 95       	icall
		}
	}
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    185a:	1f 92       	push	r1
    185c:	0f 92       	push	r0
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	0f 92       	push	r0
    1862:	11 24       	eor	r1, r1
    1864:	2f 93       	push	r18
    1866:	3f 93       	push	r19
    1868:	4f 93       	push	r20
    186a:	5f 93       	push	r21
    186c:	6f 93       	push	r22
    186e:	7f 93       	push	r23
    1870:	8f 93       	push	r24
    1872:	9f 93       	push	r25
    1874:	af 93       	push	r26
    1876:	bf 93       	push	r27
    1878:	ef 93       	push	r30
    187a:	ff 93       	push	r31
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1884:	80 91 e0 01 	lds	r24, 0x01E0
    1888:	90 91 e1 01 	lds	r25, 0x01E1
    188c:	a0 91 e2 01 	lds	r26, 0x01E2
    1890:	b0 91 e3 01 	lds	r27, 0x01E3
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	a1 1d       	adc	r26, r1
    1898:	b1 1d       	adc	r27, r1
    189a:	80 93 e0 01 	sts	0x01E0, r24
    189e:	90 93 e1 01 	sts	0x01E1, r25
    18a2:	a0 93 e2 01 	sts	0x01E2, r26
    18a6:	b0 93 e3 01 	sts	0x01E3, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    18aa:	20 91 e4 01 	lds	r18, 0x01E4
    18ae:	30 91 e5 01 	lds	r19, 0x01E5
    18b2:	40 91 e6 01 	lds	r20, 0x01E6
    18b6:	50 91 e7 01 	lds	r21, 0x01E7
    18ba:	80 91 e0 01 	lds	r24, 0x01E0
    18be:	90 91 e1 01 	lds	r25, 0x01E1
    18c2:	a0 91 e2 01 	lds	r26, 0x01E2
    18c6:	b0 91 e3 01 	lds	r27, 0x01E3
    18ca:	28 17       	cp	r18, r24
    18cc:	39 07       	cpc	r19, r25
    18ce:	4a 07       	cpc	r20, r26
    18d0:	5b 07       	cpc	r21, r27
    18d2:	99 f4       	brne	.+38     	; 0x18fa <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    18d4:	10 92 e0 01 	sts	0x01E0, r1
    18d8:	10 92 e1 01 	sts	0x01E1, r1
    18dc:	10 92 e2 01 	sts	0x01E2, r1
    18e0:	10 92 e3 01 	sts	0x01E3, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    18e4:	80 91 dc 01 	lds	r24, 0x01DC
    18e8:	90 91 dd 01 	lds	r25, 0x01DD
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	29 f0       	breq	.+10     	; 0x18fa <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    18f0:	e0 91 dc 01 	lds	r30, 0x01DC
    18f4:	f0 91 dd 01 	lds	r31, 0x01DD
    18f8:	09 95       	icall
		}
	}
}
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	ff 91       	pop	r31
    1900:	ef 91       	pop	r30
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	7f 91       	pop	r23
    190c:	6f 91       	pop	r22
    190e:	5f 91       	pop	r21
    1910:	4f 91       	pop	r20
    1912:	3f 91       	pop	r19
    1914:	2f 91       	pop	r18
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	0f 90       	pop	r0
    191c:	1f 90       	pop	r1
    191e:	18 95       	reti

00001920 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	0f 92       	push	r0
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    192c:	ec e5       	ldi	r30, 0x5C	; 92
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	80 83       	st	Z, r24
}
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <Port_Init+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <Port_Init+0x8>
    1944:	00 d0       	rcall	.+0      	; 0x1946 <Port_Init+0xa>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	9c 83       	std	Y+4, r25	; 0x04
    194c:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    194e:	1a 82       	std	Y+2, r1	; 0x02
    1950:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
    1952:	1a 82       	std	Y+2, r1	; 0x02
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	ea c1       	rjmp	.+980    	; 0x1d2c <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    1958:	29 81       	ldd	r18, Y+1	; 0x01
    195a:	3a 81       	ldd	r19, Y+2	; 0x02
    195c:	c9 01       	movw	r24, r18
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	28 0f       	add	r18, r24
    1964:	39 1f       	adc	r19, r25
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	fc 01       	movw	r30, r24
    196c:	e2 0f       	add	r30, r18
    196e:	f3 1f       	adc	r31, r19
    1970:	80 81       	ld	r24, Z
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3e 83       	std	Y+6, r19	; 0x06
    1978:	2d 83       	std	Y+5, r18	; 0x05
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	9e 81       	ldd	r25, Y+6	; 0x06
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	09 f4       	brne	.+2      	; 0x1986 <Port_Init+0x4a>
    1984:	85 c0       	rjmp	.+266    	; 0x1a90 <Port_Init+0x154>
    1986:	2d 81       	ldd	r18, Y+5	; 0x05
    1988:	3e 81       	ldd	r19, Y+6	; 0x06
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <Port_Init+0x5e>
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	71 f0       	breq	.+28     	; 0x19b4 <Port_Init+0x78>
    1998:	c4 c1       	rjmp	.+904    	; 0x1d22 <Port_Init+0x3e6>
    199a:	2d 81       	ldd	r18, Y+5	; 0x05
    199c:	3e 81       	ldd	r19, Y+6	; 0x06
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <Port_Init+0x6a>
    19a4:	e3 c0       	rjmp	.+454    	; 0x1b6c <Port_Init+0x230>
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <Port_Init+0x76>
    19b0:	4b c1       	rjmp	.+662    	; 0x1c48 <Port_Init+0x30c>
    19b2:	b7 c1       	rjmp	.+878    	; 0x1d22 <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    19b4:	29 81       	ldd	r18, Y+1	; 0x01
    19b6:	3a 81       	ldd	r19, Y+2	; 0x02
    19b8:	c9 01       	movw	r24, r18
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	28 0f       	add	r18, r24
    19c0:	39 1f       	adc	r19, r25
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	fc 01       	movw	r30, r24
    19c8:	e2 0f       	add	r30, r18
    19ca:	f3 1f       	adc	r31, r19
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	01 f5       	brne	.+64     	; 0x1a12 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    19d2:	aa e3       	ldi	r26, 0x3A	; 58
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ea e3       	ldi	r30, 0x3A	; 58
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	29 81       	ldd	r18, Y+1	; 0x01
    19e0:	3a 81       	ldd	r19, Y+2	; 0x02
    19e2:	c9 01       	movw	r24, r18
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	28 0f       	add	r18, r24
    19ea:	39 1f       	adc	r19, r25
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	fc 01       	movw	r30, r24
    19f2:	e2 0f       	add	r30, r18
    19f4:	f3 1f       	adc	r31, r19
    19f6:	81 81       	ldd	r24, Z+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <Port_Init+0xcc>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <Port_Init+0xc8>
    1a0c:	84 2b       	or	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	88 c1       	rjmp	.+784    	; 0x1d22 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1a12:	aa e3       	ldi	r26, 0x3A	; 58
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ea e3       	ldi	r30, 0x3A	; 58
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	c9 01       	movw	r24, r18
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	28 0f       	add	r18, r24
    1a2a:	39 1f       	adc	r19, r25
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	fc 01       	movw	r30, r24
    1a32:	e2 0f       	add	r30, r18
    1a34:	f3 1f       	adc	r31, r19
    1a36:	81 81       	ldd	r24, Z+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <Port_Init+0x10a>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	2a 95       	dec	r18
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <Port_Init+0x106>
    1a4a:	80 95       	com	r24
    1a4c:	84 23       	and	r24, r20
    1a4e:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
    1a50:	ab e3       	ldi	r26, 0x3B	; 59
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	eb e3       	ldi	r30, 0x3B	; 59
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	29 81       	ldd	r18, Y+1	; 0x01
    1a5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a60:	c9 01       	movw	r24, r18
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	28 0f       	add	r18, r24
    1a68:	39 1f       	adc	r19, r25
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	fc 01       	movw	r30, r24
    1a70:	e2 0f       	add	r30, r18
    1a72:	f3 1f       	adc	r31, r19
    1a74:	81 81       	ldd	r24, Z+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <Port_Init+0x14a>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <Port_Init+0x146>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	49 c1       	rjmp	.+658    	; 0x1d22 <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1a90:	29 81       	ldd	r18, Y+1	; 0x01
    1a92:	3a 81       	ldd	r19, Y+2	; 0x02
    1a94:	c9 01       	movw	r24, r18
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	28 0f       	add	r18, r24
    1a9c:	39 1f       	adc	r19, r25
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	e2 0f       	add	r30, r18
    1aa6:	f3 1f       	adc	r31, r19
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	01 f5       	brne	.+64     	; 0x1aee <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
    1aae:	a7 e3       	ldi	r26, 0x37	; 55
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e7 e3       	ldi	r30, 0x37	; 55
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	29 81       	ldd	r18, Y+1	; 0x01
    1abc:	3a 81       	ldd	r19, Y+2	; 0x02
    1abe:	c9 01       	movw	r24, r18
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	28 0f       	add	r18, r24
    1ac6:	39 1f       	adc	r19, r25
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	fc 01       	movw	r30, r24
    1ace:	e2 0f       	add	r30, r18
    1ad0:	f3 1f       	adc	r31, r19
    1ad2:	81 81       	ldd	r24, Z+1	; 0x01
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <Port_Init+0x1a8>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <Port_Init+0x1a4>
    1ae8:	84 2b       	or	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	1a c1       	rjmp	.+564    	; 0x1d22 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1aee:	a7 e3       	ldi	r26, 0x37	; 55
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e7 e3       	ldi	r30, 0x37	; 55
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	48 2f       	mov	r20, r24
    1afa:	29 81       	ldd	r18, Y+1	; 0x01
    1afc:	3a 81       	ldd	r19, Y+2	; 0x02
    1afe:	c9 01       	movw	r24, r18
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	28 0f       	add	r18, r24
    1b06:	39 1f       	adc	r19, r25
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e2 0f       	add	r30, r18
    1b10:	f3 1f       	adc	r31, r19
    1b12:	81 81       	ldd	r24, Z+1	; 0x01
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <Port_Init+0x1e6>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	2a 95       	dec	r18
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <Port_Init+0x1e2>
    1b26:	80 95       	com	r24
    1b28:	84 23       	and	r24, r20
    1b2a:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    1b2c:	a8 e3       	ldi	r26, 0x38	; 56
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e8 e3       	ldi	r30, 0x38	; 56
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	29 81       	ldd	r18, Y+1	; 0x01
    1b3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b3c:	c9 01       	movw	r24, r18
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	28 0f       	add	r18, r24
    1b44:	39 1f       	adc	r19, r25
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	e2 0f       	add	r30, r18
    1b4e:	f3 1f       	adc	r31, r19
    1b50:	81 81       	ldd	r24, Z+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <Port_Init+0x226>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <Port_Init+0x222>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	db c0       	rjmp	.+438    	; 0x1d22 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1b6c:	29 81       	ldd	r18, Y+1	; 0x01
    1b6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b70:	c9 01       	movw	r24, r18
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	28 0f       	add	r18, r24
    1b78:	39 1f       	adc	r19, r25
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e2 0f       	add	r30, r18
    1b82:	f3 1f       	adc	r31, r19
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	01 f5       	brne	.+64     	; 0x1bca <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1b8a:	a4 e3       	ldi	r26, 0x34	; 52
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e4 e3       	ldi	r30, 0x34	; 52
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	29 81       	ldd	r18, Y+1	; 0x01
    1b98:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9a:	c9 01       	movw	r24, r18
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	28 0f       	add	r18, r24
    1ba2:	39 1f       	adc	r19, r25
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	fc 01       	movw	r30, r24
    1baa:	e2 0f       	add	r30, r18
    1bac:	f3 1f       	adc	r31, r19
    1bae:	81 81       	ldd	r24, Z+1	; 0x01
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <Port_Init+0x284>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <Port_Init+0x280>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	ac c0       	rjmp	.+344    	; 0x1d22 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1bca:	a4 e3       	ldi	r26, 0x34	; 52
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e4 e3       	ldi	r30, 0x34	; 52
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	29 81       	ldd	r18, Y+1	; 0x01
    1bd8:	3a 81       	ldd	r19, Y+2	; 0x02
    1bda:	c9 01       	movw	r24, r18
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	28 0f       	add	r18, r24
    1be2:	39 1f       	adc	r19, r25
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	fc 01       	movw	r30, r24
    1bea:	e2 0f       	add	r30, r18
    1bec:	f3 1f       	adc	r31, r19
    1bee:	81 81       	ldd	r24, Z+1	; 0x01
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <Port_Init+0x2c2>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	2a 95       	dec	r18
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <Port_Init+0x2be>
    1c02:	80 95       	com	r24
    1c04:	84 23       	and	r24, r20
    1c06:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    1c08:	a5 e3       	ldi	r26, 0x35	; 53
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e3       	ldi	r30, 0x35	; 53
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	29 81       	ldd	r18, Y+1	; 0x01
    1c16:	3a 81       	ldd	r19, Y+2	; 0x02
    1c18:	c9 01       	movw	r24, r18
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	28 0f       	add	r18, r24
    1c20:	39 1f       	adc	r19, r25
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	fc 01       	movw	r30, r24
    1c28:	e2 0f       	add	r30, r18
    1c2a:	f3 1f       	adc	r31, r19
    1c2c:	81 81       	ldd	r24, Z+1	; 0x01
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <Port_Init+0x302>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <Port_Init+0x2fe>
    1c42:	84 2b       	or	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	6d c0       	rjmp	.+218    	; 0x1d22 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1c48:	29 81       	ldd	r18, Y+1	; 0x01
    1c4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c4c:	c9 01       	movw	r24, r18
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	28 0f       	add	r18, r24
    1c54:	39 1f       	adc	r19, r25
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e2 0f       	add	r30, r18
    1c5e:	f3 1f       	adc	r31, r19
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	01 f5       	brne	.+64     	; 0x1ca6 <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1c66:	a1 e3       	ldi	r26, 0x31	; 49
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e1 e3       	ldi	r30, 0x31	; 49
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	29 81       	ldd	r18, Y+1	; 0x01
    1c74:	3a 81       	ldd	r19, Y+2	; 0x02
    1c76:	c9 01       	movw	r24, r18
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	28 0f       	add	r18, r24
    1c7e:	39 1f       	adc	r19, r25
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	81 81       	ldd	r24, Z+1	; 0x01
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <Port_Init+0x360>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <Port_Init+0x35c>
    1ca0:	84 2b       	or	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	3e c0       	rjmp	.+124    	; 0x1d22 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1ca6:	a1 e3       	ldi	r26, 0x31	; 49
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e1 e3       	ldi	r30, 0x31	; 49
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	28 0f       	add	r18, r24
    1cbe:	39 1f       	adc	r19, r25
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e2 0f       	add	r30, r18
    1cc8:	f3 1f       	adc	r31, r19
    1cca:	81 81       	ldd	r24, Z+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <Port_Init+0x39e>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	2a 95       	dec	r18
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <Port_Init+0x39a>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    1ce4:	a2 e3       	ldi	r26, 0x32	; 50
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e2 e3       	ldi	r30, 0x32	; 50
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	29 81       	ldd	r18, Y+1	; 0x01
    1cf2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf4:	c9 01       	movw	r24, r18
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	28 0f       	add	r18, r24
    1cfc:	39 1f       	adc	r19, r25
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	81 81       	ldd	r24, Z+1	; 0x01
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <Port_Init+0x3de>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <Port_Init+0x3da>
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	80 32       	cpi	r24, 0x20	; 32
    1d32:	91 05       	cpc	r25, r1
    1d34:	0c f4       	brge	.+2      	; 0x1d38 <Port_Init+0x3fc>
    1d36:	10 ce       	rjmp	.-992    	; 0x1958 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    1d38:	26 96       	adiw	r28, 0x06	; 6
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    1d52:	af e5       	ldi	r26, 0x5F	; 95
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ef e5       	ldi	r30, 0x5F	; 95
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 68       	ori	r24, 0x80	; 128
    1d5e:	8c 93       	st	X, r24
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <GI_voidDisable>:

void GI_voidDisable(void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    1d6e:	af e5       	ldi	r26, 0x5F	; 95
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ef e5       	ldi	r30, 0x5F	; 95
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8f 77       	andi	r24, 0x7F	; 127
    1d7a:	8c 93       	st	X, r24
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	28 97       	sbiw	r28, 0x08	; 8
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	38 87       	std	Y+8, r19	; 0x08
    1da2:	2f 83       	std	Y+7, r18	; 0x07
    1da4:	8f 81       	ldd	r24, Y+7	; 0x07
    1da6:	98 85       	ldd	r25, Y+8	; 0x08
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <EXTI_voidInit+0x2e>
    1dae:	5a c0       	rjmp	.+180    	; 0x1e64 <EXTI_voidInit+0xe2>
    1db0:	2f 81       	ldd	r18, Y+7	; 0x07
    1db2:	38 85       	ldd	r19, Y+8	; 0x08
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <EXTI_voidInit+0x3a>
    1dba:	a3 c0       	rjmp	.+326    	; 0x1f02 <EXTI_voidInit+0x180>
    1dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbe:	98 85       	ldd	r25, Y+8	; 0x08
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <EXTI_voidInit+0x44>
    1dc4:	b3 c0       	rjmp	.+358    	; 0x1f2c <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3e 83       	std	Y+6, r19	; 0x06
    1dce:	2d 83       	std	Y+5, r18	; 0x05
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	39 f1       	breq	.+78     	; 0x1e28 <EXTI_voidInit+0xa6>
    1dda:	2d 81       	ldd	r18, Y+5	; 0x05
    1ddc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	99 f0       	breq	.+38     	; 0x1e0a <EXTI_voidInit+0x88>
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	69 f1       	breq	.+90     	; 0x1e46 <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    1dec:	a5 e5       	ldi	r26, 0x55	; 85
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e5       	ldi	r30, 0x55	; 85
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	81 60       	ori	r24, 0x01	; 1
    1df8:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1dfa:	a5 e5       	ldi	r26, 0x55	; 85
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e5 e5       	ldi	r30, 0x55	; 85
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	82 60       	ori	r24, 0x02	; 2
    1e06:	8c 93       	st	X, r24
    1e08:	91 c0       	rjmp	.+290    	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    1e0a:	a5 e5       	ldi	r26, 0x55	; 85
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e5 e5       	ldi	r30, 0x55	; 85
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	8e 7f       	andi	r24, 0xFE	; 254
    1e16:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1e18:	a5 e5       	ldi	r26, 0x55	; 85
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e5       	ldi	r30, 0x55	; 85
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	8c 93       	st	X, r24
    1e26:	82 c0       	rjmp	.+260    	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    1e28:	a5 e5       	ldi	r26, 0x55	; 85
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e5 e5       	ldi	r30, 0x55	; 85
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	81 60       	ori	r24, 0x01	; 1
    1e34:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    1e36:	a5 e5       	ldi	r26, 0x55	; 85
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e5 e5       	ldi	r30, 0x55	; 85
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	8d 7f       	andi	r24, 0xFD	; 253
    1e42:	8c 93       	st	X, r24
    1e44:	73 c0       	rjmp	.+230    	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    1e46:	a5 e5       	ldi	r26, 0x55	; 85
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e5 e5       	ldi	r30, 0x55	; 85
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8e 7f       	andi	r24, 0xFE	; 254
    1e52:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    1e54:	a5 e5       	ldi	r26, 0x55	; 85
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e5       	ldi	r30, 0x55	; 85
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8d 7f       	andi	r24, 0xFD	; 253
    1e60:	8c 93       	st	X, r24
    1e62:	64 c0       	rjmp	.+200    	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	3c 83       	std	Y+4, r19	; 0x04
    1e6c:	2b 83       	std	Y+3, r18	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	91 05       	cpc	r25, r1
    1e76:	39 f1       	breq	.+78     	; 0x1ec6 <EXTI_voidInit+0x144>
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	31 05       	cpc	r19, r1
    1e80:	99 f0       	breq	.+38     	; 0x1ea8 <EXTI_voidInit+0x126>
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f1       	breq	.+90     	; 0x1ee4 <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    1e8a:	a5 e5       	ldi	r26, 0x55	; 85
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e5 e5       	ldi	r30, 0x55	; 85
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	84 60       	ori	r24, 0x04	; 4
    1e96:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    1e98:	a5 e5       	ldi	r26, 0x55	; 85
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e5 e5       	ldi	r30, 0x55	; 85
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	88 60       	ori	r24, 0x08	; 8
    1ea4:	8c 93       	st	X, r24
    1ea6:	42 c0       	rjmp	.+132    	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    1ea8:	a5 e5       	ldi	r26, 0x55	; 85
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e5 e5       	ldi	r30, 0x55	; 85
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8b 7f       	andi	r24, 0xFB	; 251
    1eb4:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    1eb6:	a5 e5       	ldi	r26, 0x55	; 85
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e5 e5       	ldi	r30, 0x55	; 85
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 60       	ori	r24, 0x08	; 8
    1ec2:	8c 93       	st	X, r24
    1ec4:	33 c0       	rjmp	.+102    	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    1ec6:	a5 e5       	ldi	r26, 0x55	; 85
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e5 e5       	ldi	r30, 0x55	; 85
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	84 60       	ori	r24, 0x04	; 4
    1ed2:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    1ed4:	a5 e5       	ldi	r26, 0x55	; 85
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e5 e5       	ldi	r30, 0x55	; 85
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	87 7f       	andi	r24, 0xF7	; 247
    1ee0:	8c 93       	st	X, r24
    1ee2:	24 c0       	rjmp	.+72     	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    1ee4:	a5 e5       	ldi	r26, 0x55	; 85
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e5 e5       	ldi	r30, 0x55	; 85
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8b 7f       	andi	r24, 0xFB	; 251
    1ef0:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    1ef2:	a5 e5       	ldi	r26, 0x55	; 85
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e5 e5       	ldi	r30, 0x55	; 85
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	87 7f       	andi	r24, 0xF7	; 247
    1efe:	8c 93       	st	X, r24
    1f00:	15 c0       	rjmp	.+42     	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	41 f0       	breq	.+16     	; 0x1f1e <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    1f0e:	a4 e5       	ldi	r26, 0x54	; 84
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e4 e5       	ldi	r30, 0x54	; 84
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	80 64       	ori	r24, 0x40	; 64
    1f1a:	8c 93       	st	X, r24
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    1f1e:	a4 e5       	ldi	r26, 0x54	; 84
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e4 e5       	ldi	r30, 0x54	; 84
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	8f 7b       	andi	r24, 0xBF	; 191
    1f2a:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    1f2c:	28 96       	adiw	r28, 0x08	; 8
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <EXTI_voidEnable+0x6>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	3b 83       	std	Y+3, r19	; 0x03
    1f54:	2a 83       	std	Y+2, r18	; 0x02
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	89 f0       	breq	.+34     	; 0x1f82 <EXTI_voidEnable+0x44>
    1f60:	2a 81       	ldd	r18, Y+2	; 0x02
    1f62:	3b 81       	ldd	r19, Y+3	; 0x03
    1f64:	22 30       	cpi	r18, 0x02	; 2
    1f66:	31 05       	cpc	r19, r1
    1f68:	a1 f0       	breq	.+40     	; 0x1f92 <EXTI_voidEnable+0x54>
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	b9 f4       	brne	.+46     	; 0x1fa0 <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    1f72:	ab e5       	ldi	r26, 0x5B	; 91
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	eb e5       	ldi	r30, 0x5B	; 91
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	80 64       	ori	r24, 0x40	; 64
    1f7e:	8c 93       	st	X, r24
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    1f82:	ab e5       	ldi	r26, 0x5B	; 91
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	eb e5       	ldi	r30, 0x5B	; 91
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 68       	ori	r24, 0x80	; 128
    1f8e:	8c 93       	st	X, r24
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    1f92:	ab e5       	ldi	r26, 0x5B	; 91
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	eb e5       	ldi	r30, 0x5B	; 91
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 62       	ori	r24, 0x20	; 32
    1f9e:	8c 93       	st	X, r24
        break;
    }
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <EXTI_voidDisable+0x6>
    1fb2:	0f 92       	push	r0
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	3b 83       	std	Y+3, r19	; 0x03
    1fc2:	2a 83       	std	Y+2, r18	; 0x02
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	91 05       	cpc	r25, r1
    1fcc:	89 f0       	breq	.+34     	; 0x1ff0 <EXTI_voidDisable+0x44>
    1fce:	2a 81       	ldd	r18, Y+2	; 0x02
    1fd0:	3b 81       	ldd	r19, Y+3	; 0x03
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	a1 f0       	breq	.+40     	; 0x2000 <EXTI_voidDisable+0x54>
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	9b 81       	ldd	r25, Y+3	; 0x03
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	b9 f4       	brne	.+46     	; 0x200e <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    1fe0:	ab e5       	ldi	r26, 0x5B	; 91
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	eb e5       	ldi	r30, 0x5B	; 91
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 7b       	andi	r24, 0xBF	; 191
    1fec:	8c 93       	st	X, r24
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    1ff0:	ab e5       	ldi	r26, 0x5B	; 91
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	eb e5       	ldi	r30, 0x5B	; 91
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 77       	andi	r24, 0x7F	; 127
    1ffc:	8c 93       	st	X, r24
    1ffe:	07 c0       	rjmp	.+14     	; 0x200e <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    2000:	ab e5       	ldi	r26, 0x5B	; 91
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	eb e5       	ldi	r30, 0x5B	; 91
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8f 7d       	andi	r24, 0xDF	; 223
    200c:	8c 93       	st	X, r24
        break;
    }
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <EXTRI_voidSetCallBackINT+0x6>
    2020:	00 d0       	rcall	.+0      	; 0x2022 <EXTRI_voidSetCallBackINT+0x8>
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	7b 83       	std	Y+3, r23	; 0x03
    202c:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	9b 81       	ldd	r25, Y+3	; 0x03
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	39 f1       	breq	.+78     	; 0x2084 <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	3d 83       	std	Y+5, r19	; 0x05
    203e:	2c 83       	std	Y+4, r18	; 0x04
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	9d 81       	ldd	r25, Y+5	; 0x05
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	91 05       	cpc	r25, r1
    2048:	81 f0       	breq	.+32     	; 0x206a <EXTRI_voidSetCallBackINT+0x50>
    204a:	2c 81       	ldd	r18, Y+4	; 0x04
    204c:	3d 81       	ldd	r19, Y+5	; 0x05
    204e:	22 30       	cpi	r18, 0x02	; 2
    2050:	31 05       	cpc	r19, r1
    2052:	91 f0       	breq	.+36     	; 0x2078 <EXTRI_voidSetCallBackINT+0x5e>
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	9d 81       	ldd	r25, Y+5	; 0x05
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	a1 f4       	brne	.+40     	; 0x2084 <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	90 93 e9 01 	sts	0x01E9, r25
    2064:	80 93 e8 01 	sts	0x01E8, r24
    2068:	0d c0       	rjmp	.+26     	; 0x2084 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	90 93 eb 01 	sts	0x01EB, r25
    2072:	80 93 ea 01 	sts	0x01EA, r24
    2076:	06 c0       	rjmp	.+12     	; 0x2084 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	9b 81       	ldd	r25, Y+3	; 0x03
    207c:	90 93 ed 01 	sts	0x01ED, r25
    2080:	80 93 ec 01 	sts	0x01EC, r24
            break;
        default:
            break;
        }
    }
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	6f 93       	push	r22
    20a8:	7f 93       	push	r23
    20aa:	8f 93       	push	r24
    20ac:	9f 93       	push	r25
    20ae:	af 93       	push	r26
    20b0:	bf 93       	push	r27
    20b2:	ef 93       	push	r30
    20b4:	ff 93       	push	r31
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    20be:	80 91 e8 01 	lds	r24, 0x01E8
    20c2:	90 91 e9 01 	lds	r25, 0x01E9
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__vector_1+0x40>
        private_pCallBackINT0();
    20ca:	e0 91 e8 01 	lds	r30, 0x01E8
    20ce:	f0 91 e9 01 	lds	r31, 0x01E9
    20d2:	09 95       	icall
    }
}
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	ff 91       	pop	r31
    20da:	ef 91       	pop	r30
    20dc:	bf 91       	pop	r27
    20de:	af 91       	pop	r26
    20e0:	9f 91       	pop	r25
    20e2:	8f 91       	pop	r24
    20e4:	7f 91       	pop	r23
    20e6:	6f 91       	pop	r22
    20e8:	5f 91       	pop	r21
    20ea:	4f 91       	pop	r20
    20ec:	3f 91       	pop	r19
    20ee:	2f 91       	pop	r18
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	0f 90       	pop	r0
    20f6:	1f 90       	pop	r1
    20f8:	18 95       	reti

000020fa <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    20fa:	1f 92       	push	r1
    20fc:	0f 92       	push	r0
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	0f 92       	push	r0
    2102:	11 24       	eor	r1, r1
    2104:	2f 93       	push	r18
    2106:	3f 93       	push	r19
    2108:	4f 93       	push	r20
    210a:	5f 93       	push	r21
    210c:	6f 93       	push	r22
    210e:	7f 93       	push	r23
    2110:	8f 93       	push	r24
    2112:	9f 93       	push	r25
    2114:	af 93       	push	r26
    2116:	bf 93       	push	r27
    2118:	ef 93       	push	r30
    211a:	ff 93       	push	r31
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    2124:	80 91 ea 01 	lds	r24, 0x01EA
    2128:	90 91 eb 01 	lds	r25, 0x01EB
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	29 f0       	breq	.+10     	; 0x213a <__vector_2+0x40>
        private_pCallBackINT1();
    2130:	e0 91 ea 01 	lds	r30, 0x01EA
    2134:	f0 91 eb 01 	lds	r31, 0x01EB
    2138:	09 95       	icall
    }
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	ff 91       	pop	r31
    2140:	ef 91       	pop	r30
    2142:	bf 91       	pop	r27
    2144:	af 91       	pop	r26
    2146:	9f 91       	pop	r25
    2148:	8f 91       	pop	r24
    214a:	7f 91       	pop	r23
    214c:	6f 91       	pop	r22
    214e:	5f 91       	pop	r21
    2150:	4f 91       	pop	r20
    2152:	3f 91       	pop	r19
    2154:	2f 91       	pop	r18
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	0f 90       	pop	r0
    215c:	1f 90       	pop	r1
    215e:	18 95       	reti

00002160 <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    2160:	1f 92       	push	r1
    2162:	0f 92       	push	r0
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	0f 92       	push	r0
    2168:	11 24       	eor	r1, r1
    216a:	2f 93       	push	r18
    216c:	3f 93       	push	r19
    216e:	4f 93       	push	r20
    2170:	5f 93       	push	r21
    2172:	6f 93       	push	r22
    2174:	7f 93       	push	r23
    2176:	8f 93       	push	r24
    2178:	9f 93       	push	r25
    217a:	af 93       	push	r26
    217c:	bf 93       	push	r27
    217e:	ef 93       	push	r30
    2180:	ff 93       	push	r31
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    218a:	80 91 ec 01 	lds	r24, 0x01EC
    218e:	90 91 ed 01 	lds	r25, 0x01ED
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	29 f0       	breq	.+10     	; 0x21a0 <__vector_3+0x40>
        private_pCallBackINT2();
    2196:	e0 91 ec 01 	lds	r30, 0x01EC
    219a:	f0 91 ed 01 	lds	r31, 0x01ED
    219e:	09 95       	icall
    }
}
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	ff 91       	pop	r31
    21a6:	ef 91       	pop	r30
    21a8:	bf 91       	pop	r27
    21aa:	af 91       	pop	r26
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	7f 91       	pop	r23
    21b2:	6f 91       	pop	r22
    21b4:	5f 91       	pop	r21
    21b6:	4f 91       	pop	r20
    21b8:	3f 91       	pop	r19
    21ba:	2f 91       	pop	r18
    21bc:	0f 90       	pop	r0
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	0f 90       	pop	r0
    21c2:	1f 90       	pop	r1
    21c4:	18 95       	reti

000021c6 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <Dio_WriteChannel+0x6>
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <Dio_WriteChannel+0x8>
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	8a 83       	std	Y+2, r24	; 0x02
    21d6:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	86 95       	lsr	r24
    21dc:	86 95       	lsr	r24
    21de:	86 95       	lsr	r24
    21e0:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	3d 83       	std	Y+5, r19	; 0x05
    21ea:	2c 83       	std	Y+4, r18	; 0x04
    21ec:	8c 81       	ldd	r24, Y+4	; 0x04
    21ee:	9d 81       	ldd	r25, Y+5	; 0x05
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	91 05       	cpc	r25, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <Dio_WriteChannel+0x32>
    21f6:	43 c0       	rjmp	.+134    	; 0x227e <Dio_WriteChannel+0xb8>
    21f8:	2c 81       	ldd	r18, Y+4	; 0x04
    21fa:	3d 81       	ldd	r19, Y+5	; 0x05
    21fc:	22 30       	cpi	r18, 0x02	; 2
    21fe:	31 05       	cpc	r19, r1
    2200:	2c f4       	brge	.+10     	; 0x220c <Dio_WriteChannel+0x46>
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	9d 81       	ldd	r25, Y+5	; 0x05
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	71 f0       	breq	.+28     	; 0x2226 <Dio_WriteChannel+0x60>
    220a:	ce c0       	rjmp	.+412    	; 0x23a8 <Dio_WriteChannel+0x1e2>
    220c:	2c 81       	ldd	r18, Y+4	; 0x04
    220e:	3d 81       	ldd	r19, Y+5	; 0x05
    2210:	22 30       	cpi	r18, 0x02	; 2
    2212:	31 05       	cpc	r19, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <Dio_WriteChannel+0x52>
    2216:	65 c0       	rjmp	.+202    	; 0x22e2 <Dio_WriteChannel+0x11c>
    2218:	8c 81       	ldd	r24, Y+4	; 0x04
    221a:	9d 81       	ldd	r25, Y+5	; 0x05
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <Dio_WriteChannel+0x5e>
    2222:	91 c0       	rjmp	.+290    	; 0x2346 <Dio_WriteChannel+0x180>
    2224:	c1 c0       	rjmp	.+386    	; 0x23a8 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	a1 f4       	brne	.+40     	; 0x2254 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    222c:	ab e3       	ldi	r26, 0x3B	; 59
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	eb e3       	ldi	r30, 0x3B	; 59
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <Dio_WriteChannel+0x84>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <Dio_WriteChannel+0x80>
    224e:	84 2b       	or	r24, r20
    2250:	8c 93       	st	X, r24
    2252:	aa c0       	rjmp	.+340    	; 0x23a8 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    2254:	ab e3       	ldi	r26, 0x3B	; 59
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	eb e3       	ldi	r30, 0x3B	; 59
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	48 2f       	mov	r20, r24
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	02 2e       	mov	r0, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <Dio_WriteChannel+0xac>
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	0a 94       	dec	r0
    2274:	e2 f7       	brpl	.-8      	; 0x226e <Dio_WriteChannel+0xa8>
    2276:	80 95       	com	r24
    2278:	84 23       	and	r24, r20
    227a:	8c 93       	st	X, r24
    227c:	95 c0       	rjmp	.+298    	; 0x23a8 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	b9 f4       	brne	.+46     	; 0x22b2 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    2284:	a8 e3       	ldi	r26, 0x38	; 56
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e3       	ldi	r30, 0x38	; 56
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9c 01       	movw	r18, r24
    2298:	27 70       	andi	r18, 0x07	; 7
    229a:	30 70       	andi	r19, 0x00	; 0
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 2e       	mov	r0, r18
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <Dio_WriteChannel+0xe2>
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	0a 94       	dec	r0
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <Dio_WriteChannel+0xde>
    22ac:	84 2b       	or	r24, r20
    22ae:	8c 93       	st	X, r24
    22b0:	7b c0       	rjmp	.+246    	; 0x23a8 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    22b2:	a8 e3       	ldi	r26, 0x38	; 56
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e8 e3       	ldi	r30, 0x38	; 56
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9c 01       	movw	r18, r24
    22c6:	27 70       	andi	r18, 0x07	; 7
    22c8:	30 70       	andi	r19, 0x00	; 0
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	02 2e       	mov	r0, r18
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <Dio_WriteChannel+0x110>
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	0a 94       	dec	r0
    22d8:	e2 f7       	brpl	.-8      	; 0x22d2 <Dio_WriteChannel+0x10c>
    22da:	80 95       	com	r24
    22dc:	84 23       	and	r24, r20
    22de:	8c 93       	st	X, r24
    22e0:	63 c0       	rjmp	.+198    	; 0x23a8 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	b9 f4       	brne	.+46     	; 0x2316 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    22e8:	a5 e3       	ldi	r26, 0x35	; 53
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e5 e3       	ldi	r30, 0x35	; 53
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	48 2f       	mov	r20, r24
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9c 01       	movw	r18, r24
    22fc:	27 70       	andi	r18, 0x07	; 7
    22fe:	30 70       	andi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 2e       	mov	r0, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <Dio_WriteChannel+0x146>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <Dio_WriteChannel+0x142>
    2310:	84 2b       	or	r24, r20
    2312:	8c 93       	st	X, r24
    2314:	49 c0       	rjmp	.+146    	; 0x23a8 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    2316:	a5 e3       	ldi	r26, 0x35	; 53
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e5 e3       	ldi	r30, 0x35	; 53
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	48 2f       	mov	r20, r24
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9c 01       	movw	r18, r24
    232a:	27 70       	andi	r18, 0x07	; 7
    232c:	30 70       	andi	r19, 0x00	; 0
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 2e       	mov	r0, r18
    2334:	02 c0       	rjmp	.+4      	; 0x233a <Dio_WriteChannel+0x174>
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	0a 94       	dec	r0
    233c:	e2 f7       	brpl	.-8      	; 0x2336 <Dio_WriteChannel+0x170>
    233e:	80 95       	com	r24
    2340:	84 23       	and	r24, r20
    2342:	8c 93       	st	X, r24
    2344:	31 c0       	rjmp	.+98     	; 0x23a8 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	b9 f4       	brne	.+46     	; 0x237a <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    234c:	a2 e3       	ldi	r26, 0x32	; 50
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e2 e3       	ldi	r30, 0x32	; 50
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	48 2f       	mov	r20, r24
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	88 2f       	mov	r24, r24
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9c 01       	movw	r18, r24
    2360:	27 70       	andi	r18, 0x07	; 7
    2362:	30 70       	andi	r19, 0x00	; 0
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	02 2e       	mov	r0, r18
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <Dio_WriteChannel+0x1aa>
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	0a 94       	dec	r0
    2372:	e2 f7       	brpl	.-8      	; 0x236c <Dio_WriteChannel+0x1a6>
    2374:	84 2b       	or	r24, r20
    2376:	8c 93       	st	X, r24
    2378:	17 c0       	rjmp	.+46     	; 0x23a8 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    237a:	a2 e3       	ldi	r26, 0x32	; 50
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e2 e3       	ldi	r30, 0x32	; 50
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	48 2f       	mov	r20, r24
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9c 01       	movw	r18, r24
    238e:	27 70       	andi	r18, 0x07	; 7
    2390:	30 70       	andi	r19, 0x00	; 0
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	02 2e       	mov	r0, r18
    2398:	02 c0       	rjmp	.+4      	; 0x239e <Dio_WriteChannel+0x1d8>
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	0a 94       	dec	r0
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <Dio_WriteChannel+0x1d4>
    23a2:	80 95       	com	r24
    23a4:	84 23       	and	r24, r20
    23a6:	8c 93       	st	X, r24
		}
		break;
	}
}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <Dio_ReadChannel+0x6>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <Dio_ReadChannel+0x8>
    23c0:	0f 92       	push	r0
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	86 95       	lsr	r24
    23cc:	86 95       	lsr	r24
    23ce:	86 95       	lsr	r24
    23d0:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	3d 83       	std	Y+5, r19	; 0x05
    23da:	2c 83       	std	Y+4, r18	; 0x04
    23dc:	4c 81       	ldd	r20, Y+4	; 0x04
    23de:	5d 81       	ldd	r21, Y+5	; 0x05
    23e0:	41 30       	cpi	r20, 0x01	; 1
    23e2:	51 05       	cpc	r21, r1
    23e4:	49 f1       	breq	.+82     	; 0x2438 <Dio_ReadChannel+0x80>
    23e6:	8c 81       	ldd	r24, Y+4	; 0x04
    23e8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	91 05       	cpc	r25, r1
    23ee:	34 f4       	brge	.+12     	; 0x23fc <Dio_ReadChannel+0x44>
    23f0:	2c 81       	ldd	r18, Y+4	; 0x04
    23f2:	3d 81       	ldd	r19, Y+5	; 0x05
    23f4:	21 15       	cp	r18, r1
    23f6:	31 05       	cpc	r19, r1
    23f8:	69 f0       	breq	.+26     	; 0x2414 <Dio_ReadChannel+0x5c>
    23fa:	59 c0       	rjmp	.+178    	; 0x24ae <Dio_ReadChannel+0xf6>
    23fc:	4c 81       	ldd	r20, Y+4	; 0x04
    23fe:	5d 81       	ldd	r21, Y+5	; 0x05
    2400:	42 30       	cpi	r20, 0x02	; 2
    2402:	51 05       	cpc	r21, r1
    2404:	69 f1       	breq	.+90     	; 0x2460 <Dio_ReadChannel+0xa8>
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	91 05       	cpc	r25, r1
    240e:	09 f4       	brne	.+2      	; 0x2412 <Dio_ReadChannel+0x5a>
    2410:	3b c0       	rjmp	.+118    	; 0x2488 <Dio_ReadChannel+0xd0>
    2412:	4d c0       	rjmp	.+154    	; 0x24ae <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2414:	e9 e3       	ldi	r30, 0x39	; 57
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	88 2f       	mov	r24, r24
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a9 01       	movw	r20, r18
    2426:	02 c0       	rjmp	.+4      	; 0x242c <Dio_ReadChannel+0x74>
    2428:	55 95       	asr	r21
    242a:	47 95       	ror	r20
    242c:	8a 95       	dec	r24
    242e:	e2 f7       	brpl	.-8      	; 0x2428 <Dio_ReadChannel+0x70>
    2430:	ca 01       	movw	r24, r20
    2432:	81 70       	andi	r24, 0x01	; 1
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	3b c0       	rjmp	.+118    	; 0x24ae <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    2438:	e6 e3       	ldi	r30, 0x36	; 54
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	87 70       	andi	r24, 0x07	; 7
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	a9 01       	movw	r20, r18
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <Dio_ReadChannel+0x9c>
    2450:	55 95       	asr	r21
    2452:	47 95       	ror	r20
    2454:	8a 95       	dec	r24
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <Dio_ReadChannel+0x98>
    2458:	ca 01       	movw	r24, r20
    245a:	81 70       	andi	r24, 0x01	; 1
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	27 c0       	rjmp	.+78     	; 0x24ae <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    2460:	e3 e3       	ldi	r30, 0x33	; 51
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	87 70       	andi	r24, 0x07	; 7
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	a9 01       	movw	r20, r18
    2476:	02 c0       	rjmp	.+4      	; 0x247c <Dio_ReadChannel+0xc4>
    2478:	55 95       	asr	r21
    247a:	47 95       	ror	r20
    247c:	8a 95       	dec	r24
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <Dio_ReadChannel+0xc0>
    2480:	ca 01       	movw	r24, r20
    2482:	81 70       	andi	r24, 0x01	; 1
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	13 c0       	rjmp	.+38     	; 0x24ae <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    2488:	e0 e3       	ldi	r30, 0x30	; 48
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	87 70       	andi	r24, 0x07	; 7
    249a:	90 70       	andi	r25, 0x00	; 0
    249c:	a9 01       	movw	r20, r18
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <Dio_ReadChannel+0xec>
    24a0:	55 95       	asr	r21
    24a2:	47 95       	ror	r20
    24a4:	8a 95       	dec	r24
    24a6:	e2 f7       	brpl	.-8      	; 0x24a0 <Dio_ReadChannel+0xe8>
    24a8:	ca 01       	movw	r24, r20
    24aa:	81 70       	andi	r24, 0x01	; 1
    24ac:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <Dio_FlipChannel+0x6>
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <Dio_FlipChannel+0x8>
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	86 95       	lsr	r24
    24d2:	86 95       	lsr	r24
    24d4:	86 95       	lsr	r24
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	3c 83       	std	Y+4, r19	; 0x04
    24dc:	2b 83       	std	Y+3, r18	; 0x03
    24de:	4b 81       	ldd	r20, Y+3	; 0x03
    24e0:	5c 81       	ldd	r21, Y+4	; 0x04
    24e2:	41 30       	cpi	r20, 0x01	; 1
    24e4:	51 05       	cpc	r21, r1
    24e6:	09 f4       	brne	.+2      	; 0x24ea <Dio_FlipChannel+0x2a>
    24e8:	3c c0       	rjmp	.+120    	; 0x2562 <Dio_FlipChannel+0xa2>
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	91 05       	cpc	r25, r1
    24f2:	34 f4       	brge	.+12     	; 0x2500 <Dio_FlipChannel+0x40>
    24f4:	2b 81       	ldd	r18, Y+3	; 0x03
    24f6:	3c 81       	ldd	r19, Y+4	; 0x04
    24f8:	21 15       	cp	r18, r1
    24fa:	31 05       	cpc	r19, r1
    24fc:	71 f0       	breq	.+28     	; 0x251a <Dio_FlipChannel+0x5a>
    24fe:	ab c0       	rjmp	.+342    	; 0x2656 <Dio_FlipChannel+0x196>
    2500:	4b 81       	ldd	r20, Y+3	; 0x03
    2502:	5c 81       	ldd	r21, Y+4	; 0x04
    2504:	42 30       	cpi	r20, 0x02	; 2
    2506:	51 05       	cpc	r21, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <Dio_FlipChannel+0x4c>
    250a:	54 c0       	rjmp	.+168    	; 0x25b4 <Dio_FlipChannel+0xf4>
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	83 30       	cpi	r24, 0x03	; 3
    2512:	91 05       	cpc	r25, r1
    2514:	09 f4       	brne	.+2      	; 0x2518 <Dio_FlipChannel+0x58>
    2516:	77 c0       	rjmp	.+238    	; 0x2606 <Dio_FlipChannel+0x146>
    2518:	9e c0       	rjmp	.+316    	; 0x2656 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    251a:	ab e3       	ldi	r26, 0x3B	; 59
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	eb e3       	ldi	r30, 0x3B	; 59
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	48 2f       	mov	r20, r24
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <Dio_FlipChannel+0x76>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	2a 95       	dec	r18
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <Dio_FlipChannel+0x72>
    253a:	84 27       	eor	r24, r20
    253c:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    253e:	eb e3       	ldi	r30, 0x3B	; 59
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	88 2f       	mov	r24, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a9 01       	movw	r20, r18
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <Dio_FlipChannel+0x96>
    2552:	55 95       	asr	r21
    2554:	47 95       	ror	r20
    2556:	8a 95       	dec	r24
    2558:	e2 f7       	brpl	.-8      	; 0x2552 <Dio_FlipChannel+0x92>
    255a:	ca 01       	movw	r24, r20
    255c:	81 70       	andi	r24, 0x01	; 1
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	7a c0       	rjmp	.+244    	; 0x2656 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    2562:	a8 e3       	ldi	r26, 0x38	; 56
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e8 e3       	ldi	r30, 0x38	; 56
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 01       	movw	r18, r24
    2576:	27 70       	andi	r18, 0x07	; 7
    2578:	30 70       	andi	r19, 0x00	; 0
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <Dio_FlipChannel+0xc4>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	2a 95       	dec	r18
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <Dio_FlipChannel+0xc0>
    2588:	84 27       	eor	r24, r20
    258a:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    258c:	e8 e3       	ldi	r30, 0x38	; 56
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	87 70       	andi	r24, 0x07	; 7
    259e:	90 70       	andi	r25, 0x00	; 0
    25a0:	a9 01       	movw	r20, r18
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <Dio_FlipChannel+0xe8>
    25a4:	55 95       	asr	r21
    25a6:	47 95       	ror	r20
    25a8:	8a 95       	dec	r24
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <Dio_FlipChannel+0xe4>
    25ac:	ca 01       	movw	r24, r20
    25ae:	81 70       	andi	r24, 0x01	; 1
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	51 c0       	rjmp	.+162    	; 0x2656 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    25b4:	a5 e3       	ldi	r26, 0x35	; 53
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e5 e3       	ldi	r30, 0x35	; 53
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	48 2f       	mov	r20, r24
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 01       	movw	r18, r24
    25c8:	27 70       	andi	r18, 0x07	; 7
    25ca:	30 70       	andi	r19, 0x00	; 0
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <Dio_FlipChannel+0x116>
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	2a 95       	dec	r18
    25d8:	e2 f7       	brpl	.-8      	; 0x25d2 <Dio_FlipChannel+0x112>
    25da:	84 27       	eor	r24, r20
    25dc:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    25de:	e5 e3       	ldi	r30, 0x35	; 53
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	87 70       	andi	r24, 0x07	; 7
    25f0:	90 70       	andi	r25, 0x00	; 0
    25f2:	a9 01       	movw	r20, r18
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <Dio_FlipChannel+0x13a>
    25f6:	55 95       	asr	r21
    25f8:	47 95       	ror	r20
    25fa:	8a 95       	dec	r24
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <Dio_FlipChannel+0x136>
    25fe:	ca 01       	movw	r24, r20
    2600:	81 70       	andi	r24, 0x01	; 1
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	28 c0       	rjmp	.+80     	; 0x2656 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    2606:	a2 e3       	ldi	r26, 0x32	; 50
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e2 e3       	ldi	r30, 0x32	; 50
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	88 2f       	mov	r24, r24
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9c 01       	movw	r18, r24
    261a:	27 70       	andi	r18, 0x07	; 7
    261c:	30 70       	andi	r19, 0x00	; 0
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <Dio_FlipChannel+0x168>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	2a 95       	dec	r18
    262a:	e2 f7       	brpl	.-8      	; 0x2624 <Dio_FlipChannel+0x164>
    262c:	84 27       	eor	r24, r20
    262e:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    2630:	e2 e3       	ldi	r30, 0x32	; 50
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	87 70       	andi	r24, 0x07	; 7
    2642:	90 70       	andi	r25, 0x00	; 0
    2644:	a9 01       	movw	r20, r18
    2646:	02 c0       	rjmp	.+4      	; 0x264c <Dio_FlipChannel+0x18c>
    2648:	55 95       	asr	r21
    264a:	47 95       	ror	r20
    264c:	8a 95       	dec	r24
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <Dio_FlipChannel+0x188>
    2650:	ca 01       	movw	r24, r20
    2652:	81 70       	andi	r24, 0x01	; 1
    2654:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <Dio_WritePort+0x6>
    266c:	00 d0       	rcall	.+0      	; 0x266e <Dio_WritePort+0x8>
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	3c 83       	std	Y+4, r19	; 0x04
    267e:	2b 83       	std	Y+3, r18	; 0x03
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	91 05       	cpc	r25, r1
    2688:	d1 f0       	breq	.+52     	; 0x26be <Dio_WritePort+0x58>
    268a:	2b 81       	ldd	r18, Y+3	; 0x03
    268c:	3c 81       	ldd	r19, Y+4	; 0x04
    268e:	22 30       	cpi	r18, 0x02	; 2
    2690:	31 05       	cpc	r19, r1
    2692:	2c f4       	brge	.+10     	; 0x269e <Dio_WritePort+0x38>
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	61 f0       	breq	.+24     	; 0x26b4 <Dio_WritePort+0x4e>
    269c:	1e c0       	rjmp	.+60     	; 0x26da <Dio_WritePort+0x74>
    269e:	2b 81       	ldd	r18, Y+3	; 0x03
    26a0:	3c 81       	ldd	r19, Y+4	; 0x04
    26a2:	22 30       	cpi	r18, 0x02	; 2
    26a4:	31 05       	cpc	r19, r1
    26a6:	81 f0       	breq	.+32     	; 0x26c8 <Dio_WritePort+0x62>
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	83 30       	cpi	r24, 0x03	; 3
    26ae:	91 05       	cpc	r25, r1
    26b0:	81 f0       	breq	.+32     	; 0x26d2 <Dio_WritePort+0x6c>
    26b2:	13 c0       	rjmp	.+38     	; 0x26da <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    26b4:	eb e3       	ldi	r30, 0x3B	; 59
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	80 83       	st	Z, r24
    26bc:	0e c0       	rjmp	.+28     	; 0x26da <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    26be:	e8 e3       	ldi	r30, 0x38	; 56
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	80 83       	st	Z, r24
    26c6:	09 c0       	rjmp	.+18     	; 0x26da <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    26c8:	e5 e3       	ldi	r30, 0x35	; 53
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	80 83       	st	Z, r24
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    26d2:	e2 e3       	ldi	r30, 0x32	; 50
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	80 83       	st	Z, r24
		break;
	}
}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <main>:
#include "MCAL/WDT/includes/WDT_interface.h"
#include "MCAL/DIO/DIO_interface.h"
#include "MCAL/PORT/PORT.h"
#include "MCAL/PORT/PORT_cnf.h"
#include "avr/delay.h"
int main() {
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	2e 97       	sbiw	r28, 0x0e	; 14
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61

	Port_Init(pin_cfg);
    26fc:	88 e6       	ldi	r24, 0x68	; 104
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	0e 94 9e 0c 	call	0x193c	; 0x193c <Port_Init>

	Dio_WriteChannel(PA_5, STD_HIGH);
    2704:	85 e0       	ldi	r24, 0x05	; 5
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <Dio_WriteChannel>
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	aa e7       	ldi	r26, 0x7A	; 122
    2712:	b4 e4       	ldi	r27, 0x44	; 68
    2714:	8b 87       	std	Y+11, r24	; 0x0b
    2716:	9c 87       	std	Y+12, r25	; 0x0c
    2718:	ad 87       	std	Y+13, r26	; 0x0d
    271a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271c:	6b 85       	ldd	r22, Y+11	; 0x0b
    271e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2720:	8d 85       	ldd	r24, Y+13	; 0x0d
    2722:	9e 85       	ldd	r25, Y+14	; 0x0e
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4a e7       	ldi	r20, 0x7A	; 122
    272a:	55 e4       	ldi	r21, 0x45	; 69
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	8f 83       	std	Y+7, r24	; 0x07
    2736:	98 87       	std	Y+8, r25	; 0x08
    2738:	a9 87       	std	Y+9, r26	; 0x09
    273a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e8       	ldi	r20, 0x80	; 128
    274a:	5f e3       	ldi	r21, 0x3F	; 63
    274c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2750:	88 23       	and	r24, r24
    2752:	2c f4       	brge	.+10     	; 0x275e <main+0x76>
		__ticks = 1;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	3f c0       	rjmp	.+126    	; 0x27dc <main+0xf4>
	else if (__tmp > 65535)
    275e:	6f 81       	ldd	r22, Y+7	; 0x07
    2760:	78 85       	ldd	r23, Y+8	; 0x08
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	3f ef       	ldi	r19, 0xFF	; 255
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	57 e4       	ldi	r21, 0x47	; 71
    276e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	4c f5       	brge	.+82     	; 0x27c8 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2776:	6b 85       	ldd	r22, Y+11	; 0x0b
    2778:	7c 85       	ldd	r23, Y+12	; 0x0c
    277a:	8d 85       	ldd	r24, Y+13	; 0x0d
    277c:	9e 85       	ldd	r25, Y+14	; 0x0e
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e2       	ldi	r20, 0x20	; 32
    2784:	51 e4       	ldi	r21, 0x41	; 65
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
    279e:	0f c0       	rjmp	.+30     	; 0x27be <main+0xd6>
    27a0:	80 e9       	ldi	r24, 0x90	; 144
    27a2:	91 e0       	ldi	r25, 0x01	; 1
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	9c 81       	ldd	r25, Y+4	; 0x04
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <main+0xc4>
    27b0:	9c 83       	std	Y+4, r25	; 0x04
    27b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	69 f7       	brne	.-38     	; 0x27a0 <main+0xb8>
    27c6:	14 c0       	rjmp	.+40     	; 0x27f0 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ca:	78 85       	ldd	r23, Y+8	; 0x08
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <main+0x100>
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	Dio_WriteChannel(PA_5,STD_LOW);
    27f0:	85 e0       	ldi	r24, 0x05	; 5
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <Dio_WriteChannel>

 WDT_voidEnable(WDT_TIME_1_S);
    27f8:	87 e0       	ldi	r24, 0x07	; 7
    27fa:	0e 94 77 07 	call	0xeee	; 0xeee <WDT_voidEnable>
    27fe:	ff cf       	rjmp	.-2      	; 0x27fe <main+0x116>

00002800 <__udivmodhi4>:
    2800:	aa 1b       	sub	r26, r26
    2802:	bb 1b       	sub	r27, r27
    2804:	51 e1       	ldi	r21, 0x11	; 17
    2806:	07 c0       	rjmp	.+14     	; 0x2816 <__udivmodhi4_ep>

00002808 <__udivmodhi4_loop>:
    2808:	aa 1f       	adc	r26, r26
    280a:	bb 1f       	adc	r27, r27
    280c:	a6 17       	cp	r26, r22
    280e:	b7 07       	cpc	r27, r23
    2810:	10 f0       	brcs	.+4      	; 0x2816 <__udivmodhi4_ep>
    2812:	a6 1b       	sub	r26, r22
    2814:	b7 0b       	sbc	r27, r23

00002816 <__udivmodhi4_ep>:
    2816:	88 1f       	adc	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	5a 95       	dec	r21
    281c:	a9 f7       	brne	.-22     	; 0x2808 <__udivmodhi4_loop>
    281e:	80 95       	com	r24
    2820:	90 95       	com	r25
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	08 95       	ret

00002828 <__udivmodsi4>:
    2828:	a1 e2       	ldi	r26, 0x21	; 33
    282a:	1a 2e       	mov	r1, r26
    282c:	aa 1b       	sub	r26, r26
    282e:	bb 1b       	sub	r27, r27
    2830:	fd 01       	movw	r30, r26
    2832:	0d c0       	rjmp	.+26     	; 0x284e <__udivmodsi4_ep>

00002834 <__udivmodsi4_loop>:
    2834:	aa 1f       	adc	r26, r26
    2836:	bb 1f       	adc	r27, r27
    2838:	ee 1f       	adc	r30, r30
    283a:	ff 1f       	adc	r31, r31
    283c:	a2 17       	cp	r26, r18
    283e:	b3 07       	cpc	r27, r19
    2840:	e4 07       	cpc	r30, r20
    2842:	f5 07       	cpc	r31, r21
    2844:	20 f0       	brcs	.+8      	; 0x284e <__udivmodsi4_ep>
    2846:	a2 1b       	sub	r26, r18
    2848:	b3 0b       	sbc	r27, r19
    284a:	e4 0b       	sbc	r30, r20
    284c:	f5 0b       	sbc	r31, r21

0000284e <__udivmodsi4_ep>:
    284e:	66 1f       	adc	r22, r22
    2850:	77 1f       	adc	r23, r23
    2852:	88 1f       	adc	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	1a 94       	dec	r1
    2858:	69 f7       	brne	.-38     	; 0x2834 <__udivmodsi4_loop>
    285a:	60 95       	com	r22
    285c:	70 95       	com	r23
    285e:	80 95       	com	r24
    2860:	90 95       	com	r25
    2862:	9b 01       	movw	r18, r22
    2864:	ac 01       	movw	r20, r24
    2866:	bd 01       	movw	r22, r26
    2868:	cf 01       	movw	r24, r30
    286a:	08 95       	ret

0000286c <__prologue_saves__>:
    286c:	2f 92       	push	r2
    286e:	3f 92       	push	r3
    2870:	4f 92       	push	r4
    2872:	5f 92       	push	r5
    2874:	6f 92       	push	r6
    2876:	7f 92       	push	r7
    2878:	8f 92       	push	r8
    287a:	9f 92       	push	r9
    287c:	af 92       	push	r10
    287e:	bf 92       	push	r11
    2880:	cf 92       	push	r12
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	ca 1b       	sub	r28, r26
    2896:	db 0b       	sbc	r29, r27
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	09 94       	ijmp

000028a4 <__epilogue_restores__>:
    28a4:	2a 88       	ldd	r2, Y+18	; 0x12
    28a6:	39 88       	ldd	r3, Y+17	; 0x11
    28a8:	48 88       	ldd	r4, Y+16	; 0x10
    28aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    28ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    28b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    28b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    28b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    28b6:	b9 84       	ldd	r11, Y+9	; 0x09
    28b8:	c8 84       	ldd	r12, Y+8	; 0x08
    28ba:	df 80       	ldd	r13, Y+7	; 0x07
    28bc:	ee 80       	ldd	r14, Y+6	; 0x06
    28be:	fd 80       	ldd	r15, Y+5	; 0x05
    28c0:	0c 81       	ldd	r16, Y+4	; 0x04
    28c2:	1b 81       	ldd	r17, Y+3	; 0x03
    28c4:	aa 81       	ldd	r26, Y+2	; 0x02
    28c6:	b9 81       	ldd	r27, Y+1	; 0x01
    28c8:	ce 0f       	add	r28, r30
    28ca:	d1 1d       	adc	r29, r1
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	ed 01       	movw	r28, r26
    28d8:	08 95       	ret

000028da <_exit>:
    28da:	f8 94       	cli

000028dc <__stop_program>:
    28dc:	ff cf       	rjmp	.-2      	; 0x28dc <__stop_program>
