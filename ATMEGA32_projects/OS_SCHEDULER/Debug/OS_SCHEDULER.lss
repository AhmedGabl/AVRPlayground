
OS_SCHEDULER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000182  00800060  00004536  000045ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  008001e2  008001e2  0000474c  2**0
                  ALLOC
  3 .stab         00004050  00000000  00000000  0000474c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024fc  00000000  00000000  0000879c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000ac98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  0000ae78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  0000b0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000d9af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  0000efe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00010368  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  0001086e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__vector_1>
       8:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__vector_2>
       c:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__vector_3>
      10:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_4>
      14:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_5>
      18:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_10>
      2c:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 32       	cpi	r26, 0x2C	; 44
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <main>
      8a:	0c 94 99 22 	jmp	0x4532	; 0x4532 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 86 22 	jmp	0x450c	; 0x450c <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 8e 22 	jmp	0x451c	; 0x451c <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 86 22 	jmp	0x450c	; 0x450c <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e3 58       	subi	r30, 0x83	; 131
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <Scheduler>:

Task OS_Tasks[OS_NUMBER_OF_TASKS];

u32 TickCount = 0;

void Scheduler(void) {
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
    for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	7d c0       	rjmp	.+250    	; 0xff6 <Scheduler+0x108>
        if ((OS_Tasks[i].State == OS_TASK_READY)) {
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	c9 01       	movw	r24, r18
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	82 1b       	sub	r24, r18
     f12:	93 0b       	sbc	r25, r19
     f14:	fc 01       	movw	r30, r24
     f16:	ed 5e       	subi	r30, 0xED	; 237
     f18:	fd 4f       	sbci	r31, 0xFD	; 253
     f1a:	80 81       	ld	r24, Z
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	09 f0       	breq	.+2      	; 0xf22 <Scheduler+0x34>
     f20:	67 c0       	rjmp	.+206    	; 0xff0 <Scheduler+0x102>
            if (OS_Tasks[i].InitialDelay == 0) {
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	c9 01       	movw	r24, r18
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	82 1b       	sub	r24, r18
     f38:	93 0b       	sbc	r25, r19
     f3a:	fc 01       	movw	r30, r24
     f3c:	ef 5e       	subi	r30, 0xEF	; 239
     f3e:	fd 4f       	sbci	r31, 0xFD	; 253
     f40:	80 81       	ld	r24, Z
     f42:	88 23       	and	r24, r24
     f44:	b1 f5       	brne	.+108    	; 0xfb2 <Scheduler+0xc4>
                OS_Tasks[i].InitialDelay = OS_Tasks[i].Periodicity - 1;
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	48 2f       	mov	r20, r24
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	c9 01       	movw	r24, r18
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	82 1b       	sub	r24, r18
     f62:	93 0b       	sbc	r25, r19
     f64:	fc 01       	movw	r30, r24
     f66:	e0 5f       	subi	r30, 0xF0	; 240
     f68:	fd 4f       	sbci	r31, 0xFD	; 253
     f6a:	80 81       	ld	r24, Z
     f6c:	28 2f       	mov	r18, r24
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	ca 01       	movw	r24, r20
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	84 1b       	sub	r24, r20
     f80:	95 0b       	sbc	r25, r21
     f82:	fc 01       	movw	r30, r24
     f84:	ef 5e       	subi	r30, 0xEF	; 239
     f86:	fd 4f       	sbci	r31, 0xFD	; 253
     f88:	20 83       	st	Z, r18
                OS_Tasks[i].Fptr();
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	c9 01       	movw	r24, r18
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	82 1b       	sub	r24, r18
     fa0:	93 0b       	sbc	r25, r19
     fa2:	fc 01       	movw	r30, r24
     fa4:	eb 5e       	subi	r30, 0xEB	; 235
     fa6:	fd 4f       	sbci	r31, 0xFD	; 253
     fa8:	01 90       	ld	r0, Z+
     faa:	f0 81       	ld	r31, Z
     fac:	e0 2d       	mov	r30, r0
     fae:	09 95       	icall
     fb0:	1f c0       	rjmp	.+62     	; 0xff0 <Scheduler+0x102>
            } else {
                OS_Tasks[i].InitialDelay--;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	c9 01       	movw	r24, r18
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	82 1b       	sub	r24, r18
     fc8:	93 0b       	sbc	r25, r19
     fca:	fc 01       	movw	r30, r24
     fcc:	ef 5e       	subi	r30, 0xEF	; 239
     fce:	fd 4f       	sbci	r31, 0xFD	; 253
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	41 50       	subi	r20, 0x01	; 1
     fd6:	c9 01       	movw	r24, r18
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	82 1b       	sub	r24, r18
     fe6:	93 0b       	sbc	r25, r19
     fe8:	fc 01       	movw	r30, r24
     fea:	ef 5e       	subi	r30, 0xEF	; 239
     fec:	fd 4f       	sbci	r31, 0xFD	; 253
     fee:	40 83       	st	Z, r20
Task OS_Tasks[OS_NUMBER_OF_TASKS];

u32 TickCount = 0;

void Scheduler(void) {
    for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	84 30       	cpi	r24, 0x04	; 4
     ffa:	08 f4       	brcc	.+2      	; 0xffe <Scheduler+0x110>
     ffc:	7f cf       	rjmp	.-258    	; 0xefc <Scheduler+0xe>
            } else {
                OS_Tasks[i].InitialDelay--;
            }
        }
    }
    TickCount++;
     ffe:	80 91 e2 01 	lds	r24, 0x01E2
    1002:	90 91 e3 01 	lds	r25, 0x01E3
    1006:	a0 91 e4 01 	lds	r26, 0x01E4
    100a:	b0 91 e5 01 	lds	r27, 0x01E5
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	a1 1d       	adc	r26, r1
    1012:	b1 1d       	adc	r27, r1
    1014:	80 93 e2 01 	sts	0x01E2, r24
    1018:	90 93 e3 01 	sts	0x01E3, r25
    101c:	a0 93 e4 01 	sts	0x01E4, r26
    1020:	b0 93 e5 01 	sts	0x01E5, r27
}
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <OS_voidCreateTask>:

/*
 * OS_voidCreateTask
 */
void OS_voidCreateTask(u8 Copy_u8ID, u16 Copy_u8Periodicity, u16 Copy_u8InitialDelay, void (*ptr)(void)) {
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	27 97       	sbiw	r28, 0x07	; 7
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	7b 83       	std	Y+3, r23	; 0x03
    1044:	6a 83       	std	Y+2, r22	; 0x02
    1046:	5d 83       	std	Y+5, r21	; 0x05
    1048:	4c 83       	std	Y+4, r20	; 0x04
    104a:	3f 83       	std	Y+7, r19	; 0x07
    104c:	2e 83       	std	Y+6, r18	; 0x06
    OS_Tasks[Copy_u8ID].Fptr = ptr;
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	c9 01       	movw	r24, r18
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	82 1b       	sub	r24, r18
    1064:	93 0b       	sbc	r25, r19
    1066:	fc 01       	movw	r30, r24
    1068:	eb 5e       	subi	r30, 0xEB	; 235
    106a:	fd 4f       	sbci	r31, 0xFD	; 253
    106c:	8e 81       	ldd	r24, Y+6	; 0x06
    106e:	9f 81       	ldd	r25, Y+7	; 0x07
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    OS_Tasks[Copy_u8ID].InitialDelay = Copy_u8InitialDelay;
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4c 81       	ldd	r20, Y+4	; 0x04
    107c:	c9 01       	movw	r24, r18
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	82 1b       	sub	r24, r18
    108c:	93 0b       	sbc	r25, r19
    108e:	fc 01       	movw	r30, r24
    1090:	ef 5e       	subi	r30, 0xEF	; 239
    1092:	fd 4f       	sbci	r31, 0xFD	; 253
    1094:	40 83       	st	Z, r20
    OS_Tasks[Copy_u8ID].Periodicity = Copy_u8Periodicity;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	4a 81       	ldd	r20, Y+2	; 0x02
    109e:	c9 01       	movw	r24, r18
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	82 1b       	sub	r24, r18
    10ae:	93 0b       	sbc	r25, r19
    10b0:	fc 01       	movw	r30, r24
    10b2:	e0 5f       	subi	r30, 0xF0	; 240
    10b4:	fd 4f       	sbci	r31, 0xFD	; 253
    10b6:	40 83       	st	Z, r20
    OS_Tasks[Copy_u8ID].State = OS_TASK_READY;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	c9 01       	movw	r24, r18
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	82 1b       	sub	r24, r18
    10ce:	93 0b       	sbc	r25, r19
    10d0:	fc 01       	movw	r30, r24
    10d2:	ed 5e       	subi	r30, 0xED	; 237
    10d4:	fd 4f       	sbci	r31, 0xFD	; 253
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	80 83       	st	Z, r24
    OS_Tasks[Copy_u8ID].TaskID = Copy_u8ID;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	c9 01       	movw	r24, r18
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	82 1b       	sub	r24, r18
    10f0:	93 0b       	sbc	r25, r19
    10f2:	fc 01       	movw	r30, r24
    10f4:	ee 5e       	subi	r30, 0xEE	; 238
    10f6:	fd 4f       	sbci	r31, 0xFD	; 253
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	80 83       	st	Z, r24
}
    10fc:	27 96       	adiw	r28, 0x07	; 7
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <OS_voidDeleteTask>:

/*
 * OS_voidDeleteTask
 */
void OS_voidDeleteTask(u8 Copy_u8ID) {
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	89 83       	std	Y+1, r24	; 0x01
    OS_Tasks[Copy_u8ID].State = OS_TASK_DELETED;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	c9 01       	movw	r24, r18
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	82 1b       	sub	r24, r18
    1130:	93 0b       	sbc	r25, r19
    1132:	fc 01       	movw	r30, r24
    1134:	ed 5e       	subi	r30, 0xED	; 237
    1136:	fd 4f       	sbci	r31, 0xFD	; 253
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	80 83       	st	Z, r24
}
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <OS_voidSuspendTask>:

/*
 * OS_voidSuspendTask
 */
void OS_voidSuspendTask(u8 Copy_u8ID, u8 Copy_u8SuspendTime) {
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <OS_voidSuspendTask+0x6>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	6a 83       	std	Y+2, r22	; 0x02
    OS_Tasks[Copy_u8ID].State = OS_TASK_SUSPENDED;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	c9 01       	movw	r24, r18
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	82 1b       	sub	r24, r18
    1168:	93 0b       	sbc	r25, r19
    116a:	fc 01       	movw	r30, r24
    116c:	ed 5e       	subi	r30, 0xED	; 237
    116e:	fd 4f       	sbci	r31, 0xFD	; 253
    1170:	10 82       	st	Z, r1
    OS_Tasks[Copy_u8ID].SuspendTime = Copy_u8SuspendTime + TickCount;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	80 91 e2 01 	lds	r24, 0x01E2
    117c:	90 91 e3 01 	lds	r25, 0x01E3
    1180:	a0 91 e4 01 	lds	r26, 0x01E4
    1184:	b0 91 e5 01 	lds	r27, 0x01E5
    1188:	98 2f       	mov	r25, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	49 2f       	mov	r20, r25
    118e:	48 0f       	add	r20, r24
    1190:	c9 01       	movw	r24, r18
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	82 1b       	sub	r24, r18
    11a0:	93 0b       	sbc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	ec 5e       	subi	r30, 0xEC	; 236
    11a6:	fd 4f       	sbci	r31, 0xFD	; 253
    11a8:	40 83       	st	Z, r20
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <OS_voidStartScheduler>:

/*
 * OS_voidStartScheduler
 */
void OS_voidStartScheduler(void) {
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    // Initialize Timer/Counter 2
    TMR2_voidInit();
    11bc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <TMR2_voidInit>

    // Start Timer/Counter 2
    TMR2_voidStart();
    11c0:	0e 94 6f 0a 	call	0x14de	; 0x14de <TMR2_voidStart>

    // Set a callback function to be called on Timer/Counter 2 overflow
    TMR2_voidSetCallBackOVF(Scheduler);
    11c4:	87 e7       	ldi	r24, 0x77	; 119
    11c6:	97 e0       	ldi	r25, 0x07	; 7
    11c8:	0e 94 a7 0a 	call	0x154e	; 0x154e <TMR2_voidSetCallBackOVF>
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <OS_voidResumeTask>:

/*
 * OS_voidResumeTask
 */
void OS_voidResumeTask(u8 Copy_u8ID) {
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	89 83       	std	Y+1, r24	; 0x01
    OS_Tasks[Copy_u8ID].State = OS_TASK_READY;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	c9 01       	movw	r24, r18
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	82 1b       	sub	r24, r18
    11f4:	93 0b       	sbc	r25, r19
    11f6:	fc 01       	movw	r30, r24
    11f8:	ed 5e       	subi	r30, 0xED	; 237
    11fa:	fd 4f       	sbci	r31, 0xFD	; 253
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 83       	st	Z, r24
}
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <OS_u8GetTaskState>:

/*
 * OS_u8GetTaskState
 */
u8 OS_u8GetTaskState(u8 Copy_u8ID) {
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    return OS_Tasks[Copy_u8ID].State;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	c9 01       	movw	r24, r18
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	82 1b       	sub	r24, r18
    122a:	93 0b       	sbc	r25, r19
    122c:	fc 01       	movw	r30, r24
    122e:	ed 5e       	subi	r30, 0xED	; 237
    1230:	fd 4f       	sbci	r31, 0xFD	; 253
    1232:	80 81       	ld	r24, Z
}
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <WDT_voidEnable>:
 * Description: Enables the Watchdog Timer (WDT) with the specified overflow time.
 * Parameters:
 *   - copy_u8Time: Time for WDT overflow, should be one of the WDT_TIME_X_X_MS options.
 */
void WDT_voidEnable(u8 copy_u8Time)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <WDT_voidEnable+0x6>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8Time)
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3b 83       	std	Y+3, r19	; 0x03
    1252:	2a 83       	std	Y+2, r18	; 0x02
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	9b 81       	ldd	r25, Y+3	; 0x03
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	91 05       	cpc	r25, r1
    125c:	09 f4       	brne	.+2      	; 0x1260 <WDT_voidEnable+0x24>
    125e:	71 c0       	rjmp	.+226    	; 0x1342 <WDT_voidEnable+0x106>
    1260:	2a 81       	ldd	r18, Y+2	; 0x02
    1262:	3b 81       	ldd	r19, Y+3	; 0x03
    1264:	25 30       	cpi	r18, 0x05	; 5
    1266:	31 05       	cpc	r19, r1
    1268:	8c f4       	brge	.+34     	; 0x128c <WDT_voidEnable+0x50>
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	9b 81       	ldd	r25, Y+3	; 0x03
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	91 05       	cpc	r25, r1
    1272:	d9 f1       	breq	.+118    	; 0x12ea <WDT_voidEnable+0xae>
    1274:	2a 81       	ldd	r18, Y+2	; 0x02
    1276:	3b 81       	ldd	r19, Y+3	; 0x03
    1278:	23 30       	cpi	r18, 0x03	; 3
    127a:	31 05       	cpc	r19, r1
    127c:	0c f0       	brlt	.+2      	; 0x1280 <WDT_voidEnable+0x44>
    127e:	4b c0       	rjmp	.+150    	; 0x1316 <WDT_voidEnable+0xda>
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	d1 f0       	breq	.+52     	; 0x12be <WDT_voidEnable+0x82>
    128a:	c8 c0       	rjmp	.+400    	; 0x141c <WDT_voidEnable+0x1e0>
    128c:	2a 81       	ldd	r18, Y+2	; 0x02
    128e:	3b 81       	ldd	r19, Y+3	; 0x03
    1290:	26 30       	cpi	r18, 0x06	; 6
    1292:	31 05       	cpc	r19, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <WDT_voidEnable+0x5c>
    1296:	81 c0       	rjmp	.+258    	; 0x139a <WDT_voidEnable+0x15e>
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	9b 81       	ldd	r25, Y+3	; 0x03
    129c:	86 30       	cpi	r24, 0x06	; 6
    129e:	91 05       	cpc	r25, r1
    12a0:	0c f4       	brge	.+2      	; 0x12a4 <WDT_voidEnable+0x68>
    12a2:	65 c0       	rjmp	.+202    	; 0x136e <WDT_voidEnable+0x132>
    12a4:	2a 81       	ldd	r18, Y+2	; 0x02
    12a6:	3b 81       	ldd	r19, Y+3	; 0x03
    12a8:	27 30       	cpi	r18, 0x07	; 7
    12aa:	31 05       	cpc	r19, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <WDT_voidEnable+0x74>
    12ae:	8b c0       	rjmp	.+278    	; 0x13c6 <WDT_voidEnable+0x18a>
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	88 30       	cpi	r24, 0x08	; 8
    12b6:	91 05       	cpc	r25, r1
    12b8:	09 f4       	brne	.+2      	; 0x12bc <WDT_voidEnable+0x80>
    12ba:	9b c0       	rjmp	.+310    	; 0x13f2 <WDT_voidEnable+0x1b6>
    12bc:	af c0       	rjmp	.+350    	; 0x141c <WDT_voidEnable+0x1e0>
    {
    // Select overflow time as 16.3ms
    case WDT_TIME_16_3_MS:
        CLR_BIT(WDTCR, WDP0);
    12be:	a1 e4       	ldi	r26, 0x41	; 65
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e1 e4       	ldi	r30, 0x41	; 65
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8e 7f       	andi	r24, 0xFE	; 254
    12ca:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    12cc:	a1 e4       	ldi	r26, 0x41	; 65
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e1 e4       	ldi	r30, 0x41	; 65
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8d 7f       	andi	r24, 0xFD	; 253
    12d8:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    12da:	a1 e4       	ldi	r26, 0x41	; 65
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e1 e4       	ldi	r30, 0x41	; 65
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8b 7f       	andi	r24, 0xFB	; 251
    12e6:	8c 93       	st	X, r24
    12e8:	99 c0       	rjmp	.+306    	; 0x141c <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 32.5ms
    case WDT_TIME_32_5_MS:
        SET_BIT(WDTCR, WDP0);
    12ea:	a1 e4       	ldi	r26, 0x41	; 65
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e1 e4       	ldi	r30, 0x41	; 65
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	81 60       	ori	r24, 0x01	; 1
    12f6:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    12f8:	a1 e4       	ldi	r26, 0x41	; 65
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e1 e4       	ldi	r30, 0x41	; 65
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8d 7f       	andi	r24, 0xFD	; 253
    1304:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    1306:	a1 e4       	ldi	r26, 0x41	; 65
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e1 e4       	ldi	r30, 0x41	; 65
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8b 7f       	andi	r24, 0xFB	; 251
    1312:	8c 93       	st	X, r24
    1314:	83 c0       	rjmp	.+262    	; 0x141c <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 65ms
    case WDT_TIME_65_MS:
        CLR_BIT(WDTCR, WDP0);
    1316:	a1 e4       	ldi	r26, 0x41	; 65
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e1 e4       	ldi	r30, 0x41	; 65
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8e 7f       	andi	r24, 0xFE	; 254
    1322:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1324:	a1 e4       	ldi	r26, 0x41	; 65
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e1 e4       	ldi	r30, 0x41	; 65
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	82 60       	ori	r24, 0x02	; 2
    1330:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    1332:	a1 e4       	ldi	r26, 0x41	; 65
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e1 e4       	ldi	r30, 0x41	; 65
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	8b 7f       	andi	r24, 0xFB	; 251
    133e:	8c 93       	st	X, r24
    1340:	6d c0       	rjmp	.+218    	; 0x141c <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.13s
    case WDT_TIME_0_13_S:
        SET_BIT(WDTCR, WDP0);
    1342:	a1 e4       	ldi	r26, 0x41	; 65
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e1 e4       	ldi	r30, 0x41	; 65
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	81 60       	ori	r24, 0x01	; 1
    134e:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1350:	a1 e4       	ldi	r26, 0x41	; 65
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e4       	ldi	r30, 0x41	; 65
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	82 60       	ori	r24, 0x02	; 2
    135c:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    135e:	a1 e4       	ldi	r26, 0x41	; 65
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e1 e4       	ldi	r30, 0x41	; 65
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8b 7f       	andi	r24, 0xFB	; 251
    136a:	8c 93       	st	X, r24
    136c:	57 c0       	rjmp	.+174    	; 0x141c <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.26s
    case WDT_TIME_0_26_S:
        CLR_BIT(WDTCR, WDP0);
    136e:	a1 e4       	ldi	r26, 0x41	; 65
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e1 e4       	ldi	r30, 0x41	; 65
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8e 7f       	andi	r24, 0xFE	; 254
    137a:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    137c:	a1 e4       	ldi	r26, 0x41	; 65
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e1 e4       	ldi	r30, 0x41	; 65
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	8d 7f       	andi	r24, 0xFD	; 253
    1388:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    138a:	a1 e4       	ldi	r26, 0x41	; 65
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e1 e4       	ldi	r30, 0x41	; 65
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	84 60       	ori	r24, 0x04	; 4
    1396:	8c 93       	st	X, r24
    1398:	41 c0       	rjmp	.+130    	; 0x141c <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.52s
    case WDT_TIME_0_52_S:
        SET_BIT(WDTCR, WDP0);
    139a:	a1 e4       	ldi	r26, 0x41	; 65
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e1 e4       	ldi	r30, 0x41	; 65
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    13a8:	a1 e4       	ldi	r26, 0x41	; 65
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e1 e4       	ldi	r30, 0x41	; 65
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8d 7f       	andi	r24, 0xFD	; 253
    13b4:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    13b6:	a1 e4       	ldi	r26, 0x41	; 65
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e1 e4       	ldi	r30, 0x41	; 65
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	84 60       	ori	r24, 0x04	; 4
    13c2:	8c 93       	st	X, r24
    13c4:	2b c0       	rjmp	.+86     	; 0x141c <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 1s
    case WDT_TIME_1_S:
        CLR_BIT(WDTCR, WDP0);
    13c6:	a1 e4       	ldi	r26, 0x41	; 65
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e1 e4       	ldi	r30, 0x41	; 65
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8e 7f       	andi	r24, 0xFE	; 254
    13d2:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    13d4:	a1 e4       	ldi	r26, 0x41	; 65
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e1 e4       	ldi	r30, 0x41	; 65
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	82 60       	ori	r24, 0x02	; 2
    13e0:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    13e2:	a1 e4       	ldi	r26, 0x41	; 65
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e1 e4       	ldi	r30, 0x41	; 65
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	84 60       	ori	r24, 0x04	; 4
    13ee:	8c 93       	st	X, r24
    13f0:	15 c0       	rjmp	.+42     	; 0x141c <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 2.1s
    case WDT_TIME_2_1_S:
        SET_BIT(WDTCR, WDP0);
    13f2:	a1 e4       	ldi	r26, 0x41	; 65
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e1 e4       	ldi	r30, 0x41	; 65
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	81 60       	ori	r24, 0x01	; 1
    13fe:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1400:	a1 e4       	ldi	r26, 0x41	; 65
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e1 e4       	ldi	r30, 0x41	; 65
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	82 60       	ori	r24, 0x02	; 2
    140c:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    140e:	a1 e4       	ldi	r26, 0x41	; 65
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e1 e4       	ldi	r30, 0x41	; 65
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	84 60       	ori	r24, 0x04	; 4
    141a:	8c 93       	st	X, r24

    default:
        break;
    }
    //enable watch dog
    SET_BIT(WDTCR , WDE);
    141c:	a1 e4       	ldi	r26, 0x41	; 65
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e1 e4       	ldi	r30, 0x41	; 65
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	88 60       	ori	r24, 0x08	; 8
    1428:	8c 93       	st	X, r24
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <WDT_voidDisable>:
/*
 * Function: WDT_voidDisable
 * Description: Disables the Watchdog Timer (WDT).
 */
void WDT_voidDisable(void)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE) | (1<<WDE);
    143e:	e1 e4       	ldi	r30, 0x41	; 65
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	88 e1       	ldi	r24, 0x18	; 24
    1444:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
    1446:	e1 e4       	ldi	r30, 0x41	; 65
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	10 82       	st	Z, r1
}
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <TMR2_voidSetDelay_ms_usingCTC+0x6>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
    1460:	e3 e4       	ldi	r30, 0x43	; 67
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	89 ef       	ldi	r24, 0xF9	; 249
    1466:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	cc 01       	movw	r24, r24
    146e:	a0 e0       	ldi	r26, 0x00	; 0
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	80 93 f0 01 	sts	0x01F0, r24
    1476:	90 93 f1 01 	sts	0x01F1, r25
    147a:	a0 93 f2 01 	sts	0x01F2, r26
    147e:	b0 93 f3 01 	sts	0x01F3, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	// Enable Output Compare Match Interrupt (OCI)
	SET_BIT(TIMSK, OCIE2);

#elif TMR2_MODE == TMR2_NORMAL_MODE
	// Select normal mode
	CLR_BIT(TCCR2, WGM20);
    14a8:	a5 e4       	ldi	r26, 0x45	; 69
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e4       	ldi	r30, 0x45	; 69
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 7b       	andi	r24, 0xBF	; 191
    14b4:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM21);
    14b6:	a5 e4       	ldi	r26, 0x45	; 69
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e4       	ldi	r30, 0x45	; 69
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	87 7f       	andi	r24, 0xF7	; 247
    14c2:	8c 93       	st	X, r24
	// Initialize timer with a preload value
	TCNT2 = TMR2_PRELOAD_VALUE;
    14c4:	e4 e4       	ldi	r30, 0x44	; 68
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	10 82       	st	Z, r1
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);
    14ca:	a9 e5       	ldi	r26, 0x59	; 89
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e9 e5       	ldi	r30, 0x59	; 89
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	80 64       	ori	r24, 0x40	; 64
    14d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    14e6:	a5 e4       	ldi	r26, 0x45	; 69
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e4       	ldi	r30, 0x45	; 69
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	81 60       	ori	r24, 0x01	; 1
    14f2:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    14f4:	a5 e4       	ldi	r26, 0x45	; 69
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e4       	ldi	r30, 0x45	; 69
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	82 60       	ori	r24, 0x02	; 2
    1500:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    1502:	a5 e4       	ldi	r26, 0x45	; 69
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e4       	ldi	r30, 0x45	; 69
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8b 7f       	andi	r24, 0xFB	; 251
    150e:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    151e:	a5 e4       	ldi	r26, 0x45	; 69
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e4       	ldi	r30, 0x45	; 69
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8e 7f       	andi	r24, 0xFE	; 254
    152a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    152c:	a5 e4       	ldi	r26, 0x45	; 69
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e4       	ldi	r30, 0x45	; 69
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8d 7f       	andi	r24, 0xFD	; 253
    1538:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    153a:	a5 e4       	ldi	r26, 0x45	; 69
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e4       	ldi	r30, 0x45	; 69
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8b 7f       	andi	r24, 0xFB	; 251
    1546:	8c 93       	st	X, r24
}
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <TMR2_voidSetCallBackOVF+0x6>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	31 f0       	breq	.+12     	; 0x1570 <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	90 93 e7 01 	sts	0x01E7, r25
    156c:	80 93 e6 01 	sts	0x01E6, r24
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <TMR2_voidSetCallBackCTC+0x6>
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	31 f0       	breq	.+12     	; 0x159c <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	90 93 e9 01 	sts	0x01E9, r25
    1598:	80 93 e8 01 	sts	0x01E8, r24
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	2f 93       	push	r18
    15b2:	3f 93       	push	r19
    15b4:	4f 93       	push	r20
    15b6:	5f 93       	push	r21
    15b8:	6f 93       	push	r22
    15ba:	7f 93       	push	r23
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
    15c0:	af 93       	push	r26
    15c2:	bf 93       	push	r27
    15c4:	ef 93       	push	r30
    15c6:	ff 93       	push	r31
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    15d0:	80 91 ea 01 	lds	r24, 0x01EA
    15d4:	90 91 eb 01 	lds	r25, 0x01EB
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	90 93 eb 01 	sts	0x01EB, r25
    15de:	80 93 ea 01 	sts	0x01EA, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    15e2:	80 91 ea 01 	lds	r24, 0x01EA
    15e6:	90 91 eb 01 	lds	r25, 0x01EB
    15ea:	86 30       	cpi	r24, 0x06	; 6
    15ec:	91 05       	cpc	r25, r1
    15ee:	91 f4       	brne	.+36     	; 0x1614 <__vector_5+0x6e>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    15f0:	e4 e4       	ldi	r30, 0x44	; 68
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	10 82       	st	Z, r1
		// Clear the counter
		local_u16ovCounter = 0;
    15f6:	10 92 eb 01 	sts	0x01EB, r1
    15fa:	10 92 ea 01 	sts	0x01EA, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    15fe:	80 91 e6 01 	lds	r24, 0x01E6
    1602:	90 91 e7 01 	lds	r25, 0x01E7
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	29 f0       	breq	.+10     	; 0x1614 <__vector_5+0x6e>
			TMR2_privatePtrToCAllBackOVF();
    160a:	e0 91 e6 01 	lds	r30, 0x01E6
    160e:	f0 91 e7 01 	lds	r31, 0x01E7
    1612:	09 95       	icall
		}
	}
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	ff 91       	pop	r31
    161a:	ef 91       	pop	r30
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1664:	80 91 ec 01 	lds	r24, 0x01EC
    1668:	90 91 ed 01 	lds	r25, 0x01ED
    166c:	a0 91 ee 01 	lds	r26, 0x01EE
    1670:	b0 91 ef 01 	lds	r27, 0x01EF
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	a1 1d       	adc	r26, r1
    1678:	b1 1d       	adc	r27, r1
    167a:	80 93 ec 01 	sts	0x01EC, r24
    167e:	90 93 ed 01 	sts	0x01ED, r25
    1682:	a0 93 ee 01 	sts	0x01EE, r26
    1686:	b0 93 ef 01 	sts	0x01EF, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    168a:	20 91 f0 01 	lds	r18, 0x01F0
    168e:	30 91 f1 01 	lds	r19, 0x01F1
    1692:	40 91 f2 01 	lds	r20, 0x01F2
    1696:	50 91 f3 01 	lds	r21, 0x01F3
    169a:	80 91 ec 01 	lds	r24, 0x01EC
    169e:	90 91 ed 01 	lds	r25, 0x01ED
    16a2:	a0 91 ee 01 	lds	r26, 0x01EE
    16a6:	b0 91 ef 01 	lds	r27, 0x01EF
    16aa:	28 17       	cp	r18, r24
    16ac:	39 07       	cpc	r19, r25
    16ae:	4a 07       	cpc	r20, r26
    16b0:	5b 07       	cpc	r21, r27
    16b2:	99 f4       	brne	.+38     	; 0x16da <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    16b4:	10 92 ec 01 	sts	0x01EC, r1
    16b8:	10 92 ed 01 	sts	0x01ED, r1
    16bc:	10 92 ee 01 	sts	0x01EE, r1
    16c0:	10 92 ef 01 	sts	0x01EF, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    16c4:	80 91 e8 01 	lds	r24, 0x01E8
    16c8:	90 91 e9 01 	lds	r25, 0x01E9
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	29 f0       	breq	.+10     	; 0x16da <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    16d0:	e0 91 e8 01 	lds	r30, 0x01E8
    16d4:	f0 91 e9 01 	lds	r31, 0x01E9
    16d8:	09 95       	icall
		}
	}
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	0f 90       	pop	r0
    16fc:	1f 90       	pop	r1
    16fe:	18 95       	reti

00001700 <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	0f 92       	push	r0
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    170c:	e3 e4       	ldi	r30, 0x43	; 67
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	80 83       	st	Z, r24
}
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    172e:	06 e4       	ldi	r16, 0x46	; 70
    1730:	10 e0       	ldi	r17, 0x00	; 0
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	9c 01       	movw	r18, r24
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	80 e9       	ldi	r24, 0x90	; 144
    173e:	90 ed       	ldi	r25, 0xD0	; 208
    1740:	a3 e0       	ldi	r26, 0x03	; 3
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	0e 94 40 22 	call	0x4480	; 0x4480 <__udivmodsi4>
    174c:	da 01       	movw	r26, r20
    174e:	c9 01       	movw	r24, r18
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f8 01       	movw	r30, r16
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	08 95       	ret

00001766 <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	69 83       	std	Y+1, r22	; 0x01
    1778:	7a 83       	std	Y+2, r23	; 0x02
    177a:	8b 83       	std	Y+3, r24	; 0x03
    177c:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    177e:	69 81       	ldd	r22, Y+1	; 0x01
    1780:	7a 81       	ldd	r23, Y+2	; 0x02
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	48 ec       	ldi	r20, 0xC8	; 200
    178c:	52 e4       	ldi	r21, 0x42	; 66
    178e:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    1792:	18 16       	cp	r1, r24
    1794:	0c f4       	brge	.+2      	; 0x1798 <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    1796:	48 c0       	rjmp	.+144    	; 0x1828 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    1798:	69 81       	ldd	r22, Y+1	; 0x01
    179a:	7a 81       	ldd	r23, Y+2	; 0x02
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	29 f4       	brne	.+10     	; 0x17ba <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    17b0:	ea e4       	ldi	r30, 0x4A	; 74
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	11 82       	std	Z+1, r1	; 0x01
    17b6:	10 82       	st	Z, r1
    17b8:	37 c0       	rjmp	.+110    	; 0x1828 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    17ba:	0a e4       	ldi	r16, 0x4A	; 74
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	e6 e4       	ldi	r30, 0x46	; 70
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	cc 01       	movw	r24, r24
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	29 81       	ldd	r18, Y+1	; 0x01
    17e0:	3a 81       	ldd	r19, Y+2	; 0x02
    17e2:	4b 81       	ldd	r20, Y+3	; 0x03
    17e4:	5c 81       	ldd	r21, Y+4	; 0x04
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	48 ec       	ldi	r20, 0xC8	; 200
    17f8:	52 e4       	ldi	r21, 0x42	; 66
    17fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	f8 01       	movw	r30, r16
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	08 95       	ret

0000183a <TMR1_voidInit>:


void TMR1_voidInit(void) {
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    1842:	af e4       	ldi	r26, 0x4F	; 79
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e4       	ldi	r30, 0x4F	; 79
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    1850:	af e4       	ldi	r26, 0x4F	; 79
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ef e4       	ldi	r30, 0x4F	; 79
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	82 60       	ori	r24, 0x02	; 2
    185c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    185e:	ae e4       	ldi	r26, 0x4E	; 78
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	ee e4       	ldi	r30, 0x4E	; 78
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	88 60       	ori	r24, 0x08	; 8
    186a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    186c:	ae e4       	ldi	r26, 0x4E	; 78
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	ee e4       	ldi	r30, 0x4E	; 78
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 61       	ori	r24, 0x10	; 16
    1878:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    187a:	af e4       	ldi	r26, 0x4F	; 79
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	ef e4       	ldi	r30, 0x4F	; 79
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8f 7b       	andi	r24, 0xBF	; 191
    1886:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1888:	af e4       	ldi	r26, 0x4F	; 79
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ef e4       	ldi	r30, 0x4F	; 79
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	80 68       	ori	r24, 0x80	; 128
    1894:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
#endif
	//TMR1_voidSetFrequencyMode14FastPWM(50);

#endif
}
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <TMR1_voidSetCompareMatchValueA+0x6>
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    18aa:	ea e4       	ldi	r30, 0x4A	; 74
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    18c8:	ae e4       	ldi	r26, 0x4E	; 78
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ee e4       	ldi	r30, 0x4E	; 78
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	81 60       	ori	r24, 0x01	; 1
    18d4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    18d6:	ae e4       	ldi	r26, 0x4E	; 78
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	ee e4       	ldi	r30, 0x4E	; 78
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	82 60       	ori	r24, 0x02	; 2
    18e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    18e4:	ae e4       	ldi	r26, 0x4E	; 78
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	ee e4       	ldi	r30, 0x4E	; 78
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	8b 7f       	andi	r24, 0xFB	; 251
    18f0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    1900:	ae e4       	ldi	r26, 0x4E	; 78
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	ee e4       	ldi	r30, 0x4E	; 78
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8e 7f       	andi	r24, 0xFE	; 254
    190c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    190e:	ae e4       	ldi	r26, 0x4E	; 78
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ee e4       	ldi	r30, 0x4E	; 78
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    191c:	ae e4       	ldi	r26, 0x4E	; 78
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	ee e4       	ldi	r30, 0x4E	; 78
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	8b 7f       	andi	r24, 0xFB	; 251
    1928:	8c 93       	st	X, r24
}
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    193e:	ec e5       	ldi	r30, 0x5C	; 92
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	89 ef       	ldi	r24, 0xF9	; 249
    1944:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	cc 01       	movw	r24, r24
    194c:	a0 e0       	ldi	r26, 0x00	; 0
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	80 93 fe 01 	sts	0x01FE, r24
    1954:	90 93 ff 01 	sts	0x01FF, r25
    1958:	a0 93 00 02 	sts	0x0200, r26
    195c:	b0 93 01 02 	sts	0x0201, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	85 36       	cpi	r24, 0x65	; 101
    197a:	d0 f4       	brcc	.+52     	; 0x19b0 <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    197c:	ec e5       	ldi	r30, 0x5C	; 92
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	48 2f       	mov	r20, r24
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	ca 01       	movw	r24, r20
    1988:	9c 01       	movw	r18, r24
    198a:	22 0f       	add	r18, r18
    198c:	33 1f       	adc	r19, r19
    198e:	c9 01       	movw	r24, r18
    1990:	96 95       	lsr	r25
    1992:	98 2f       	mov	r25, r24
    1994:	88 27       	eor	r24, r24
    1996:	97 95       	ror	r25
    1998:	87 95       	ror	r24
    199a:	82 1b       	sub	r24, r18
    199c:	93 0b       	sbc	r25, r19
    199e:	84 0f       	add	r24, r20
    19a0:	95 1f       	adc	r25, r21
    19a2:	24 e6       	ldi	r18, 0x64	; 100
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	b9 01       	movw	r22, r18
    19a8:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodhi4>
    19ac:	cb 01       	movw	r24, r22
    19ae:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    19c0:	a3 e5       	ldi	r26, 0x53	; 83
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e3 e5       	ldi	r30, 0x53	; 83
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 64       	ori	r24, 0x40	; 64
    19cc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    19ce:	a3 e5       	ldi	r26, 0x53	; 83
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e3 e5       	ldi	r30, 0x53	; 83
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	87 7f       	andi	r24, 0xF7	; 247
    19da:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    19dc:	a3 e5       	ldi	r26, 0x53	; 83
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e3 e5       	ldi	r30, 0x53	; 83
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 7e       	andi	r24, 0xEF	; 239
    19e8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    19ea:	a3 e5       	ldi	r26, 0x53	; 83
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e3 e5       	ldi	r30, 0x53	; 83
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	80 62       	ori	r24, 0x20	; 32
    19f6:	8c 93       	st	X, r24
#endif

#endif
}
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    1a06:	a3 e5       	ldi	r26, 0x53	; 83
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e3 e5       	ldi	r30, 0x53	; 83
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	81 60       	ori	r24, 0x01	; 1
    1a12:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1a14:	a3 e5       	ldi	r26, 0x53	; 83
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e3 e5       	ldi	r30, 0x53	; 83
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1a22:	a3 e5       	ldi	r26, 0x53	; 83
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e3 e5       	ldi	r30, 0x53	; 83
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8b 7f       	andi	r24, 0xFB	; 251
    1a2e:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    1a3e:	a3 e5       	ldi	r26, 0x53	; 83
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e3 e5       	ldi	r30, 0x53	; 83
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8e 7f       	andi	r24, 0xFE	; 254
    1a4a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1a4c:	a3 e5       	ldi	r26, 0x53	; 83
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e3 e5       	ldi	r30, 0x53	; 83
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	8d 7f       	andi	r24, 0xFD	; 253
    1a58:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1a5a:	a3 e5       	ldi	r26, 0x53	; 83
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e3 e5       	ldi	r30, 0x53	; 83
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	8b 7f       	andi	r24, 0xFB	; 251
    1a66:	8c 93       	st	X, r24
}
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <TMR0_voidSetCallBackOVF+0x6>
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	31 f0       	breq	.+12     	; 0x1a90 <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	90 93 f5 01 	sts	0x01F5, r25
    1a8c:	80 93 f4 01 	sts	0x01F4, r24
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <TMR0_voidSetCallBackCTC+0x6>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	31 f0       	breq	.+12     	; 0x1abc <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	90 93 f7 01 	sts	0x01F7, r25
    1ab8:	80 93 f6 01 	sts	0x01F6, r24
}
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1ac6:	1f 92       	push	r1
    1ac8:	0f 92       	push	r0
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	0f 92       	push	r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	2f 93       	push	r18
    1ad2:	3f 93       	push	r19
    1ad4:	4f 93       	push	r20
    1ad6:	5f 93       	push	r21
    1ad8:	6f 93       	push	r22
    1ada:	7f 93       	push	r23
    1adc:	8f 93       	push	r24
    1ade:	9f 93       	push	r25
    1ae0:	af 93       	push	r26
    1ae2:	bf 93       	push	r27
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    1af0:	80 91 f8 01 	lds	r24, 0x01F8
    1af4:	90 91 f9 01 	lds	r25, 0x01F9
    1af8:	01 96       	adiw	r24, 0x01	; 1
    1afa:	90 93 f9 01 	sts	0x01F9, r25
    1afe:	80 93 f8 01 	sts	0x01F8, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    1b02:	80 91 f8 01 	lds	r24, 0x01F8
    1b06:	90 91 f9 01 	lds	r25, 0x01F9
    1b0a:	23 e0       	ldi	r18, 0x03	; 3
    1b0c:	81 3d       	cpi	r24, 0xD1	; 209
    1b0e:	92 07       	cpc	r25, r18
    1b10:	99 f4       	brne	.+38     	; 0x1b38 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    1b12:	e2 e5       	ldi	r30, 0x52	; 82
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	81 e7       	ldi	r24, 0x71	; 113
    1b18:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    1b1a:	10 92 f9 01 	sts	0x01F9, r1
    1b1e:	10 92 f8 01 	sts	0x01F8, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    1b22:	80 91 f4 01 	lds	r24, 0x01F4
    1b26:	90 91 f5 01 	lds	r25, 0x01F5
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    1b2e:	e0 91 f4 01 	lds	r30, 0x01F4
    1b32:	f0 91 f5 01 	lds	r31, 0x01F5
    1b36:	09 95       	icall
		}
	}
}
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	ff 91       	pop	r31
    1b3e:	ef 91       	pop	r30
    1b40:	bf 91       	pop	r27
    1b42:	af 91       	pop	r26
    1b44:	9f 91       	pop	r25
    1b46:	8f 91       	pop	r24
    1b48:	7f 91       	pop	r23
    1b4a:	6f 91       	pop	r22
    1b4c:	5f 91       	pop	r21
    1b4e:	4f 91       	pop	r20
    1b50:	3f 91       	pop	r19
    1b52:	2f 91       	pop	r18
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	2f 93       	push	r18
    1b6a:	3f 93       	push	r19
    1b6c:	4f 93       	push	r20
    1b6e:	5f 93       	push	r21
    1b70:	6f 93       	push	r22
    1b72:	7f 93       	push	r23
    1b74:	8f 93       	push	r24
    1b76:	9f 93       	push	r25
    1b78:	af 93       	push	r26
    1b7a:	bf 93       	push	r27
    1b7c:	ef 93       	push	r30
    1b7e:	ff 93       	push	r31
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1b88:	80 91 fa 01 	lds	r24, 0x01FA
    1b8c:	90 91 fb 01 	lds	r25, 0x01FB
    1b90:	a0 91 fc 01 	lds	r26, 0x01FC
    1b94:	b0 91 fd 01 	lds	r27, 0x01FD
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	a1 1d       	adc	r26, r1
    1b9c:	b1 1d       	adc	r27, r1
    1b9e:	80 93 fa 01 	sts	0x01FA, r24
    1ba2:	90 93 fb 01 	sts	0x01FB, r25
    1ba6:	a0 93 fc 01 	sts	0x01FC, r26
    1baa:	b0 93 fd 01 	sts	0x01FD, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1bae:	20 91 fe 01 	lds	r18, 0x01FE
    1bb2:	30 91 ff 01 	lds	r19, 0x01FF
    1bb6:	40 91 00 02 	lds	r20, 0x0200
    1bba:	50 91 01 02 	lds	r21, 0x0201
    1bbe:	80 91 fa 01 	lds	r24, 0x01FA
    1bc2:	90 91 fb 01 	lds	r25, 0x01FB
    1bc6:	a0 91 fc 01 	lds	r26, 0x01FC
    1bca:	b0 91 fd 01 	lds	r27, 0x01FD
    1bce:	28 17       	cp	r18, r24
    1bd0:	39 07       	cpc	r19, r25
    1bd2:	4a 07       	cpc	r20, r26
    1bd4:	5b 07       	cpc	r21, r27
    1bd6:	99 f4       	brne	.+38     	; 0x1bfe <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1bd8:	10 92 fa 01 	sts	0x01FA, r1
    1bdc:	10 92 fb 01 	sts	0x01FB, r1
    1be0:	10 92 fc 01 	sts	0x01FC, r1
    1be4:	10 92 fd 01 	sts	0x01FD, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    1be8:	80 91 f6 01 	lds	r24, 0x01F6
    1bec:	90 91 f7 01 	lds	r25, 0x01F7
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	29 f0       	breq	.+10     	; 0x1bfe <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    1bf4:	e0 91 f6 01 	lds	r30, 0x01F6
    1bf8:	f0 91 f7 01 	lds	r31, 0x01F7
    1bfc:	09 95       	icall
		}
	}
}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	ff 91       	pop	r31
    1c04:	ef 91       	pop	r30
    1c06:	bf 91       	pop	r27
    1c08:	af 91       	pop	r26
    1c0a:	9f 91       	pop	r25
    1c0c:	8f 91       	pop	r24
    1c0e:	7f 91       	pop	r23
    1c10:	6f 91       	pop	r22
    1c12:	5f 91       	pop	r21
    1c14:	4f 91       	pop	r20
    1c16:	3f 91       	pop	r19
    1c18:	2f 91       	pop	r18
    1c1a:	0f 90       	pop	r0
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	0f 90       	pop	r0
    1c20:	1f 90       	pop	r1
    1c22:	18 95       	reti

00001c24 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	0f 92       	push	r0
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    1c30:	ec e5       	ldi	r30, 0x5C	; 92
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	80 83       	st	Z, r24
}
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <Port_Init+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <Port_Init+0x8>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <Port_Init+0xa>
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    1c52:	1a 82       	std	Y+2, r1	; 0x02
    1c54:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
    1c56:	1a 82       	std	Y+2, r1	; 0x02
    1c58:	19 82       	std	Y+1, r1	; 0x01
    1c5a:	ea c1       	rjmp	.+980    	; 0x2030 <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    1c5c:	29 81       	ldd	r18, Y+1	; 0x01
    1c5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c60:	c9 01       	movw	r24, r18
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	28 0f       	add	r18, r24
    1c68:	39 1f       	adc	r19, r25
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	fc 01       	movw	r30, r24
    1c70:	e2 0f       	add	r30, r18
    1c72:	f3 1f       	adc	r31, r19
    1c74:	80 81       	ld	r24, Z
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3e 83       	std	Y+6, r19	; 0x06
    1c7c:	2d 83       	std	Y+5, r18	; 0x05
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <Port_Init+0x4a>
    1c88:	85 c0       	rjmp	.+266    	; 0x1d94 <Port_Init+0x154>
    1c8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <Port_Init+0x5e>
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	71 f0       	breq	.+28     	; 0x1cb8 <Port_Init+0x78>
    1c9c:	c4 c1       	rjmp	.+904    	; 0x2026 <Port_Init+0x3e6>
    1c9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <Port_Init+0x6a>
    1ca8:	e3 c0       	rjmp	.+454    	; 0x1e70 <Port_Init+0x230>
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <Port_Init+0x76>
    1cb4:	4b c1       	rjmp	.+662    	; 0x1f4c <Port_Init+0x30c>
    1cb6:	b7 c1       	rjmp	.+878    	; 0x2026 <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1cb8:	29 81       	ldd	r18, Y+1	; 0x01
    1cba:	3a 81       	ldd	r19, Y+2	; 0x02
    1cbc:	c9 01       	movw	r24, r18
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	28 0f       	add	r18, r24
    1cc4:	39 1f       	adc	r19, r25
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	fc 01       	movw	r30, r24
    1ccc:	e2 0f       	add	r30, r18
    1cce:	f3 1f       	adc	r31, r19
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	01 f5       	brne	.+64     	; 0x1d16 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1cd6:	aa e3       	ldi	r26, 0x3A	; 58
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	ea e3       	ldi	r30, 0x3A	; 58
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	29 81       	ldd	r18, Y+1	; 0x01
    1ce4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	28 0f       	add	r18, r24
    1cee:	39 1f       	adc	r19, r25
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	e2 0f       	add	r30, r18
    1cf8:	f3 1f       	adc	r31, r19
    1cfa:	81 81       	ldd	r24, Z+1	; 0x01
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	02 2e       	mov	r0, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <Port_Init+0xcc>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <Port_Init+0xc8>
    1d10:	84 2b       	or	r24, r20
    1d12:	8c 93       	st	X, r24
    1d14:	88 c1       	rjmp	.+784    	; 0x2026 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1d16:	aa e3       	ldi	r26, 0x3A	; 58
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	ea e3       	ldi	r30, 0x3A	; 58
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	29 81       	ldd	r18, Y+1	; 0x01
    1d24:	3a 81       	ldd	r19, Y+2	; 0x02
    1d26:	c9 01       	movw	r24, r18
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	28 0f       	add	r18, r24
    1d2e:	39 1f       	adc	r19, r25
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	fc 01       	movw	r30, r24
    1d36:	e2 0f       	add	r30, r18
    1d38:	f3 1f       	adc	r31, r19
    1d3a:	81 81       	ldd	r24, Z+1	; 0x01
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <Port_Init+0x10a>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	2a 95       	dec	r18
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <Port_Init+0x106>
    1d4e:	80 95       	com	r24
    1d50:	84 23       	and	r24, r20
    1d52:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e3       	ldi	r30, 0x3B	; 59
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	29 81       	ldd	r18, Y+1	; 0x01
    1d62:	3a 81       	ldd	r19, Y+2	; 0x02
    1d64:	c9 01       	movw	r24, r18
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	28 0f       	add	r18, r24
    1d6c:	39 1f       	adc	r19, r25
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	fc 01       	movw	r30, r24
    1d74:	e2 0f       	add	r30, r18
    1d76:	f3 1f       	adc	r31, r19
    1d78:	81 81       	ldd	r24, Z+1	; 0x01
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <Port_Init+0x14a>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <Port_Init+0x146>
    1d8e:	84 2b       	or	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	49 c1       	rjmp	.+658    	; 0x2026 <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1d94:	29 81       	ldd	r18, Y+1	; 0x01
    1d96:	3a 81       	ldd	r19, Y+2	; 0x02
    1d98:	c9 01       	movw	r24, r18
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	28 0f       	add	r18, r24
    1da0:	39 1f       	adc	r19, r25
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	fc 01       	movw	r30, r24
    1da8:	e2 0f       	add	r30, r18
    1daa:	f3 1f       	adc	r31, r19
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	01 f5       	brne	.+64     	; 0x1df2 <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
    1db2:	a7 e3       	ldi	r26, 0x37	; 55
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e7 e3       	ldi	r30, 0x37	; 55
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	29 81       	ldd	r18, Y+1	; 0x01
    1dc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc2:	c9 01       	movw	r24, r18
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	28 0f       	add	r18, r24
    1dca:	39 1f       	adc	r19, r25
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	e2 0f       	add	r30, r18
    1dd4:	f3 1f       	adc	r31, r19
    1dd6:	81 81       	ldd	r24, Z+1	; 0x01
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <Port_Init+0x1a8>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <Port_Init+0x1a4>
    1dec:	84 2b       	or	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	1a c1       	rjmp	.+564    	; 0x2026 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1df2:	a7 e3       	ldi	r26, 0x37	; 55
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e7 e3       	ldi	r30, 0x37	; 55
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	29 81       	ldd	r18, Y+1	; 0x01
    1e00:	3a 81       	ldd	r19, Y+2	; 0x02
    1e02:	c9 01       	movw	r24, r18
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	28 0f       	add	r18, r24
    1e0a:	39 1f       	adc	r19, r25
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	fc 01       	movw	r30, r24
    1e12:	e2 0f       	add	r30, r18
    1e14:	f3 1f       	adc	r31, r19
    1e16:	81 81       	ldd	r24, Z+1	; 0x01
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <Port_Init+0x1e6>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	2a 95       	dec	r18
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <Port_Init+0x1e2>
    1e2a:	80 95       	com	r24
    1e2c:	84 23       	and	r24, r20
    1e2e:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    1e30:	a8 e3       	ldi	r26, 0x38	; 56
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e8 e3       	ldi	r30, 0x38	; 56
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	29 81       	ldd	r18, Y+1	; 0x01
    1e3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e40:	c9 01       	movw	r24, r18
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	28 0f       	add	r18, r24
    1e48:	39 1f       	adc	r19, r25
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	fc 01       	movw	r30, r24
    1e50:	e2 0f       	add	r30, r18
    1e52:	f3 1f       	adc	r31, r19
    1e54:	81 81       	ldd	r24, Z+1	; 0x01
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 2e       	mov	r0, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <Port_Init+0x226>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <Port_Init+0x222>
    1e6a:	84 2b       	or	r24, r20
    1e6c:	8c 93       	st	X, r24
    1e6e:	db c0       	rjmp	.+438    	; 0x2026 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1e70:	29 81       	ldd	r18, Y+1	; 0x01
    1e72:	3a 81       	ldd	r19, Y+2	; 0x02
    1e74:	c9 01       	movw	r24, r18
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	28 0f       	add	r18, r24
    1e7c:	39 1f       	adc	r19, r25
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	fc 01       	movw	r30, r24
    1e84:	e2 0f       	add	r30, r18
    1e86:	f3 1f       	adc	r31, r19
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	01 f5       	brne	.+64     	; 0x1ece <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1e8e:	a4 e3       	ldi	r26, 0x34	; 52
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e4 e3       	ldi	r30, 0x34	; 52
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	29 81       	ldd	r18, Y+1	; 0x01
    1e9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e9e:	c9 01       	movw	r24, r18
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	28 0f       	add	r18, r24
    1ea6:	39 1f       	adc	r19, r25
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	81 81       	ldd	r24, Z+1	; 0x01
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	02 2e       	mov	r0, r18
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <Port_Init+0x284>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	0a 94       	dec	r0
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <Port_Init+0x280>
    1ec8:	84 2b       	or	r24, r20
    1eca:	8c 93       	st	X, r24
    1ecc:	ac c0       	rjmp	.+344    	; 0x2026 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1ece:	a4 e3       	ldi	r26, 0x34	; 52
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e4 e3       	ldi	r30, 0x34	; 52
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	29 81       	ldd	r18, Y+1	; 0x01
    1edc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ede:	c9 01       	movw	r24, r18
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	28 0f       	add	r18, r24
    1ee6:	39 1f       	adc	r19, r25
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	fc 01       	movw	r30, r24
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	81 81       	ldd	r24, Z+1	; 0x01
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <Port_Init+0x2c2>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	2a 95       	dec	r18
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <Port_Init+0x2be>
    1f06:	80 95       	com	r24
    1f08:	84 23       	and	r24, r20
    1f0a:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    1f0c:	a5 e3       	ldi	r26, 0x35	; 53
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e5 e3       	ldi	r30, 0x35	; 53
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	29 81       	ldd	r18, Y+1	; 0x01
    1f1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f1c:	c9 01       	movw	r24, r18
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	28 0f       	add	r18, r24
    1f24:	39 1f       	adc	r19, r25
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	e2 0f       	add	r30, r18
    1f2e:	f3 1f       	adc	r31, r19
    1f30:	81 81       	ldd	r24, Z+1	; 0x01
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <Port_Init+0x302>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <Port_Init+0x2fe>
    1f46:	84 2b       	or	r24, r20
    1f48:	8c 93       	st	X, r24
    1f4a:	6d c0       	rjmp	.+218    	; 0x2026 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1f4c:	29 81       	ldd	r18, Y+1	; 0x01
    1f4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f50:	c9 01       	movw	r24, r18
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	28 0f       	add	r18, r24
    1f58:	39 1f       	adc	r19, r25
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e2 0f       	add	r30, r18
    1f62:	f3 1f       	adc	r31, r19
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	01 f5       	brne	.+64     	; 0x1faa <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1f6a:	a1 e3       	ldi	r26, 0x31	; 49
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e1 e3       	ldi	r30, 0x31	; 49
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	48 2f       	mov	r20, r24
    1f76:	29 81       	ldd	r18, Y+1	; 0x01
    1f78:	3a 81       	ldd	r19, Y+2	; 0x02
    1f7a:	c9 01       	movw	r24, r18
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	28 0f       	add	r18, r24
    1f82:	39 1f       	adc	r19, r25
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	fc 01       	movw	r30, r24
    1f8a:	e2 0f       	add	r30, r18
    1f8c:	f3 1f       	adc	r31, r19
    1f8e:	81 81       	ldd	r24, Z+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <Port_Init+0x360>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <Port_Init+0x35c>
    1fa4:	84 2b       	or	r24, r20
    1fa6:	8c 93       	st	X, r24
    1fa8:	3e c0       	rjmp	.+124    	; 0x2026 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1faa:	a1 e3       	ldi	r26, 0x31	; 49
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e1 e3       	ldi	r30, 0x31	; 49
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	29 81       	ldd	r18, Y+1	; 0x01
    1fb8:	3a 81       	ldd	r19, Y+2	; 0x02
    1fba:	c9 01       	movw	r24, r18
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	28 0f       	add	r18, r24
    1fc2:	39 1f       	adc	r19, r25
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	fc 01       	movw	r30, r24
    1fca:	e2 0f       	add	r30, r18
    1fcc:	f3 1f       	adc	r31, r19
    1fce:	81 81       	ldd	r24, Z+1	; 0x01
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <Port_Init+0x39e>
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	2a 95       	dec	r18
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <Port_Init+0x39a>
    1fe2:	80 95       	com	r24
    1fe4:	84 23       	and	r24, r20
    1fe6:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    1fe8:	a2 e3       	ldi	r26, 0x32	; 50
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e2 e3       	ldi	r30, 0x32	; 50
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	29 81       	ldd	r18, Y+1	; 0x01
    1ff6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff8:	c9 01       	movw	r24, r18
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	28 0f       	add	r18, r24
    2000:	39 1f       	adc	r19, r25
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	fc 01       	movw	r30, r24
    2008:	e2 0f       	add	r30, r18
    200a:	f3 1f       	adc	r31, r19
    200c:	81 81       	ldd	r24, Z+1	; 0x01
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <Port_Init+0x3de>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <Port_Init+0x3da>
    2022:	84 2b       	or	r24, r20
    2024:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	80 32       	cpi	r24, 0x20	; 32
    2036:	91 05       	cpc	r25, r1
    2038:	0c f4       	brge	.+2      	; 0x203c <Port_Init+0x3fc>
    203a:	10 ce       	rjmp	.-992    	; 0x1c5c <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    203c:	26 96       	adiw	r28, 0x06	; 6
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <ICU_voidInit>:
#include "../../../utils/STD_TYPES.h"

volatile static u16 Private_u16OnPeriod;
volatile static u16 Private_u16OffPeriod;

void ICU_voidInit(void) {
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
//	Lcd_PutString("inside init");
	//select mode = Normal mode
	CLR_BIT(TCCR1A, WGM10);
    2056:	af e4       	ldi	r26, 0x4F	; 79
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ef e4       	ldi	r30, 0x4F	; 79
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8e 7f       	andi	r24, 0xFE	; 254
    2062:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    2064:	af e4       	ldi	r26, 0x4F	; 79
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ef e4       	ldi	r30, 0x4F	; 79
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8d 7f       	andi	r24, 0xFD	; 253
    2070:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12);
    2072:	ae e4       	ldi	r26, 0x4E	; 78
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ee e4       	ldi	r30, 0x4E	; 78
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	87 7f       	andi	r24, 0xF7	; 247
    207e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    2080:	ae e4       	ldi	r26, 0x4E	; 78
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	ee e4       	ldi	r30, 0x4E	; 78
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	8f 7e       	andi	r24, 0xEF	; 239
    208c:	8c 93       	st	X, r24
#if ICU_STARTING_EDGE == ICU_RISING_EDGE
	//select ICU Edge RISING edge
		SET_BIT(TCCR1B, ICES1);
#else if ICU_STARTING_EDGE == ICU_FALLING_EDGE
	//select ICU Edge falling edge
		CLR_BIT(TCCR1B, ICES1);
    208e:	ae e4       	ldi	r26, 0x4E	; 78
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	ee e4       	ldi	r30, 0x4E	; 78
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8f 7b       	andi	r24, 0xBF	; 191
    209a:	8c 93       	st	X, r24

	#endif

	//enable interrupt
	SET_BIT(TIMSK, TICIE1);
    209c:	a9 e5       	ldi	r26, 0x59	; 89
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e9 e5       	ldi	r30, 0x59	; 89
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 62       	ori	r24, 0x20	; 32
    20a8:	8c 93       	st	X, r24

	//Select Prescaler Value = 64  void ICU_voidStart(void);

	SET_BIT(TCCR1B, CS10);
    20aa:	ae e4       	ldi	r26, 0x4E	; 78
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	ee e4       	ldi	r30, 0x4E	; 78
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	81 60       	ori	r24, 0x01	; 1
    20b6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    20b8:	ae e4       	ldi	r26, 0x4E	; 78
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	ee e4       	ldi	r30, 0x4E	; 78
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	82 60       	ori	r24, 0x02	; 2
    20c4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    20c6:	ae e4       	ldi	r26, 0x4E	; 78
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	ee e4       	ldi	r30, 0x4E	; 78
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8b 7f       	andi	r24, 0xFB	; 251
    20d2:	8c 93       	st	X, r24
}
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <ICU_voidGetDutyCycle>:

void ICU_voidGetDutyCycle(u8* copy_pu8Duty) {
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <ICU_voidGetDutyCycle+0xe>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
	//Lcd_PutString("inside duty ");

	if (copy_pu8Duty != NULL) {
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	d9 f1       	breq	.+118    	; 0x216e <ICU_voidGetDutyCycle+0x94>
		//Lcd_PutString("inside duty if ");
		Lcd_PutString("ONPeriod ");
    20f8:	80 e6       	ldi	r24, 0x60	; 96
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 70 21 	call	0x42e0	; 0x42e0 <Lcd_PutString>

		Lcd_PutInt(Private_u16OnPeriod);
    2100:	80 91 06 02 	lds	r24, 0x0206
    2104:	90 91 07 02 	lds	r25, 0x0207
    2108:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <Lcd_PutInt>
		Lcd_PutString("OffPeriod ");
    210c:	8a e6       	ldi	r24, 0x6A	; 106
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 70 21 	call	0x42e0	; 0x42e0 <Lcd_PutString>

		Lcd_PutInt(Private_u16OffPeriod);
    2114:	80 91 08 02 	lds	r24, 0x0208
    2118:	90 91 09 02 	lds	r25, 0x0209
    211c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <Lcd_PutInt>

		*copy_pu8Duty = ((u32) Private_u16OnPeriod * 100) / (Private_u16OnPeriod + Private_u16OffPeriod);
    2120:	80 91 06 02 	lds	r24, 0x0206
    2124:	90 91 07 02 	lds	r25, 0x0207
    2128:	cc 01       	movw	r24, r24
    212a:	a0 e0       	ldi	r26, 0x00	; 0
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	24 e6       	ldi	r18, 0x64	; 100
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 0d 22 	call	0x441a	; 0x441a <__mulsi3>
    213e:	7b 01       	movw	r14, r22
    2140:	8c 01       	movw	r16, r24
    2142:	20 91 06 02 	lds	r18, 0x0206
    2146:	30 91 07 02 	lds	r19, 0x0207
    214a:	80 91 08 02 	lds	r24, 0x0208
    214e:	90 91 09 02 	lds	r25, 0x0209
    2152:	82 0f       	add	r24, r18
    2154:	93 1f       	adc	r25, r19
    2156:	9c 01       	movw	r18, r24
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	c8 01       	movw	r24, r16
    215e:	b7 01       	movw	r22, r14
    2160:	0e 94 40 22 	call	0x4480	; 0x4480 <__udivmodsi4>
    2164:	da 01       	movw	r26, r20
    2166:	c9 01       	movw	r24, r18
    2168:	e9 81       	ldd	r30, Y+1	; 0x01
    216a:	fa 81       	ldd	r31, Y+2	; 0x02
    216c:	80 83       	st	Z, r24
	}
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	08 95       	ret

00002180 <ICU_voidGetFrequency>:


void ICU_voidGetFrequency(u32* copy_pu32Frequency_hz) {
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	00 d0       	rcall	.+0      	; 0x2186 <ICU_voidGetFrequency+0x6>
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
//	Lcd_PutString("inside freq ");
	if (copy_pu32Frequency_hz != NULL) {
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	e9 f0       	breq	.+58     	; 0x21d0 <ICU_voidGetFrequency+0x50>
	//	Lcd_PutString("inside freq if ");
		*copy_pu32Frequency_hz = 1000000UL
    2196:	20 91 06 02 	lds	r18, 0x0206
    219a:	30 91 07 02 	lds	r19, 0x0207
    219e:	80 91 08 02 	lds	r24, 0x0208
    21a2:	90 91 09 02 	lds	r25, 0x0209
    21a6:	82 0f       	add	r24, r18
    21a8:	93 1f       	adc	r25, r19
    21aa:	9c 01       	movw	r18, r24
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	80 e4       	ldi	r24, 0x40	; 64
    21b2:	92 e4       	ldi	r25, 0x42	; 66
    21b4:	af e0       	ldi	r26, 0x0F	; 15
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 40 22 	call	0x4480	; 0x4480 <__udivmodsi4>
    21c0:	da 01       	movw	r26, r20
    21c2:	c9 01       	movw	r24, r18
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	80 83       	st	Z, r24
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	a2 83       	std	Z+2, r26	; 0x02
    21ce:	b3 83       	std	Z+3, r27	; 0x03
				/ (Private_u16OnPeriod + Private_u16OffPeriod);
	}
}
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <__vector_6>:

// ISR for ICU
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    21da:	1f 92       	push	r1
    21dc:	0f 92       	push	r0
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	0f 92       	push	r0
    21e2:	11 24       	eor	r1, r1
    21e4:	2f 93       	push	r18
    21e6:	3f 93       	push	r19
    21e8:	4f 93       	push	r20
    21ea:	5f 93       	push	r21
    21ec:	8f 93       	push	r24
    21ee:	9f 93       	push	r25
    21f0:	af 93       	push	r26
    21f2:	bf 93       	push	r27
    21f4:	ef 93       	push	r30
    21f6:	ff 93       	push	r31
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8EdgeFlag = ICU_STARTING_EDGE;
	static u16 Local_u16OldValue =0;
	static u16 Local_u16CounterValue =0;

	Local_u16CounterValue = ICR1;
    2200:	e6 e4       	ldi	r30, 0x46	; 70
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	91 81       	ldd	r25, Z+1	; 0x01
    2208:	90 93 03 02 	sts	0x0203, r25
    220c:	80 93 02 02 	sts	0x0202, r24

	if(Local_u8EdgeFlag ==ICU_RISING_EDGE)
    2210:	80 91 e0 01 	lds	r24, 0x01E0
    2214:	82 30       	cpi	r24, 0x02	; 2
    2216:	f9 f4       	brne	.+62     	; 0x2256 <__vector_6+0x7c>
	{
		Private_u16OffPeriod = (Local_u16CounterValue- Local_u16OldValue)*4;
    2218:	20 91 02 02 	lds	r18, 0x0202
    221c:	30 91 03 02 	lds	r19, 0x0203
    2220:	80 91 04 02 	lds	r24, 0x0204
    2224:	90 91 05 02 	lds	r25, 0x0205
    2228:	a9 01       	movw	r20, r18
    222a:	48 1b       	sub	r20, r24
    222c:	59 0b       	sbc	r21, r25
    222e:	ca 01       	movw	r24, r20
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	90 93 09 02 	sts	0x0209, r25
    223c:	80 93 08 02 	sts	0x0208, r24

		Local_u8EdgeFlag =ICU_FALLING_EDGE;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	80 93 e0 01 	sts	0x01E0, r24

		//selest icu edge
		CLR_BIT(TCCR1B,ICES1);
    2246:	ae e4       	ldi	r26, 0x4E	; 78
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	ee e4       	ldi	r30, 0x4E	; 78
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8f 7b       	andi	r24, 0xBF	; 191
    2252:	8c 93       	st	X, r24
    2254:	22 c0       	rjmp	.+68     	; 0x229a <__vector_6+0xc0>

	}
	else if (Local_u8EdgeFlag ==ICU_FALLING_EDGE)
    2256:	80 91 e0 01 	lds	r24, 0x01E0
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	f1 f4       	brne	.+60     	; 0x229a <__vector_6+0xc0>
	{
		Private_u16OnPeriod = (Local_u16CounterValue- Local_u16OldValue)*4;
    225e:	20 91 02 02 	lds	r18, 0x0202
    2262:	30 91 03 02 	lds	r19, 0x0203
    2266:	80 91 04 02 	lds	r24, 0x0204
    226a:	90 91 05 02 	lds	r25, 0x0205
    226e:	a9 01       	movw	r20, r18
    2270:	48 1b       	sub	r20, r24
    2272:	59 0b       	sbc	r21, r25
    2274:	ca 01       	movw	r24, r20
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	90 93 07 02 	sts	0x0207, r25
    2282:	80 93 06 02 	sts	0x0206, r24

		Local_u8EdgeFlag =ICU_RISING_EDGE;
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	80 93 e0 01 	sts	0x01E0, r24

		//selest icu edge
		SET_BIT(TCCR1B,ICES1);
    228c:	ae e4       	ldi	r26, 0x4E	; 78
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ee e4       	ldi	r30, 0x4E	; 78
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	80 64       	ori	r24, 0x40	; 64
    2298:	8c 93       	st	X, r24
	}
	Local_u16OldValue = ICR1;
    229a:	e6 e4       	ldi	r30, 0x46	; 70
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	91 81       	ldd	r25, Z+1	; 0x01
    22a2:	90 93 05 02 	sts	0x0205, r25
    22a6:	80 93 04 02 	sts	0x0204, r24
}
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	ff 91       	pop	r31
    22b0:	ef 91       	pop	r30
    22b2:	bf 91       	pop	r27
    22b4:	af 91       	pop	r26
    22b6:	9f 91       	pop	r25
    22b8:	8f 91       	pop	r24
    22ba:	5f 91       	pop	r21
    22bc:	4f 91       	pop	r20
    22be:	3f 91       	pop	r19
    22c0:	2f 91       	pop	r18
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	0f 90       	pop	r0
    22c8:	1f 90       	pop	r1
    22ca:	18 95       	reti

000022cc <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    22d4:	af e5       	ldi	r26, 0x5F	; 95
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	ef e5       	ldi	r30, 0x5F	; 95
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	80 68       	ori	r24, 0x80	; 128
    22e0:	8c 93       	st	X, r24
}
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <GI_voidDisable>:

void GI_voidDisable(void)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    22f0:	af e5       	ldi	r26, 0x5F	; 95
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ef e5       	ldi	r30, 0x5F	; 95
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	8f 77       	andi	r24, 0x7F	; 127
    22fc:	8c 93       	st	X, r24
}
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	28 97       	sbiw	r28, 0x08	; 8
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	38 87       	std	Y+8, r19	; 0x08
    2324:	2f 83       	std	Y+7, r18	; 0x07
    2326:	8f 81       	ldd	r24, Y+7	; 0x07
    2328:	98 85       	ldd	r25, Y+8	; 0x08
    232a:	81 30       	cpi	r24, 0x01	; 1
    232c:	91 05       	cpc	r25, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <EXTI_voidInit+0x2e>
    2330:	5a c0       	rjmp	.+180    	; 0x23e6 <EXTI_voidInit+0xe2>
    2332:	2f 81       	ldd	r18, Y+7	; 0x07
    2334:	38 85       	ldd	r19, Y+8	; 0x08
    2336:	22 30       	cpi	r18, 0x02	; 2
    2338:	31 05       	cpc	r19, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <EXTI_voidInit+0x3a>
    233c:	a3 c0       	rjmp	.+326    	; 0x2484 <EXTI_voidInit+0x180>
    233e:	8f 81       	ldd	r24, Y+7	; 0x07
    2340:	98 85       	ldd	r25, Y+8	; 0x08
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	09 f0       	breq	.+2      	; 0x2348 <EXTI_voidInit+0x44>
    2346:	b3 c0       	rjmp	.+358    	; 0x24ae <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	3e 83       	std	Y+6, r19	; 0x06
    2350:	2d 83       	std	Y+5, r18	; 0x05
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	81 30       	cpi	r24, 0x01	; 1
    2358:	91 05       	cpc	r25, r1
    235a:	39 f1       	breq	.+78     	; 0x23aa <EXTI_voidInit+0xa6>
    235c:	2d 81       	ldd	r18, Y+5	; 0x05
    235e:	3e 81       	ldd	r19, Y+6	; 0x06
    2360:	22 30       	cpi	r18, 0x02	; 2
    2362:	31 05       	cpc	r19, r1
    2364:	99 f0       	breq	.+38     	; 0x238c <EXTI_voidInit+0x88>
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f1       	breq	.+90     	; 0x23c8 <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    236e:	a5 e5       	ldi	r26, 0x55	; 85
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e5 e5       	ldi	r30, 0x55	; 85
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	81 60       	ori	r24, 0x01	; 1
    237a:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    237c:	a5 e5       	ldi	r26, 0x55	; 85
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e5 e5       	ldi	r30, 0x55	; 85
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	82 60       	ori	r24, 0x02	; 2
    2388:	8c 93       	st	X, r24
    238a:	91 c0       	rjmp	.+290    	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    238c:	a5 e5       	ldi	r26, 0x55	; 85
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e5 e5       	ldi	r30, 0x55	; 85
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8e 7f       	andi	r24, 0xFE	; 254
    2398:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    239a:	a5 e5       	ldi	r26, 0x55	; 85
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e5 e5       	ldi	r30, 0x55	; 85
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	82 60       	ori	r24, 0x02	; 2
    23a6:	8c 93       	st	X, r24
    23a8:	82 c0       	rjmp	.+260    	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    23aa:	a5 e5       	ldi	r26, 0x55	; 85
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e5 e5       	ldi	r30, 0x55	; 85
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	81 60       	ori	r24, 0x01	; 1
    23b6:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    23b8:	a5 e5       	ldi	r26, 0x55	; 85
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e5 e5       	ldi	r30, 0x55	; 85
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8d 7f       	andi	r24, 0xFD	; 253
    23c4:	8c 93       	st	X, r24
    23c6:	73 c0       	rjmp	.+230    	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    23c8:	a5 e5       	ldi	r26, 0x55	; 85
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e5 e5       	ldi	r30, 0x55	; 85
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8e 7f       	andi	r24, 0xFE	; 254
    23d4:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    23d6:	a5 e5       	ldi	r26, 0x55	; 85
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e5 e5       	ldi	r30, 0x55	; 85
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	8d 7f       	andi	r24, 0xFD	; 253
    23e2:	8c 93       	st	X, r24
    23e4:	64 c0       	rjmp	.+200    	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	3c 83       	std	Y+4, r19	; 0x04
    23ee:	2b 83       	std	Y+3, r18	; 0x03
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	91 05       	cpc	r25, r1
    23f8:	39 f1       	breq	.+78     	; 0x2448 <EXTI_voidInit+0x144>
    23fa:	2b 81       	ldd	r18, Y+3	; 0x03
    23fc:	3c 81       	ldd	r19, Y+4	; 0x04
    23fe:	22 30       	cpi	r18, 0x02	; 2
    2400:	31 05       	cpc	r19, r1
    2402:	99 f0       	breq	.+38     	; 0x242a <EXTI_voidInit+0x126>
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f1       	breq	.+90     	; 0x2466 <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    240c:	a5 e5       	ldi	r26, 0x55	; 85
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e5 e5       	ldi	r30, 0x55	; 85
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	84 60       	ori	r24, 0x04	; 4
    2418:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    241a:	a5 e5       	ldi	r26, 0x55	; 85
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e5 e5       	ldi	r30, 0x55	; 85
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	88 60       	ori	r24, 0x08	; 8
    2426:	8c 93       	st	X, r24
    2428:	42 c0       	rjmp	.+132    	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    242a:	a5 e5       	ldi	r26, 0x55	; 85
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e5 e5       	ldi	r30, 0x55	; 85
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	8b 7f       	andi	r24, 0xFB	; 251
    2436:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    2438:	a5 e5       	ldi	r26, 0x55	; 85
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e5 e5       	ldi	r30, 0x55	; 85
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	88 60       	ori	r24, 0x08	; 8
    2444:	8c 93       	st	X, r24
    2446:	33 c0       	rjmp	.+102    	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    2448:	a5 e5       	ldi	r26, 0x55	; 85
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e5 e5       	ldi	r30, 0x55	; 85
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	84 60       	ori	r24, 0x04	; 4
    2454:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    2456:	a5 e5       	ldi	r26, 0x55	; 85
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e5 e5       	ldi	r30, 0x55	; 85
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	87 7f       	andi	r24, 0xF7	; 247
    2462:	8c 93       	st	X, r24
    2464:	24 c0       	rjmp	.+72     	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    2466:	a5 e5       	ldi	r26, 0x55	; 85
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e5 e5       	ldi	r30, 0x55	; 85
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	8b 7f       	andi	r24, 0xFB	; 251
    2472:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    2474:	a5 e5       	ldi	r26, 0x55	; 85
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e5 e5       	ldi	r30, 0x55	; 85
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	87 7f       	andi	r24, 0xF7	; 247
    2480:	8c 93       	st	X, r24
    2482:	15 c0       	rjmp	.+42     	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	88 2f       	mov	r24, r24
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	91 05       	cpc	r25, r1
    248e:	41 f0       	breq	.+16     	; 0x24a0 <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    2490:	a4 e5       	ldi	r26, 0x54	; 84
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e4 e5       	ldi	r30, 0x54	; 84
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	80 64       	ori	r24, 0x40	; 64
    249c:	8c 93       	st	X, r24
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    24a0:	a4 e5       	ldi	r26, 0x54	; 84
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e4 e5       	ldi	r30, 0x54	; 84
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	8f 7b       	andi	r24, 0xBF	; 191
    24ac:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    24ae:	28 96       	adiw	r28, 0x08	; 8
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <EXTI_voidEnable+0x6>
    24c6:	0f 92       	push	r0
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	3b 83       	std	Y+3, r19	; 0x03
    24d6:	2a 83       	std	Y+2, r18	; 0x02
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	9b 81       	ldd	r25, Y+3	; 0x03
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	91 05       	cpc	r25, r1
    24e0:	89 f0       	breq	.+34     	; 0x2504 <EXTI_voidEnable+0x44>
    24e2:	2a 81       	ldd	r18, Y+2	; 0x02
    24e4:	3b 81       	ldd	r19, Y+3	; 0x03
    24e6:	22 30       	cpi	r18, 0x02	; 2
    24e8:	31 05       	cpc	r19, r1
    24ea:	a1 f0       	breq	.+40     	; 0x2514 <EXTI_voidEnable+0x54>
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	9b 81       	ldd	r25, Y+3	; 0x03
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	b9 f4       	brne	.+46     	; 0x2522 <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    24f4:	ab e5       	ldi	r26, 0x5B	; 91
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	eb e5       	ldi	r30, 0x5B	; 91
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	80 64       	ori	r24, 0x40	; 64
    2500:	8c 93       	st	X, r24
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    2504:	ab e5       	ldi	r26, 0x5B	; 91
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	eb e5       	ldi	r30, 0x5B	; 91
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	80 68       	ori	r24, 0x80	; 128
    2510:	8c 93       	st	X, r24
    2512:	07 c0       	rjmp	.+14     	; 0x2522 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    2514:	ab e5       	ldi	r26, 0x5B	; 91
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	eb e5       	ldi	r30, 0x5B	; 91
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	80 62       	ori	r24, 0x20	; 32
    2520:	8c 93       	st	X, r24
        break;
    }
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <EXTI_voidDisable+0x6>
    2534:	0f 92       	push	r0
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	3b 83       	std	Y+3, r19	; 0x03
    2544:	2a 83       	std	Y+2, r18	; 0x02
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	9b 81       	ldd	r25, Y+3	; 0x03
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	91 05       	cpc	r25, r1
    254e:	89 f0       	breq	.+34     	; 0x2572 <EXTI_voidDisable+0x44>
    2550:	2a 81       	ldd	r18, Y+2	; 0x02
    2552:	3b 81       	ldd	r19, Y+3	; 0x03
    2554:	22 30       	cpi	r18, 0x02	; 2
    2556:	31 05       	cpc	r19, r1
    2558:	a1 f0       	breq	.+40     	; 0x2582 <EXTI_voidDisable+0x54>
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	b9 f4       	brne	.+46     	; 0x2590 <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    2562:	ab e5       	ldi	r26, 0x5B	; 91
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	eb e5       	ldi	r30, 0x5B	; 91
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	8f 7b       	andi	r24, 0xBF	; 191
    256e:	8c 93       	st	X, r24
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    2572:	ab e5       	ldi	r26, 0x5B	; 91
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	eb e5       	ldi	r30, 0x5B	; 91
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8f 77       	andi	r24, 0x7F	; 127
    257e:	8c 93       	st	X, r24
    2580:	07 c0       	rjmp	.+14     	; 0x2590 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    2582:	ab e5       	ldi	r26, 0x5B	; 91
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	eb e5       	ldi	r30, 0x5B	; 91
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	8f 7d       	andi	r24, 0xDF	; 223
    258e:	8c 93       	st	X, r24
        break;
    }
}
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <EXTRI_voidSetCallBackINT+0x6>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <EXTRI_voidSetCallBackINT+0x8>
    25a4:	0f 92       	push	r0
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	7b 83       	std	Y+3, r23	; 0x03
    25ae:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	39 f1       	breq	.+78     	; 0x2606 <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	3d 83       	std	Y+5, r19	; 0x05
    25c0:	2c 83       	std	Y+4, r18	; 0x04
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	91 05       	cpc	r25, r1
    25ca:	81 f0       	breq	.+32     	; 0x25ec <EXTRI_voidSetCallBackINT+0x50>
    25cc:	2c 81       	ldd	r18, Y+4	; 0x04
    25ce:	3d 81       	ldd	r19, Y+5	; 0x05
    25d0:	22 30       	cpi	r18, 0x02	; 2
    25d2:	31 05       	cpc	r19, r1
    25d4:	91 f0       	breq	.+36     	; 0x25fa <EXTRI_voidSetCallBackINT+0x5e>
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	9d 81       	ldd	r25, Y+5	; 0x05
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	a1 f4       	brne	.+40     	; 0x2606 <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	9b 81       	ldd	r25, Y+3	; 0x03
    25e2:	90 93 0b 02 	sts	0x020B, r25
    25e6:	80 93 0a 02 	sts	0x020A, r24
    25ea:	0d c0       	rjmp	.+26     	; 0x2606 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	90 93 0d 02 	sts	0x020D, r25
    25f4:	80 93 0c 02 	sts	0x020C, r24
    25f8:	06 c0       	rjmp	.+12     	; 0x2606 <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03
    25fe:	90 93 0f 02 	sts	0x020F, r25
    2602:	80 93 0e 02 	sts	0x020E, r24
            break;
        default:
            break;
        }
    }
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    2616:	1f 92       	push	r1
    2618:	0f 92       	push	r0
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	0f 92       	push	r0
    261e:	11 24       	eor	r1, r1
    2620:	2f 93       	push	r18
    2622:	3f 93       	push	r19
    2624:	4f 93       	push	r20
    2626:	5f 93       	push	r21
    2628:	6f 93       	push	r22
    262a:	7f 93       	push	r23
    262c:	8f 93       	push	r24
    262e:	9f 93       	push	r25
    2630:	af 93       	push	r26
    2632:	bf 93       	push	r27
    2634:	ef 93       	push	r30
    2636:	ff 93       	push	r31
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    2640:	80 91 0a 02 	lds	r24, 0x020A
    2644:	90 91 0b 02 	lds	r25, 0x020B
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	29 f0       	breq	.+10     	; 0x2656 <__vector_1+0x40>
        private_pCallBackINT0();
    264c:	e0 91 0a 02 	lds	r30, 0x020A
    2650:	f0 91 0b 02 	lds	r31, 0x020B
    2654:	09 95       	icall
    }
}
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	ff 91       	pop	r31
    265c:	ef 91       	pop	r30
    265e:	bf 91       	pop	r27
    2660:	af 91       	pop	r26
    2662:	9f 91       	pop	r25
    2664:	8f 91       	pop	r24
    2666:	7f 91       	pop	r23
    2668:	6f 91       	pop	r22
    266a:	5f 91       	pop	r21
    266c:	4f 91       	pop	r20
    266e:	3f 91       	pop	r19
    2670:	2f 91       	pop	r18
    2672:	0f 90       	pop	r0
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	0f 90       	pop	r0
    2678:	1f 90       	pop	r1
    267a:	18 95       	reti

0000267c <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    267c:	1f 92       	push	r1
    267e:	0f 92       	push	r0
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	0f 92       	push	r0
    2684:	11 24       	eor	r1, r1
    2686:	2f 93       	push	r18
    2688:	3f 93       	push	r19
    268a:	4f 93       	push	r20
    268c:	5f 93       	push	r21
    268e:	6f 93       	push	r22
    2690:	7f 93       	push	r23
    2692:	8f 93       	push	r24
    2694:	9f 93       	push	r25
    2696:	af 93       	push	r26
    2698:	bf 93       	push	r27
    269a:	ef 93       	push	r30
    269c:	ff 93       	push	r31
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    26a6:	80 91 0c 02 	lds	r24, 0x020C
    26aa:	90 91 0d 02 	lds	r25, 0x020D
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	29 f0       	breq	.+10     	; 0x26bc <__vector_2+0x40>
        private_pCallBackINT1();
    26b2:	e0 91 0c 02 	lds	r30, 0x020C
    26b6:	f0 91 0d 02 	lds	r31, 0x020D
    26ba:	09 95       	icall
    }
}
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	ff 91       	pop	r31
    26c2:	ef 91       	pop	r30
    26c4:	bf 91       	pop	r27
    26c6:	af 91       	pop	r26
    26c8:	9f 91       	pop	r25
    26ca:	8f 91       	pop	r24
    26cc:	7f 91       	pop	r23
    26ce:	6f 91       	pop	r22
    26d0:	5f 91       	pop	r21
    26d2:	4f 91       	pop	r20
    26d4:	3f 91       	pop	r19
    26d6:	2f 91       	pop	r18
    26d8:	0f 90       	pop	r0
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	0f 90       	pop	r0
    26de:	1f 90       	pop	r1
    26e0:	18 95       	reti

000026e2 <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    26e2:	1f 92       	push	r1
    26e4:	0f 92       	push	r0
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	0f 92       	push	r0
    26ea:	11 24       	eor	r1, r1
    26ec:	2f 93       	push	r18
    26ee:	3f 93       	push	r19
    26f0:	4f 93       	push	r20
    26f2:	5f 93       	push	r21
    26f4:	6f 93       	push	r22
    26f6:	7f 93       	push	r23
    26f8:	8f 93       	push	r24
    26fa:	9f 93       	push	r25
    26fc:	af 93       	push	r26
    26fe:	bf 93       	push	r27
    2700:	ef 93       	push	r30
    2702:	ff 93       	push	r31
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    270c:	80 91 0e 02 	lds	r24, 0x020E
    2710:	90 91 0f 02 	lds	r25, 0x020F
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	29 f0       	breq	.+10     	; 0x2722 <__vector_3+0x40>
        private_pCallBackINT2();
    2718:	e0 91 0e 02 	lds	r30, 0x020E
    271c:	f0 91 0f 02 	lds	r31, 0x020F
    2720:	09 95       	icall
    }
}
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	ff 91       	pop	r31
    2728:	ef 91       	pop	r30
    272a:	bf 91       	pop	r27
    272c:	af 91       	pop	r26
    272e:	9f 91       	pop	r25
    2730:	8f 91       	pop	r24
    2732:	7f 91       	pop	r23
    2734:	6f 91       	pop	r22
    2736:	5f 91       	pop	r21
    2738:	4f 91       	pop	r20
    273a:	3f 91       	pop	r19
    273c:	2f 91       	pop	r18
    273e:	0f 90       	pop	r0
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	0f 90       	pop	r0
    2744:	1f 90       	pop	r1
    2746:	18 95       	reti

00002748 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	00 d0       	rcall	.+0      	; 0x274e <Dio_WriteChannel+0x6>
    274e:	00 d0       	rcall	.+0      	; 0x2750 <Dio_WriteChannel+0x8>
    2750:	0f 92       	push	r0
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	8a 83       	std	Y+2, r24	; 0x02
    2758:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	86 95       	lsr	r24
    275e:	86 95       	lsr	r24
    2760:	86 95       	lsr	r24
    2762:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	3d 83       	std	Y+5, r19	; 0x05
    276c:	2c 83       	std	Y+4, r18	; 0x04
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	9d 81       	ldd	r25, Y+5	; 0x05
    2772:	81 30       	cpi	r24, 0x01	; 1
    2774:	91 05       	cpc	r25, r1
    2776:	09 f4       	brne	.+2      	; 0x277a <Dio_WriteChannel+0x32>
    2778:	43 c0       	rjmp	.+134    	; 0x2800 <Dio_WriteChannel+0xb8>
    277a:	2c 81       	ldd	r18, Y+4	; 0x04
    277c:	3d 81       	ldd	r19, Y+5	; 0x05
    277e:	22 30       	cpi	r18, 0x02	; 2
    2780:	31 05       	cpc	r19, r1
    2782:	2c f4       	brge	.+10     	; 0x278e <Dio_WriteChannel+0x46>
    2784:	8c 81       	ldd	r24, Y+4	; 0x04
    2786:	9d 81       	ldd	r25, Y+5	; 0x05
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	71 f0       	breq	.+28     	; 0x27a8 <Dio_WriteChannel+0x60>
    278c:	ce c0       	rjmp	.+412    	; 0x292a <Dio_WriteChannel+0x1e2>
    278e:	2c 81       	ldd	r18, Y+4	; 0x04
    2790:	3d 81       	ldd	r19, Y+5	; 0x05
    2792:	22 30       	cpi	r18, 0x02	; 2
    2794:	31 05       	cpc	r19, r1
    2796:	09 f4       	brne	.+2      	; 0x279a <Dio_WriteChannel+0x52>
    2798:	65 c0       	rjmp	.+202    	; 0x2864 <Dio_WriteChannel+0x11c>
    279a:	8c 81       	ldd	r24, Y+4	; 0x04
    279c:	9d 81       	ldd	r25, Y+5	; 0x05
    279e:	83 30       	cpi	r24, 0x03	; 3
    27a0:	91 05       	cpc	r25, r1
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <Dio_WriteChannel+0x5e>
    27a4:	91 c0       	rjmp	.+290    	; 0x28c8 <Dio_WriteChannel+0x180>
    27a6:	c1 c0       	rjmp	.+386    	; 0x292a <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	a1 f4       	brne	.+40     	; 0x27d6 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    27ae:	ab e3       	ldi	r26, 0x3B	; 59
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	eb e3       	ldi	r30, 0x3B	; 59
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	48 2f       	mov	r20, r24
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	02 2e       	mov	r0, r18
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <Dio_WriteChannel+0x84>
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	0a 94       	dec	r0
    27ce:	e2 f7       	brpl	.-8      	; 0x27c8 <Dio_WriteChannel+0x80>
    27d0:	84 2b       	or	r24, r20
    27d2:	8c 93       	st	X, r24
    27d4:	aa c0       	rjmp	.+340    	; 0x292a <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    27d6:	ab e3       	ldi	r26, 0x3B	; 59
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	eb e3       	ldi	r30, 0x3B	; 59
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	48 2f       	mov	r20, r24
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	02 2e       	mov	r0, r18
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <Dio_WriteChannel+0xac>
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	0a 94       	dec	r0
    27f6:	e2 f7       	brpl	.-8      	; 0x27f0 <Dio_WriteChannel+0xa8>
    27f8:	80 95       	com	r24
    27fa:	84 23       	and	r24, r20
    27fc:	8c 93       	st	X, r24
    27fe:	95 c0       	rjmp	.+298    	; 0x292a <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	b9 f4       	brne	.+46     	; 0x2834 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    2806:	a8 e3       	ldi	r26, 0x38	; 56
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e8 e3       	ldi	r30, 0x38	; 56
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	48 2f       	mov	r20, r24
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9c 01       	movw	r18, r24
    281a:	27 70       	andi	r18, 0x07	; 7
    281c:	30 70       	andi	r19, 0x00	; 0
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	02 2e       	mov	r0, r18
    2824:	02 c0       	rjmp	.+4      	; 0x282a <Dio_WriteChannel+0xe2>
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	0a 94       	dec	r0
    282c:	e2 f7       	brpl	.-8      	; 0x2826 <Dio_WriteChannel+0xde>
    282e:	84 2b       	or	r24, r20
    2830:	8c 93       	st	X, r24
    2832:	7b c0       	rjmp	.+246    	; 0x292a <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    2834:	a8 e3       	ldi	r26, 0x38	; 56
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e8 e3       	ldi	r30, 0x38	; 56
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	48 2f       	mov	r20, r24
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	9c 01       	movw	r18, r24
    2848:	27 70       	andi	r18, 0x07	; 7
    284a:	30 70       	andi	r19, 0x00	; 0
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	02 2e       	mov	r0, r18
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <Dio_WriteChannel+0x110>
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	0a 94       	dec	r0
    285a:	e2 f7       	brpl	.-8      	; 0x2854 <Dio_WriteChannel+0x10c>
    285c:	80 95       	com	r24
    285e:	84 23       	and	r24, r20
    2860:	8c 93       	st	X, r24
    2862:	63 c0       	rjmp	.+198    	; 0x292a <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	b9 f4       	brne	.+46     	; 0x2898 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    286a:	a5 e3       	ldi	r26, 0x35	; 53
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e5 e3       	ldi	r30, 0x35	; 53
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	48 2f       	mov	r20, r24
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9c 01       	movw	r18, r24
    287e:	27 70       	andi	r18, 0x07	; 7
    2880:	30 70       	andi	r19, 0x00	; 0
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	02 2e       	mov	r0, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <Dio_WriteChannel+0x146>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	0a 94       	dec	r0
    2890:	e2 f7       	brpl	.-8      	; 0x288a <Dio_WriteChannel+0x142>
    2892:	84 2b       	or	r24, r20
    2894:	8c 93       	st	X, r24
    2896:	49 c0       	rjmp	.+146    	; 0x292a <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    2898:	a5 e3       	ldi	r26, 0x35	; 53
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e5 e3       	ldi	r30, 0x35	; 53
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	48 2f       	mov	r20, r24
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	88 2f       	mov	r24, r24
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9c 01       	movw	r18, r24
    28ac:	27 70       	andi	r18, 0x07	; 7
    28ae:	30 70       	andi	r19, 0x00	; 0
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	02 2e       	mov	r0, r18
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <Dio_WriteChannel+0x174>
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	0a 94       	dec	r0
    28be:	e2 f7       	brpl	.-8      	; 0x28b8 <Dio_WriteChannel+0x170>
    28c0:	80 95       	com	r24
    28c2:	84 23       	and	r24, r20
    28c4:	8c 93       	st	X, r24
    28c6:	31 c0       	rjmp	.+98     	; 0x292a <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	b9 f4       	brne	.+46     	; 0x28fc <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    28ce:	a2 e3       	ldi	r26, 0x32	; 50
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e2 e3       	ldi	r30, 0x32	; 50
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	48 2f       	mov	r20, r24
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9c 01       	movw	r18, r24
    28e2:	27 70       	andi	r18, 0x07	; 7
    28e4:	30 70       	andi	r19, 0x00	; 0
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	02 2e       	mov	r0, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <Dio_WriteChannel+0x1aa>
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <Dio_WriteChannel+0x1a6>
    28f6:	84 2b       	or	r24, r20
    28f8:	8c 93       	st	X, r24
    28fa:	17 c0       	rjmp	.+46     	; 0x292a <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    28fc:	a2 e3       	ldi	r26, 0x32	; 50
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e2 e3       	ldi	r30, 0x32	; 50
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	48 2f       	mov	r20, r24
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 01       	movw	r18, r24
    2910:	27 70       	andi	r18, 0x07	; 7
    2912:	30 70       	andi	r19, 0x00	; 0
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	02 2e       	mov	r0, r18
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <Dio_WriteChannel+0x1d8>
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	0a 94       	dec	r0
    2922:	e2 f7       	brpl	.-8      	; 0x291c <Dio_WriteChannel+0x1d4>
    2924:	80 95       	com	r24
    2926:	84 23       	and	r24, r20
    2928:	8c 93       	st	X, r24
		}
		break;
	}
}
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	00 d0       	rcall	.+0      	; 0x2940 <Dio_ReadChannel+0x6>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <Dio_ReadChannel+0x8>
    2942:	0f 92       	push	r0
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	86 95       	lsr	r24
    294e:	86 95       	lsr	r24
    2950:	86 95       	lsr	r24
    2952:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	3d 83       	std	Y+5, r19	; 0x05
    295c:	2c 83       	std	Y+4, r18	; 0x04
    295e:	4c 81       	ldd	r20, Y+4	; 0x04
    2960:	5d 81       	ldd	r21, Y+5	; 0x05
    2962:	41 30       	cpi	r20, 0x01	; 1
    2964:	51 05       	cpc	r21, r1
    2966:	49 f1       	breq	.+82     	; 0x29ba <Dio_ReadChannel+0x80>
    2968:	8c 81       	ldd	r24, Y+4	; 0x04
    296a:	9d 81       	ldd	r25, Y+5	; 0x05
    296c:	82 30       	cpi	r24, 0x02	; 2
    296e:	91 05       	cpc	r25, r1
    2970:	34 f4       	brge	.+12     	; 0x297e <Dio_ReadChannel+0x44>
    2972:	2c 81       	ldd	r18, Y+4	; 0x04
    2974:	3d 81       	ldd	r19, Y+5	; 0x05
    2976:	21 15       	cp	r18, r1
    2978:	31 05       	cpc	r19, r1
    297a:	69 f0       	breq	.+26     	; 0x2996 <Dio_ReadChannel+0x5c>
    297c:	59 c0       	rjmp	.+178    	; 0x2a30 <Dio_ReadChannel+0xf6>
    297e:	4c 81       	ldd	r20, Y+4	; 0x04
    2980:	5d 81       	ldd	r21, Y+5	; 0x05
    2982:	42 30       	cpi	r20, 0x02	; 2
    2984:	51 05       	cpc	r21, r1
    2986:	69 f1       	breq	.+90     	; 0x29e2 <Dio_ReadChannel+0xa8>
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	9d 81       	ldd	r25, Y+5	; 0x05
    298c:	83 30       	cpi	r24, 0x03	; 3
    298e:	91 05       	cpc	r25, r1
    2990:	09 f4       	brne	.+2      	; 0x2994 <Dio_ReadChannel+0x5a>
    2992:	3b c0       	rjmp	.+118    	; 0x2a0a <Dio_ReadChannel+0xd0>
    2994:	4d c0       	rjmp	.+154    	; 0x2a30 <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2996:	e9 e3       	ldi	r30, 0x39	; 57
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	88 2f       	mov	r24, r24
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	a9 01       	movw	r20, r18
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <Dio_ReadChannel+0x74>
    29aa:	55 95       	asr	r21
    29ac:	47 95       	ror	r20
    29ae:	8a 95       	dec	r24
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <Dio_ReadChannel+0x70>
    29b2:	ca 01       	movw	r24, r20
    29b4:	81 70       	andi	r24, 0x01	; 1
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	3b c0       	rjmp	.+118    	; 0x2a30 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    29ba:	e6 e3       	ldi	r30, 0x36	; 54
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	87 70       	andi	r24, 0x07	; 7
    29cc:	90 70       	andi	r25, 0x00	; 0
    29ce:	a9 01       	movw	r20, r18
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <Dio_ReadChannel+0x9c>
    29d2:	55 95       	asr	r21
    29d4:	47 95       	ror	r20
    29d6:	8a 95       	dec	r24
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <Dio_ReadChannel+0x98>
    29da:	ca 01       	movw	r24, r20
    29dc:	81 70       	andi	r24, 0x01	; 1
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	27 c0       	rjmp	.+78     	; 0x2a30 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    29e2:	e3 e3       	ldi	r30, 0x33	; 51
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	88 2f       	mov	r24, r24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	87 70       	andi	r24, 0x07	; 7
    29f4:	90 70       	andi	r25, 0x00	; 0
    29f6:	a9 01       	movw	r20, r18
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <Dio_ReadChannel+0xc4>
    29fa:	55 95       	asr	r21
    29fc:	47 95       	ror	r20
    29fe:	8a 95       	dec	r24
    2a00:	e2 f7       	brpl	.-8      	; 0x29fa <Dio_ReadChannel+0xc0>
    2a02:	ca 01       	movw	r24, r20
    2a04:	81 70       	andi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	13 c0       	rjmp	.+38     	; 0x2a30 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    2a0a:	e0 e3       	ldi	r30, 0x30	; 48
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	88 2f       	mov	r24, r24
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	87 70       	andi	r24, 0x07	; 7
    2a1c:	90 70       	andi	r25, 0x00	; 0
    2a1e:	a9 01       	movw	r20, r18
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <Dio_ReadChannel+0xec>
    2a22:	55 95       	asr	r21
    2a24:	47 95       	ror	r20
    2a26:	8a 95       	dec	r24
    2a28:	e2 f7       	brpl	.-8      	; 0x2a22 <Dio_ReadChannel+0xe8>
    2a2a:	ca 01       	movw	r24, r20
    2a2c:	81 70       	andi	r24, 0x01	; 1
    2a2e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <Dio_FlipChannel+0x6>
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <Dio_FlipChannel+0x8>
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	86 95       	lsr	r24
    2a54:	86 95       	lsr	r24
    2a56:	86 95       	lsr	r24
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	3c 83       	std	Y+4, r19	; 0x04
    2a5e:	2b 83       	std	Y+3, r18	; 0x03
    2a60:	4b 81       	ldd	r20, Y+3	; 0x03
    2a62:	5c 81       	ldd	r21, Y+4	; 0x04
    2a64:	41 30       	cpi	r20, 0x01	; 1
    2a66:	51 05       	cpc	r21, r1
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <Dio_FlipChannel+0x2a>
    2a6a:	3c c0       	rjmp	.+120    	; 0x2ae4 <Dio_FlipChannel+0xa2>
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	82 30       	cpi	r24, 0x02	; 2
    2a72:	91 05       	cpc	r25, r1
    2a74:	34 f4       	brge	.+12     	; 0x2a82 <Dio_FlipChannel+0x40>
    2a76:	2b 81       	ldd	r18, Y+3	; 0x03
    2a78:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7a:	21 15       	cp	r18, r1
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	71 f0       	breq	.+28     	; 0x2a9c <Dio_FlipChannel+0x5a>
    2a80:	ab c0       	rjmp	.+342    	; 0x2bd8 <Dio_FlipChannel+0x196>
    2a82:	4b 81       	ldd	r20, Y+3	; 0x03
    2a84:	5c 81       	ldd	r21, Y+4	; 0x04
    2a86:	42 30       	cpi	r20, 0x02	; 2
    2a88:	51 05       	cpc	r21, r1
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <Dio_FlipChannel+0x4c>
    2a8c:	54 c0       	rjmp	.+168    	; 0x2b36 <Dio_FlipChannel+0xf4>
    2a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a90:	9c 81       	ldd	r25, Y+4	; 0x04
    2a92:	83 30       	cpi	r24, 0x03	; 3
    2a94:	91 05       	cpc	r25, r1
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <Dio_FlipChannel+0x58>
    2a98:	77 c0       	rjmp	.+238    	; 0x2b88 <Dio_FlipChannel+0x146>
    2a9a:	9e c0       	rjmp	.+316    	; 0x2bd8 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    2a9c:	ab e3       	ldi	r26, 0x3B	; 59
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	eb e3       	ldi	r30, 0x3B	; 59
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	48 2f       	mov	r20, r24
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	28 2f       	mov	r18, r24
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <Dio_FlipChannel+0x76>
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	2a 95       	dec	r18
    2aba:	e2 f7       	brpl	.-8      	; 0x2ab4 <Dio_FlipChannel+0x72>
    2abc:	84 27       	eor	r24, r20
    2abe:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    2ac0:	eb e3       	ldi	r30, 0x3B	; 59
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <Dio_FlipChannel+0x96>
    2ad4:	55 95       	asr	r21
    2ad6:	47 95       	ror	r20
    2ad8:	8a 95       	dec	r24
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <Dio_FlipChannel+0x92>
    2adc:	ca 01       	movw	r24, r20
    2ade:	81 70       	andi	r24, 0x01	; 1
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	7a c0       	rjmp	.+244    	; 0x2bd8 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    2ae4:	a8 e3       	ldi	r26, 0x38	; 56
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e8 e3       	ldi	r30, 0x38	; 56
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	48 2f       	mov	r20, r24
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9c 01       	movw	r18, r24
    2af8:	27 70       	andi	r18, 0x07	; 7
    2afa:	30 70       	andi	r19, 0x00	; 0
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <Dio_FlipChannel+0xc4>
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	2a 95       	dec	r18
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <Dio_FlipChannel+0xc0>
    2b0a:	84 27       	eor	r24, r20
    2b0c:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    2b0e:	e8 e3       	ldi	r30, 0x38	; 56
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	88 2f       	mov	r24, r24
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	87 70       	andi	r24, 0x07	; 7
    2b20:	90 70       	andi	r25, 0x00	; 0
    2b22:	a9 01       	movw	r20, r18
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <Dio_FlipChannel+0xe8>
    2b26:	55 95       	asr	r21
    2b28:	47 95       	ror	r20
    2b2a:	8a 95       	dec	r24
    2b2c:	e2 f7       	brpl	.-8      	; 0x2b26 <Dio_FlipChannel+0xe4>
    2b2e:	ca 01       	movw	r24, r20
    2b30:	81 70       	andi	r24, 0x01	; 1
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	51 c0       	rjmp	.+162    	; 0x2bd8 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    2b36:	a5 e3       	ldi	r26, 0x35	; 53
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e5 e3       	ldi	r30, 0x35	; 53
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	48 2f       	mov	r20, r24
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9c 01       	movw	r18, r24
    2b4a:	27 70       	andi	r18, 0x07	; 7
    2b4c:	30 70       	andi	r19, 0x00	; 0
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <Dio_FlipChannel+0x116>
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	2a 95       	dec	r18
    2b5a:	e2 f7       	brpl	.-8      	; 0x2b54 <Dio_FlipChannel+0x112>
    2b5c:	84 27       	eor	r24, r20
    2b5e:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    2b60:	e5 e3       	ldi	r30, 0x35	; 53
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	87 70       	andi	r24, 0x07	; 7
    2b72:	90 70       	andi	r25, 0x00	; 0
    2b74:	a9 01       	movw	r20, r18
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <Dio_FlipChannel+0x13a>
    2b78:	55 95       	asr	r21
    2b7a:	47 95       	ror	r20
    2b7c:	8a 95       	dec	r24
    2b7e:	e2 f7       	brpl	.-8      	; 0x2b78 <Dio_FlipChannel+0x136>
    2b80:	ca 01       	movw	r24, r20
    2b82:	81 70       	andi	r24, 0x01	; 1
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	28 c0       	rjmp	.+80     	; 0x2bd8 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    2b88:	a2 e3       	ldi	r26, 0x32	; 50
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e2 e3       	ldi	r30, 0x32	; 50
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	48 2f       	mov	r20, r24
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	88 2f       	mov	r24, r24
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9c 01       	movw	r18, r24
    2b9c:	27 70       	andi	r18, 0x07	; 7
    2b9e:	30 70       	andi	r19, 0x00	; 0
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <Dio_FlipChannel+0x168>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	2a 95       	dec	r18
    2bac:	e2 f7       	brpl	.-8      	; 0x2ba6 <Dio_FlipChannel+0x164>
    2bae:	84 27       	eor	r24, r20
    2bb0:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    2bb2:	e2 e3       	ldi	r30, 0x32	; 50
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	87 70       	andi	r24, 0x07	; 7
    2bc4:	90 70       	andi	r25, 0x00	; 0
    2bc6:	a9 01       	movw	r20, r18
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <Dio_FlipChannel+0x18c>
    2bca:	55 95       	asr	r21
    2bcc:	47 95       	ror	r20
    2bce:	8a 95       	dec	r24
    2bd0:	e2 f7       	brpl	.-8      	; 0x2bca <Dio_FlipChannel+0x188>
    2bd2:	ca 01       	movw	r24, r20
    2bd4:	81 70       	andi	r24, 0x01	; 1
    2bd6:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	00 d0       	rcall	.+0      	; 0x2bee <Dio_WritePort+0x6>
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <Dio_WritePort+0x8>
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	89 83       	std	Y+1, r24	; 0x01
    2bf6:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	3c 83       	std	Y+4, r19	; 0x04
    2c00:	2b 83       	std	Y+3, r18	; 0x03
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	9c 81       	ldd	r25, Y+4	; 0x04
    2c06:	81 30       	cpi	r24, 0x01	; 1
    2c08:	91 05       	cpc	r25, r1
    2c0a:	d1 f0       	breq	.+52     	; 0x2c40 <Dio_WritePort+0x58>
    2c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c10:	22 30       	cpi	r18, 0x02	; 2
    2c12:	31 05       	cpc	r19, r1
    2c14:	2c f4       	brge	.+10     	; 0x2c20 <Dio_WritePort+0x38>
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	61 f0       	breq	.+24     	; 0x2c36 <Dio_WritePort+0x4e>
    2c1e:	1e c0       	rjmp	.+60     	; 0x2c5c <Dio_WritePort+0x74>
    2c20:	2b 81       	ldd	r18, Y+3	; 0x03
    2c22:	3c 81       	ldd	r19, Y+4	; 0x04
    2c24:	22 30       	cpi	r18, 0x02	; 2
    2c26:	31 05       	cpc	r19, r1
    2c28:	81 f0       	breq	.+32     	; 0x2c4a <Dio_WritePort+0x62>
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2e:	83 30       	cpi	r24, 0x03	; 3
    2c30:	91 05       	cpc	r25, r1
    2c32:	81 f0       	breq	.+32     	; 0x2c54 <Dio_WritePort+0x6c>
    2c34:	13 c0       	rjmp	.+38     	; 0x2c5c <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    2c36:	eb e3       	ldi	r30, 0x3B	; 59
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	80 83       	st	Z, r24
    2c3e:	0e c0       	rjmp	.+28     	; 0x2c5c <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    2c40:	e8 e3       	ldi	r30, 0x38	; 56
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	80 83       	st	Z, r24
    2c48:	09 c0       	rjmp	.+18     	; 0x2c5c <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    2c4a:	e5 e3       	ldi	r30, 0x35	; 53
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	80 83       	st	Z, r24
    2c52:	04 c0       	rjmp	.+8      	; 0x2c5c <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    2c54:	e2 e3       	ldi	r30, 0x32	; 50
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	80 83       	st	Z, r24
		break;
	}
}
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <Lcd_SendCMD>:
 *      Author: AhmedAbogabl
 */

#include "LCD.h"

void Lcd_SendCMD(u8 cmd) {
    2c6a:	0f 93       	push	r16
    2c6c:	1f 93       	push	r17
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	c1 56       	subi	r28, 0x61	; 97
    2c78:	d0 40       	sbci	r29, 0x00	; 0
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	fe 01       	movw	r30, r28
    2c86:	ef 59       	subi	r30, 0x9F	; 159
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 83       	st	Z, r24
	// Set RS to command mode
	Dio_WriteChannel(LCD_RS, STD_LOW);
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>

	// Send the high nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 4));
    2c94:	fe 01       	movw	r30, r28
    2c96:	ef 59       	subi	r30, 0x9F	; 159
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	82 95       	swap	r24
    2c9e:	8f 70       	andi	r24, 0x0F	; 15
    2ca0:	98 2f       	mov	r25, r24
    2ca2:	91 70       	andi	r25, 0x01	; 1
    2ca4:	88 e0       	ldi	r24, 0x08	; 8
    2ca6:	69 2f       	mov	r22, r25
    2ca8:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 5));
    2cac:	fe 01       	movw	r30, r28
    2cae:	ef 59       	subi	r30, 0x9F	; 159
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	82 95       	swap	r24
    2cb6:	86 95       	lsr	r24
    2cb8:	87 70       	andi	r24, 0x07	; 7
    2cba:	98 2f       	mov	r25, r24
    2cbc:	91 70       	andi	r25, 0x01	; 1
    2cbe:	89 e0       	ldi	r24, 0x09	; 9
    2cc0:	69 2f       	mov	r22, r25
    2cc2:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 6));
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	ef 59       	subi	r30, 0x9F	; 159
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	82 95       	swap	r24
    2cd0:	86 95       	lsr	r24
    2cd2:	86 95       	lsr	r24
    2cd4:	83 70       	andi	r24, 0x03	; 3
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	91 70       	andi	r25, 0x01	; 1
    2cda:	8a e0       	ldi	r24, 0x0A	; 10
    2cdc:	69 2f       	mov	r22, r25
    2cde:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 7));
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ef 59       	subi	r30, 0x9F	; 159
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	98 2f       	mov	r25, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	99 27       	eor	r25, r25
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	8c e0       	ldi	r24, 0x0C	; 12
    2cf4:	69 2f       	mov	r22, r25
    2cf6:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	61 e0       	ldi	r22, 0x01	; 1
    2cfe:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
    2d02:	fe 01       	movw	r30, r28
    2d04:	e3 5a       	subi	r30, 0xA3	; 163
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a0 e8       	ldi	r26, 0x80	; 128
    2d0e:	bf e3       	ldi	r27, 0x3F	; 63
    2d10:	80 83       	st	Z, r24
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	a2 83       	std	Z+2, r26	; 0x02
    2d16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d18:	8e 01       	movw	r16, r28
    2d1a:	07 5a       	subi	r16, 0xA7	; 167
    2d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e3 5a       	subi	r30, 0xA3	; 163
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	2b ea       	ldi	r18, 0xAB	; 171
    2d2e:	3a ea       	ldi	r19, 0xAA	; 170
    2d30:	4a ea       	ldi	r20, 0xAA	; 170
    2d32:	50 e4       	ldi	r21, 0x40	; 64
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	80 83       	st	Z, r24
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	a2 83       	std	Z+2, r26	; 0x02
    2d44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d46:	fe 01       	movw	r30, r28
    2d48:	e7 5a       	subi	r30, 0xA7	; 167
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	34 f4       	brge	.+12     	; 0x2d70 <Lcd_SendCMD+0x106>
		__ticks = 1;
    2d64:	fe 01       	movw	r30, r28
    2d66:	e8 5a       	subi	r30, 0xA8	; 168
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	80 83       	st	Z, r24
    2d6e:	e0 c0       	rjmp	.+448    	; 0x2f30 <Lcd_SendCMD+0x2c6>
	else if (__tmp > 255)
    2d70:	fe 01       	movw	r30, r28
    2d72:	e7 5a       	subi	r30, 0xA7	; 167
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	82 81       	ldd	r24, Z+2	; 0x02
    2d7c:	93 81       	ldd	r25, Z+3	; 0x03
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4f e7       	ldi	r20, 0x7F	; 127
    2d84:	53 e4       	ldi	r21, 0x43	; 67
    2d86:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d8a:	18 16       	cp	r1, r24
    2d8c:	0c f0       	brlt	.+2      	; 0x2d90 <Lcd_SendCMD+0x126>
    2d8e:	c0 c0       	rjmp	.+384    	; 0x2f10 <Lcd_SendCMD+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    2d90:	fe 01       	movw	r30, r28
    2d92:	e3 5a       	subi	r30, 0xA3	; 163
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	60 81       	ld	r22, Z
    2d98:	71 81       	ldd	r23, Z+1	; 0x01
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4a e7       	ldi	r20, 0x7A	; 122
    2da4:	54 e4       	ldi	r21, 0x44	; 68
    2da6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	fe 01       	movw	r30, r28
    2db0:	ec 5a       	subi	r30, 0xAC	; 172
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 83       	st	Z, r24
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	a2 83       	std	Z+2, r26	; 0x02
    2dba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbc:	8e 01       	movw	r16, r28
    2dbe:	00 5b       	subi	r16, 0xB0	; 176
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ec 5a       	subi	r30, 0xAC	; 172
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a e7       	ldi	r20, 0x7A	; 122
    2dd6:	55 e4       	ldi	r21, 0x45	; 69
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	f8 01       	movw	r30, r16
    2de2:	80 83       	st	Z, r24
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	a2 83       	std	Z+2, r26	; 0x02
    2de8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dea:	fe 01       	movw	r30, r28
    2dec:	e0 5b       	subi	r30, 0xB0	; 176
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	60 81       	ld	r22, Z
    2df2:	71 81       	ldd	r23, Z+1	; 0x01
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	40 e8       	ldi	r20, 0x80	; 128
    2dfe:	5f e3       	ldi	r21, 0x3F	; 63
    2e00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e04:	88 23       	and	r24, r24
    2e06:	44 f4       	brge	.+16     	; 0x2e18 <Lcd_SendCMD+0x1ae>
		__ticks = 1;
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e2 5b       	subi	r30, 0xB2	; 178
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	80 83       	st	Z, r24
    2e16:	64 c0       	rjmp	.+200    	; 0x2ee0 <Lcd_SendCMD+0x276>
	else if (__tmp > 65535)
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e0 5b       	subi	r30, 0xB0	; 176
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	3f ef       	ldi	r19, 0xFF	; 255
    2e2a:	4f e7       	ldi	r20, 0x7F	; 127
    2e2c:	57 e4       	ldi	r21, 0x47	; 71
    2e2e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e32:	18 16       	cp	r1, r24
    2e34:	0c f0       	brlt	.+2      	; 0x2e38 <Lcd_SendCMD+0x1ce>
    2e36:	43 c0       	rjmp	.+134    	; 0x2ebe <Lcd_SendCMD+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e38:	fe 01       	movw	r30, r28
    2e3a:	ec 5a       	subi	r30, 0xAC	; 172
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e2       	ldi	r20, 0x20	; 32
    2e4c:	51 e4       	ldi	r21, 0x41	; 65
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8e 01       	movw	r16, r28
    2e58:	02 5b       	subi	r16, 0xB2	; 178
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	bc 01       	movw	r22, r24
    2e5e:	cd 01       	movw	r24, r26
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	f8 01       	movw	r30, r16
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
    2e6e:	1f c0       	rjmp	.+62     	; 0x2eae <Lcd_SendCMD+0x244>
    2e70:	fe 01       	movw	r30, r28
    2e72:	e4 5b       	subi	r30, 0xB4	; 180
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 e9       	ldi	r24, 0x90	; 144
    2e78:	91 e0       	ldi	r25, 0x01	; 1
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e4 5b       	subi	r30, 0xB4	; 180
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <Lcd_SendCMD+0x21e>
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e4 5b       	subi	r30, 0xB4	; 180
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	de 01       	movw	r26, r28
    2e98:	a2 5b       	subi	r26, 0xB2	; 178
    2e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e2 5b       	subi	r30, 0xB2	; 178
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 81       	ld	r24, Z
    2ea4:	91 81       	ldd	r25, Z+1	; 0x01
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	11 96       	adiw	r26, 0x01	; 1
    2eaa:	9c 93       	st	X, r25
    2eac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e2 5b       	subi	r30, 0xB2	; 178
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	d1 f6       	brne	.-76     	; 0x2e70 <Lcd_SendCMD+0x206>
    2ebc:	4b c0       	rjmp	.+150    	; 0x2f54 <Lcd_SendCMD+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	8e 01       	movw	r16, r28
    2ec0:	02 5b       	subi	r16, 0xB2	; 178
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e0 5b       	subi	r30, 0xB0	; 176
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	f8 01       	movw	r30, r16
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	80 83       	st	Z, r24
    2ee0:	de 01       	movw	r26, r28
    2ee2:	a6 5b       	subi	r26, 0xB6	; 182
    2ee4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	e2 5b       	subi	r30, 0xB2	; 178
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	11 96       	adiw	r26, 0x01	; 1
    2ef2:	9c 93       	st	X, r25
    2ef4:	8e 93       	st	-X, r24
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e6 5b       	subi	r30, 0xB6	; 182
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <Lcd_SendCMD+0x296>
    2f04:	fe 01       	movw	r30, r28
    2f06:	e6 5b       	subi	r30, 0xB6	; 182
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	91 83       	std	Z+1, r25	; 0x01
    2f0c:	80 83       	st	Z, r24
    2f0e:	22 c0       	rjmp	.+68     	; 0x2f54 <Lcd_SendCMD+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f10:	8e 01       	movw	r16, r28
    2f12:	08 5a       	subi	r16, 0xA8	; 168
    2f14:	1f 4f       	sbci	r17, 0xFF	; 255
    2f16:	fe 01       	movw	r30, r28
    2f18:	e7 5a       	subi	r30, 0xA7	; 167
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	60 81       	ld	r22, Z
    2f1e:	71 81       	ldd	r23, Z+1	; 0x01
    2f20:	82 81       	ldd	r24, Z+2	; 0x02
    2f22:	93 81       	ldd	r25, Z+3	; 0x03
    2f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	f8 01       	movw	r30, r16
    2f2e:	80 83       	st	Z, r24
    2f30:	de 01       	movw	r26, r28
    2f32:	a7 5b       	subi	r26, 0xB7	; 183
    2f34:	bf 4f       	sbci	r27, 0xFF	; 255
    2f36:	fe 01       	movw	r30, r28
    2f38:	e8 5a       	subi	r30, 0xA8	; 168
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 81       	ld	r24, Z
    2f3e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f40:	fe 01       	movw	r30, r28
    2f42:	e7 5b       	subi	r30, 0xB7	; 183
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	8a 95       	dec	r24
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <Lcd_SendCMD+0x2de>
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e7 5b       	subi	r30, 0xB7	; 183
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	60 e0       	ldi	r22, 0x00	; 0
    2f58:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	eb 5b       	subi	r30, 0xBB	; 187
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	a0 e8       	ldi	r26, 0x80	; 128
    2f68:	bf e3       	ldi	r27, 0x3F	; 63
    2f6a:	80 83       	st	Z, r24
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	a2 83       	std	Z+2, r26	; 0x02
    2f70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f72:	8e 01       	movw	r16, r28
    2f74:	0f 5b       	subi	r16, 0xBF	; 191
    2f76:	1f 4f       	sbci	r17, 0xFF	; 255
    2f78:	fe 01       	movw	r30, r28
    2f7a:	eb 5b       	subi	r30, 0xBB	; 187
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	2b ea       	ldi	r18, 0xAB	; 171
    2f88:	3a ea       	ldi	r19, 0xAA	; 170
    2f8a:	4a ea       	ldi	r20, 0xAA	; 170
    2f8c:	50 e4       	ldi	r21, 0x40	; 64
    2f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	f8 01       	movw	r30, r16
    2f98:	80 83       	st	Z, r24
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	a2 83       	std	Z+2, r26	; 0x02
    2f9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ef 5b       	subi	r30, 0xBF	; 191
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	93 81       	ldd	r25, Z+3	; 0x03
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e8       	ldi	r20, 0x80	; 128
    2fb4:	5f e3       	ldi	r21, 0x3F	; 63
    2fb6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fba:	88 23       	and	r24, r24
    2fbc:	34 f4       	brge	.+12     	; 0x2fca <Lcd_SendCMD+0x360>
		__ticks = 1;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e0 5c       	subi	r30, 0xC0	; 192
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 83       	st	Z, r24
    2fc8:	9d c0       	rjmp	.+314    	; 0x3104 <Lcd_SendCMD+0x49a>
	else if (__tmp > 255)
    2fca:	fe 01       	movw	r30, r28
    2fcc:	ef 5b       	subi	r30, 0xBF	; 191
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	60 81       	ld	r22, Z
    2fd2:	71 81       	ldd	r23, Z+1	; 0x01
    2fd4:	82 81       	ldd	r24, Z+2	; 0x02
    2fd6:	93 81       	ldd	r25, Z+3	; 0x03
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	4f e7       	ldi	r20, 0x7F	; 127
    2fde:	53 e4       	ldi	r21, 0x43	; 67
    2fe0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fe4:	18 16       	cp	r1, r24
    2fe6:	0c f0       	brlt	.+2      	; 0x2fea <Lcd_SendCMD+0x380>
    2fe8:	7e c0       	rjmp	.+252    	; 0x30e6 <Lcd_SendCMD+0x47c>
	{
		_delay_ms(__us / 1000.0);
    2fea:	fe 01       	movw	r30, r28
    2fec:	eb 5b       	subi	r30, 0xBB	; 187
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	60 81       	ld	r22, Z
    2ff2:	71 81       	ldd	r23, Z+1	; 0x01
    2ff4:	82 81       	ldd	r24, Z+2	; 0x02
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4a e7       	ldi	r20, 0x7A	; 122
    2ffe:	54 e4       	ldi	r21, 0x44	; 68
    3000:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	8c af       	std	Y+60, r24	; 0x3c
    300a:	9d af       	std	Y+61, r25	; 0x3d
    300c:	ae af       	std	Y+62, r26	; 0x3e
    300e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3010:	6c ad       	ldd	r22, Y+60	; 0x3c
    3012:	7d ad       	ldd	r23, Y+61	; 0x3d
    3014:	8e ad       	ldd	r24, Y+62	; 0x3e
    3016:	9f ad       	ldd	r25, Y+63	; 0x3f
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	4a e7       	ldi	r20, 0x7A	; 122
    301e:	55 e4       	ldi	r21, 0x45	; 69
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	88 af       	std	Y+56, r24	; 0x38
    302a:	99 af       	std	Y+57, r25	; 0x39
    302c:	aa af       	std	Y+58, r26	; 0x3a
    302e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3030:	68 ad       	ldd	r22, Y+56	; 0x38
    3032:	79 ad       	ldd	r23, Y+57	; 0x39
    3034:	8a ad       	ldd	r24, Y+58	; 0x3a
    3036:	9b ad       	ldd	r25, Y+59	; 0x3b
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	2c f4       	brge	.+10     	; 0x3052 <Lcd_SendCMD+0x3e8>
		__ticks = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9f ab       	std	Y+55, r25	; 0x37
    304e:	8e ab       	std	Y+54, r24	; 0x36
    3050:	3f c0       	rjmp	.+126    	; 0x30d0 <Lcd_SendCMD+0x466>
	else if (__tmp > 65535)
    3052:	68 ad       	ldd	r22, Y+56	; 0x38
    3054:	79 ad       	ldd	r23, Y+57	; 0x39
    3056:	8a ad       	ldd	r24, Y+58	; 0x3a
    3058:	9b ad       	ldd	r25, Y+59	; 0x3b
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	3f ef       	ldi	r19, 0xFF	; 255
    305e:	4f e7       	ldi	r20, 0x7F	; 127
    3060:	57 e4       	ldi	r21, 0x47	; 71
    3062:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3066:	18 16       	cp	r1, r24
    3068:	4c f5       	brge	.+82     	; 0x30bc <Lcd_SendCMD+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306a:	6c ad       	ldd	r22, Y+60	; 0x3c
    306c:	7d ad       	ldd	r23, Y+61	; 0x3d
    306e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3070:	9f ad       	ldd	r25, Y+63	; 0x3f
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	9f ab       	std	Y+55, r25	; 0x37
    3090:	8e ab       	std	Y+54, r24	; 0x36
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <Lcd_SendCMD+0x448>
    3094:	80 e9       	ldi	r24, 0x90	; 144
    3096:	91 e0       	ldi	r25, 0x01	; 1
    3098:	9d ab       	std	Y+53, r25	; 0x35
    309a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    309c:	8c a9       	ldd	r24, Y+52	; 0x34
    309e:	9d a9       	ldd	r25, Y+53	; 0x35
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <Lcd_SendCMD+0x436>
    30a4:	9d ab       	std	Y+53, r25	; 0x35
    30a6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a8:	8e a9       	ldd	r24, Y+54	; 0x36
    30aa:	9f a9       	ldd	r25, Y+55	; 0x37
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	9f ab       	std	Y+55, r25	; 0x37
    30b0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	8e a9       	ldd	r24, Y+54	; 0x36
    30b4:	9f a9       	ldd	r25, Y+55	; 0x37
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	69 f7       	brne	.-38     	; 0x3094 <Lcd_SendCMD+0x42a>
    30ba:	2d c0       	rjmp	.+90     	; 0x3116 <Lcd_SendCMD+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30bc:	68 ad       	ldd	r22, Y+56	; 0x38
    30be:	79 ad       	ldd	r23, Y+57	; 0x39
    30c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    30c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9f ab       	std	Y+55, r25	; 0x37
    30ce:	8e ab       	std	Y+54, r24	; 0x36
    30d0:	8e a9       	ldd	r24, Y+54	; 0x36
    30d2:	9f a9       	ldd	r25, Y+55	; 0x37
    30d4:	9b ab       	std	Y+51, r25	; 0x33
    30d6:	8a ab       	std	Y+50, r24	; 0x32
    30d8:	8a a9       	ldd	r24, Y+50	; 0x32
    30da:	9b a9       	ldd	r25, Y+51	; 0x33
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <Lcd_SendCMD+0x472>
    30e0:	9b ab       	std	Y+51, r25	; 0x33
    30e2:	8a ab       	std	Y+50, r24	; 0x32
    30e4:	18 c0       	rjmp	.+48     	; 0x3116 <Lcd_SendCMD+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30e6:	fe 01       	movw	r30, r28
    30e8:	ef 5b       	subi	r30, 0xBF	; 191
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	fe 01       	movw	r30, r28
    30fe:	e0 5c       	subi	r30, 0xC0	; 192
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 83       	st	Z, r24
    3104:	fe 01       	movw	r30, r28
    3106:	e0 5c       	subi	r30, 0xC0	; 192
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	80 81       	ld	r24, Z
    310c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    310e:	89 a9       	ldd	r24, Y+49	; 0x31
    3110:	8a 95       	dec	r24
    3112:	f1 f7       	brne	.-4      	; 0x3110 <Lcd_SendCMD+0x4a6>
    3114:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 0));
    3116:	fe 01       	movw	r30, r28
    3118:	ef 59       	subi	r30, 0x9F	; 159
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 81       	ld	r24, Z
    311e:	98 2f       	mov	r25, r24
    3120:	91 70       	andi	r25, 0x01	; 1
    3122:	88 e0       	ldi	r24, 0x08	; 8
    3124:	69 2f       	mov	r22, r25
    3126:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 1));
    312a:	fe 01       	movw	r30, r28
    312c:	ef 59       	subi	r30, 0x9F	; 159
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 81       	ld	r24, Z
    3132:	86 95       	lsr	r24
    3134:	98 2f       	mov	r25, r24
    3136:	91 70       	andi	r25, 0x01	; 1
    3138:	89 e0       	ldi	r24, 0x09	; 9
    313a:	69 2f       	mov	r22, r25
    313c:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 2));
    3140:	fe 01       	movw	r30, r28
    3142:	ef 59       	subi	r30, 0x9F	; 159
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	86 95       	lsr	r24
    314a:	86 95       	lsr	r24
    314c:	98 2f       	mov	r25, r24
    314e:	91 70       	andi	r25, 0x01	; 1
    3150:	8a e0       	ldi	r24, 0x0A	; 10
    3152:	69 2f       	mov	r22, r25
    3154:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 3));
    3158:	fe 01       	movw	r30, r28
    315a:	ef 59       	subi	r30, 0x9F	; 159
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	80 81       	ld	r24, Z
    3160:	86 95       	lsr	r24
    3162:	86 95       	lsr	r24
    3164:	86 95       	lsr	r24
    3166:	98 2f       	mov	r25, r24
    3168:	91 70       	andi	r25, 0x01	; 1
    316a:	8c e0       	ldi	r24, 0x0C	; 12
    316c:	69 2f       	mov	r22, r25
    316e:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3172:	82 e0       	ldi	r24, 0x02	; 2
    3174:	61 e0       	ldi	r22, 0x01	; 1
    3176:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	a0 e8       	ldi	r26, 0x80	; 128
    3180:	bf e3       	ldi	r27, 0x3F	; 63
    3182:	8d a7       	std	Y+45, r24	; 0x2d
    3184:	9e a7       	std	Y+46, r25	; 0x2e
    3186:	af a7       	std	Y+47, r26	; 0x2f
    3188:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    318a:	6d a5       	ldd	r22, Y+45	; 0x2d
    318c:	7e a5       	ldd	r23, Y+46	; 0x2e
    318e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3190:	98 a9       	ldd	r25, Y+48	; 0x30
    3192:	2b ea       	ldi	r18, 0xAB	; 171
    3194:	3a ea       	ldi	r19, 0xAA	; 170
    3196:	4a ea       	ldi	r20, 0xAA	; 170
    3198:	50 e4       	ldi	r21, 0x40	; 64
    319a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	89 a7       	std	Y+41, r24	; 0x29
    31a4:	9a a7       	std	Y+42, r25	; 0x2a
    31a6:	ab a7       	std	Y+43, r26	; 0x2b
    31a8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    31aa:	69 a5       	ldd	r22, Y+41	; 0x29
    31ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    31ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    31b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e8       	ldi	r20, 0x80	; 128
    31b8:	5f e3       	ldi	r21, 0x3F	; 63
    31ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31be:	88 23       	and	r24, r24
    31c0:	1c f4       	brge	.+6      	; 0x31c8 <Lcd_SendCMD+0x55e>
		__ticks = 1;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	88 a7       	std	Y+40, r24	; 0x28
    31c6:	91 c0       	rjmp	.+290    	; 0x32ea <Lcd_SendCMD+0x680>
	else if (__tmp > 255)
    31c8:	69 a5       	ldd	r22, Y+41	; 0x29
    31ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    31cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	4f e7       	ldi	r20, 0x7F	; 127
    31d6:	53 e4       	ldi	r21, 0x43	; 67
    31d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    31dc:	18 16       	cp	r1, r24
    31de:	0c f0       	brlt	.+2      	; 0x31e2 <Lcd_SendCMD+0x578>
    31e0:	7b c0       	rjmp	.+246    	; 0x32d8 <Lcd_SendCMD+0x66e>
	{
		_delay_ms(__us / 1000.0);
    31e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    31e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    31e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e8:	98 a9       	ldd	r25, Y+48	; 0x30
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	4a e7       	ldi	r20, 0x7A	; 122
    31f0:	54 e4       	ldi	r21, 0x44	; 68
    31f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8c a3       	std	Y+36, r24	; 0x24
    31fc:	9d a3       	std	Y+37, r25	; 0x25
    31fe:	ae a3       	std	Y+38, r26	; 0x26
    3200:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	6c a1       	ldd	r22, Y+36	; 0x24
    3204:	7d a1       	ldd	r23, Y+37	; 0x25
    3206:	8e a1       	ldd	r24, Y+38	; 0x26
    3208:	9f a1       	ldd	r25, Y+39	; 0x27
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a e7       	ldi	r20, 0x7A	; 122
    3210:	55 e4       	ldi	r21, 0x45	; 69
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	88 a3       	std	Y+32, r24	; 0x20
    321c:	99 a3       	std	Y+33, r25	; 0x21
    321e:	aa a3       	std	Y+34, r26	; 0x22
    3220:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3222:	68 a1       	ldd	r22, Y+32	; 0x20
    3224:	79 a1       	ldd	r23, Y+33	; 0x21
    3226:	8a a1       	ldd	r24, Y+34	; 0x22
    3228:	9b a1       	ldd	r25, Y+35	; 0x23
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <Lcd_SendCMD+0x5da>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9f 8f       	std	Y+31, r25	; 0x1f
    3240:	8e 8f       	std	Y+30, r24	; 0x1e
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <Lcd_SendCMD+0x658>
	else if (__tmp > 65535)
    3244:	68 a1       	ldd	r22, Y+32	; 0x20
    3246:	79 a1       	ldd	r23, Y+33	; 0x21
    3248:	8a a1       	ldd	r24, Y+34	; 0x22
    324a:	9b a1       	ldd	r25, Y+35	; 0x23
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <Lcd_SendCMD+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	6c a1       	ldd	r22, Y+36	; 0x24
    325e:	7d a1       	ldd	r23, Y+37	; 0x25
    3260:	8e a1       	ldd	r24, Y+38	; 0x26
    3262:	9f a1       	ldd	r25, Y+39	; 0x27
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9f 8f       	std	Y+31, r25	; 0x1f
    3282:	8e 8f       	std	Y+30, r24	; 0x1e
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <Lcd_SendCMD+0x63a>
    3286:	80 e9       	ldi	r24, 0x90	; 144
    3288:	91 e0       	ldi	r25, 0x01	; 1
    328a:	9d 8f       	std	Y+29, r25	; 0x1d
    328c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    328e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3290:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <Lcd_SendCMD+0x628>
    3296:	9d 8f       	std	Y+29, r25	; 0x1d
    3298:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    329c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9f 8f       	std	Y+31, r25	; 0x1f
    32a2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <Lcd_SendCMD+0x61c>
    32ac:	24 c0       	rjmp	.+72     	; 0x32f6 <Lcd_SendCMD+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	68 a1       	ldd	r22, Y+32	; 0x20
    32b0:	79 a1       	ldd	r23, Y+33	; 0x21
    32b2:	8a a1       	ldd	r24, Y+34	; 0x22
    32b4:	9b a1       	ldd	r25, Y+35	; 0x23
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9f 8f       	std	Y+31, r25	; 0x1f
    32c0:	8e 8f       	std	Y+30, r24	; 0x1e
    32c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32c6:	9b 8f       	std	Y+27, r25	; 0x1b
    32c8:	8a 8f       	std	Y+26, r24	; 0x1a
    32ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <Lcd_SendCMD+0x664>
    32d2:	9b 8f       	std	Y+27, r25	; 0x1b
    32d4:	8a 8f       	std	Y+26, r24	; 0x1a
    32d6:	0f c0       	rjmp	.+30     	; 0x32f6 <Lcd_SendCMD+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32d8:	69 a5       	ldd	r22, Y+41	; 0x29
    32da:	7a a5       	ldd	r23, Y+42	; 0x2a
    32dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    32de:	9c a5       	ldd	r25, Y+44	; 0x2c
    32e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	88 a7       	std	Y+40, r24	; 0x28
    32ea:	88 a5       	ldd	r24, Y+40	; 0x28
    32ec:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32ee:	89 8d       	ldd	r24, Y+25	; 0x19
    32f0:	8a 95       	dec	r24
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <Lcd_SendCMD+0x686>
    32f4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	60 e0       	ldi	r22, 0x00	; 0
    32fa:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	a0 e8       	ldi	r26, 0x80	; 128
    3304:	bf e3       	ldi	r27, 0x3F	; 63
    3306:	8d 8b       	std	Y+21, r24	; 0x15
    3308:	9e 8b       	std	Y+22, r25	; 0x16
    330a:	af 8b       	std	Y+23, r26	; 0x17
    330c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    330e:	6d 89       	ldd	r22, Y+21	; 0x15
    3310:	7e 89       	ldd	r23, Y+22	; 0x16
    3312:	8f 89       	ldd	r24, Y+23	; 0x17
    3314:	98 8d       	ldd	r25, Y+24	; 0x18
    3316:	2b ea       	ldi	r18, 0xAB	; 171
    3318:	3a ea       	ldi	r19, 0xAA	; 170
    331a:	4a ea       	ldi	r20, 0xAA	; 170
    331c:	50 e4       	ldi	r21, 0x40	; 64
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	89 8b       	std	Y+17, r24	; 0x11
    3328:	9a 8b       	std	Y+18, r25	; 0x12
    332a:	ab 8b       	std	Y+19, r26	; 0x13
    332c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    332e:	69 89       	ldd	r22, Y+17	; 0x11
    3330:	7a 89       	ldd	r23, Y+18	; 0x12
    3332:	8b 89       	ldd	r24, Y+19	; 0x13
    3334:	9c 89       	ldd	r25, Y+20	; 0x14
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e8       	ldi	r20, 0x80	; 128
    333c:	5f e3       	ldi	r21, 0x3F	; 63
    333e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3342:	88 23       	and	r24, r24
    3344:	1c f4       	brge	.+6      	; 0x334c <Lcd_SendCMD+0x6e2>
		__ticks = 1;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	88 8b       	std	Y+16, r24	; 0x10
    334a:	91 c0       	rjmp	.+290    	; 0x346e <Lcd_SendCMD+0x804>
	else if (__tmp > 255)
    334c:	69 89       	ldd	r22, Y+17	; 0x11
    334e:	7a 89       	ldd	r23, Y+18	; 0x12
    3350:	8b 89       	ldd	r24, Y+19	; 0x13
    3352:	9c 89       	ldd	r25, Y+20	; 0x14
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4f e7       	ldi	r20, 0x7F	; 127
    335a:	53 e4       	ldi	r21, 0x43	; 67
    335c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3360:	18 16       	cp	r1, r24
    3362:	0c f0       	brlt	.+2      	; 0x3366 <Lcd_SendCMD+0x6fc>
    3364:	7b c0       	rjmp	.+246    	; 0x345c <Lcd_SendCMD+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    3366:	6d 89       	ldd	r22, Y+21	; 0x15
    3368:	7e 89       	ldd	r23, Y+22	; 0x16
    336a:	8f 89       	ldd	r24, Y+23	; 0x17
    336c:	98 8d       	ldd	r25, Y+24	; 0x18
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a e7       	ldi	r20, 0x7A	; 122
    3374:	54 e4       	ldi	r21, 0x44	; 68
    3376:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	8c 87       	std	Y+12, r24	; 0x0c
    3380:	9d 87       	std	Y+13, r25	; 0x0d
    3382:	ae 87       	std	Y+14, r26	; 0x0e
    3384:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3386:	6c 85       	ldd	r22, Y+12	; 0x0c
    3388:	7d 85       	ldd	r23, Y+13	; 0x0d
    338a:	8e 85       	ldd	r24, Y+14	; 0x0e
    338c:	9f 85       	ldd	r25, Y+15	; 0x0f
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	4a e7       	ldi	r20, 0x7A	; 122
    3394:	55 e4       	ldi	r21, 0x45	; 69
    3396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	88 87       	std	Y+8, r24	; 0x08
    33a0:	99 87       	std	Y+9, r25	; 0x09
    33a2:	aa 87       	std	Y+10, r26	; 0x0a
    33a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33a6:	68 85       	ldd	r22, Y+8	; 0x08
    33a8:	79 85       	ldd	r23, Y+9	; 0x09
    33aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e8       	ldi	r20, 0x80	; 128
    33b4:	5f e3       	ldi	r21, 0x3F	; 63
    33b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33ba:	88 23       	and	r24, r24
    33bc:	2c f4       	brge	.+10     	; 0x33c8 <Lcd_SendCMD+0x75e>
		__ticks = 1;
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	9f 83       	std	Y+7, r25	; 0x07
    33c4:	8e 83       	std	Y+6, r24	; 0x06
    33c6:	3f c0       	rjmp	.+126    	; 0x3446 <Lcd_SendCMD+0x7dc>
	else if (__tmp > 65535)
    33c8:	68 85       	ldd	r22, Y+8	; 0x08
    33ca:	79 85       	ldd	r23, Y+9	; 0x09
    33cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	3f ef       	ldi	r19, 0xFF	; 255
    33d4:	4f e7       	ldi	r20, 0x7F	; 127
    33d6:	57 e4       	ldi	r21, 0x47	; 71
    33d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33dc:	18 16       	cp	r1, r24
    33de:	4c f5       	brge	.+82     	; 0x3432 <Lcd_SendCMD+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    33e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    33e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    33e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e2       	ldi	r20, 0x20	; 32
    33ee:	51 e4       	ldi	r21, 0x41	; 65
    33f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	bc 01       	movw	r22, r24
    33fa:	cd 01       	movw	r24, r26
    33fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	9f 83       	std	Y+7, r25	; 0x07
    3406:	8e 83       	std	Y+6, r24	; 0x06
    3408:	0f c0       	rjmp	.+30     	; 0x3428 <Lcd_SendCMD+0x7be>
    340a:	80 e9       	ldi	r24, 0x90	; 144
    340c:	91 e0       	ldi	r25, 0x01	; 1
    340e:	9d 83       	std	Y+5, r25	; 0x05
    3410:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3412:	8c 81       	ldd	r24, Y+4	; 0x04
    3414:	9d 81       	ldd	r25, Y+5	; 0x05
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <Lcd_SendCMD+0x7ac>
    341a:	9d 83       	std	Y+5, r25	; 0x05
    341c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341e:	8e 81       	ldd	r24, Y+6	; 0x06
    3420:	9f 81       	ldd	r25, Y+7	; 0x07
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	9f 83       	std	Y+7, r25	; 0x07
    3426:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3428:	8e 81       	ldd	r24, Y+6	; 0x06
    342a:	9f 81       	ldd	r25, Y+7	; 0x07
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	69 f7       	brne	.-38     	; 0x340a <Lcd_SendCMD+0x7a0>
    3430:	24 c0       	rjmp	.+72     	; 0x347a <Lcd_SendCMD+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3432:	68 85       	ldd	r22, Y+8	; 0x08
    3434:	79 85       	ldd	r23, Y+9	; 0x09
    3436:	8a 85       	ldd	r24, Y+10	; 0x0a
    3438:	9b 85       	ldd	r25, Y+11	; 0x0b
    343a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	9f 83       	std	Y+7, r25	; 0x07
    3444:	8e 83       	std	Y+6, r24	; 0x06
    3446:	8e 81       	ldd	r24, Y+6	; 0x06
    3448:	9f 81       	ldd	r25, Y+7	; 0x07
    344a:	9b 83       	std	Y+3, r25	; 0x03
    344c:	8a 83       	std	Y+2, r24	; 0x02
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	9b 81       	ldd	r25, Y+3	; 0x03
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	f1 f7       	brne	.-4      	; 0x3452 <Lcd_SendCMD+0x7e8>
    3456:	9b 83       	std	Y+3, r25	; 0x03
    3458:	8a 83       	std	Y+2, r24	; 0x02
    345a:	0f c0       	rjmp	.+30     	; 0x347a <Lcd_SendCMD+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    345c:	69 89       	ldd	r22, Y+17	; 0x11
    345e:	7a 89       	ldd	r23, Y+18	; 0x12
    3460:	8b 89       	ldd	r24, Y+19	; 0x13
    3462:	9c 89       	ldd	r25, Y+20	; 0x14
    3464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	88 8b       	std	Y+16, r24	; 0x10
    346e:	88 89       	ldd	r24, Y+16	; 0x10
    3470:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	8a 95       	dec	r24
    3476:	f1 f7       	brne	.-4      	; 0x3474 <Lcd_SendCMD+0x80a>
    3478:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);  // Wait for the command to execute
}
    347a:	cf 59       	subi	r28, 0x9F	; 159
    347c:	df 4f       	sbci	r29, 0xFF	; 255
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	f8 94       	cli
    3482:	de bf       	out	0x3e, r29	; 62
    3484:	0f be       	out	0x3f, r0	; 63
    3486:	cd bf       	out	0x3d, r28	; 61
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	08 95       	ret

00003492 <Lcd_SendData>:

void Lcd_SendData(u8 data) {
    3492:	0f 93       	push	r16
    3494:	1f 93       	push	r17
    3496:	df 93       	push	r29
    3498:	cf 93       	push	r28
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	c1 56       	subi	r28, 0x61	; 97
    34a0:	d0 40       	sbci	r29, 0x00	; 0
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	f8 94       	cli
    34a6:	de bf       	out	0x3e, r29	; 62
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	cd bf       	out	0x3d, r28	; 61
    34ac:	fe 01       	movw	r30, r28
    34ae:	ef 59       	subi	r30, 0x9F	; 159
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 83       	st	Z, r24

	// Set RS to data mode
//	SET_BIT(PORTA, LCD_RS);
	Dio_WriteChannel(LCD_RS, STD_HIGH);
    34b4:	83 e0       	ldi	r24, 0x03	; 3
    34b6:	61 e0       	ldi	r22, 0x01	; 1
    34b8:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	// Send the high nibble

	Dio_WriteChannel(PB_0, GET_BIT(data, 4));
    34bc:	fe 01       	movw	r30, r28
    34be:	ef 59       	subi	r30, 0x9F	; 159
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	80 81       	ld	r24, Z
    34c4:	82 95       	swap	r24
    34c6:	8f 70       	andi	r24, 0x0F	; 15
    34c8:	98 2f       	mov	r25, r24
    34ca:	91 70       	andi	r25, 0x01	; 1
    34cc:	88 e0       	ldi	r24, 0x08	; 8
    34ce:	69 2f       	mov	r22, r25
    34d0:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 5));
    34d4:	fe 01       	movw	r30, r28
    34d6:	ef 59       	subi	r30, 0x9F	; 159
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	80 81       	ld	r24, Z
    34dc:	82 95       	swap	r24
    34de:	86 95       	lsr	r24
    34e0:	87 70       	andi	r24, 0x07	; 7
    34e2:	98 2f       	mov	r25, r24
    34e4:	91 70       	andi	r25, 0x01	; 1
    34e6:	89 e0       	ldi	r24, 0x09	; 9
    34e8:	69 2f       	mov	r22, r25
    34ea:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 6));
    34ee:	fe 01       	movw	r30, r28
    34f0:	ef 59       	subi	r30, 0x9F	; 159
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	82 95       	swap	r24
    34f8:	86 95       	lsr	r24
    34fa:	86 95       	lsr	r24
    34fc:	83 70       	andi	r24, 0x03	; 3
    34fe:	98 2f       	mov	r25, r24
    3500:	91 70       	andi	r25, 0x01	; 1
    3502:	8a e0       	ldi	r24, 0x0A	; 10
    3504:	69 2f       	mov	r22, r25
    3506:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 7));
    350a:	fe 01       	movw	r30, r28
    350c:	ef 59       	subi	r30, 0x9F	; 159
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	98 2f       	mov	r25, r24
    3514:	99 1f       	adc	r25, r25
    3516:	99 27       	eor	r25, r25
    3518:	99 1f       	adc	r25, r25
    351a:	8c e0       	ldi	r24, 0x0C	; 12
    351c:	69 2f       	mov	r22, r25
    351e:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	61 e0       	ldi	r22, 0x01	; 1
    3526:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
    352a:	fe 01       	movw	r30, r28
    352c:	e3 5a       	subi	r30, 0xA3	; 163
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	a0 e8       	ldi	r26, 0x80	; 128
    3536:	bf e3       	ldi	r27, 0x3F	; 63
    3538:	80 83       	st	Z, r24
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	a2 83       	std	Z+2, r26	; 0x02
    353e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3540:	8e 01       	movw	r16, r28
    3542:	07 5a       	subi	r16, 0xA7	; 167
    3544:	1f 4f       	sbci	r17, 0xFF	; 255
    3546:	fe 01       	movw	r30, r28
    3548:	e3 5a       	subi	r30, 0xA3	; 163
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	60 81       	ld	r22, Z
    354e:	71 81       	ldd	r23, Z+1	; 0x01
    3550:	82 81       	ldd	r24, Z+2	; 0x02
    3552:	93 81       	ldd	r25, Z+3	; 0x03
    3554:	2b ea       	ldi	r18, 0xAB	; 171
    3556:	3a ea       	ldi	r19, 0xAA	; 170
    3558:	4a ea       	ldi	r20, 0xAA	; 170
    355a:	50 e4       	ldi	r21, 0x40	; 64
    355c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	f8 01       	movw	r30, r16
    3566:	80 83       	st	Z, r24
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	a2 83       	std	Z+2, r26	; 0x02
    356c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    356e:	fe 01       	movw	r30, r28
    3570:	e7 5a       	subi	r30, 0xA7	; 167
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	60 81       	ld	r22, Z
    3576:	71 81       	ldd	r23, Z+1	; 0x01
    3578:	82 81       	ldd	r24, Z+2	; 0x02
    357a:	93 81       	ldd	r25, Z+3	; 0x03
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e8       	ldi	r20, 0x80	; 128
    3582:	5f e3       	ldi	r21, 0x3F	; 63
    3584:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3588:	88 23       	and	r24, r24
    358a:	34 f4       	brge	.+12     	; 0x3598 <Lcd_SendData+0x106>
		__ticks = 1;
    358c:	fe 01       	movw	r30, r28
    358e:	e8 5a       	subi	r30, 0xA8	; 168
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	80 83       	st	Z, r24
    3596:	e0 c0       	rjmp	.+448    	; 0x3758 <Lcd_SendData+0x2c6>
	else if (__tmp > 255)
    3598:	fe 01       	movw	r30, r28
    359a:	e7 5a       	subi	r30, 0xA7	; 167
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	4f e7       	ldi	r20, 0x7F	; 127
    35ac:	53 e4       	ldi	r21, 0x43	; 67
    35ae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35b2:	18 16       	cp	r1, r24
    35b4:	0c f0       	brlt	.+2      	; 0x35b8 <Lcd_SendData+0x126>
    35b6:	c0 c0       	rjmp	.+384    	; 0x3738 <Lcd_SendData+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    35b8:	fe 01       	movw	r30, r28
    35ba:	e3 5a       	subi	r30, 0xA3	; 163
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	60 81       	ld	r22, Z
    35c0:	71 81       	ldd	r23, Z+1	; 0x01
    35c2:	82 81       	ldd	r24, Z+2	; 0x02
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	4a e7       	ldi	r20, 0x7A	; 122
    35cc:	54 e4       	ldi	r21, 0x44	; 68
    35ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	fe 01       	movw	r30, r28
    35d8:	ec 5a       	subi	r30, 0xAC	; 172
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 83       	st	Z, r24
    35de:	91 83       	std	Z+1, r25	; 0x01
    35e0:	a2 83       	std	Z+2, r26	; 0x02
    35e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e4:	8e 01       	movw	r16, r28
    35e6:	00 5b       	subi	r16, 0xB0	; 176
    35e8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ea:	fe 01       	movw	r30, r28
    35ec:	ec 5a       	subi	r30, 0xAC	; 172
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	93 81       	ldd	r25, Z+3	; 0x03
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	4a e7       	ldi	r20, 0x7A	; 122
    35fe:	55 e4       	ldi	r21, 0x45	; 69
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	f8 01       	movw	r30, r16
    360a:	80 83       	st	Z, r24
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	a2 83       	std	Z+2, r26	; 0x02
    3610:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3612:	fe 01       	movw	r30, r28
    3614:	e0 5b       	subi	r30, 0xB0	; 176
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	60 81       	ld	r22, Z
    361a:	71 81       	ldd	r23, Z+1	; 0x01
    361c:	82 81       	ldd	r24, Z+2	; 0x02
    361e:	93 81       	ldd	r25, Z+3	; 0x03
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	40 e8       	ldi	r20, 0x80	; 128
    3626:	5f e3       	ldi	r21, 0x3F	; 63
    3628:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    362c:	88 23       	and	r24, r24
    362e:	44 f4       	brge	.+16     	; 0x3640 <Lcd_SendData+0x1ae>
		__ticks = 1;
    3630:	fe 01       	movw	r30, r28
    3632:	e2 5b       	subi	r30, 0xB2	; 178
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	80 83       	st	Z, r24
    363e:	64 c0       	rjmp	.+200    	; 0x3708 <Lcd_SendData+0x276>
	else if (__tmp > 65535)
    3640:	fe 01       	movw	r30, r28
    3642:	e0 5b       	subi	r30, 0xB0	; 176
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	3f ef       	ldi	r19, 0xFF	; 255
    3652:	4f e7       	ldi	r20, 0x7F	; 127
    3654:	57 e4       	ldi	r21, 0x47	; 71
    3656:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    365a:	18 16       	cp	r1, r24
    365c:	0c f0       	brlt	.+2      	; 0x3660 <Lcd_SendData+0x1ce>
    365e:	43 c0       	rjmp	.+134    	; 0x36e6 <Lcd_SendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3660:	fe 01       	movw	r30, r28
    3662:	ec 5a       	subi	r30, 0xAC	; 172
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	60 81       	ld	r22, Z
    3668:	71 81       	ldd	r23, Z+1	; 0x01
    366a:	82 81       	ldd	r24, Z+2	; 0x02
    366c:	93 81       	ldd	r25, Z+3	; 0x03
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e2       	ldi	r20, 0x20	; 32
    3674:	51 e4       	ldi	r21, 0x41	; 65
    3676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	8e 01       	movw	r16, r28
    3680:	02 5b       	subi	r16, 0xB2	; 178
    3682:	1f 4f       	sbci	r17, 0xFF	; 255
    3684:	bc 01       	movw	r22, r24
    3686:	cd 01       	movw	r24, r26
    3688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	f8 01       	movw	r30, r16
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
    3696:	1f c0       	rjmp	.+62     	; 0x36d6 <Lcd_SendData+0x244>
    3698:	fe 01       	movw	r30, r28
    369a:	e4 5b       	subi	r30, 0xB4	; 180
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	80 e9       	ldi	r24, 0x90	; 144
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	91 83       	std	Z+1, r25	; 0x01
    36a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36a6:	fe 01       	movw	r30, r28
    36a8:	e4 5b       	subi	r30, 0xB4	; 180
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	80 81       	ld	r24, Z
    36ae:	91 81       	ldd	r25, Z+1	; 0x01
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <Lcd_SendData+0x21e>
    36b4:	fe 01       	movw	r30, r28
    36b6:	e4 5b       	subi	r30, 0xB4	; 180
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36be:	de 01       	movw	r26, r28
    36c0:	a2 5b       	subi	r26, 0xB2	; 178
    36c2:	bf 4f       	sbci	r27, 0xFF	; 255
    36c4:	fe 01       	movw	r30, r28
    36c6:	e2 5b       	subi	r30, 0xB2	; 178
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	80 81       	ld	r24, Z
    36cc:	91 81       	ldd	r25, Z+1	; 0x01
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	11 96       	adiw	r26, 0x01	; 1
    36d2:	9c 93       	st	X, r25
    36d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d6:	fe 01       	movw	r30, r28
    36d8:	e2 5b       	subi	r30, 0xB2	; 178
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 81       	ld	r24, Z
    36de:	91 81       	ldd	r25, Z+1	; 0x01
    36e0:	00 97       	sbiw	r24, 0x00	; 0
    36e2:	d1 f6       	brne	.-76     	; 0x3698 <Lcd_SendData+0x206>
    36e4:	4b c0       	rjmp	.+150    	; 0x377c <Lcd_SendData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e6:	8e 01       	movw	r16, r28
    36e8:	02 5b       	subi	r16, 0xB2	; 178
    36ea:	1f 4f       	sbci	r17, 0xFF	; 255
    36ec:	fe 01       	movw	r30, r28
    36ee:	e0 5b       	subi	r30, 0xB0	; 176
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	f8 01       	movw	r30, r16
    3704:	91 83       	std	Z+1, r25	; 0x01
    3706:	80 83       	st	Z, r24
    3708:	de 01       	movw	r26, r28
    370a:	a6 5b       	subi	r26, 0xB6	; 182
    370c:	bf 4f       	sbci	r27, 0xFF	; 255
    370e:	fe 01       	movw	r30, r28
    3710:	e2 5b       	subi	r30, 0xB2	; 178
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	11 96       	adiw	r26, 0x01	; 1
    371a:	9c 93       	st	X, r25
    371c:	8e 93       	st	-X, r24
    371e:	fe 01       	movw	r30, r28
    3720:	e6 5b       	subi	r30, 0xB6	; 182
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <Lcd_SendData+0x296>
    372c:	fe 01       	movw	r30, r28
    372e:	e6 5b       	subi	r30, 0xB6	; 182
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24
    3736:	22 c0       	rjmp	.+68     	; 0x377c <Lcd_SendData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3738:	8e 01       	movw	r16, r28
    373a:	08 5a       	subi	r16, 0xA8	; 168
    373c:	1f 4f       	sbci	r17, 0xFF	; 255
    373e:	fe 01       	movw	r30, r28
    3740:	e7 5a       	subi	r30, 0xA7	; 167
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	60 81       	ld	r22, Z
    3746:	71 81       	ldd	r23, Z+1	; 0x01
    3748:	82 81       	ldd	r24, Z+2	; 0x02
    374a:	93 81       	ldd	r25, Z+3	; 0x03
    374c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	f8 01       	movw	r30, r16
    3756:	80 83       	st	Z, r24
    3758:	de 01       	movw	r26, r28
    375a:	a7 5b       	subi	r26, 0xB7	; 183
    375c:	bf 4f       	sbci	r27, 0xFF	; 255
    375e:	fe 01       	movw	r30, r28
    3760:	e8 5a       	subi	r30, 0xA8	; 168
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	80 81       	ld	r24, Z
    3766:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3768:	fe 01       	movw	r30, r28
    376a:	e7 5b       	subi	r30, 0xB7	; 183
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	80 81       	ld	r24, Z
    3770:	8a 95       	dec	r24
    3772:	f1 f7       	brne	.-4      	; 0x3770 <Lcd_SendData+0x2de>
    3774:	fe 01       	movw	r30, r28
    3776:	e7 5b       	subi	r30, 0xB7	; 183
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    377c:	82 e0       	ldi	r24, 0x02	; 2
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
    3784:	fe 01       	movw	r30, r28
    3786:	eb 5b       	subi	r30, 0xBB	; 187
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	a0 e8       	ldi	r26, 0x80	; 128
    3790:	bf e3       	ldi	r27, 0x3F	; 63
    3792:	80 83       	st	Z, r24
    3794:	91 83       	std	Z+1, r25	; 0x01
    3796:	a2 83       	std	Z+2, r26	; 0x02
    3798:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    379a:	8e 01       	movw	r16, r28
    379c:	0f 5b       	subi	r16, 0xBF	; 191
    379e:	1f 4f       	sbci	r17, 0xFF	; 255
    37a0:	fe 01       	movw	r30, r28
    37a2:	eb 5b       	subi	r30, 0xBB	; 187
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	60 81       	ld	r22, Z
    37a8:	71 81       	ldd	r23, Z+1	; 0x01
    37aa:	82 81       	ldd	r24, Z+2	; 0x02
    37ac:	93 81       	ldd	r25, Z+3	; 0x03
    37ae:	2b ea       	ldi	r18, 0xAB	; 171
    37b0:	3a ea       	ldi	r19, 0xAA	; 170
    37b2:	4a ea       	ldi	r20, 0xAA	; 170
    37b4:	50 e4       	ldi	r21, 0x40	; 64
    37b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	f8 01       	movw	r30, r16
    37c0:	80 83       	st	Z, r24
    37c2:	91 83       	std	Z+1, r25	; 0x01
    37c4:	a2 83       	std	Z+2, r26	; 0x02
    37c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37c8:	fe 01       	movw	r30, r28
    37ca:	ef 5b       	subi	r30, 0xBF	; 191
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	60 81       	ld	r22, Z
    37d0:	71 81       	ldd	r23, Z+1	; 0x01
    37d2:	82 81       	ldd	r24, Z+2	; 0x02
    37d4:	93 81       	ldd	r25, Z+3	; 0x03
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	40 e8       	ldi	r20, 0x80	; 128
    37dc:	5f e3       	ldi	r21, 0x3F	; 63
    37de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37e2:	88 23       	and	r24, r24
    37e4:	34 f4       	brge	.+12     	; 0x37f2 <Lcd_SendData+0x360>
		__ticks = 1;
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	fe 01       	movw	r30, r28
    37ea:	e0 5c       	subi	r30, 0xC0	; 192
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	80 83       	st	Z, r24
    37f0:	9d c0       	rjmp	.+314    	; 0x392c <Lcd_SendData+0x49a>
	else if (__tmp > 255)
    37f2:	fe 01       	movw	r30, r28
    37f4:	ef 5b       	subi	r30, 0xBF	; 191
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	60 81       	ld	r22, Z
    37fa:	71 81       	ldd	r23, Z+1	; 0x01
    37fc:	82 81       	ldd	r24, Z+2	; 0x02
    37fe:	93 81       	ldd	r25, Z+3	; 0x03
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	4f e7       	ldi	r20, 0x7F	; 127
    3806:	53 e4       	ldi	r21, 0x43	; 67
    3808:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    380c:	18 16       	cp	r1, r24
    380e:	0c f0       	brlt	.+2      	; 0x3812 <Lcd_SendData+0x380>
    3810:	7e c0       	rjmp	.+252    	; 0x390e <Lcd_SendData+0x47c>
	{
		_delay_ms(__us / 1000.0);
    3812:	fe 01       	movw	r30, r28
    3814:	eb 5b       	subi	r30, 0xBB	; 187
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	4a e7       	ldi	r20, 0x7A	; 122
    3826:	54 e4       	ldi	r21, 0x44	; 68
    3828:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	8c af       	std	Y+60, r24	; 0x3c
    3832:	9d af       	std	Y+61, r25	; 0x3d
    3834:	ae af       	std	Y+62, r26	; 0x3e
    3836:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3838:	6c ad       	ldd	r22, Y+60	; 0x3c
    383a:	7d ad       	ldd	r23, Y+61	; 0x3d
    383c:	8e ad       	ldd	r24, Y+62	; 0x3e
    383e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	4a e7       	ldi	r20, 0x7A	; 122
    3846:	55 e4       	ldi	r21, 0x45	; 69
    3848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	88 af       	std	Y+56, r24	; 0x38
    3852:	99 af       	std	Y+57, r25	; 0x39
    3854:	aa af       	std	Y+58, r26	; 0x3a
    3856:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3858:	68 ad       	ldd	r22, Y+56	; 0x38
    385a:	79 ad       	ldd	r23, Y+57	; 0x39
    385c:	8a ad       	ldd	r24, Y+58	; 0x3a
    385e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	40 e8       	ldi	r20, 0x80	; 128
    3866:	5f e3       	ldi	r21, 0x3F	; 63
    3868:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    386c:	88 23       	and	r24, r24
    386e:	2c f4       	brge	.+10     	; 0x387a <Lcd_SendData+0x3e8>
		__ticks = 1;
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	9f ab       	std	Y+55, r25	; 0x37
    3876:	8e ab       	std	Y+54, r24	; 0x36
    3878:	3f c0       	rjmp	.+126    	; 0x38f8 <Lcd_SendData+0x466>
	else if (__tmp > 65535)
    387a:	68 ad       	ldd	r22, Y+56	; 0x38
    387c:	79 ad       	ldd	r23, Y+57	; 0x39
    387e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3880:	9b ad       	ldd	r25, Y+59	; 0x3b
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	3f ef       	ldi	r19, 0xFF	; 255
    3886:	4f e7       	ldi	r20, 0x7F	; 127
    3888:	57 e4       	ldi	r21, 0x47	; 71
    388a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    388e:	18 16       	cp	r1, r24
    3890:	4c f5       	brge	.+82     	; 0x38e4 <Lcd_SendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3892:	6c ad       	ldd	r22, Y+60	; 0x3c
    3894:	7d ad       	ldd	r23, Y+61	; 0x3d
    3896:	8e ad       	ldd	r24, Y+62	; 0x3e
    3898:	9f ad       	ldd	r25, Y+63	; 0x3f
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	40 e2       	ldi	r20, 0x20	; 32
    38a0:	51 e4       	ldi	r21, 0x41	; 65
    38a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	9f ab       	std	Y+55, r25	; 0x37
    38b8:	8e ab       	std	Y+54, r24	; 0x36
    38ba:	0f c0       	rjmp	.+30     	; 0x38da <Lcd_SendData+0x448>
    38bc:	80 e9       	ldi	r24, 0x90	; 144
    38be:	91 e0       	ldi	r25, 0x01	; 1
    38c0:	9d ab       	std	Y+53, r25	; 0x35
    38c2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38c4:	8c a9       	ldd	r24, Y+52	; 0x34
    38c6:	9d a9       	ldd	r25, Y+53	; 0x35
    38c8:	01 97       	sbiw	r24, 0x01	; 1
    38ca:	f1 f7       	brne	.-4      	; 0x38c8 <Lcd_SendData+0x436>
    38cc:	9d ab       	std	Y+53, r25	; 0x35
    38ce:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d0:	8e a9       	ldd	r24, Y+54	; 0x36
    38d2:	9f a9       	ldd	r25, Y+55	; 0x37
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	9f ab       	std	Y+55, r25	; 0x37
    38d8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38da:	8e a9       	ldd	r24, Y+54	; 0x36
    38dc:	9f a9       	ldd	r25, Y+55	; 0x37
    38de:	00 97       	sbiw	r24, 0x00	; 0
    38e0:	69 f7       	brne	.-38     	; 0x38bc <Lcd_SendData+0x42a>
    38e2:	2d c0       	rjmp	.+90     	; 0x393e <Lcd_SendData+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e4:	68 ad       	ldd	r22, Y+56	; 0x38
    38e6:	79 ad       	ldd	r23, Y+57	; 0x39
    38e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    38ea:	9b ad       	ldd	r25, Y+59	; 0x3b
    38ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	9f ab       	std	Y+55, r25	; 0x37
    38f6:	8e ab       	std	Y+54, r24	; 0x36
    38f8:	8e a9       	ldd	r24, Y+54	; 0x36
    38fa:	9f a9       	ldd	r25, Y+55	; 0x37
    38fc:	9b ab       	std	Y+51, r25	; 0x33
    38fe:	8a ab       	std	Y+50, r24	; 0x32
    3900:	8a a9       	ldd	r24, Y+50	; 0x32
    3902:	9b a9       	ldd	r25, Y+51	; 0x33
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	f1 f7       	brne	.-4      	; 0x3904 <Lcd_SendData+0x472>
    3908:	9b ab       	std	Y+51, r25	; 0x33
    390a:	8a ab       	std	Y+50, r24	; 0x32
    390c:	18 c0       	rjmp	.+48     	; 0x393e <Lcd_SendData+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    390e:	fe 01       	movw	r30, r28
    3910:	ef 5b       	subi	r30, 0xBF	; 191
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	60 81       	ld	r22, Z
    3916:	71 81       	ldd	r23, Z+1	; 0x01
    3918:	82 81       	ldd	r24, Z+2	; 0x02
    391a:	93 81       	ldd	r25, Z+3	; 0x03
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	fe 01       	movw	r30, r28
    3926:	e0 5c       	subi	r30, 0xC0	; 192
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	80 83       	st	Z, r24
    392c:	fe 01       	movw	r30, r28
    392e:	e0 5c       	subi	r30, 0xC0	; 192
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 81       	ld	r24, Z
    3934:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3936:	89 a9       	ldd	r24, Y+49	; 0x31
    3938:	8a 95       	dec	r24
    393a:	f1 f7       	brne	.-4      	; 0x3938 <Lcd_SendData+0x4a6>
    393c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(data, 0));
    393e:	fe 01       	movw	r30, r28
    3940:	ef 59       	subi	r30, 0x9F	; 159
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 81       	ld	r24, Z
    3946:	98 2f       	mov	r25, r24
    3948:	91 70       	andi	r25, 0x01	; 1
    394a:	88 e0       	ldi	r24, 0x08	; 8
    394c:	69 2f       	mov	r22, r25
    394e:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 1));
    3952:	fe 01       	movw	r30, r28
    3954:	ef 59       	subi	r30, 0x9F	; 159
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	80 81       	ld	r24, Z
    395a:	86 95       	lsr	r24
    395c:	98 2f       	mov	r25, r24
    395e:	91 70       	andi	r25, 0x01	; 1
    3960:	89 e0       	ldi	r24, 0x09	; 9
    3962:	69 2f       	mov	r22, r25
    3964:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 2));
    3968:	fe 01       	movw	r30, r28
    396a:	ef 59       	subi	r30, 0x9F	; 159
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	80 81       	ld	r24, Z
    3970:	86 95       	lsr	r24
    3972:	86 95       	lsr	r24
    3974:	98 2f       	mov	r25, r24
    3976:	91 70       	andi	r25, 0x01	; 1
    3978:	8a e0       	ldi	r24, 0x0A	; 10
    397a:	69 2f       	mov	r22, r25
    397c:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 3));
    3980:	fe 01       	movw	r30, r28
    3982:	ef 59       	subi	r30, 0x9F	; 159
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	80 81       	ld	r24, Z
    3988:	86 95       	lsr	r24
    398a:	86 95       	lsr	r24
    398c:	86 95       	lsr	r24
    398e:	98 2f       	mov	r25, r24
    3990:	91 70       	andi	r25, 0x01	; 1
    3992:	8c e0       	ldi	r24, 0x0C	; 12
    3994:	69 2f       	mov	r22, r25
    3996:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	61 e0       	ldi	r22, 0x01	; 1
    399e:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	a0 e8       	ldi	r26, 0x80	; 128
    39a8:	bf e3       	ldi	r27, 0x3F	; 63
    39aa:	8d a7       	std	Y+45, r24	; 0x2d
    39ac:	9e a7       	std	Y+46, r25	; 0x2e
    39ae:	af a7       	std	Y+47, r26	; 0x2f
    39b0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    39b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    39b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39b8:	98 a9       	ldd	r25, Y+48	; 0x30
    39ba:	2b ea       	ldi	r18, 0xAB	; 171
    39bc:	3a ea       	ldi	r19, 0xAA	; 170
    39be:	4a ea       	ldi	r20, 0xAA	; 170
    39c0:	50 e4       	ldi	r21, 0x40	; 64
    39c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	89 a7       	std	Y+41, r24	; 0x29
    39cc:	9a a7       	std	Y+42, r25	; 0x2a
    39ce:	ab a7       	std	Y+43, r26	; 0x2b
    39d0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    39d2:	69 a5       	ldd	r22, Y+41	; 0x29
    39d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    39d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    39d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e8       	ldi	r20, 0x80	; 128
    39e0:	5f e3       	ldi	r21, 0x3F	; 63
    39e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39e6:	88 23       	and	r24, r24
    39e8:	1c f4       	brge	.+6      	; 0x39f0 <Lcd_SendData+0x55e>
		__ticks = 1;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	88 a7       	std	Y+40, r24	; 0x28
    39ee:	91 c0       	rjmp	.+290    	; 0x3b12 <Lcd_SendData+0x680>
	else if (__tmp > 255)
    39f0:	69 a5       	ldd	r22, Y+41	; 0x29
    39f2:	7a a5       	ldd	r23, Y+42	; 0x2a
    39f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    39f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	53 e4       	ldi	r21, 0x43	; 67
    3a00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	0c f0       	brlt	.+2      	; 0x3a0a <Lcd_SendData+0x578>
    3a08:	7b c0       	rjmp	.+246    	; 0x3b00 <Lcd_SendData+0x66e>
	{
		_delay_ms(__us / 1000.0);
    3a0a:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a0c:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a10:	98 a9       	ldd	r25, Y+48	; 0x30
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	4a e7       	ldi	r20, 0x7A	; 122
    3a18:	54 e4       	ldi	r21, 0x44	; 68
    3a1a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	8c a3       	std	Y+36, r24	; 0x24
    3a24:	9d a3       	std	Y+37, r25	; 0x25
    3a26:	ae a3       	std	Y+38, r26	; 0x26
    3a28:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	6c a1       	ldd	r22, Y+36	; 0x24
    3a2c:	7d a1       	ldd	r23, Y+37	; 0x25
    3a2e:	8e a1       	ldd	r24, Y+38	; 0x26
    3a30:	9f a1       	ldd	r25, Y+39	; 0x27
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a e7       	ldi	r20, 0x7A	; 122
    3a38:	55 e4       	ldi	r21, 0x45	; 69
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	88 a3       	std	Y+32, r24	; 0x20
    3a44:	99 a3       	std	Y+33, r25	; 0x21
    3a46:	aa a3       	std	Y+34, r26	; 0x22
    3a48:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3a4a:	68 a1       	ldd	r22, Y+32	; 0x20
    3a4c:	79 a1       	ldd	r23, Y+33	; 0x21
    3a4e:	8a a1       	ldd	r24, Y+34	; 0x22
    3a50:	9b a1       	ldd	r25, Y+35	; 0x23
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <Lcd_SendData+0x5da>
		__ticks = 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9f 8f       	std	Y+31, r25	; 0x1f
    3a68:	8e 8f       	std	Y+30, r24	; 0x1e
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <Lcd_SendData+0x658>
	else if (__tmp > 65535)
    3a6c:	68 a1       	ldd	r22, Y+32	; 0x20
    3a6e:	79 a1       	ldd	r23, Y+33	; 0x21
    3a70:	8a a1       	ldd	r24, Y+34	; 0x22
    3a72:	9b a1       	ldd	r25, Y+35	; 0x23
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <Lcd_SendData+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	6c a1       	ldd	r22, Y+36	; 0x24
    3a86:	7d a1       	ldd	r23, Y+37	; 0x25
    3a88:	8e a1       	ldd	r24, Y+38	; 0x26
    3a8a:	9f a1       	ldd	r25, Y+39	; 0x27
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9f 8f       	std	Y+31, r25	; 0x1f
    3aaa:	8e 8f       	std	Y+30, r24	; 0x1e
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <Lcd_SendData+0x63a>
    3aae:	80 e9       	ldi	r24, 0x90	; 144
    3ab0:	91 e0       	ldi	r25, 0x01	; 1
    3ab2:	9d 8f       	std	Y+29, r25	; 0x1d
    3ab4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ab6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ab8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <Lcd_SendData+0x628>
    3abe:	9d 8f       	std	Y+29, r25	; 0x1d
    3ac0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ac4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9f 8f       	std	Y+31, r25	; 0x1f
    3aca:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ace:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <Lcd_SendData+0x61c>
    3ad4:	24 c0       	rjmp	.+72     	; 0x3b1e <Lcd_SendData+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad6:	68 a1       	ldd	r22, Y+32	; 0x20
    3ad8:	79 a1       	ldd	r23, Y+33	; 0x21
    3ada:	8a a1       	ldd	r24, Y+34	; 0x22
    3adc:	9b a1       	ldd	r25, Y+35	; 0x23
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9f 8f       	std	Y+31, r25	; 0x1f
    3ae8:	8e 8f       	std	Y+30, r24	; 0x1e
    3aea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3aec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3aee:	9b 8f       	std	Y+27, r25	; 0x1b
    3af0:	8a 8f       	std	Y+26, r24	; 0x1a
    3af2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3af4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <Lcd_SendData+0x664>
    3afa:	9b 8f       	std	Y+27, r25	; 0x1b
    3afc:	8a 8f       	std	Y+26, r24	; 0x1a
    3afe:	0f c0       	rjmp	.+30     	; 0x3b1e <Lcd_SendData+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b00:	69 a5       	ldd	r22, Y+41	; 0x29
    3b02:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b04:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b06:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	88 a7       	std	Y+40, r24	; 0x28
    3b12:	88 a5       	ldd	r24, Y+40	; 0x28
    3b14:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b16:	89 8d       	ldd	r24, Y+25	; 0x19
    3b18:	8a 95       	dec	r24
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <Lcd_SendData+0x686>
    3b1c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3b1e:	82 e0       	ldi	r24, 0x02	; 2
    3b20:	60 e0       	ldi	r22, 0x00	; 0
    3b22:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	a0 e2       	ldi	r26, 0x20	; 32
    3b2c:	b1 e4       	ldi	r27, 0x41	; 65
    3b2e:	8d 8b       	std	Y+21, r24	; 0x15
    3b30:	9e 8b       	std	Y+22, r25	; 0x16
    3b32:	af 8b       	std	Y+23, r26	; 0x17
    3b34:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b36:	6d 89       	ldd	r22, Y+21	; 0x15
    3b38:	7e 89       	ldd	r23, Y+22	; 0x16
    3b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b3e:	2b ea       	ldi	r18, 0xAB	; 171
    3b40:	3a ea       	ldi	r19, 0xAA	; 170
    3b42:	4a ea       	ldi	r20, 0xAA	; 170
    3b44:	50 e4       	ldi	r21, 0x40	; 64
    3b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	89 8b       	std	Y+17, r24	; 0x11
    3b50:	9a 8b       	std	Y+18, r25	; 0x12
    3b52:	ab 8b       	std	Y+19, r26	; 0x13
    3b54:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3b56:	69 89       	ldd	r22, Y+17	; 0x11
    3b58:	7a 89       	ldd	r23, Y+18	; 0x12
    3b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e8       	ldi	r20, 0x80	; 128
    3b64:	5f e3       	ldi	r21, 0x3F	; 63
    3b66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b6a:	88 23       	and	r24, r24
    3b6c:	1c f4       	brge	.+6      	; 0x3b74 <Lcd_SendData+0x6e2>
		__ticks = 1;
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	88 8b       	std	Y+16, r24	; 0x10
    3b72:	91 c0       	rjmp	.+290    	; 0x3c96 <Lcd_SendData+0x804>
	else if (__tmp > 255)
    3b74:	69 89       	ldd	r22, Y+17	; 0x11
    3b76:	7a 89       	ldd	r23, Y+18	; 0x12
    3b78:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	4f e7       	ldi	r20, 0x7F	; 127
    3b82:	53 e4       	ldi	r21, 0x43	; 67
    3b84:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b88:	18 16       	cp	r1, r24
    3b8a:	0c f0       	brlt	.+2      	; 0x3b8e <Lcd_SendData+0x6fc>
    3b8c:	7b c0       	rjmp	.+246    	; 0x3c84 <Lcd_SendData+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    3b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b90:	7e 89       	ldd	r23, Y+22	; 0x16
    3b92:	8f 89       	ldd	r24, Y+23	; 0x17
    3b94:	98 8d       	ldd	r25, Y+24	; 0x18
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	4a e7       	ldi	r20, 0x7A	; 122
    3b9c:	54 e4       	ldi	r21, 0x44	; 68
    3b9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	8c 87       	std	Y+12, r24	; 0x0c
    3ba8:	9d 87       	std	Y+13, r25	; 0x0d
    3baa:	ae 87       	std	Y+14, r26	; 0x0e
    3bac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bae:	6c 85       	ldd	r22, Y+12	; 0x0c
    3bb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    3bb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	4a e7       	ldi	r20, 0x7A	; 122
    3bbc:	55 e4       	ldi	r21, 0x45	; 69
    3bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	88 87       	std	Y+8, r24	; 0x08
    3bc8:	99 87       	std	Y+9, r25	; 0x09
    3bca:	aa 87       	std	Y+10, r26	; 0x0a
    3bcc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3bce:	68 85       	ldd	r22, Y+8	; 0x08
    3bd0:	79 85       	ldd	r23, Y+9	; 0x09
    3bd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	40 e8       	ldi	r20, 0x80	; 128
    3bdc:	5f e3       	ldi	r21, 0x3F	; 63
    3bde:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3be2:	88 23       	and	r24, r24
    3be4:	2c f4       	brge	.+10     	; 0x3bf0 <Lcd_SendData+0x75e>
		__ticks = 1;
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	9f 83       	std	Y+7, r25	; 0x07
    3bec:	8e 83       	std	Y+6, r24	; 0x06
    3bee:	3f c0       	rjmp	.+126    	; 0x3c6e <Lcd_SendData+0x7dc>
	else if (__tmp > 65535)
    3bf0:	68 85       	ldd	r22, Y+8	; 0x08
    3bf2:	79 85       	ldd	r23, Y+9	; 0x09
    3bf4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bf6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	3f ef       	ldi	r19, 0xFF	; 255
    3bfc:	4f e7       	ldi	r20, 0x7F	; 127
    3bfe:	57 e4       	ldi	r21, 0x47	; 71
    3c00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c04:	18 16       	cp	r1, r24
    3c06:	4c f5       	brge	.+82     	; 0x3c5a <Lcd_SendData+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c08:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e2       	ldi	r20, 0x20	; 32
    3c16:	51 e4       	ldi	r21, 0x41	; 65
    3c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	bc 01       	movw	r22, r24
    3c22:	cd 01       	movw	r24, r26
    3c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	9f 83       	std	Y+7, r25	; 0x07
    3c2e:	8e 83       	std	Y+6, r24	; 0x06
    3c30:	0f c0       	rjmp	.+30     	; 0x3c50 <Lcd_SendData+0x7be>
    3c32:	80 e9       	ldi	r24, 0x90	; 144
    3c34:	91 e0       	ldi	r25, 0x01	; 1
    3c36:	9d 83       	std	Y+5, r25	; 0x05
    3c38:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	f1 f7       	brne	.-4      	; 0x3c3e <Lcd_SendData+0x7ac>
    3c42:	9d 83       	std	Y+5, r25	; 0x05
    3c44:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c46:	8e 81       	ldd	r24, Y+6	; 0x06
    3c48:	9f 81       	ldd	r25, Y+7	; 0x07
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	9f 83       	std	Y+7, r25	; 0x07
    3c4e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c50:	8e 81       	ldd	r24, Y+6	; 0x06
    3c52:	9f 81       	ldd	r25, Y+7	; 0x07
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	69 f7       	brne	.-38     	; 0x3c32 <Lcd_SendData+0x7a0>
    3c58:	24 c0       	rjmp	.+72     	; 0x3ca2 <Lcd_SendData+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c5a:	68 85       	ldd	r22, Y+8	; 0x08
    3c5c:	79 85       	ldd	r23, Y+9	; 0x09
    3c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	9f 83       	std	Y+7, r25	; 0x07
    3c6c:	8e 83       	std	Y+6, r24	; 0x06
    3c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c70:	9f 81       	ldd	r25, Y+7	; 0x07
    3c72:	9b 83       	std	Y+3, r25	; 0x03
    3c74:	8a 83       	std	Y+2, r24	; 0x02
    3c76:	8a 81       	ldd	r24, Y+2	; 0x02
    3c78:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7a:	01 97       	sbiw	r24, 0x01	; 1
    3c7c:	f1 f7       	brne	.-4      	; 0x3c7a <Lcd_SendData+0x7e8>
    3c7e:	9b 83       	std	Y+3, r25	; 0x03
    3c80:	8a 83       	std	Y+2, r24	; 0x02
    3c82:	0f c0       	rjmp	.+30     	; 0x3ca2 <Lcd_SendData+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c84:	69 89       	ldd	r22, Y+17	; 0x11
    3c86:	7a 89       	ldd	r23, Y+18	; 0x12
    3c88:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	88 8b       	std	Y+16, r24	; 0x10
    3c96:	88 89       	ldd	r24, Y+16	; 0x10
    3c98:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	8a 95       	dec	r24
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <Lcd_SendData+0x80a>
    3ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);  // Wait for the data to be displayed
}
    3ca2:	cf 59       	subi	r28, 0x9F	; 159
    3ca4:	df 4f       	sbci	r29, 0xFF	; 255
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	f8 94       	cli
    3caa:	de bf       	out	0x3e, r29	; 62
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	cd bf       	out	0x3d, r28	; 61
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	08 95       	ret

00003cba <Lcd_GoTo>:

void Lcd_GoTo(u8 row,u8 col){
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <Lcd_GoTo+0x6>
    3cc0:	00 d0       	rcall	.+0      	; 0x3cc2 <Lcd_GoTo+0x8>
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
    3cc6:	89 83       	std	Y+1, r24	; 0x01
    3cc8:	6a 83       	std	Y+2, r22	; 0x02
	col--;
    3cca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ccc:	81 50       	subi	r24, 0x01	; 1
    3cce:	8a 83       	std	Y+2, r24	; 0x02
	switch (row){
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	28 2f       	mov	r18, r24
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	3c 83       	std	Y+4, r19	; 0x04
    3cd8:	2b 83       	std	Y+3, r18	; 0x03
    3cda:	8b 81       	ldd	r24, Y+3	; 0x03
    3cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cde:	82 30       	cpi	r24, 0x02	; 2
    3ce0:	91 05       	cpc	r25, r1
    3ce2:	d9 f0       	breq	.+54     	; 0x3d1a <Lcd_GoTo+0x60>
    3ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ce8:	23 30       	cpi	r18, 0x03	; 3
    3cea:	31 05       	cpc	r19, r1
    3cec:	34 f4       	brge	.+12     	; 0x3cfa <Lcd_GoTo+0x40>
    3cee:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf2:	81 30       	cpi	r24, 0x01	; 1
    3cf4:	91 05       	cpc	r25, r1
    3cf6:	61 f0       	breq	.+24     	; 0x3d10 <Lcd_GoTo+0x56>
    3cf8:	1e c0       	rjmp	.+60     	; 0x3d36 <Lcd_GoTo+0x7c>
    3cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    3cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    3cfe:	23 30       	cpi	r18, 0x03	; 3
    3d00:	31 05       	cpc	r19, r1
    3d02:	81 f0       	breq	.+32     	; 0x3d24 <Lcd_GoTo+0x6a>
    3d04:	8b 81       	ldd	r24, Y+3	; 0x03
    3d06:	9c 81       	ldd	r25, Y+4	; 0x04
    3d08:	84 30       	cpi	r24, 0x04	; 4
    3d0a:	91 05       	cpc	r25, r1
    3d0c:	81 f0       	breq	.+32     	; 0x3d2e <Lcd_GoTo+0x74>
    3d0e:	13 c0       	rjmp	.+38     	; 0x3d36 <Lcd_GoTo+0x7c>
	        case ROW1:
	        	Lcd_SendCMD(0x80+col);
    3d10:	8a 81       	ldd	r24, Y+2	; 0x02
    3d12:	80 58       	subi	r24, 0x80	; 128
    3d14:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
    3d18:	0e c0       	rjmp	.+28     	; 0x3d36 <Lcd_GoTo+0x7c>
	        break;
	        case ROW2:
	        	Lcd_SendCMD(0xC0+col);
    3d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1c:	80 54       	subi	r24, 0x40	; 64
    3d1e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
    3d22:	09 c0       	rjmp	.+18     	; 0x3d36 <Lcd_GoTo+0x7c>
	        break;
	        case ROW3:
	        	Lcd_SendCMD(0x94+col);
    3d24:	8a 81       	ldd	r24, Y+2	; 0x02
    3d26:	8c 56       	subi	r24, 0x6C	; 108
    3d28:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
    3d2c:	04 c0       	rjmp	.+8      	; 0x3d36 <Lcd_GoTo+0x7c>
	        break;
	        case ROW4:
	        	Lcd_SendCMD(0xD4+col);
    3d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d30:	8c 52       	subi	r24, 0x2C	; 44
    3d32:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
	        break;
	        default:break;

	    }
}
    3d36:	0f 90       	pop	r0
    3d38:	0f 90       	pop	r0
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <Lcd_PutChar>:

void Lcd_PutChar (u8 character)
{
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	0f 92       	push	r0
    3d4a:	cd b7       	in	r28, 0x3d	; 61
    3d4c:	de b7       	in	r29, 0x3e	; 62
    3d4e:	89 83       	std	Y+1, r24	; 0x01
	Lcd_SendData(character);
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	0e 94 49 1a 	call	0x3492	; 0x3492 <Lcd_SendData>
}
    3d56:	0f 90       	pop	r0
    3d58:	cf 91       	pop	r28
    3d5a:	df 91       	pop	r29
    3d5c:	08 95       	ret

00003d5e <Lcd_PutInt>:

void Lcd_PutInt(u32 Number)
{
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	00 d0       	rcall	.+0      	; 0x3d64 <Lcd_PutInt+0x6>
    3d64:	00 d0       	rcall	.+0      	; 0x3d66 <Lcd_PutInt+0x8>
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	69 83       	std	Y+1, r22	; 0x01
    3d6c:	7a 83       	std	Y+2, r23	; 0x02
    3d6e:	8b 83       	std	Y+3, r24	; 0x03
    3d70:	9c 83       	std	Y+4, r25	; 0x04

	if(Number == 0 )
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	9a 81       	ldd	r25, Y+2	; 0x02
    3d76:	ab 81       	ldd	r26, Y+3	; 0x03
    3d78:	bc 81       	ldd	r27, Y+4	; 0x04
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	a1 05       	cpc	r26, r1
    3d7e:	b1 05       	cpc	r27, r1
    3d80:	19 f1       	breq	.+70     	; 0x3dc8 <Lcd_PutInt+0x6a>
		return ;
	else
		Lcd_PutInt(Number/10);
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	9a 81       	ldd	r25, Y+2	; 0x02
    3d86:	ab 81       	ldd	r26, Y+3	; 0x03
    3d88:	bc 81       	ldd	r27, Y+4	; 0x04
    3d8a:	2a e0       	ldi	r18, 0x0A	; 10
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	40 e0       	ldi	r20, 0x00	; 0
    3d90:	50 e0       	ldi	r21, 0x00	; 0
    3d92:	bc 01       	movw	r22, r24
    3d94:	cd 01       	movw	r24, r26
    3d96:	0e 94 40 22 	call	0x4480	; 0x4480 <__udivmodsi4>
    3d9a:	da 01       	movw	r26, r20
    3d9c:	c9 01       	movw	r24, r18
    3d9e:	bc 01       	movw	r22, r24
    3da0:	cd 01       	movw	r24, r26
    3da2:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <Lcd_PutInt>
	///if(Number<255)
	 Lcd_SendData((Number%10)+0x30);
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	9a 81       	ldd	r25, Y+2	; 0x02
    3daa:	ab 81       	ldd	r26, Y+3	; 0x03
    3dac:	bc 81       	ldd	r27, Y+4	; 0x04
    3dae:	2a e0       	ldi	r18, 0x0A	; 10
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	50 e0       	ldi	r21, 0x00	; 0
    3db6:	bc 01       	movw	r22, r24
    3db8:	cd 01       	movw	r24, r26
    3dba:	0e 94 40 22 	call	0x4480	; 0x4480 <__udivmodsi4>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	80 5d       	subi	r24, 0xD0	; 208
    3dc4:	0e 94 49 1a 	call	0x3492	; 0x3492 <Lcd_SendData>
}
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	cf 91       	pop	r28
    3dd2:	df 91       	pop	r29
    3dd4:	08 95       	ret

00003dd6 <Lcd_Init>:

void Lcd_Init(void) {
    3dd6:	0f 93       	push	r16
    3dd8:	1f 93       	push	r17
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	c6 54       	subi	r28, 0x46	; 70
    3de4:	d0 40       	sbci	r29, 0x00	; 0
    3de6:	0f b6       	in	r0, 0x3f	; 63
    3de8:	f8 94       	cli
    3dea:	de bf       	out	0x3e, r29	; 62
    3dec:	0f be       	out	0x3f, r0	; 63
    3dee:	cd bf       	out	0x3d, r28	; 61
    3df0:	fe 01       	movw	r30, r28
    3df2:	ed 5b       	subi	r30, 0xBD	; 189
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	a8 e4       	ldi	r26, 0x48	; 72
    3dfc:	b2 e4       	ldi	r27, 0x42	; 66
    3dfe:	80 83       	st	Z, r24
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	a2 83       	std	Z+2, r26	; 0x02
    3e04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e06:	8e 01       	movw	r16, r28
    3e08:	01 5c       	subi	r16, 0xC1	; 193
    3e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ed 5b       	subi	r30, 0xBD	; 189
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	60 81       	ld	r22, Z
    3e14:	71 81       	ldd	r23, Z+1	; 0x01
    3e16:	82 81       	ldd	r24, Z+2	; 0x02
    3e18:	93 81       	ldd	r25, Z+3	; 0x03
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	4a e7       	ldi	r20, 0x7A	; 122
    3e20:	55 e4       	ldi	r21, 0x45	; 69
    3e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e26:	dc 01       	movw	r26, r24
    3e28:	cb 01       	movw	r24, r22
    3e2a:	f8 01       	movw	r30, r16
    3e2c:	80 83       	st	Z, r24
    3e2e:	91 83       	std	Z+1, r25	; 0x01
    3e30:	a2 83       	std	Z+2, r26	; 0x02
    3e32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e34:	fe 01       	movw	r30, r28
    3e36:	ff 96       	adiw	r30, 0x3f	; 63
    3e38:	60 81       	ld	r22, Z
    3e3a:	71 81       	ldd	r23, Z+1	; 0x01
    3e3c:	82 81       	ldd	r24, Z+2	; 0x02
    3e3e:	93 81       	ldd	r25, Z+3	; 0x03
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e8       	ldi	r20, 0x80	; 128
    3e46:	5f e3       	ldi	r21, 0x3F	; 63
    3e48:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e4c:	88 23       	and	r24, r24
    3e4e:	2c f4       	brge	.+10     	; 0x3e5a <Lcd_Init+0x84>
		__ticks = 1;
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	9e af       	std	Y+62, r25	; 0x3e
    3e56:	8d af       	std	Y+61, r24	; 0x3d
    3e58:	46 c0       	rjmp	.+140    	; 0x3ee6 <Lcd_Init+0x110>
	else if (__tmp > 65535)
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	ff 96       	adiw	r30, 0x3f	; 63
    3e5e:	60 81       	ld	r22, Z
    3e60:	71 81       	ldd	r23, Z+1	; 0x01
    3e62:	82 81       	ldd	r24, Z+2	; 0x02
    3e64:	93 81       	ldd	r25, Z+3	; 0x03
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	3f ef       	ldi	r19, 0xFF	; 255
    3e6a:	4f e7       	ldi	r20, 0x7F	; 127
    3e6c:	57 e4       	ldi	r21, 0x47	; 71
    3e6e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e72:	18 16       	cp	r1, r24
    3e74:	64 f5       	brge	.+88     	; 0x3ece <Lcd_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e76:	fe 01       	movw	r30, r28
    3e78:	ed 5b       	subi	r30, 0xBD	; 189
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	60 81       	ld	r22, Z
    3e7e:	71 81       	ldd	r23, Z+1	; 0x01
    3e80:	82 81       	ldd	r24, Z+2	; 0x02
    3e82:	93 81       	ldd	r25, Z+3	; 0x03
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	40 e2       	ldi	r20, 0x20	; 32
    3e8a:	51 e4       	ldi	r21, 0x41	; 65
    3e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	bc 01       	movw	r22, r24
    3e96:	cd 01       	movw	r24, r26
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	9e af       	std	Y+62, r25	; 0x3e
    3ea2:	8d af       	std	Y+61, r24	; 0x3d
    3ea4:	0f c0       	rjmp	.+30     	; 0x3ec4 <Lcd_Init+0xee>
    3ea6:	80 e9       	ldi	r24, 0x90	; 144
    3ea8:	91 e0       	ldi	r25, 0x01	; 1
    3eaa:	9c af       	std	Y+60, r25	; 0x3c
    3eac:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3eae:	8b ad       	ldd	r24, Y+59	; 0x3b
    3eb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	f1 f7       	brne	.-4      	; 0x3eb2 <Lcd_Init+0xdc>
    3eb6:	9c af       	std	Y+60, r25	; 0x3c
    3eb8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eba:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ebc:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	9e af       	std	Y+62, r25	; 0x3e
    3ec2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ec6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ec8:	00 97       	sbiw	r24, 0x00	; 0
    3eca:	69 f7       	brne	.-38     	; 0x3ea6 <Lcd_Init+0xd0>
    3ecc:	16 c0       	rjmp	.+44     	; 0x3efa <Lcd_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ece:	fe 01       	movw	r30, r28
    3ed0:	ff 96       	adiw	r30, 0x3f	; 63
    3ed2:	60 81       	ld	r22, Z
    3ed4:	71 81       	ldd	r23, Z+1	; 0x01
    3ed6:	82 81       	ldd	r24, Z+2	; 0x02
    3ed8:	93 81       	ldd	r25, Z+3	; 0x03
    3eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	9e af       	std	Y+62, r25	; 0x3e
    3ee4:	8d af       	std	Y+61, r24	; 0x3d
    3ee6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ee8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3eea:	9a af       	std	Y+58, r25	; 0x3a
    3eec:	89 af       	std	Y+57, r24	; 0x39
    3eee:	89 ad       	ldd	r24, Y+57	; 0x39
    3ef0:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <Lcd_Init+0x11c>
    3ef6:	9a af       	std	Y+58, r25	; 0x3a
    3ef8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	Lcd_SendCMD(HOME);
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
	Lcd_SendCMD(FOUR_BIT);
    3f00:	88 e2       	ldi	r24, 0x28	; 40
    3f02:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	a0 e8       	ldi	r26, 0x80	; 128
    3f0c:	bf e3       	ldi	r27, 0x3F	; 63
    3f0e:	8d ab       	std	Y+53, r24	; 0x35
    3f10:	9e ab       	std	Y+54, r25	; 0x36
    3f12:	af ab       	std	Y+55, r26	; 0x37
    3f14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f16:	6d a9       	ldd	r22, Y+53	; 0x35
    3f18:	7e a9       	ldd	r23, Y+54	; 0x36
    3f1a:	8f a9       	ldd	r24, Y+55	; 0x37
    3f1c:	98 ad       	ldd	r25, Y+56	; 0x38
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	4a e7       	ldi	r20, 0x7A	; 122
    3f24:	55 e4       	ldi	r21, 0x45	; 69
    3f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	89 ab       	std	Y+49, r24	; 0x31
    3f30:	9a ab       	std	Y+50, r25	; 0x32
    3f32:	ab ab       	std	Y+51, r26	; 0x33
    3f34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f36:	69 a9       	ldd	r22, Y+49	; 0x31
    3f38:	7a a9       	ldd	r23, Y+50	; 0x32
    3f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    3f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	40 e8       	ldi	r20, 0x80	; 128
    3f44:	5f e3       	ldi	r21, 0x3F	; 63
    3f46:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f4a:	88 23       	and	r24, r24
    3f4c:	2c f4       	brge	.+10     	; 0x3f58 <Lcd_Init+0x182>
		__ticks = 1;
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	98 ab       	std	Y+48, r25	; 0x30
    3f54:	8f a7       	std	Y+47, r24	; 0x2f
    3f56:	3f c0       	rjmp	.+126    	; 0x3fd6 <Lcd_Init+0x200>
	else if (__tmp > 65535)
    3f58:	69 a9       	ldd	r22, Y+49	; 0x31
    3f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	3f ef       	ldi	r19, 0xFF	; 255
    3f64:	4f e7       	ldi	r20, 0x7F	; 127
    3f66:	57 e4       	ldi	r21, 0x47	; 71
    3f68:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f6c:	18 16       	cp	r1, r24
    3f6e:	4c f5       	brge	.+82     	; 0x3fc2 <Lcd_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f70:	6d a9       	ldd	r22, Y+53	; 0x35
    3f72:	7e a9       	ldd	r23, Y+54	; 0x36
    3f74:	8f a9       	ldd	r24, Y+55	; 0x37
    3f76:	98 ad       	ldd	r25, Y+56	; 0x38
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	40 e2       	ldi	r20, 0x20	; 32
    3f7e:	51 e4       	ldi	r21, 0x41	; 65
    3f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	bc 01       	movw	r22, r24
    3f8a:	cd 01       	movw	r24, r26
    3f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	98 ab       	std	Y+48, r25	; 0x30
    3f96:	8f a7       	std	Y+47, r24	; 0x2f
    3f98:	0f c0       	rjmp	.+30     	; 0x3fb8 <Lcd_Init+0x1e2>
    3f9a:	80 e9       	ldi	r24, 0x90	; 144
    3f9c:	91 e0       	ldi	r25, 0x01	; 1
    3f9e:	9e a7       	std	Y+46, r25	; 0x2e
    3fa0:	8d a7       	std	Y+45, r24	; 0x2d
    3fa2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3fa4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <Lcd_Init+0x1d0>
    3faa:	9e a7       	std	Y+46, r25	; 0x2e
    3fac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    3fb2:	01 97       	sbiw	r24, 0x01	; 1
    3fb4:	98 ab       	std	Y+48, r25	; 0x30
    3fb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fba:	98 a9       	ldd	r25, Y+48	; 0x30
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	69 f7       	brne	.-38     	; 0x3f9a <Lcd_Init+0x1c4>
    3fc0:	14 c0       	rjmp	.+40     	; 0x3fea <Lcd_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc2:	69 a9       	ldd	r22, Y+49	; 0x31
    3fc4:	7a a9       	ldd	r23, Y+50	; 0x32
    3fc6:	8b a9       	ldd	r24, Y+51	; 0x33
    3fc8:	9c a9       	ldd	r25, Y+52	; 0x34
    3fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	98 ab       	std	Y+48, r25	; 0x30
    3fd4:	8f a7       	std	Y+47, r24	; 0x2f
    3fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    3fda:	9c a7       	std	Y+44, r25	; 0x2c
    3fdc:	8b a7       	std	Y+43, r24	; 0x2b
    3fde:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fe0:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	f1 f7       	brne	.-4      	; 0x3fe2 <Lcd_Init+0x20c>
    3fe6:	9c a7       	std	Y+44, r25	; 0x2c
    3fe8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Lcd_SendCMD(CURSER_ON);
    3fea:	8f e0       	ldi	r24, 0x0F	; 15
    3fec:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	a0 e8       	ldi	r26, 0x80	; 128
    3ff6:	bf e3       	ldi	r27, 0x3F	; 63
    3ff8:	8f a3       	std	Y+39, r24	; 0x27
    3ffa:	98 a7       	std	Y+40, r25	; 0x28
    3ffc:	a9 a7       	std	Y+41, r26	; 0x29
    3ffe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4000:	6f a1       	ldd	r22, Y+39	; 0x27
    4002:	78 a5       	ldd	r23, Y+40	; 0x28
    4004:	89 a5       	ldd	r24, Y+41	; 0x29
    4006:	9a a5       	ldd	r25, Y+42	; 0x2a
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	4a e7       	ldi	r20, 0x7A	; 122
    400e:	55 e4       	ldi	r21, 0x45	; 69
    4010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	8b a3       	std	Y+35, r24	; 0x23
    401a:	9c a3       	std	Y+36, r25	; 0x24
    401c:	ad a3       	std	Y+37, r26	; 0x25
    401e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4020:	6b a1       	ldd	r22, Y+35	; 0x23
    4022:	7c a1       	ldd	r23, Y+36	; 0x24
    4024:	8d a1       	ldd	r24, Y+37	; 0x25
    4026:	9e a1       	ldd	r25, Y+38	; 0x26
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e8       	ldi	r20, 0x80	; 128
    402e:	5f e3       	ldi	r21, 0x3F	; 63
    4030:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4034:	88 23       	and	r24, r24
    4036:	2c f4       	brge	.+10     	; 0x4042 <Lcd_Init+0x26c>
		__ticks = 1;
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	9a a3       	std	Y+34, r25	; 0x22
    403e:	89 a3       	std	Y+33, r24	; 0x21
    4040:	3f c0       	rjmp	.+126    	; 0x40c0 <Lcd_Init+0x2ea>
	else if (__tmp > 65535)
    4042:	6b a1       	ldd	r22, Y+35	; 0x23
    4044:	7c a1       	ldd	r23, Y+36	; 0x24
    4046:	8d a1       	ldd	r24, Y+37	; 0x25
    4048:	9e a1       	ldd	r25, Y+38	; 0x26
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	3f ef       	ldi	r19, 0xFF	; 255
    404e:	4f e7       	ldi	r20, 0x7F	; 127
    4050:	57 e4       	ldi	r21, 0x47	; 71
    4052:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4056:	18 16       	cp	r1, r24
    4058:	4c f5       	brge	.+82     	; 0x40ac <Lcd_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405a:	6f a1       	ldd	r22, Y+39	; 0x27
    405c:	78 a5       	ldd	r23, Y+40	; 0x28
    405e:	89 a5       	ldd	r24, Y+41	; 0x29
    4060:	9a a5       	ldd	r25, Y+42	; 0x2a
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e2       	ldi	r20, 0x20	; 32
    4068:	51 e4       	ldi	r21, 0x41	; 65
    406a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	bc 01       	movw	r22, r24
    4074:	cd 01       	movw	r24, r26
    4076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	9a a3       	std	Y+34, r25	; 0x22
    4080:	89 a3       	std	Y+33, r24	; 0x21
    4082:	0f c0       	rjmp	.+30     	; 0x40a2 <Lcd_Init+0x2cc>
    4084:	80 e9       	ldi	r24, 0x90	; 144
    4086:	91 e0       	ldi	r25, 0x01	; 1
    4088:	98 a3       	std	Y+32, r25	; 0x20
    408a:	8f 8f       	std	Y+31, r24	; 0x1f
    408c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    408e:	98 a1       	ldd	r25, Y+32	; 0x20
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	f1 f7       	brne	.-4      	; 0x4090 <Lcd_Init+0x2ba>
    4094:	98 a3       	std	Y+32, r25	; 0x20
    4096:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4098:	89 a1       	ldd	r24, Y+33	; 0x21
    409a:	9a a1       	ldd	r25, Y+34	; 0x22
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	9a a3       	std	Y+34, r25	; 0x22
    40a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a2:	89 a1       	ldd	r24, Y+33	; 0x21
    40a4:	9a a1       	ldd	r25, Y+34	; 0x22
    40a6:	00 97       	sbiw	r24, 0x00	; 0
    40a8:	69 f7       	brne	.-38     	; 0x4084 <Lcd_Init+0x2ae>
    40aa:	14 c0       	rjmp	.+40     	; 0x40d4 <Lcd_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ac:	6b a1       	ldd	r22, Y+35	; 0x23
    40ae:	7c a1       	ldd	r23, Y+36	; 0x24
    40b0:	8d a1       	ldd	r24, Y+37	; 0x25
    40b2:	9e a1       	ldd	r25, Y+38	; 0x26
    40b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	9a a3       	std	Y+34, r25	; 0x22
    40be:	89 a3       	std	Y+33, r24	; 0x21
    40c0:	89 a1       	ldd	r24, Y+33	; 0x21
    40c2:	9a a1       	ldd	r25, Y+34	; 0x22
    40c4:	9e 8f       	std	Y+30, r25	; 0x1e
    40c6:	8d 8f       	std	Y+29, r24	; 0x1d
    40c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	f1 f7       	brne	.-4      	; 0x40cc <Lcd_Init+0x2f6>
    40d0:	9e 8f       	std	Y+30, r25	; 0x1e
    40d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_SendCMD(CLEAR);
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	a0 e8       	ldi	r26, 0x80	; 128
    40e0:	bf e3       	ldi	r27, 0x3F	; 63
    40e2:	89 8f       	std	Y+25, r24	; 0x19
    40e4:	9a 8f       	std	Y+26, r25	; 0x1a
    40e6:	ab 8f       	std	Y+27, r26	; 0x1b
    40e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ea:	69 8d       	ldd	r22, Y+25	; 0x19
    40ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	4a e7       	ldi	r20, 0x7A	; 122
    40f8:	55 e4       	ldi	r21, 0x45	; 69
    40fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	8d 8b       	std	Y+21, r24	; 0x15
    4104:	9e 8b       	std	Y+22, r25	; 0x16
    4106:	af 8b       	std	Y+23, r26	; 0x17
    4108:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    410a:	6d 89       	ldd	r22, Y+21	; 0x15
    410c:	7e 89       	ldd	r23, Y+22	; 0x16
    410e:	8f 89       	ldd	r24, Y+23	; 0x17
    4110:	98 8d       	ldd	r25, Y+24	; 0x18
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	40 e8       	ldi	r20, 0x80	; 128
    4118:	5f e3       	ldi	r21, 0x3F	; 63
    411a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    411e:	88 23       	and	r24, r24
    4120:	2c f4       	brge	.+10     	; 0x412c <Lcd_Init+0x356>
		__ticks = 1;
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	9c 8b       	std	Y+20, r25	; 0x14
    4128:	8b 8b       	std	Y+19, r24	; 0x13
    412a:	3f c0       	rjmp	.+126    	; 0x41aa <Lcd_Init+0x3d4>
	else if (__tmp > 65535)
    412c:	6d 89       	ldd	r22, Y+21	; 0x15
    412e:	7e 89       	ldd	r23, Y+22	; 0x16
    4130:	8f 89       	ldd	r24, Y+23	; 0x17
    4132:	98 8d       	ldd	r25, Y+24	; 0x18
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	3f ef       	ldi	r19, 0xFF	; 255
    4138:	4f e7       	ldi	r20, 0x7F	; 127
    413a:	57 e4       	ldi	r21, 0x47	; 71
    413c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4140:	18 16       	cp	r1, r24
    4142:	4c f5       	brge	.+82     	; 0x4196 <Lcd_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4144:	69 8d       	ldd	r22, Y+25	; 0x19
    4146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    414a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	40 e2       	ldi	r20, 0x20	; 32
    4152:	51 e4       	ldi	r21, 0x41	; 65
    4154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	bc 01       	movw	r22, r24
    415e:	cd 01       	movw	r24, r26
    4160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	9c 8b       	std	Y+20, r25	; 0x14
    416a:	8b 8b       	std	Y+19, r24	; 0x13
    416c:	0f c0       	rjmp	.+30     	; 0x418c <Lcd_Init+0x3b6>
    416e:	80 e9       	ldi	r24, 0x90	; 144
    4170:	91 e0       	ldi	r25, 0x01	; 1
    4172:	9a 8b       	std	Y+18, r25	; 0x12
    4174:	89 8b       	std	Y+17, r24	; 0x11
    4176:	89 89       	ldd	r24, Y+17	; 0x11
    4178:	9a 89       	ldd	r25, Y+18	; 0x12
    417a:	01 97       	sbiw	r24, 0x01	; 1
    417c:	f1 f7       	brne	.-4      	; 0x417a <Lcd_Init+0x3a4>
    417e:	9a 8b       	std	Y+18, r25	; 0x12
    4180:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4182:	8b 89       	ldd	r24, Y+19	; 0x13
    4184:	9c 89       	ldd	r25, Y+20	; 0x14
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	9c 8b       	std	Y+20, r25	; 0x14
    418a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    418c:	8b 89       	ldd	r24, Y+19	; 0x13
    418e:	9c 89       	ldd	r25, Y+20	; 0x14
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	69 f7       	brne	.-38     	; 0x416e <Lcd_Init+0x398>
    4194:	14 c0       	rjmp	.+40     	; 0x41be <Lcd_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4196:	6d 89       	ldd	r22, Y+21	; 0x15
    4198:	7e 89       	ldd	r23, Y+22	; 0x16
    419a:	8f 89       	ldd	r24, Y+23	; 0x17
    419c:	98 8d       	ldd	r25, Y+24	; 0x18
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	9c 8b       	std	Y+20, r25	; 0x14
    41a8:	8b 8b       	std	Y+19, r24	; 0x13
    41aa:	8b 89       	ldd	r24, Y+19	; 0x13
    41ac:	9c 89       	ldd	r25, Y+20	; 0x14
    41ae:	98 8b       	std	Y+16, r25	; 0x10
    41b0:	8f 87       	std	Y+15, r24	; 0x0f
    41b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b4:	98 89       	ldd	r25, Y+16	; 0x10
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	f1 f7       	brne	.-4      	; 0x41b6 <Lcd_Init+0x3e0>
    41ba:	98 8b       	std	Y+16, r25	; 0x10
    41bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_SendCMD(MODE);
    41be:	86 e0       	ldi	r24, 0x06	; 6
    41c0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	a0 e8       	ldi	r26, 0x80	; 128
    41ca:	bf e3       	ldi	r27, 0x3F	; 63
    41cc:	8b 87       	std	Y+11, r24	; 0x0b
    41ce:	9c 87       	std	Y+12, r25	; 0x0c
    41d0:	ad 87       	std	Y+13, r26	; 0x0d
    41d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41da:	9e 85       	ldd	r25, Y+14	; 0x0e
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	4a e7       	ldi	r20, 0x7A	; 122
    41e2:	55 e4       	ldi	r21, 0x45	; 69
    41e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	8f 83       	std	Y+7, r24	; 0x07
    41ee:	98 87       	std	Y+8, r25	; 0x08
    41f0:	a9 87       	std	Y+9, r26	; 0x09
    41f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41f4:	6f 81       	ldd	r22, Y+7	; 0x07
    41f6:	78 85       	ldd	r23, Y+8	; 0x08
    41f8:	89 85       	ldd	r24, Y+9	; 0x09
    41fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	40 e8       	ldi	r20, 0x80	; 128
    4202:	5f e3       	ldi	r21, 0x3F	; 63
    4204:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4208:	88 23       	and	r24, r24
    420a:	2c f4       	brge	.+10     	; 0x4216 <Lcd_Init+0x440>
		__ticks = 1;
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	9e 83       	std	Y+6, r25	; 0x06
    4212:	8d 83       	std	Y+5, r24	; 0x05
    4214:	3f c0       	rjmp	.+126    	; 0x4294 <Lcd_Init+0x4be>
	else if (__tmp > 65535)
    4216:	6f 81       	ldd	r22, Y+7	; 0x07
    4218:	78 85       	ldd	r23, Y+8	; 0x08
    421a:	89 85       	ldd	r24, Y+9	; 0x09
    421c:	9a 85       	ldd	r25, Y+10	; 0x0a
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	3f ef       	ldi	r19, 0xFF	; 255
    4222:	4f e7       	ldi	r20, 0x7F	; 127
    4224:	57 e4       	ldi	r21, 0x47	; 71
    4226:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    422a:	18 16       	cp	r1, r24
    422c:	4c f5       	brge	.+82     	; 0x4280 <Lcd_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4230:	7c 85       	ldd	r23, Y+12	; 0x0c
    4232:	8d 85       	ldd	r24, Y+13	; 0x0d
    4234:	9e 85       	ldd	r25, Y+14	; 0x0e
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e2       	ldi	r20, 0x20	; 32
    423c:	51 e4       	ldi	r21, 0x41	; 65
    423e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	bc 01       	movw	r22, r24
    4248:	cd 01       	movw	r24, r26
    424a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	9e 83       	std	Y+6, r25	; 0x06
    4254:	8d 83       	std	Y+5, r24	; 0x05
    4256:	0f c0       	rjmp	.+30     	; 0x4276 <Lcd_Init+0x4a0>
    4258:	80 e9       	ldi	r24, 0x90	; 144
    425a:	91 e0       	ldi	r25, 0x01	; 1
    425c:	9c 83       	std	Y+4, r25	; 0x04
    425e:	8b 83       	std	Y+3, r24	; 0x03
    4260:	8b 81       	ldd	r24, Y+3	; 0x03
    4262:	9c 81       	ldd	r25, Y+4	; 0x04
    4264:	01 97       	sbiw	r24, 0x01	; 1
    4266:	f1 f7       	brne	.-4      	; 0x4264 <Lcd_Init+0x48e>
    4268:	9c 83       	std	Y+4, r25	; 0x04
    426a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426c:	8d 81       	ldd	r24, Y+5	; 0x05
    426e:	9e 81       	ldd	r25, Y+6	; 0x06
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	9e 83       	std	Y+6, r25	; 0x06
    4274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4276:	8d 81       	ldd	r24, Y+5	; 0x05
    4278:	9e 81       	ldd	r25, Y+6	; 0x06
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	69 f7       	brne	.-38     	; 0x4258 <Lcd_Init+0x482>
    427e:	14 c0       	rjmp	.+40     	; 0x42a8 <Lcd_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4280:	6f 81       	ldd	r22, Y+7	; 0x07
    4282:	78 85       	ldd	r23, Y+8	; 0x08
    4284:	89 85       	ldd	r24, Y+9	; 0x09
    4286:	9a 85       	ldd	r25, Y+10	; 0x0a
    4288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	9e 83       	std	Y+6, r25	; 0x06
    4292:	8d 83       	std	Y+5, r24	; 0x05
    4294:	8d 81       	ldd	r24, Y+5	; 0x05
    4296:	9e 81       	ldd	r25, Y+6	; 0x06
    4298:	9a 83       	std	Y+2, r25	; 0x02
    429a:	89 83       	std	Y+1, r24	; 0x01
    429c:	89 81       	ldd	r24, Y+1	; 0x01
    429e:	9a 81       	ldd	r25, Y+2	; 0x02
    42a0:	01 97       	sbiw	r24, 0x01	; 1
    42a2:	f1 f7       	brne	.-4      	; 0x42a0 <Lcd_Init+0x4ca>
    42a4:	9a 83       	std	Y+2, r25	; 0x02
    42a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Lcd_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    42a8:	8c e0       	ldi	r24, 0x0C	; 12
    42aa:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
	Lcd_SendCMD(SET_DDRAM_ADDR);
    42ae:	80 e8       	ldi	r24, 0x80	; 128
    42b0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
}
    42b4:	ca 5b       	subi	r28, 0xBA	; 186
    42b6:	df 4f       	sbci	r29, 0xFF	; 255
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	cf 91       	pop	r28
    42c4:	df 91       	pop	r29
    42c6:	1f 91       	pop	r17
    42c8:	0f 91       	pop	r16
    42ca:	08 95       	ret

000042cc <Lcd_Clear>:
void Lcd_Clear(void){
    42cc:	df 93       	push	r29
    42ce:	cf 93       	push	r28
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
Lcd_SendCMD(CLEAR);
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <Lcd_SendCMD>
}
    42da:	cf 91       	pop	r28
    42dc:	df 91       	pop	r29
    42de:	08 95       	ret

000042e0 <Lcd_PutString>:


void Lcd_PutString (u8* str)
{
    42e0:	df 93       	push	r29
    42e2:	cf 93       	push	r28
    42e4:	00 d0       	rcall	.+0      	; 0x42e6 <Lcd_PutString+0x6>
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    42ea:	9a 83       	std	Y+2, r25	; 0x02
    42ec:	89 83       	std	Y+1, r24	; 0x01
    42ee:	0a c0       	rjmp	.+20     	; 0x4304 <Lcd_PutString+0x24>
	 while (*str !='\0'){
		Lcd_PutChar(*str);
    42f0:	e9 81       	ldd	r30, Y+1	; 0x01
    42f2:	fa 81       	ldd	r31, Y+2	; 0x02
    42f4:	80 81       	ld	r24, Z
    42f6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <Lcd_PutChar>
		str++;
    42fa:	89 81       	ldd	r24, Y+1	; 0x01
    42fc:	9a 81       	ldd	r25, Y+2	; 0x02
    42fe:	01 96       	adiw	r24, 0x01	; 1
    4300:	9a 83       	std	Y+2, r25	; 0x02
    4302:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_PutString (u8* str)
{
	 while (*str !='\0'){
    4304:	e9 81       	ldd	r30, Y+1	; 0x01
    4306:	fa 81       	ldd	r31, Y+2	; 0x02
    4308:	80 81       	ld	r24, Z
    430a:	88 23       	and	r24, r24
    430c:	89 f7       	brne	.-30     	; 0x42f0 <Lcd_PutString+0x10>
		Lcd_PutChar(*str);
		str++;
		}
}
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	cf 91       	pop	r28
    4314:	df 91       	pop	r29
    4316:	08 95       	ret

00004318 <lcd4_disply_char_at_X_Y>:

void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	00 d0       	rcall	.+0      	; 0x431e <lcd4_disply_char_at_X_Y+0x6>
    431e:	0f 92       	push	r0
    4320:	cd b7       	in	r28, 0x3d	; 61
    4322:	de b7       	in	r29, 0x3e	; 62
    4324:	89 83       	std	Y+1, r24	; 0x01
    4326:	6a 83       	std	Y+2, r22	; 0x02
    4328:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoTo(row, col);
    432a:	8a 81       	ldd	r24, Y+2	; 0x02
    432c:	6b 81       	ldd	r22, Y+3	; 0x03
    432e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <Lcd_GoTo>
	Lcd_SendData(data);
    4332:	89 81       	ldd	r24, Y+1	; 0x01
    4334:	0e 94 49 1a 	call	0x3492	; 0x3492 <Lcd_SendData>
}
    4338:	0f 90       	pop	r0
    433a:	0f 90       	pop	r0
    433c:	0f 90       	pop	r0
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	08 95       	ret

00004344 <Lcd_PutString_x_Y>:


void Lcd_PutString_x_Y(u8* data, u8 row, u8 col)
{
    4344:	df 93       	push	r29
    4346:	cf 93       	push	r28
    4348:	00 d0       	rcall	.+0      	; 0x434a <Lcd_PutString_x_Y+0x6>
    434a:	00 d0       	rcall	.+0      	; 0x434c <Lcd_PutString_x_Y+0x8>
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	9a 83       	std	Y+2, r25	; 0x02
    4352:	89 83       	std	Y+1, r24	; 0x01
    4354:	6b 83       	std	Y+3, r22	; 0x03
    4356:	4c 83       	std	Y+4, r20	; 0x04
	Lcd_GoTo(row, col);
    4358:	8b 81       	ldd	r24, Y+3	; 0x03
    435a:	6c 81       	ldd	r22, Y+4	; 0x04
    435c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <Lcd_GoTo>
	Lcd_PutString(data);
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	9a 81       	ldd	r25, Y+2	; 0x02
    4364:	0e 94 70 21 	call	0x42e0	; 0x42e0 <Lcd_PutString>
}
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	cf 91       	pop	r28
    4372:	df 91       	pop	r29
    4374:	08 95       	ret

00004376 <LED5>:
#include "MCAL/PORT/PORT_cnf.h"
#include "avr/delay.h"
#include "OS/OS_interface.h"

void LED5(void)
{
    4376:	df 93       	push	r29
    4378:	cf 93       	push	r28
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_5);
    437e:	85 e0       	ldi	r24, 0x05	; 5
    4380:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Dio_FlipChannel>
}
    4384:	cf 91       	pop	r28
    4386:	df 91       	pop	r29
    4388:	08 95       	ret

0000438a <LED4>:

void LED4(void)
{
    438a:	df 93       	push	r29
    438c:	cf 93       	push	r28
    438e:	cd b7       	in	r28, 0x3d	; 61
    4390:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_4);
    4392:	84 e0       	ldi	r24, 0x04	; 4
    4394:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Dio_FlipChannel>
}
    4398:	cf 91       	pop	r28
    439a:	df 91       	pop	r29
    439c:	08 95       	ret

0000439e <LED6>:

void LED6(void)
{
    439e:	df 93       	push	r29
    43a0:	cf 93       	push	r28
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_6);
    43a6:	86 e0       	ldi	r24, 0x06	; 6
    43a8:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Dio_FlipChannel>
}
    43ac:	cf 91       	pop	r28
    43ae:	df 91       	pop	r29
    43b0:	08 95       	ret

000043b2 <main>:

int main() {
    43b2:	df 93       	push	r29
    43b4:	cf 93       	push	r28
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62

	Port_Init(pin_cfg);
    43ba:	8d e7       	ldi	r24, 0x7D	; 125
    43bc:	91 e0       	ldi	r25, 0x01	; 1
    43be:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Port_Init>
Dio_WriteChannel(PA_4,STD_LOW);
    43c2:	84 e0       	ldi	r24, 0x04	; 4
    43c4:	60 e0       	ldi	r22, 0x00	; 0
    43c6:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
Dio_WriteChannel(PA_5,STD_LOW);
    43ca:	85 e0       	ldi	r24, 0x05	; 5
    43cc:	60 e0       	ldi	r22, 0x00	; 0
    43ce:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>
Dio_WriteChannel(PA_6,STD_LOW);
    43d2:	86 e0       	ldi	r24, 0x06	; 6
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	0e 94 a4 13 	call	0x2748	; 0x2748 <Dio_WriteChannel>

GI_voidEnable();
    43da:	0e 94 66 11 	call	0x22cc	; 0x22cc <GI_voidEnable>

	//Lcd_Init();
	//ICU_voidInit();
//void OS_voidCreateTask(u8 Copy_u8ID, u16 Copy_u8Periodicity, u16 Copy_u8InitialDelay, void (*ptr)(void)) {

	OS_voidCreateTask(0,200,0,LED4);
    43de:	25 ec       	ldi	r18, 0xC5	; 197
    43e0:	31 e2       	ldi	r19, 0x21	; 33
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	68 ec       	ldi	r22, 0xC8	; 200
    43e6:	70 e0       	ldi	r23, 0x00	; 0
    43e8:	40 e0       	ldi	r20, 0x00	; 0
    43ea:	50 e0       	ldi	r21, 0x00	; 0
    43ec:	0e 94 16 08 	call	0x102c	; 0x102c <OS_voidCreateTask>
	OS_voidCreateTask(1,200,100,LED5);
    43f0:	2b eb       	ldi	r18, 0xBB	; 187
    43f2:	31 e2       	ldi	r19, 0x21	; 33
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	68 ec       	ldi	r22, 0xC8	; 200
    43f8:	70 e0       	ldi	r23, 0x00	; 0
    43fa:	44 e6       	ldi	r20, 0x64	; 100
    43fc:	50 e0       	ldi	r21, 0x00	; 0
    43fe:	0e 94 16 08 	call	0x102c	; 0x102c <OS_voidCreateTask>
	OS_voidCreateTask(2,200,150,LED6);
    4402:	2f ec       	ldi	r18, 0xCF	; 207
    4404:	31 e2       	ldi	r19, 0x21	; 33
    4406:	82 e0       	ldi	r24, 0x02	; 2
    4408:	68 ec       	ldi	r22, 0xC8	; 200
    440a:	70 e0       	ldi	r23, 0x00	; 0
    440c:	46 e9       	ldi	r20, 0x96	; 150
    440e:	50 e0       	ldi	r21, 0x00	; 0
    4410:	0e 94 16 08 	call	0x102c	; 0x102c <OS_voidCreateTask>

	OS_voidStartScheduler();
    4414:	0e 94 da 08 	call	0x11b4	; 0x11b4 <OS_voidStartScheduler>
    4418:	ff cf       	rjmp	.-2      	; 0x4418 <main+0x66>

0000441a <__mulsi3>:
    441a:	62 9f       	mul	r22, r18
    441c:	d0 01       	movw	r26, r0
    441e:	73 9f       	mul	r23, r19
    4420:	f0 01       	movw	r30, r0
    4422:	82 9f       	mul	r24, r18
    4424:	e0 0d       	add	r30, r0
    4426:	f1 1d       	adc	r31, r1
    4428:	64 9f       	mul	r22, r20
    442a:	e0 0d       	add	r30, r0
    442c:	f1 1d       	adc	r31, r1
    442e:	92 9f       	mul	r25, r18
    4430:	f0 0d       	add	r31, r0
    4432:	83 9f       	mul	r24, r19
    4434:	f0 0d       	add	r31, r0
    4436:	74 9f       	mul	r23, r20
    4438:	f0 0d       	add	r31, r0
    443a:	65 9f       	mul	r22, r21
    443c:	f0 0d       	add	r31, r0
    443e:	99 27       	eor	r25, r25
    4440:	72 9f       	mul	r23, r18
    4442:	b0 0d       	add	r27, r0
    4444:	e1 1d       	adc	r30, r1
    4446:	f9 1f       	adc	r31, r25
    4448:	63 9f       	mul	r22, r19
    444a:	b0 0d       	add	r27, r0
    444c:	e1 1d       	adc	r30, r1
    444e:	f9 1f       	adc	r31, r25
    4450:	bd 01       	movw	r22, r26
    4452:	cf 01       	movw	r24, r30
    4454:	11 24       	eor	r1, r1
    4456:	08 95       	ret

00004458 <__udivmodhi4>:
    4458:	aa 1b       	sub	r26, r26
    445a:	bb 1b       	sub	r27, r27
    445c:	51 e1       	ldi	r21, 0x11	; 17
    445e:	07 c0       	rjmp	.+14     	; 0x446e <__udivmodhi4_ep>

00004460 <__udivmodhi4_loop>:
    4460:	aa 1f       	adc	r26, r26
    4462:	bb 1f       	adc	r27, r27
    4464:	a6 17       	cp	r26, r22
    4466:	b7 07       	cpc	r27, r23
    4468:	10 f0       	brcs	.+4      	; 0x446e <__udivmodhi4_ep>
    446a:	a6 1b       	sub	r26, r22
    446c:	b7 0b       	sbc	r27, r23

0000446e <__udivmodhi4_ep>:
    446e:	88 1f       	adc	r24, r24
    4470:	99 1f       	adc	r25, r25
    4472:	5a 95       	dec	r21
    4474:	a9 f7       	brne	.-22     	; 0x4460 <__udivmodhi4_loop>
    4476:	80 95       	com	r24
    4478:	90 95       	com	r25
    447a:	bc 01       	movw	r22, r24
    447c:	cd 01       	movw	r24, r26
    447e:	08 95       	ret

00004480 <__udivmodsi4>:
    4480:	a1 e2       	ldi	r26, 0x21	; 33
    4482:	1a 2e       	mov	r1, r26
    4484:	aa 1b       	sub	r26, r26
    4486:	bb 1b       	sub	r27, r27
    4488:	fd 01       	movw	r30, r26
    448a:	0d c0       	rjmp	.+26     	; 0x44a6 <__udivmodsi4_ep>

0000448c <__udivmodsi4_loop>:
    448c:	aa 1f       	adc	r26, r26
    448e:	bb 1f       	adc	r27, r27
    4490:	ee 1f       	adc	r30, r30
    4492:	ff 1f       	adc	r31, r31
    4494:	a2 17       	cp	r26, r18
    4496:	b3 07       	cpc	r27, r19
    4498:	e4 07       	cpc	r30, r20
    449a:	f5 07       	cpc	r31, r21
    449c:	20 f0       	brcs	.+8      	; 0x44a6 <__udivmodsi4_ep>
    449e:	a2 1b       	sub	r26, r18
    44a0:	b3 0b       	sbc	r27, r19
    44a2:	e4 0b       	sbc	r30, r20
    44a4:	f5 0b       	sbc	r31, r21

000044a6 <__udivmodsi4_ep>:
    44a6:	66 1f       	adc	r22, r22
    44a8:	77 1f       	adc	r23, r23
    44aa:	88 1f       	adc	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	1a 94       	dec	r1
    44b0:	69 f7       	brne	.-38     	; 0x448c <__udivmodsi4_loop>
    44b2:	60 95       	com	r22
    44b4:	70 95       	com	r23
    44b6:	80 95       	com	r24
    44b8:	90 95       	com	r25
    44ba:	9b 01       	movw	r18, r22
    44bc:	ac 01       	movw	r20, r24
    44be:	bd 01       	movw	r22, r26
    44c0:	cf 01       	movw	r24, r30
    44c2:	08 95       	ret

000044c4 <__prologue_saves__>:
    44c4:	2f 92       	push	r2
    44c6:	3f 92       	push	r3
    44c8:	4f 92       	push	r4
    44ca:	5f 92       	push	r5
    44cc:	6f 92       	push	r6
    44ce:	7f 92       	push	r7
    44d0:	8f 92       	push	r8
    44d2:	9f 92       	push	r9
    44d4:	af 92       	push	r10
    44d6:	bf 92       	push	r11
    44d8:	cf 92       	push	r12
    44da:	df 92       	push	r13
    44dc:	ef 92       	push	r14
    44de:	ff 92       	push	r15
    44e0:	0f 93       	push	r16
    44e2:	1f 93       	push	r17
    44e4:	cf 93       	push	r28
    44e6:	df 93       	push	r29
    44e8:	cd b7       	in	r28, 0x3d	; 61
    44ea:	de b7       	in	r29, 0x3e	; 62
    44ec:	ca 1b       	sub	r28, r26
    44ee:	db 0b       	sbc	r29, r27
    44f0:	0f b6       	in	r0, 0x3f	; 63
    44f2:	f8 94       	cli
    44f4:	de bf       	out	0x3e, r29	; 62
    44f6:	0f be       	out	0x3f, r0	; 63
    44f8:	cd bf       	out	0x3d, r28	; 61
    44fa:	09 94       	ijmp

000044fc <__epilogue_restores__>:
    44fc:	2a 88       	ldd	r2, Y+18	; 0x12
    44fe:	39 88       	ldd	r3, Y+17	; 0x11
    4500:	48 88       	ldd	r4, Y+16	; 0x10
    4502:	5f 84       	ldd	r5, Y+15	; 0x0f
    4504:	6e 84       	ldd	r6, Y+14	; 0x0e
    4506:	7d 84       	ldd	r7, Y+13	; 0x0d
    4508:	8c 84       	ldd	r8, Y+12	; 0x0c
    450a:	9b 84       	ldd	r9, Y+11	; 0x0b
    450c:	aa 84       	ldd	r10, Y+10	; 0x0a
    450e:	b9 84       	ldd	r11, Y+9	; 0x09
    4510:	c8 84       	ldd	r12, Y+8	; 0x08
    4512:	df 80       	ldd	r13, Y+7	; 0x07
    4514:	ee 80       	ldd	r14, Y+6	; 0x06
    4516:	fd 80       	ldd	r15, Y+5	; 0x05
    4518:	0c 81       	ldd	r16, Y+4	; 0x04
    451a:	1b 81       	ldd	r17, Y+3	; 0x03
    451c:	aa 81       	ldd	r26, Y+2	; 0x02
    451e:	b9 81       	ldd	r27, Y+1	; 0x01
    4520:	ce 0f       	add	r28, r30
    4522:	d1 1d       	adc	r29, r1
    4524:	0f b6       	in	r0, 0x3f	; 63
    4526:	f8 94       	cli
    4528:	de bf       	out	0x3e, r29	; 62
    452a:	0f be       	out	0x3f, r0	; 63
    452c:	cd bf       	out	0x3d, r28	; 61
    452e:	ed 01       	movw	r28, r26
    4530:	08 95       	ret

00004532 <_exit>:
    4532:	f8 94       	cli

00004534 <__stop_program>:
    4534:	ff cf       	rjmp	.-2      	; 0x4534 <__stop_program>
