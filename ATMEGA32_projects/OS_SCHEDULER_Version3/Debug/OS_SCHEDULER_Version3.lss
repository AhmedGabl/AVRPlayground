
OS_SCHEDULER_Version3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000495a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000182  00800060  0000495a  000049ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  008001e2  008001e2  00004b70  2**0
                  ALLOC
  3 .stab         000042a8  00000000  00000000  00004b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000256b  00000000  00000000  00008e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000b383  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  0000b563  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  0000b791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  0000f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00010a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  00010c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  00010f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001193c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__vector_1>
       8:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__vector_2>
       c:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__vector_3>
      10:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__vector_4>
      14:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__vector_5>
      18:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__vector_10>
      2c:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <main>
      8a:	0c 94 ab 24 	jmp	0x4956	; 0x4956 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 84 24 	jmp	0x4908	; 0x4908 <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 a0 24 	jmp	0x4940	; 0x4940 <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e3 58       	subi	r30, 0x83	; 131
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <Scheduler>:

Task OS_Tasks[OS_NUMBER_OF_TASKS][OS_LEVELS_OF_SAME_TASK_PRIORITY];

u32 TickCount = 0;

void Scheduler(void) {
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <Scheduler+0xa>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
     efc:	1a 82       	std	Y+2, r1	; 0x02
     efe:	09 c1       	rjmp	.+530    	; 0x1112 <Scheduler+0x224>
        for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
     f00:	19 82       	std	Y+1, r1	; 0x01
     f02:	00 c1       	rjmp	.+512    	; 0x1104 <Scheduler+0x216>
            if (OS_Tasks[i][j].State == OS_TASK_READY) {
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	68 2f       	mov	r22, r24
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	c9 01       	movw	r24, r18
     f12:	ac 01       	movw	r20, r24
     f14:	44 0f       	add	r20, r20
     f16:	55 1f       	adc	r21, r21
     f18:	44 0f       	add	r20, r20
     f1a:	55 1f       	adc	r21, r21
     f1c:	44 0f       	add	r20, r20
     f1e:	55 1f       	adc	r21, r21
     f20:	42 1b       	sub	r20, r18
     f22:	53 0b       	sbc	r21, r19
     f24:	cb 01       	movw	r24, r22
     f26:	9c 01       	movw	r18, r24
     f28:	22 0f       	add	r18, r18
     f2a:	33 1f       	adc	r19, r19
     f2c:	c9 01       	movw	r24, r18
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	82 1b       	sub	r24, r18
     f3c:	93 0b       	sbc	r25, r19
     f3e:	84 0f       	add	r24, r20
     f40:	95 1f       	adc	r25, r21
     f42:	fc 01       	movw	r30, r24
     f44:	ec 5e       	subi	r30, 0xEC	; 236
     f46:	fd 4f       	sbci	r31, 0xFD	; 253
     f48:	80 81       	ld	r24, Z
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	09 f0       	breq	.+2      	; 0xf50 <Scheduler+0x62>
     f4e:	d7 c0       	rjmp	.+430    	; 0x10fe <Scheduler+0x210>
                if (OS_Tasks[i][j].InitialDelay == 0) {
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	68 2f       	mov	r22, r24
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	c9 01       	movw	r24, r18
     f5e:	ac 01       	movw	r20, r24
     f60:	44 0f       	add	r20, r20
     f62:	55 1f       	adc	r21, r21
     f64:	44 0f       	add	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	44 0f       	add	r20, r20
     f6a:	55 1f       	adc	r21, r21
     f6c:	42 1b       	sub	r20, r18
     f6e:	53 0b       	sbc	r21, r19
     f70:	cb 01       	movw	r24, r22
     f72:	9c 01       	movw	r18, r24
     f74:	22 0f       	add	r18, r18
     f76:	33 1f       	adc	r19, r19
     f78:	c9 01       	movw	r24, r18
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	82 1b       	sub	r24, r18
     f88:	93 0b       	sbc	r25, r19
     f8a:	84 0f       	add	r24, r20
     f8c:	95 1f       	adc	r25, r21
     f8e:	fc 01       	movw	r30, r24
     f90:	ee 5e       	subi	r30, 0xEE	; 238
     f92:	fd 4f       	sbci	r31, 0xFD	; 253
     f94:	80 81       	ld	r24, Z
     f96:	88 23       	and	r24, r24
     f98:	09 f0       	breq	.+2      	; 0xf9c <Scheduler+0xae>
     f9a:	6f c0       	rjmp	.+222    	; 0x107a <Scheduler+0x18c>
                    OS_Tasks[i][j].InitialDelay = OS_Tasks[i][j].Periodicity - 1;
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	08 2f       	mov	r16, r24
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	a8 2f       	mov	r26, r24
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	68 2f       	mov	r22, r24
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	c9 01       	movw	r24, r18
     fb6:	ac 01       	movw	r20, r24
     fb8:	44 0f       	add	r20, r20
     fba:	55 1f       	adc	r21, r21
     fbc:	44 0f       	add	r20, r20
     fbe:	55 1f       	adc	r21, r21
     fc0:	44 0f       	add	r20, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	42 1b       	sub	r20, r18
     fc6:	53 0b       	sbc	r21, r19
     fc8:	cb 01       	movw	r24, r22
     fca:	9c 01       	movw	r18, r24
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	c9 01       	movw	r24, r18
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	82 1b       	sub	r24, r18
     fe0:	93 0b       	sbc	r25, r19
     fe2:	84 0f       	add	r24, r20
     fe4:	95 1f       	adc	r25, r21
     fe6:	fc 01       	movw	r30, r24
     fe8:	ef 5e       	subi	r30, 0xEF	; 239
     fea:	fd 4f       	sbci	r31, 0xFD	; 253
     fec:	80 81       	ld	r24, Z
     fee:	68 2f       	mov	r22, r24
     ff0:	61 50       	subi	r22, 0x01	; 1
     ff2:	cd 01       	movw	r24, r26
     ff4:	ac 01       	movw	r20, r24
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	44 0f       	add	r20, r20
     ffc:	55 1f       	adc	r21, r21
     ffe:	44 0f       	add	r20, r20
    1000:	55 1f       	adc	r21, r21
    1002:	4a 1b       	sub	r20, r26
    1004:	5b 0b       	sbc	r21, r27
    1006:	c8 01       	movw	r24, r16
    1008:	9c 01       	movw	r18, r24
    100a:	22 0f       	add	r18, r18
    100c:	33 1f       	adc	r19, r19
    100e:	c9 01       	movw	r24, r18
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	82 1b       	sub	r24, r18
    101e:	93 0b       	sbc	r25, r19
    1020:	84 0f       	add	r24, r20
    1022:	95 1f       	adc	r25, r21
    1024:	fc 01       	movw	r30, r24
    1026:	ee 5e       	subi	r30, 0xEE	; 238
    1028:	fd 4f       	sbci	r31, 0xFD	; 253
    102a:	60 83       	st	Z, r22
                    OS_Tasks[i][j].Fptr();
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	68 2f       	mov	r22, r24
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	c9 01       	movw	r24, r18
    103a:	ac 01       	movw	r20, r24
    103c:	44 0f       	add	r20, r20
    103e:	55 1f       	adc	r21, r21
    1040:	44 0f       	add	r20, r20
    1042:	55 1f       	adc	r21, r21
    1044:	44 0f       	add	r20, r20
    1046:	55 1f       	adc	r21, r21
    1048:	42 1b       	sub	r20, r18
    104a:	53 0b       	sbc	r21, r19
    104c:	cb 01       	movw	r24, r22
    104e:	9c 01       	movw	r18, r24
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	c9 01       	movw	r24, r18
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	82 1b       	sub	r24, r18
    1064:	93 0b       	sbc	r25, r19
    1066:	84 0f       	add	r24, r20
    1068:	95 1f       	adc	r25, r21
    106a:	fc 01       	movw	r30, r24
    106c:	ea 5e       	subi	r30, 0xEA	; 234
    106e:	fd 4f       	sbci	r31, 0xFD	; 253
    1070:	01 90       	ld	r0, Z+
    1072:	f0 81       	ld	r31, Z
    1074:	e0 2d       	mov	r30, r0
    1076:	09 95       	icall
    1078:	42 c0       	rjmp	.+132    	; 0x10fe <Scheduler+0x210>
                } else {
                    OS_Tasks[i][j].InitialDelay--;
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	a8 2f       	mov	r26, r24
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	68 2f       	mov	r22, r24
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	cb 01       	movw	r24, r22
    1088:	ac 01       	movw	r20, r24
    108a:	44 0f       	add	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	44 0f       	add	r20, r20
    1090:	55 1f       	adc	r21, r21
    1092:	44 0f       	add	r20, r20
    1094:	55 1f       	adc	r21, r21
    1096:	46 1b       	sub	r20, r22
    1098:	57 0b       	sbc	r21, r23
    109a:	cd 01       	movw	r24, r26
    109c:	9c 01       	movw	r18, r24
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	c9 01       	movw	r24, r18
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	82 1b       	sub	r24, r18
    10b2:	93 0b       	sbc	r25, r19
    10b4:	84 0f       	add	r24, r20
    10b6:	95 1f       	adc	r25, r21
    10b8:	fc 01       	movw	r30, r24
    10ba:	ee 5e       	subi	r30, 0xEE	; 238
    10bc:	fd 4f       	sbci	r31, 0xFD	; 253
    10be:	80 81       	ld	r24, Z
    10c0:	18 2f       	mov	r17, r24
    10c2:	11 50       	subi	r17, 0x01	; 1
    10c4:	cb 01       	movw	r24, r22
    10c6:	ac 01       	movw	r20, r24
    10c8:	44 0f       	add	r20, r20
    10ca:	55 1f       	adc	r21, r21
    10cc:	44 0f       	add	r20, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	44 0f       	add	r20, r20
    10d2:	55 1f       	adc	r21, r21
    10d4:	46 1b       	sub	r20, r22
    10d6:	57 0b       	sbc	r21, r23
    10d8:	cd 01       	movw	r24, r26
    10da:	9c 01       	movw	r18, r24
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	c9 01       	movw	r24, r18
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	82 1b       	sub	r24, r18
    10f0:	93 0b       	sbc	r25, r19
    10f2:	84 0f       	add	r24, r20
    10f4:	95 1f       	adc	r25, r21
    10f6:	fc 01       	movw	r30, r24
    10f8:	ee 5e       	subi	r30, 0xEE	; 238
    10fa:	fd 4f       	sbci	r31, 0xFD	; 253
    10fc:	10 83       	st	Z, r17

u32 TickCount = 0;

void Scheduler(void) {
	for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
        for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	08 f4       	brcc	.+2      	; 0x110c <Scheduler+0x21e>
    110a:	fc ce       	rjmp	.-520    	; 0xf04 <Scheduler+0x16>
Task OS_Tasks[OS_NUMBER_OF_TASKS][OS_LEVELS_OF_SAME_TASK_PRIORITY];

u32 TickCount = 0;

void Scheduler(void) {
	for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	8a 83       	std	Y+2, r24	; 0x02
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	08 f4       	brcc	.+2      	; 0x111a <Scheduler+0x22c>
    1118:	f3 ce       	rjmp	.-538    	; 0xf00 <Scheduler+0x12>
                    OS_Tasks[i][j].InitialDelay--;
                }
            }
        }
    }
    TickCount++;
    111a:	80 91 e2 01 	lds	r24, 0x01E2
    111e:	90 91 e3 01 	lds	r25, 0x01E3
    1122:	a0 91 e4 01 	lds	r26, 0x01E4
    1126:	b0 91 e5 01 	lds	r27, 0x01E5
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	a1 1d       	adc	r26, r1
    112e:	b1 1d       	adc	r27, r1
    1130:	80 93 e2 01 	sts	0x01E2, r24
    1134:	90 93 e3 01 	sts	0x01E3, r25
    1138:	a0 93 e4 01 	sts	0x01E4, r26
    113c:	b0 93 e5 01 	sts	0x01E5, r27
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <OS_voidCreateTask>:

/*
 * OS_voidCreateTask
 */
void OS_voidCreateTask(u8 Copy_u8ID, u16 Copy_u8Periodicity, u16 Copy_u8InitialDelay, void (*ptr)(void)) {
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	2a 97       	sbiw	r28, 0x0a	; 10
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	8c 83       	std	Y+4, r24	; 0x04
    1164:	7e 83       	std	Y+6, r23	; 0x06
    1166:	6d 83       	std	Y+5, r22	; 0x05
    1168:	58 87       	std	Y+8, r21	; 0x08
    116a:	4f 83       	std	Y+7, r20	; 0x07
    116c:	3a 87       	std	Y+10, r19	; 0x0a
    116e:	29 87       	std	Y+9, r18	; 0x09
	 u8 taskLevel = 0;
    1170:	1b 82       	std	Y+3, r1	; 0x03
	 static u8 Tasks_Init = 0;

	if(Tasks_Init == 0)
    1172:	80 91 e6 01 	lds	r24, 0x01E6
    1176:	88 23       	and	r24, r24
    1178:	09 f0       	breq	.+2      	; 0x117c <OS_voidCreateTask+0x2e>
    117a:	61 c0       	rjmp	.+194    	; 0x123e <OS_voidCreateTask+0xf0>
	{
		 for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
    117c:	1a 82       	std	Y+2, r1	; 0x02
    117e:	54 c0       	rjmp	.+168    	; 0x1228 <OS_voidCreateTask+0xda>
		        for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    1180:	19 82       	std	Y+1, r1	; 0x01
    1182:	4b c0       	rjmp	.+150    	; 0x121a <OS_voidCreateTask+0xcc>
		            OS_Tasks[i][j].Fptr = NULL;
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	68 2f       	mov	r22, r24
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	c9 01       	movw	r24, r18
    1192:	ac 01       	movw	r20, r24
    1194:	44 0f       	add	r20, r20
    1196:	55 1f       	adc	r21, r21
    1198:	44 0f       	add	r20, r20
    119a:	55 1f       	adc	r21, r21
    119c:	44 0f       	add	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	42 1b       	sub	r20, r18
    11a2:	53 0b       	sbc	r21, r19
    11a4:	cb 01       	movw	r24, r22
    11a6:	9c 01       	movw	r18, r24
    11a8:	22 0f       	add	r18, r18
    11aa:	33 1f       	adc	r19, r19
    11ac:	c9 01       	movw	r24, r18
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	82 1b       	sub	r24, r18
    11bc:	93 0b       	sbc	r25, r19
    11be:	84 0f       	add	r24, r20
    11c0:	95 1f       	adc	r25, r21
    11c2:	fc 01       	movw	r30, r24
    11c4:	ea 5e       	subi	r30, 0xEA	; 234
    11c6:	fd 4f       	sbci	r31, 0xFD	; 253
    11c8:	11 82       	std	Z+1, r1	; 0x01
    11ca:	10 82       	st	Z, r1
		            OS_Tasks[i][j].State = OS_TASK_DELETED;
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	68 2f       	mov	r22, r24
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	c9 01       	movw	r24, r18
    11da:	ac 01       	movw	r20, r24
    11dc:	44 0f       	add	r20, r20
    11de:	55 1f       	adc	r21, r21
    11e0:	44 0f       	add	r20, r20
    11e2:	55 1f       	adc	r21, r21
    11e4:	44 0f       	add	r20, r20
    11e6:	55 1f       	adc	r21, r21
    11e8:	42 1b       	sub	r20, r18
    11ea:	53 0b       	sbc	r21, r19
    11ec:	cb 01       	movw	r24, r22
    11ee:	9c 01       	movw	r18, r24
    11f0:	22 0f       	add	r18, r18
    11f2:	33 1f       	adc	r19, r19
    11f4:	c9 01       	movw	r24, r18
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	82 1b       	sub	r24, r18
    1204:	93 0b       	sbc	r25, r19
    1206:	84 0f       	add	r24, r20
    1208:	95 1f       	adc	r25, r21
    120a:	fc 01       	movw	r30, r24
    120c:	ec 5e       	subi	r30, 0xEC	; 236
    120e:	fd 4f       	sbci	r31, 0xFD	; 253
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	80 83       	st	Z, r24
	 static u8 Tasks_Init = 0;

	if(Tasks_Init == 0)
	{
		 for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
		        for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	08 f4       	brcc	.+2      	; 0x1222 <OS_voidCreateTask+0xd4>
    1220:	b1 cf       	rjmp	.-158    	; 0x1184 <OS_voidCreateTask+0x36>
	 u8 taskLevel = 0;
	 static u8 Tasks_Init = 0;

	if(Tasks_Init == 0)
	{
		 for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	8a 83       	std	Y+2, r24	; 0x02
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	08 f4       	brcc	.+2      	; 0x1230 <OS_voidCreateTask+0xe2>
    122e:	a8 cf       	rjmp	.-176    	; 0x1180 <OS_voidCreateTask+0x32>
		        for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
		            OS_Tasks[i][j].Fptr = NULL;
		            OS_Tasks[i][j].State = OS_TASK_DELETED;
		        }
		    }
		 Tasks_Init = 1 ;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	80 93 e6 01 	sts	0x01E6, r24
    1236:	03 c0       	rjmp	.+6      	; 0x123e <OS_voidCreateTask+0xf0>
	}
	// Find the first available slot for the task with the same priority
    while (taskLevel < OS_LEVELS_OF_SAME_TASK_PRIORITY && OS_Tasks[Copy_u8ID][taskLevel].Fptr != NULL) {
        taskLevel++;
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	8b 83       	std	Y+3, r24	; 0x03
		        }
		    }
		 Tasks_Init = 1 ;
	}
	// Find the first available slot for the task with the same priority
    while (taskLevel < OS_LEVELS_OF_SAME_TASK_PRIORITY && OS_Tasks[Copy_u8ID][taskLevel].Fptr != NULL) {
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	30 f5       	brcc	.+76     	; 0x1290 <OS_voidCreateTask+0x142>
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	68 2f       	mov	r22, r24
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	c9 01       	movw	r24, r18
    1252:	ac 01       	movw	r20, r24
    1254:	44 0f       	add	r20, r20
    1256:	55 1f       	adc	r21, r21
    1258:	44 0f       	add	r20, r20
    125a:	55 1f       	adc	r21, r21
    125c:	44 0f       	add	r20, r20
    125e:	55 1f       	adc	r21, r21
    1260:	42 1b       	sub	r20, r18
    1262:	53 0b       	sbc	r21, r19
    1264:	cb 01       	movw	r24, r22
    1266:	9c 01       	movw	r18, r24
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	c9 01       	movw	r24, r18
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	82 1b       	sub	r24, r18
    127c:	93 0b       	sbc	r25, r19
    127e:	84 0f       	add	r24, r20
    1280:	95 1f       	adc	r25, r21
    1282:	fc 01       	movw	r30, r24
    1284:	ea 5e       	subi	r30, 0xEA	; 234
    1286:	fd 4f       	sbci	r31, 0xFD	; 253
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	a1 f6       	brne	.-88     	; 0x1238 <OS_voidCreateTask+0xea>
        taskLevel++;
    }

    if (taskLevel < OS_LEVELS_OF_SAME_TASK_PRIORITY) {
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	08 f0       	brcs	.+2      	; 0x1298 <OS_voidCreateTask+0x14a>
    1296:	b6 c0       	rjmp	.+364    	; 0x1404 <OS_voidCreateTask+0x2b6>
        OS_Tasks[Copy_u8ID][taskLevel].Fptr = ptr;
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	68 2f       	mov	r22, r24
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	c9 01       	movw	r24, r18
    12a6:	ac 01       	movw	r20, r24
    12a8:	44 0f       	add	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	44 0f       	add	r20, r20
    12ae:	55 1f       	adc	r21, r21
    12b0:	44 0f       	add	r20, r20
    12b2:	55 1f       	adc	r21, r21
    12b4:	42 1b       	sub	r20, r18
    12b6:	53 0b       	sbc	r21, r19
    12b8:	cb 01       	movw	r24, r22
    12ba:	9c 01       	movw	r18, r24
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	c9 01       	movw	r24, r18
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	82 1b       	sub	r24, r18
    12d0:	93 0b       	sbc	r25, r19
    12d2:	84 0f       	add	r24, r20
    12d4:	95 1f       	adc	r25, r21
    12d6:	fc 01       	movw	r30, r24
    12d8:	ea 5e       	subi	r30, 0xEA	; 234
    12da:	fd 4f       	sbci	r31, 0xFD	; 253
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	80 83       	st	Z, r24
        OS_Tasks[Copy_u8ID][taskLevel].InitialDelay = Copy_u8InitialDelay;
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	68 2f       	mov	r22, r24
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	af 81       	ldd	r26, Y+7	; 0x07
    12f2:	c9 01       	movw	r24, r18
    12f4:	ac 01       	movw	r20, r24
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	44 0f       	add	r20, r20
    12fc:	55 1f       	adc	r21, r21
    12fe:	44 0f       	add	r20, r20
    1300:	55 1f       	adc	r21, r21
    1302:	42 1b       	sub	r20, r18
    1304:	53 0b       	sbc	r21, r19
    1306:	cb 01       	movw	r24, r22
    1308:	9c 01       	movw	r18, r24
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	c9 01       	movw	r24, r18
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	82 1b       	sub	r24, r18
    131e:	93 0b       	sbc	r25, r19
    1320:	84 0f       	add	r24, r20
    1322:	95 1f       	adc	r25, r21
    1324:	fc 01       	movw	r30, r24
    1326:	ee 5e       	subi	r30, 0xEE	; 238
    1328:	fd 4f       	sbci	r31, 0xFD	; 253
    132a:	a0 83       	st	Z, r26
        OS_Tasks[Copy_u8ID][taskLevel].Periodicity = Copy_u8Periodicity;
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	68 2f       	mov	r22, r24
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	ad 81       	ldd	r26, Y+5	; 0x05
    133a:	c9 01       	movw	r24, r18
    133c:	ac 01       	movw	r20, r24
    133e:	44 0f       	add	r20, r20
    1340:	55 1f       	adc	r21, r21
    1342:	44 0f       	add	r20, r20
    1344:	55 1f       	adc	r21, r21
    1346:	44 0f       	add	r20, r20
    1348:	55 1f       	adc	r21, r21
    134a:	42 1b       	sub	r20, r18
    134c:	53 0b       	sbc	r21, r19
    134e:	cb 01       	movw	r24, r22
    1350:	9c 01       	movw	r18, r24
    1352:	22 0f       	add	r18, r18
    1354:	33 1f       	adc	r19, r19
    1356:	c9 01       	movw	r24, r18
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	82 1b       	sub	r24, r18
    1366:	93 0b       	sbc	r25, r19
    1368:	84 0f       	add	r24, r20
    136a:	95 1f       	adc	r25, r21
    136c:	fc 01       	movw	r30, r24
    136e:	ef 5e       	subi	r30, 0xEF	; 239
    1370:	fd 4f       	sbci	r31, 0xFD	; 253
    1372:	a0 83       	st	Z, r26
        OS_Tasks[Copy_u8ID][taskLevel].State = OS_TASK_READY;
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	68 2f       	mov	r22, r24
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	c9 01       	movw	r24, r18
    1382:	ac 01       	movw	r20, r24
    1384:	44 0f       	add	r20, r20
    1386:	55 1f       	adc	r21, r21
    1388:	44 0f       	add	r20, r20
    138a:	55 1f       	adc	r21, r21
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	42 1b       	sub	r20, r18
    1392:	53 0b       	sbc	r21, r19
    1394:	cb 01       	movw	r24, r22
    1396:	9c 01       	movw	r18, r24
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	c9 01       	movw	r24, r18
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	82 1b       	sub	r24, r18
    13ac:	93 0b       	sbc	r25, r19
    13ae:	84 0f       	add	r24, r20
    13b0:	95 1f       	adc	r25, r21
    13b2:	fc 01       	movw	r30, r24
    13b4:	ec 5e       	subi	r30, 0xEC	; 236
    13b6:	fd 4f       	sbci	r31, 0xFD	; 253
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 83       	st	Z, r24
        OS_Tasks[Copy_u8ID][taskLevel].TaskID = Copy_u8ID;
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	68 2f       	mov	r22, r24
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	c9 01       	movw	r24, r18
    13ca:	ac 01       	movw	r20, r24
    13cc:	44 0f       	add	r20, r20
    13ce:	55 1f       	adc	r21, r21
    13d0:	44 0f       	add	r20, r20
    13d2:	55 1f       	adc	r21, r21
    13d4:	44 0f       	add	r20, r20
    13d6:	55 1f       	adc	r21, r21
    13d8:	42 1b       	sub	r20, r18
    13da:	53 0b       	sbc	r21, r19
    13dc:	cb 01       	movw	r24, r22
    13de:	9c 01       	movw	r18, r24
    13e0:	22 0f       	add	r18, r18
    13e2:	33 1f       	adc	r19, r19
    13e4:	c9 01       	movw	r24, r18
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	82 1b       	sub	r24, r18
    13f4:	93 0b       	sbc	r25, r19
    13f6:	84 0f       	add	r24, r20
    13f8:	95 1f       	adc	r25, r21
    13fa:	fc 01       	movw	r30, r24
    13fc:	ed 5e       	subi	r30, 0xED	; 237
    13fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	80 83       	st	Z, r24
    }
}
    1404:	2a 96       	adiw	r28, 0x0a	; 10
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <OS_voidDeleteTask>:

/*
 * OS_voidDeleteTask
 */
void OS_voidDeleteTask(u8 Copy_u8ID) {
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <OS_voidDeleteTask+0x6>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	8a 83       	std	Y+2, r24	; 0x02
    for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    1422:	19 82       	std	Y+1, r1	; 0x01
    1424:	27 c0       	rjmp	.+78     	; 0x1474 <OS_voidDeleteTask+0x5e>
        OS_Tasks[Copy_u8ID][j].State = OS_TASK_DELETED;
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	68 2f       	mov	r22, r24
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	c9 01       	movw	r24, r18
    1434:	ac 01       	movw	r20, r24
    1436:	44 0f       	add	r20, r20
    1438:	55 1f       	adc	r21, r21
    143a:	44 0f       	add	r20, r20
    143c:	55 1f       	adc	r21, r21
    143e:	44 0f       	add	r20, r20
    1440:	55 1f       	adc	r21, r21
    1442:	42 1b       	sub	r20, r18
    1444:	53 0b       	sbc	r21, r19
    1446:	cb 01       	movw	r24, r22
    1448:	9c 01       	movw	r18, r24
    144a:	22 0f       	add	r18, r18
    144c:	33 1f       	adc	r19, r19
    144e:	c9 01       	movw	r24, r18
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	82 1b       	sub	r24, r18
    145e:	93 0b       	sbc	r25, r19
    1460:	84 0f       	add	r24, r20
    1462:	95 1f       	adc	r25, r21
    1464:	fc 01       	movw	r30, r24
    1466:	ec 5e       	subi	r30, 0xEC	; 236
    1468:	fd 4f       	sbci	r31, 0xFD	; 253
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	80 83       	st	Z, r24

/*
 * OS_voidDeleteTask
 */
void OS_voidDeleteTask(u8 Copy_u8ID) {
    for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	b0 f2       	brcs	.-84     	; 0x1426 <OS_voidDeleteTask+0x10>
        OS_Tasks[Copy_u8ID][j].State = OS_TASK_DELETED;
    }
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <OS_voidSuspendTask>:

/*
 * OS_voidSuspendTask
 */
void OS_voidSuspendTask(u8 Copy_u8ID, u8 Copy_u8SuspendTime) {
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <OS_voidSuspendTask+0x6>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	6b 83       	std	Y+3, r22	; 0x03
    for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    1494:	19 82       	std	Y+1, r1	; 0x01
    1496:	55 c0       	rjmp	.+170    	; 0x1542 <OS_voidSuspendTask+0xbe>
        OS_Tasks[Copy_u8ID][j].State = OS_TASK_SUSPENDED;
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	68 2f       	mov	r22, r24
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	c9 01       	movw	r24, r18
    14a6:	ac 01       	movw	r20, r24
    14a8:	44 0f       	add	r20, r20
    14aa:	55 1f       	adc	r21, r21
    14ac:	44 0f       	add	r20, r20
    14ae:	55 1f       	adc	r21, r21
    14b0:	44 0f       	add	r20, r20
    14b2:	55 1f       	adc	r21, r21
    14b4:	42 1b       	sub	r20, r18
    14b6:	53 0b       	sbc	r21, r19
    14b8:	cb 01       	movw	r24, r22
    14ba:	9c 01       	movw	r18, r24
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	c9 01       	movw	r24, r18
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	82 1b       	sub	r24, r18
    14d0:	93 0b       	sbc	r25, r19
    14d2:	84 0f       	add	r24, r20
    14d4:	95 1f       	adc	r25, r21
    14d6:	fc 01       	movw	r30, r24
    14d8:	ec 5e       	subi	r30, 0xEC	; 236
    14da:	fd 4f       	sbci	r31, 0xFD	; 253
    14dc:	10 82       	st	Z, r1
        OS_Tasks[Copy_u8ID][j].SuspendTime = Copy_u8SuspendTime + TickCount;
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	68 2f       	mov	r22, r24
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	80 91 e2 01 	lds	r24, 0x01E2
    14ee:	90 91 e3 01 	lds	r25, 0x01E3
    14f2:	a0 91 e4 01 	lds	r26, 0x01E4
    14f6:	b0 91 e5 01 	lds	r27, 0x01E5
    14fa:	98 2f       	mov	r25, r24
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	a9 2f       	mov	r26, r25
    1500:	a8 0f       	add	r26, r24
    1502:	c9 01       	movw	r24, r18
    1504:	ac 01       	movw	r20, r24
    1506:	44 0f       	add	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	44 0f       	add	r20, r20
    150c:	55 1f       	adc	r21, r21
    150e:	44 0f       	add	r20, r20
    1510:	55 1f       	adc	r21, r21
    1512:	42 1b       	sub	r20, r18
    1514:	53 0b       	sbc	r21, r19
    1516:	cb 01       	movw	r24, r22
    1518:	9c 01       	movw	r18, r24
    151a:	22 0f       	add	r18, r18
    151c:	33 1f       	adc	r19, r19
    151e:	c9 01       	movw	r24, r18
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	84 0f       	add	r24, r20
    1532:	95 1f       	adc	r25, r21
    1534:	fc 01       	movw	r30, r24
    1536:	eb 5e       	subi	r30, 0xEB	; 235
    1538:	fd 4f       	sbci	r31, 0xFD	; 253
    153a:	a0 83       	st	Z, r26

/*
 * OS_voidSuspendTask
 */
void OS_voidSuspendTask(u8 Copy_u8ID, u8 Copy_u8SuspendTime) {
    for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	08 f4       	brcc	.+2      	; 0x154a <OS_voidSuspendTask+0xc6>
    1548:	a7 cf       	rjmp	.-178    	; 0x1498 <OS_voidSuspendTask+0x14>
        OS_Tasks[Copy_u8ID][j].State = OS_TASK_SUSPENDED;
        OS_Tasks[Copy_u8ID][j].SuspendTime = Copy_u8SuspendTime + TickCount;
    }
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <OS_voidStartScheduler>:

/*
 * OS_voidStartScheduler
 */
void OS_voidStartScheduler(void) {
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    // Initialize Timer/Counter 2
    TMR2_voidInit();
    155e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TMR2_voidInit>

    // Start Timer/Counter 2
    TMR2_voidStart();
    1562:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <TMR2_voidStart>

    // Set a callback function to be called on Timer/Counter 2 overflow
    TMR2_voidSetCallBackOVF(Scheduler);
    1566:	87 e7       	ldi	r24, 0x77	; 119
    1568:	97 e0       	ldi	r25, 0x07	; 7
    156a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <TMR2_voidSetCallBackOVF>
}
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <OS_voidResumeTask>:

/*
 * OS_voidResumeTask
 */
void OS_voidResumeTask(u8 Copy_u8ID) {
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <OS_voidResumeTask+0x6>
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	8a 83       	std	Y+2, r24	; 0x02
    for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    1580:	19 82       	std	Y+1, r1	; 0x01
    1582:	27 c0       	rjmp	.+78     	; 0x15d2 <OS_voidResumeTask+0x5e>
        OS_Tasks[Copy_u8ID][j].State = OS_TASK_READY;
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	68 2f       	mov	r22, r24
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	c9 01       	movw	r24, r18
    1592:	ac 01       	movw	r20, r24
    1594:	44 0f       	add	r20, r20
    1596:	55 1f       	adc	r21, r21
    1598:	44 0f       	add	r20, r20
    159a:	55 1f       	adc	r21, r21
    159c:	44 0f       	add	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	42 1b       	sub	r20, r18
    15a2:	53 0b       	sbc	r21, r19
    15a4:	cb 01       	movw	r24, r22
    15a6:	9c 01       	movw	r18, r24
    15a8:	22 0f       	add	r18, r18
    15aa:	33 1f       	adc	r19, r19
    15ac:	c9 01       	movw	r24, r18
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	82 1b       	sub	r24, r18
    15bc:	93 0b       	sbc	r25, r19
    15be:	84 0f       	add	r24, r20
    15c0:	95 1f       	adc	r25, r21
    15c2:	fc 01       	movw	r30, r24
    15c4:	ec 5e       	subi	r30, 0xEC	; 236
    15c6:	fd 4f       	sbci	r31, 0xFD	; 253
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 83       	st	Z, r24

/*
 * OS_voidResumeTask
 */
void OS_voidResumeTask(u8 Copy_u8ID) {
    for (u8 j = 0; j < OS_LEVELS_OF_SAME_TASK_PRIORITY; j++) {
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	8f 5f       	subi	r24, 0xFF	; 255
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	82 30       	cpi	r24, 0x02	; 2
    15d6:	b0 f2       	brcs	.-84     	; 0x1584 <OS_voidResumeTask+0x10>
        OS_Tasks[Copy_u8ID][j].State = OS_TASK_READY;
    }
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <OS_u8GetTaskState>:

/*
 * OS_u8GetTaskState
 */
u8 OS_u8GetTaskState(u8 Copy_u8ID, u8 Copy_u8Level) {
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <OS_u8GetTaskState+0x6>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	6a 83       	std	Y+2, r22	; 0x02
    return OS_Tasks[Copy_u8ID][Copy_u8Level].State;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	68 2f       	mov	r22, r24
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	c9 01       	movw	r24, r18
    15fe:	ac 01       	movw	r20, r24
    1600:	44 0f       	add	r20, r20
    1602:	55 1f       	adc	r21, r21
    1604:	44 0f       	add	r20, r20
    1606:	55 1f       	adc	r21, r21
    1608:	44 0f       	add	r20, r20
    160a:	55 1f       	adc	r21, r21
    160c:	42 1b       	sub	r20, r18
    160e:	53 0b       	sbc	r21, r19
    1610:	cb 01       	movw	r24, r22
    1612:	9c 01       	movw	r18, r24
    1614:	22 0f       	add	r18, r18
    1616:	33 1f       	adc	r19, r19
    1618:	c9 01       	movw	r24, r18
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	82 1b       	sub	r24, r18
    1628:	93 0b       	sbc	r25, r19
    162a:	84 0f       	add	r24, r20
    162c:	95 1f       	adc	r25, r21
    162e:	fc 01       	movw	r30, r24
    1630:	ec 5e       	subi	r30, 0xEC	; 236
    1632:	fd 4f       	sbci	r31, 0xFD	; 253
    1634:	80 81       	ld	r24, Z
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <WDT_voidEnable>:
 * Description: Enables the Watchdog Timer (WDT) with the specified overflow time.
 * Parameters:
 *   - copy_u8Time: Time for WDT overflow, should be one of the WDT_TIME_X_X_MS options.
 */
void WDT_voidEnable(u8 copy_u8Time)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <WDT_voidEnable+0x6>
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8Time)
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3b 83       	std	Y+3, r19	; 0x03
    1656:	2a 83       	std	Y+2, r18	; 0x02
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	9b 81       	ldd	r25, Y+3	; 0x03
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	91 05       	cpc	r25, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <WDT_voidEnable+0x24>
    1662:	71 c0       	rjmp	.+226    	; 0x1746 <WDT_voidEnable+0x106>
    1664:	2a 81       	ldd	r18, Y+2	; 0x02
    1666:	3b 81       	ldd	r19, Y+3	; 0x03
    1668:	25 30       	cpi	r18, 0x05	; 5
    166a:	31 05       	cpc	r19, r1
    166c:	8c f4       	brge	.+34     	; 0x1690 <WDT_voidEnable+0x50>
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	9b 81       	ldd	r25, Y+3	; 0x03
    1672:	82 30       	cpi	r24, 0x02	; 2
    1674:	91 05       	cpc	r25, r1
    1676:	d9 f1       	breq	.+118    	; 0x16ee <WDT_voidEnable+0xae>
    1678:	2a 81       	ldd	r18, Y+2	; 0x02
    167a:	3b 81       	ldd	r19, Y+3	; 0x03
    167c:	23 30       	cpi	r18, 0x03	; 3
    167e:	31 05       	cpc	r19, r1
    1680:	0c f0       	brlt	.+2      	; 0x1684 <WDT_voidEnable+0x44>
    1682:	4b c0       	rjmp	.+150    	; 0x171a <WDT_voidEnable+0xda>
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	d1 f0       	breq	.+52     	; 0x16c2 <WDT_voidEnable+0x82>
    168e:	c8 c0       	rjmp	.+400    	; 0x1820 <WDT_voidEnable+0x1e0>
    1690:	2a 81       	ldd	r18, Y+2	; 0x02
    1692:	3b 81       	ldd	r19, Y+3	; 0x03
    1694:	26 30       	cpi	r18, 0x06	; 6
    1696:	31 05       	cpc	r19, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <WDT_voidEnable+0x5c>
    169a:	81 c0       	rjmp	.+258    	; 0x179e <WDT_voidEnable+0x15e>
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	9b 81       	ldd	r25, Y+3	; 0x03
    16a0:	86 30       	cpi	r24, 0x06	; 6
    16a2:	91 05       	cpc	r25, r1
    16a4:	0c f4       	brge	.+2      	; 0x16a8 <WDT_voidEnable+0x68>
    16a6:	65 c0       	rjmp	.+202    	; 0x1772 <WDT_voidEnable+0x132>
    16a8:	2a 81       	ldd	r18, Y+2	; 0x02
    16aa:	3b 81       	ldd	r19, Y+3	; 0x03
    16ac:	27 30       	cpi	r18, 0x07	; 7
    16ae:	31 05       	cpc	r19, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <WDT_voidEnable+0x74>
    16b2:	8b c0       	rjmp	.+278    	; 0x17ca <WDT_voidEnable+0x18a>
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	9b 81       	ldd	r25, Y+3	; 0x03
    16b8:	88 30       	cpi	r24, 0x08	; 8
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <WDT_voidEnable+0x80>
    16be:	9b c0       	rjmp	.+310    	; 0x17f6 <WDT_voidEnable+0x1b6>
    16c0:	af c0       	rjmp	.+350    	; 0x1820 <WDT_voidEnable+0x1e0>
    {
    // Select overflow time as 16.3ms
    case WDT_TIME_16_3_MS:
        CLR_BIT(WDTCR, WDP0);
    16c2:	a1 e4       	ldi	r26, 0x41	; 65
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e1 e4       	ldi	r30, 0x41	; 65
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8e 7f       	andi	r24, 0xFE	; 254
    16ce:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    16d0:	a1 e4       	ldi	r26, 0x41	; 65
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e1 e4       	ldi	r30, 0x41	; 65
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	8d 7f       	andi	r24, 0xFD	; 253
    16dc:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    16de:	a1 e4       	ldi	r26, 0x41	; 65
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e1 e4       	ldi	r30, 0x41	; 65
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8b 7f       	andi	r24, 0xFB	; 251
    16ea:	8c 93       	st	X, r24
    16ec:	99 c0       	rjmp	.+306    	; 0x1820 <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 32.5ms
    case WDT_TIME_32_5_MS:
        SET_BIT(WDTCR, WDP0);
    16ee:	a1 e4       	ldi	r26, 0x41	; 65
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e1 e4       	ldi	r30, 0x41	; 65
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	81 60       	ori	r24, 0x01	; 1
    16fa:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    16fc:	a1 e4       	ldi	r26, 0x41	; 65
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e1 e4       	ldi	r30, 0x41	; 65
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8d 7f       	andi	r24, 0xFD	; 253
    1708:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    170a:	a1 e4       	ldi	r26, 0x41	; 65
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e1 e4       	ldi	r30, 0x41	; 65
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8b 7f       	andi	r24, 0xFB	; 251
    1716:	8c 93       	st	X, r24
    1718:	83 c0       	rjmp	.+262    	; 0x1820 <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 65ms
    case WDT_TIME_65_MS:
        CLR_BIT(WDTCR, WDP0);
    171a:	a1 e4       	ldi	r26, 0x41	; 65
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e1 e4       	ldi	r30, 0x41	; 65
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	8e 7f       	andi	r24, 0xFE	; 254
    1726:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1728:	a1 e4       	ldi	r26, 0x41	; 65
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e1 e4       	ldi	r30, 0x41	; 65
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	82 60       	ori	r24, 0x02	; 2
    1734:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    1736:	a1 e4       	ldi	r26, 0x41	; 65
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e1 e4       	ldi	r30, 0x41	; 65
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8b 7f       	andi	r24, 0xFB	; 251
    1742:	8c 93       	st	X, r24
    1744:	6d c0       	rjmp	.+218    	; 0x1820 <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.13s
    case WDT_TIME_0_13_S:
        SET_BIT(WDTCR, WDP0);
    1746:	a1 e4       	ldi	r26, 0x41	; 65
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e1 e4       	ldi	r30, 0x41	; 65
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	81 60       	ori	r24, 0x01	; 1
    1752:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1754:	a1 e4       	ldi	r26, 0x41	; 65
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e1 e4       	ldi	r30, 0x41	; 65
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	82 60       	ori	r24, 0x02	; 2
    1760:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    1762:	a1 e4       	ldi	r26, 0x41	; 65
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e1 e4       	ldi	r30, 0x41	; 65
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8b 7f       	andi	r24, 0xFB	; 251
    176e:	8c 93       	st	X, r24
    1770:	57 c0       	rjmp	.+174    	; 0x1820 <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.26s
    case WDT_TIME_0_26_S:
        CLR_BIT(WDTCR, WDP0);
    1772:	a1 e4       	ldi	r26, 0x41	; 65
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e1 e4       	ldi	r30, 0x41	; 65
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8e 7f       	andi	r24, 0xFE	; 254
    177e:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    1780:	a1 e4       	ldi	r26, 0x41	; 65
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e1 e4       	ldi	r30, 0x41	; 65
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8d 7f       	andi	r24, 0xFD	; 253
    178c:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    178e:	a1 e4       	ldi	r26, 0x41	; 65
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e1 e4       	ldi	r30, 0x41	; 65
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	84 60       	ori	r24, 0x04	; 4
    179a:	8c 93       	st	X, r24
    179c:	41 c0       	rjmp	.+130    	; 0x1820 <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.52s
    case WDT_TIME_0_52_S:
        SET_BIT(WDTCR, WDP0);
    179e:	a1 e4       	ldi	r26, 0x41	; 65
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e1 e4       	ldi	r30, 0x41	; 65
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	81 60       	ori	r24, 0x01	; 1
    17aa:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    17ac:	a1 e4       	ldi	r26, 0x41	; 65
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e1 e4       	ldi	r30, 0x41	; 65
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8d 7f       	andi	r24, 0xFD	; 253
    17b8:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    17ba:	a1 e4       	ldi	r26, 0x41	; 65
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e1 e4       	ldi	r30, 0x41	; 65
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	84 60       	ori	r24, 0x04	; 4
    17c6:	8c 93       	st	X, r24
    17c8:	2b c0       	rjmp	.+86     	; 0x1820 <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 1s
    case WDT_TIME_1_S:
        CLR_BIT(WDTCR, WDP0);
    17ca:	a1 e4       	ldi	r26, 0x41	; 65
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e1 e4       	ldi	r30, 0x41	; 65
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    17d8:	a1 e4       	ldi	r26, 0x41	; 65
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e1 e4       	ldi	r30, 0x41	; 65
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	82 60       	ori	r24, 0x02	; 2
    17e4:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    17e6:	a1 e4       	ldi	r26, 0x41	; 65
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e1 e4       	ldi	r30, 0x41	; 65
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	84 60       	ori	r24, 0x04	; 4
    17f2:	8c 93       	st	X, r24
    17f4:	15 c0       	rjmp	.+42     	; 0x1820 <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 2.1s
    case WDT_TIME_2_1_S:
        SET_BIT(WDTCR, WDP0);
    17f6:	a1 e4       	ldi	r26, 0x41	; 65
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e4       	ldi	r30, 0x41	; 65
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1804:	a1 e4       	ldi	r26, 0x41	; 65
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e1 e4       	ldi	r30, 0x41	; 65
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	82 60       	ori	r24, 0x02	; 2
    1810:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    1812:	a1 e4       	ldi	r26, 0x41	; 65
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e1 e4       	ldi	r30, 0x41	; 65
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	84 60       	ori	r24, 0x04	; 4
    181e:	8c 93       	st	X, r24

    default:
        break;
    }
    //enable watch dog
    SET_BIT(WDTCR , WDE);
    1820:	a1 e4       	ldi	r26, 0x41	; 65
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e1 e4       	ldi	r30, 0x41	; 65
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	88 60       	ori	r24, 0x08	; 8
    182c:	8c 93       	st	X, r24
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <WDT_voidDisable>:
/*
 * Function: WDT_voidDisable
 * Description: Disables the Watchdog Timer (WDT).
 */
void WDT_voidDisable(void)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE) | (1<<WDE);
    1842:	e1 e4       	ldi	r30, 0x41	; 65
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	88 e1       	ldi	r24, 0x18	; 24
    1848:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
    184a:	e1 e4       	ldi	r30, 0x41	; 65
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	10 82       	st	Z, r1
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <TMR2_voidSetDelay_ms_usingCTC+0x6>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
    1864:	e3 e4       	ldi	r30, 0x43	; 67
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	89 ef       	ldi	r24, 0xF9	; 249
    186a:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	cc 01       	movw	r24, r24
    1872:	a0 e0       	ldi	r26, 0x00	; 0
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	80 93 f1 01 	sts	0x01F1, r24
    187a:	90 93 f2 01 	sts	0x01F2, r25
    187e:	a0 93 f3 01 	sts	0x01F3, r26
    1882:	b0 93 f4 01 	sts	0x01F4, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
	// Enable Output Compare Match Interrupt (OCI)
	SET_BIT(TIMSK, OCIE2);

#elif TMR2_MODE == TMR2_NORMAL_MODE
	// Select normal mode
	CLR_BIT(TCCR2, WGM20);
    18ac:	a5 e4       	ldi	r26, 0x45	; 69
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e4       	ldi	r30, 0x45	; 69
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 7b       	andi	r24, 0xBF	; 191
    18b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM21);
    18ba:	a5 e4       	ldi	r26, 0x45	; 69
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e5 e4       	ldi	r30, 0x45	; 69
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	87 7f       	andi	r24, 0xF7	; 247
    18c6:	8c 93       	st	X, r24
	// Initialize timer with a preload value
	TCNT2 = TMR2_PRELOAD_VALUE;
    18c8:	e4 e4       	ldi	r30, 0x44	; 68
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	10 82       	st	Z, r1
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);
    18ce:	a9 e5       	ldi	r26, 0x59	; 89
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e9 e5       	ldi	r30, 0x59	; 89
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 64       	ori	r24, 0x40	; 64
    18da:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    18ea:	a5 e4       	ldi	r26, 0x45	; 69
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e4       	ldi	r30, 0x45	; 69
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	81 60       	ori	r24, 0x01	; 1
    18f6:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    18f8:	a5 e4       	ldi	r26, 0x45	; 69
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e5 e4       	ldi	r30, 0x45	; 69
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	82 60       	ori	r24, 0x02	; 2
    1904:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    1906:	a5 e4       	ldi	r26, 0x45	; 69
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e5 e4       	ldi	r30, 0x45	; 69
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8b 7f       	andi	r24, 0xFB	; 251
    1912:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    1922:	a5 e4       	ldi	r26, 0x45	; 69
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e4       	ldi	r30, 0x45	; 69
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8e 7f       	andi	r24, 0xFE	; 254
    192e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    1930:	a5 e4       	ldi	r26, 0x45	; 69
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e5 e4       	ldi	r30, 0x45	; 69
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8d 7f       	andi	r24, 0xFD	; 253
    193c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    193e:	a5 e4       	ldi	r26, 0x45	; 69
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 e4       	ldi	r30, 0x45	; 69
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8b 7f       	andi	r24, 0xFB	; 251
    194a:	8c 93       	st	X, r24
}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	00 d0       	rcall	.+0      	; 0x1958 <TMR2_voidSetCallBackOVF+0x6>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	31 f0       	breq	.+12     	; 0x1974 <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	90 93 e8 01 	sts	0x01E8, r25
    1970:	80 93 e7 01 	sts	0x01E7, r24
}
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <TMR2_voidSetCallBackCTC+0x6>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	31 f0       	breq	.+12     	; 0x19a0 <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	90 93 ea 01 	sts	0x01EA, r25
    199c:	80 93 e9 01 	sts	0x01E9, r24
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    19aa:	1f 92       	push	r1
    19ac:	0f 92       	push	r0
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	0f 92       	push	r0
    19b2:	11 24       	eor	r1, r1
    19b4:	2f 93       	push	r18
    19b6:	3f 93       	push	r19
    19b8:	4f 93       	push	r20
    19ba:	5f 93       	push	r21
    19bc:	6f 93       	push	r22
    19be:	7f 93       	push	r23
    19c0:	8f 93       	push	r24
    19c2:	9f 93       	push	r25
    19c4:	af 93       	push	r26
    19c6:	bf 93       	push	r27
    19c8:	ef 93       	push	r30
    19ca:	ff 93       	push	r31
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    19d4:	80 91 eb 01 	lds	r24, 0x01EB
    19d8:	90 91 ec 01 	lds	r25, 0x01EC
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	90 93 ec 01 	sts	0x01EC, r25
    19e2:	80 93 eb 01 	sts	0x01EB, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    19e6:	80 91 eb 01 	lds	r24, 0x01EB
    19ea:	90 91 ec 01 	lds	r25, 0x01EC
    19ee:	86 30       	cpi	r24, 0x06	; 6
    19f0:	91 05       	cpc	r25, r1
    19f2:	91 f4       	brne	.+36     	; 0x1a18 <__vector_5+0x6e>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    19f4:	e4 e4       	ldi	r30, 0x44	; 68
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	10 82       	st	Z, r1
		// Clear the counter
		local_u16ovCounter = 0;
    19fa:	10 92 ec 01 	sts	0x01EC, r1
    19fe:	10 92 eb 01 	sts	0x01EB, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    1a02:	80 91 e7 01 	lds	r24, 0x01E7
    1a06:	90 91 e8 01 	lds	r25, 0x01E8
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <__vector_5+0x6e>
			TMR2_privatePtrToCAllBackOVF();
    1a0e:	e0 91 e7 01 	lds	r30, 0x01E7
    1a12:	f0 91 e8 01 	lds	r31, 0x01E8
    1a16:	09 95       	icall
		}
	}
}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1a3e:	1f 92       	push	r1
    1a40:	0f 92       	push	r0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	0f 92       	push	r0
    1a46:	11 24       	eor	r1, r1
    1a48:	2f 93       	push	r18
    1a4a:	3f 93       	push	r19
    1a4c:	4f 93       	push	r20
    1a4e:	5f 93       	push	r21
    1a50:	6f 93       	push	r22
    1a52:	7f 93       	push	r23
    1a54:	8f 93       	push	r24
    1a56:	9f 93       	push	r25
    1a58:	af 93       	push	r26
    1a5a:	bf 93       	push	r27
    1a5c:	ef 93       	push	r30
    1a5e:	ff 93       	push	r31
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1a68:	80 91 ed 01 	lds	r24, 0x01ED
    1a6c:	90 91 ee 01 	lds	r25, 0x01EE
    1a70:	a0 91 ef 01 	lds	r26, 0x01EF
    1a74:	b0 91 f0 01 	lds	r27, 0x01F0
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	a1 1d       	adc	r26, r1
    1a7c:	b1 1d       	adc	r27, r1
    1a7e:	80 93 ed 01 	sts	0x01ED, r24
    1a82:	90 93 ee 01 	sts	0x01EE, r25
    1a86:	a0 93 ef 01 	sts	0x01EF, r26
    1a8a:	b0 93 f0 01 	sts	0x01F0, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1a8e:	20 91 f1 01 	lds	r18, 0x01F1
    1a92:	30 91 f2 01 	lds	r19, 0x01F2
    1a96:	40 91 f3 01 	lds	r20, 0x01F3
    1a9a:	50 91 f4 01 	lds	r21, 0x01F4
    1a9e:	80 91 ed 01 	lds	r24, 0x01ED
    1aa2:	90 91 ee 01 	lds	r25, 0x01EE
    1aa6:	a0 91 ef 01 	lds	r26, 0x01EF
    1aaa:	b0 91 f0 01 	lds	r27, 0x01F0
    1aae:	28 17       	cp	r18, r24
    1ab0:	39 07       	cpc	r19, r25
    1ab2:	4a 07       	cpc	r20, r26
    1ab4:	5b 07       	cpc	r21, r27
    1ab6:	99 f4       	brne	.+38     	; 0x1ade <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1ab8:	10 92 ed 01 	sts	0x01ED, r1
    1abc:	10 92 ee 01 	sts	0x01EE, r1
    1ac0:	10 92 ef 01 	sts	0x01EF, r1
    1ac4:	10 92 f0 01 	sts	0x01F0, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    1ac8:	80 91 e9 01 	lds	r24, 0x01E9
    1acc:	90 91 ea 01 	lds	r25, 0x01EA
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    1ad4:	e0 91 e9 01 	lds	r30, 0x01E9
    1ad8:	f0 91 ea 01 	lds	r31, 0x01EA
    1adc:	09 95       	icall
		}
	}
}
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	ff 91       	pop	r31
    1ae4:	ef 91       	pop	r30
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	0f 92       	push	r0
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    1b10:	e3 e4       	ldi	r30, 0x43	; 67
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	80 83       	st	Z, r24
}
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    1b32:	06 e4       	ldi	r16, 0x46	; 70
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	80 e9       	ldi	r24, 0x90	; 144
    1b42:	90 ed       	ldi	r25, 0xD0	; 208
    1b44:	a3 e0       	ldi	r26, 0x03	; 3
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodsi4>
    1b50:	da 01       	movw	r26, r20
    1b52:	c9 01       	movw	r24, r18
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f8 01       	movw	r30, r16
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	08 95       	ret

00001b6a <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	69 83       	std	Y+1, r22	; 0x01
    1b7c:	7a 83       	std	Y+2, r23	; 0x02
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
    1b80:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    1b82:	69 81       	ldd	r22, Y+1	; 0x01
    1b84:	7a 81       	ldd	r23, Y+2	; 0x02
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	48 ec       	ldi	r20, 0xC8	; 200
    1b90:	52 e4       	ldi	r21, 0x42	; 66
    1b92:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	0c f4       	brge	.+2      	; 0x1b9c <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    1b9a:	48 c0       	rjmp	.+144    	; 0x1c2c <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    1b9c:	69 81       	ldd	r22, Y+1	; 0x01
    1b9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	29 f4       	brne	.+10     	; 0x1bbe <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    1bb4:	ea e4       	ldi	r30, 0x4A	; 74
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	11 82       	std	Z+1, r1	; 0x01
    1bba:	10 82       	st	Z, r1
    1bbc:	37 c0       	rjmp	.+110    	; 0x1c2c <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    1bbe:	0a e4       	ldi	r16, 0x4A	; 74
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	e6 e4       	ldi	r30, 0x46	; 70
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	cc 01       	movw	r24, r24
    1bce:	a0 e0       	ldi	r26, 0x00	; 0
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	29 81       	ldd	r18, Y+1	; 0x01
    1be4:	3a 81       	ldd	r19, Y+2	; 0x02
    1be6:	4b 81       	ldd	r20, Y+3	; 0x03
    1be8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	48 ec       	ldi	r20, 0xC8	; 200
    1bfc:	52 e4       	ldi	r21, 0x42	; 66
    1bfe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	f8 01       	movw	r30, r16
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	08 95       	ret

00001c3e <TMR1_voidInit>:


void TMR1_voidInit(void) {
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    1c46:	af e4       	ldi	r26, 0x4F	; 79
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	ef e4       	ldi	r30, 0x4F	; 79
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8e 7f       	andi	r24, 0xFE	; 254
    1c52:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    1c54:	af e4       	ldi	r26, 0x4F	; 79
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ef e4       	ldi	r30, 0x4F	; 79
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	82 60       	ori	r24, 0x02	; 2
    1c60:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1c62:	ae e4       	ldi	r26, 0x4E	; 78
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	ee e4       	ldi	r30, 0x4E	; 78
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	88 60       	ori	r24, 0x08	; 8
    1c6e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1c70:	ae e4       	ldi	r26, 0x4E	; 78
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	ee e4       	ldi	r30, 0x4E	; 78
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 61       	ori	r24, 0x10	; 16
    1c7c:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    1c7e:	af e4       	ldi	r26, 0x4F	; 79
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	ef e4       	ldi	r30, 0x4F	; 79
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8f 7b       	andi	r24, 0xBF	; 191
    1c8a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1c8c:	af e4       	ldi	r26, 0x4F	; 79
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	ef e4       	ldi	r30, 0x4F	; 79
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	80 68       	ori	r24, 0x80	; 128
    1c98:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
#endif
	//TMR1_voidSetFrequencyMode14FastPWM(50);

#endif
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <TMR1_voidSetCompareMatchValueA+0x6>
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    1cae:	ea e4       	ldi	r30, 0x4A	; 74
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    1ccc:	ae e4       	ldi	r26, 0x4E	; 78
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ee e4       	ldi	r30, 0x4E	; 78
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	81 60       	ori	r24, 0x01	; 1
    1cd8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1cda:	ae e4       	ldi	r26, 0x4E	; 78
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	ee e4       	ldi	r30, 0x4E	; 78
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	82 60       	ori	r24, 0x02	; 2
    1ce6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    1ce8:	ae e4       	ldi	r26, 0x4E	; 78
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	ee e4       	ldi	r30, 0x4E	; 78
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8b 7f       	andi	r24, 0xFB	; 251
    1cf4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    1d04:	ae e4       	ldi	r26, 0x4E	; 78
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	ee e4       	ldi	r30, 0x4E	; 78
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	8e 7f       	andi	r24, 0xFE	; 254
    1d10:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    1d12:	ae e4       	ldi	r26, 0x4E	; 78
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	ee e4       	ldi	r30, 0x4E	; 78
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8d 7f       	andi	r24, 0xFD	; 253
    1d1e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    1d20:	ae e4       	ldi	r26, 0x4E	; 78
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	ee e4       	ldi	r30, 0x4E	; 78
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8b 7f       	andi	r24, 0xFB	; 251
    1d2c:	8c 93       	st	X, r24
}
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <TMR0_voidSetDelay_ms_usingCTC+0x6>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    1d42:	ec e5       	ldi	r30, 0x5C	; 92
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	89 ef       	ldi	r24, 0xF9	; 249
    1d48:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	cc 01       	movw	r24, r24
    1d50:	a0 e0       	ldi	r26, 0x00	; 0
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	80 93 ff 01 	sts	0x01FF, r24
    1d58:	90 93 00 02 	sts	0x0200, r25
    1d5c:	a0 93 01 02 	sts	0x0201, r26
    1d60:	b0 93 02 02 	sts	0x0202, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	0f 92       	push	r0
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	85 36       	cpi	r24, 0x65	; 101
    1d7e:	d0 f4       	brcc	.+52     	; 0x1db4 <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    1d80:	ec e5       	ldi	r30, 0x5C	; 92
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	48 2f       	mov	r20, r24
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	ca 01       	movw	r24, r20
    1d8c:	9c 01       	movw	r18, r24
    1d8e:	22 0f       	add	r18, r18
    1d90:	33 1f       	adc	r19, r19
    1d92:	c9 01       	movw	r24, r18
    1d94:	96 95       	lsr	r25
    1d96:	98 2f       	mov	r25, r24
    1d98:	88 27       	eor	r24, r24
    1d9a:	97 95       	ror	r25
    1d9c:	87 95       	ror	r24
    1d9e:	82 1b       	sub	r24, r18
    1da0:	93 0b       	sbc	r25, r19
    1da2:	84 0f       	add	r24, r20
    1da4:	95 1f       	adc	r25, r21
    1da6:	24 e6       	ldi	r18, 0x64	; 100
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	b9 01       	movw	r22, r18
    1dac:	0e 94 3e 24 	call	0x487c	; 0x487c <__udivmodhi4>
    1db0:	cb 01       	movw	r24, r22
    1db2:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    1dc4:	a3 e5       	ldi	r26, 0x53	; 83
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e3 e5       	ldi	r30, 0x53	; 83
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 64       	ori	r24, 0x40	; 64
    1dd0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    1dd2:	a3 e5       	ldi	r26, 0x53	; 83
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e3 e5       	ldi	r30, 0x53	; 83
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	87 7f       	andi	r24, 0xF7	; 247
    1dde:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    1de0:	a3 e5       	ldi	r26, 0x53	; 83
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e3 e5       	ldi	r30, 0x53	; 83
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8f 7e       	andi	r24, 0xEF	; 239
    1dec:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    1dee:	a3 e5       	ldi	r26, 0x53	; 83
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e3 e5       	ldi	r30, 0x53	; 83
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 62       	ori	r24, 0x20	; 32
    1dfa:	8c 93       	st	X, r24
#endif

#endif
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    1e0a:	a3 e5       	ldi	r26, 0x53	; 83
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e3 e5       	ldi	r30, 0x53	; 83
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	81 60       	ori	r24, 0x01	; 1
    1e16:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1e18:	a3 e5       	ldi	r26, 0x53	; 83
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e3 e5       	ldi	r30, 0x53	; 83
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1e26:	a3 e5       	ldi	r26, 0x53	; 83
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e3 e5       	ldi	r30, 0x53	; 83
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8b 7f       	andi	r24, 0xFB	; 251
    1e32:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    1e42:	a3 e5       	ldi	r26, 0x53	; 83
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e3 e5       	ldi	r30, 0x53	; 83
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8e 7f       	andi	r24, 0xFE	; 254
    1e4e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1e50:	a3 e5       	ldi	r26, 0x53	; 83
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e3 e5       	ldi	r30, 0x53	; 83
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	8d 7f       	andi	r24, 0xFD	; 253
    1e5c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1e5e:	a3 e5       	ldi	r26, 0x53	; 83
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e3 e5       	ldi	r30, 0x53	; 83
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	8b 7f       	andi	r24, 0xFB	; 251
    1e6a:	8c 93       	st	X, r24
}
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <TMR0_voidSetCallBackOVF+0x6>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	31 f0       	breq	.+12     	; 0x1e94 <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	90 93 f6 01 	sts	0x01F6, r25
    1e90:	80 93 f5 01 	sts	0x01F5, r24
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <TMR0_voidSetCallBackCTC+0x6>
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	90 93 f8 01 	sts	0x01F8, r25
    1ebc:	80 93 f7 01 	sts	0x01F7, r24
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1eca:	1f 92       	push	r1
    1ecc:	0f 92       	push	r0
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	0f 92       	push	r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	2f 93       	push	r18
    1ed6:	3f 93       	push	r19
    1ed8:	4f 93       	push	r20
    1eda:	5f 93       	push	r21
    1edc:	6f 93       	push	r22
    1ede:	7f 93       	push	r23
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	ef 93       	push	r30
    1eea:	ff 93       	push	r31
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    1ef4:	80 91 f9 01 	lds	r24, 0x01F9
    1ef8:	90 91 fa 01 	lds	r25, 0x01FA
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	90 93 fa 01 	sts	0x01FA, r25
    1f02:	80 93 f9 01 	sts	0x01F9, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    1f06:	80 91 f9 01 	lds	r24, 0x01F9
    1f0a:	90 91 fa 01 	lds	r25, 0x01FA
    1f0e:	23 e0       	ldi	r18, 0x03	; 3
    1f10:	81 3d       	cpi	r24, 0xD1	; 209
    1f12:	92 07       	cpc	r25, r18
    1f14:	99 f4       	brne	.+38     	; 0x1f3c <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    1f16:	e2 e5       	ldi	r30, 0x52	; 82
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	81 e7       	ldi	r24, 0x71	; 113
    1f1c:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    1f1e:	10 92 fa 01 	sts	0x01FA, r1
    1f22:	10 92 f9 01 	sts	0x01F9, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    1f26:	80 91 f5 01 	lds	r24, 0x01F5
    1f2a:	90 91 f6 01 	lds	r25, 0x01F6
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	29 f0       	breq	.+10     	; 0x1f3c <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    1f32:	e0 91 f5 01 	lds	r30, 0x01F5
    1f36:	f0 91 f6 01 	lds	r31, 0x01F6
    1f3a:	09 95       	icall
		}
	}
}
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	ff 91       	pop	r31
    1f42:	ef 91       	pop	r30
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	7f 91       	pop	r23
    1f4e:	6f 91       	pop	r22
    1f50:	5f 91       	pop	r21
    1f52:	4f 91       	pop	r20
    1f54:	3f 91       	pop	r19
    1f56:	2f 91       	pop	r18
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1f62:	1f 92       	push	r1
    1f64:	0f 92       	push	r0
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	0f 92       	push	r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	2f 93       	push	r18
    1f6e:	3f 93       	push	r19
    1f70:	4f 93       	push	r20
    1f72:	5f 93       	push	r21
    1f74:	6f 93       	push	r22
    1f76:	7f 93       	push	r23
    1f78:	8f 93       	push	r24
    1f7a:	9f 93       	push	r25
    1f7c:	af 93       	push	r26
    1f7e:	bf 93       	push	r27
    1f80:	ef 93       	push	r30
    1f82:	ff 93       	push	r31
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1f8c:	80 91 fb 01 	lds	r24, 0x01FB
    1f90:	90 91 fc 01 	lds	r25, 0x01FC
    1f94:	a0 91 fd 01 	lds	r26, 0x01FD
    1f98:	b0 91 fe 01 	lds	r27, 0x01FE
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	a1 1d       	adc	r26, r1
    1fa0:	b1 1d       	adc	r27, r1
    1fa2:	80 93 fb 01 	sts	0x01FB, r24
    1fa6:	90 93 fc 01 	sts	0x01FC, r25
    1faa:	a0 93 fd 01 	sts	0x01FD, r26
    1fae:	b0 93 fe 01 	sts	0x01FE, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1fb2:	20 91 ff 01 	lds	r18, 0x01FF
    1fb6:	30 91 00 02 	lds	r19, 0x0200
    1fba:	40 91 01 02 	lds	r20, 0x0201
    1fbe:	50 91 02 02 	lds	r21, 0x0202
    1fc2:	80 91 fb 01 	lds	r24, 0x01FB
    1fc6:	90 91 fc 01 	lds	r25, 0x01FC
    1fca:	a0 91 fd 01 	lds	r26, 0x01FD
    1fce:	b0 91 fe 01 	lds	r27, 0x01FE
    1fd2:	28 17       	cp	r18, r24
    1fd4:	39 07       	cpc	r19, r25
    1fd6:	4a 07       	cpc	r20, r26
    1fd8:	5b 07       	cpc	r21, r27
    1fda:	99 f4       	brne	.+38     	; 0x2002 <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1fdc:	10 92 fb 01 	sts	0x01FB, r1
    1fe0:	10 92 fc 01 	sts	0x01FC, r1
    1fe4:	10 92 fd 01 	sts	0x01FD, r1
    1fe8:	10 92 fe 01 	sts	0x01FE, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    1fec:	80 91 f7 01 	lds	r24, 0x01F7
    1ff0:	90 91 f8 01 	lds	r25, 0x01F8
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	29 f0       	breq	.+10     	; 0x2002 <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    1ff8:	e0 91 f7 01 	lds	r30, 0x01F7
    1ffc:	f0 91 f8 01 	lds	r31, 0x01F8
    2000:	09 95       	icall
		}
	}
}
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	ff 91       	pop	r31
    2008:	ef 91       	pop	r30
    200a:	bf 91       	pop	r27
    200c:	af 91       	pop	r26
    200e:	9f 91       	pop	r25
    2010:	8f 91       	pop	r24
    2012:	7f 91       	pop	r23
    2014:	6f 91       	pop	r22
    2016:	5f 91       	pop	r21
    2018:	4f 91       	pop	r20
    201a:	3f 91       	pop	r19
    201c:	2f 91       	pop	r18
    201e:	0f 90       	pop	r0
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	0f 90       	pop	r0
    2024:	1f 90       	pop	r1
    2026:	18 95       	reti

00002028 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	0f 92       	push	r0
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    2034:	ec e5       	ldi	r30, 0x5C	; 92
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	80 83       	st	Z, r24
}
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	00 d0       	rcall	.+0      	; 0x204a <Port_Init+0x6>
    204a:	00 d0       	rcall	.+0      	; 0x204c <Port_Init+0x8>
    204c:	00 d0       	rcall	.+0      	; 0x204e <Port_Init+0xa>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    2056:	1a 82       	std	Y+2, r1	; 0x02
    2058:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
    205a:	1a 82       	std	Y+2, r1	; 0x02
    205c:	19 82       	std	Y+1, r1	; 0x01
    205e:	ea c1       	rjmp	.+980    	; 0x2434 <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    2060:	29 81       	ldd	r18, Y+1	; 0x01
    2062:	3a 81       	ldd	r19, Y+2	; 0x02
    2064:	c9 01       	movw	r24, r18
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	28 0f       	add	r18, r24
    206c:	39 1f       	adc	r19, r25
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	fc 01       	movw	r30, r24
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	80 81       	ld	r24, Z
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	3e 83       	std	Y+6, r19	; 0x06
    2080:	2d 83       	std	Y+5, r18	; 0x05
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	91 05       	cpc	r25, r1
    208a:	09 f4       	brne	.+2      	; 0x208e <Port_Init+0x4a>
    208c:	85 c0       	rjmp	.+266    	; 0x2198 <Port_Init+0x154>
    208e:	2d 81       	ldd	r18, Y+5	; 0x05
    2090:	3e 81       	ldd	r19, Y+6	; 0x06
    2092:	22 30       	cpi	r18, 0x02	; 2
    2094:	31 05       	cpc	r19, r1
    2096:	2c f4       	brge	.+10     	; 0x20a2 <Port_Init+0x5e>
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	71 f0       	breq	.+28     	; 0x20bc <Port_Init+0x78>
    20a0:	c4 c1       	rjmp	.+904    	; 0x242a <Port_Init+0x3e6>
    20a2:	2d 81       	ldd	r18, Y+5	; 0x05
    20a4:	3e 81       	ldd	r19, Y+6	; 0x06
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <Port_Init+0x6a>
    20ac:	e3 c0       	rjmp	.+454    	; 0x2274 <Port_Init+0x230>
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	83 30       	cpi	r24, 0x03	; 3
    20b4:	91 05       	cpc	r25, r1
    20b6:	09 f4       	brne	.+2      	; 0x20ba <Port_Init+0x76>
    20b8:	4b c1       	rjmp	.+662    	; 0x2350 <Port_Init+0x30c>
    20ba:	b7 c1       	rjmp	.+878    	; 0x242a <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    20bc:	29 81       	ldd	r18, Y+1	; 0x01
    20be:	3a 81       	ldd	r19, Y+2	; 0x02
    20c0:	c9 01       	movw	r24, r18
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	28 0f       	add	r18, r24
    20c8:	39 1f       	adc	r19, r25
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	fc 01       	movw	r30, r24
    20d0:	e2 0f       	add	r30, r18
    20d2:	f3 1f       	adc	r31, r19
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	01 f5       	brne	.+64     	; 0x211a <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    20da:	aa e3       	ldi	r26, 0x3A	; 58
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	ea e3       	ldi	r30, 0x3A	; 58
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	48 2f       	mov	r20, r24
    20e6:	29 81       	ldd	r18, Y+1	; 0x01
    20e8:	3a 81       	ldd	r19, Y+2	; 0x02
    20ea:	c9 01       	movw	r24, r18
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	28 0f       	add	r18, r24
    20f2:	39 1f       	adc	r19, r25
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	fc 01       	movw	r30, r24
    20fa:	e2 0f       	add	r30, r18
    20fc:	f3 1f       	adc	r31, r19
    20fe:	81 81       	ldd	r24, Z+1	; 0x01
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	02 2e       	mov	r0, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <Port_Init+0xcc>
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	0a 94       	dec	r0
    2112:	e2 f7       	brpl	.-8      	; 0x210c <Port_Init+0xc8>
    2114:	84 2b       	or	r24, r20
    2116:	8c 93       	st	X, r24
    2118:	88 c1       	rjmp	.+784    	; 0x242a <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    211a:	aa e3       	ldi	r26, 0x3A	; 58
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	ea e3       	ldi	r30, 0x3A	; 58
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	48 2f       	mov	r20, r24
    2126:	29 81       	ldd	r18, Y+1	; 0x01
    2128:	3a 81       	ldd	r19, Y+2	; 0x02
    212a:	c9 01       	movw	r24, r18
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	28 0f       	add	r18, r24
    2132:	39 1f       	adc	r19, r25
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	fc 01       	movw	r30, r24
    213a:	e2 0f       	add	r30, r18
    213c:	f3 1f       	adc	r31, r19
    213e:	81 81       	ldd	r24, Z+1	; 0x01
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	02 c0       	rjmp	.+4      	; 0x214e <Port_Init+0x10a>
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	2a 95       	dec	r18
    2150:	e2 f7       	brpl	.-8      	; 0x214a <Port_Init+0x106>
    2152:	80 95       	com	r24
    2154:	84 23       	and	r24, r20
    2156:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
    2158:	ab e3       	ldi	r26, 0x3B	; 59
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	eb e3       	ldi	r30, 0x3B	; 59
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	48 2f       	mov	r20, r24
    2164:	29 81       	ldd	r18, Y+1	; 0x01
    2166:	3a 81       	ldd	r19, Y+2	; 0x02
    2168:	c9 01       	movw	r24, r18
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	28 0f       	add	r18, r24
    2170:	39 1f       	adc	r19, r25
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	fc 01       	movw	r30, r24
    2178:	e2 0f       	add	r30, r18
    217a:	f3 1f       	adc	r31, r19
    217c:	81 81       	ldd	r24, Z+1	; 0x01
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 2e       	mov	r0, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <Port_Init+0x14a>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <Port_Init+0x146>
    2192:	84 2b       	or	r24, r20
    2194:	8c 93       	st	X, r24
    2196:	49 c1       	rjmp	.+658    	; 0x242a <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    2198:	29 81       	ldd	r18, Y+1	; 0x01
    219a:	3a 81       	ldd	r19, Y+2	; 0x02
    219c:	c9 01       	movw	r24, r18
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	28 0f       	add	r18, r24
    21a4:	39 1f       	adc	r19, r25
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	fc 01       	movw	r30, r24
    21ac:	e2 0f       	add	r30, r18
    21ae:	f3 1f       	adc	r31, r19
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	01 f5       	brne	.+64     	; 0x21f6 <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
    21b6:	a7 e3       	ldi	r26, 0x37	; 55
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e7 e3       	ldi	r30, 0x37	; 55
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	48 2f       	mov	r20, r24
    21c2:	29 81       	ldd	r18, Y+1	; 0x01
    21c4:	3a 81       	ldd	r19, Y+2	; 0x02
    21c6:	c9 01       	movw	r24, r18
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	28 0f       	add	r18, r24
    21ce:	39 1f       	adc	r19, r25
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	fc 01       	movw	r30, r24
    21d6:	e2 0f       	add	r30, r18
    21d8:	f3 1f       	adc	r31, r19
    21da:	81 81       	ldd	r24, Z+1	; 0x01
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 2e       	mov	r0, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <Port_Init+0x1a8>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	0a 94       	dec	r0
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <Port_Init+0x1a4>
    21f0:	84 2b       	or	r24, r20
    21f2:	8c 93       	st	X, r24
    21f4:	1a c1       	rjmp	.+564    	; 0x242a <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    21f6:	a7 e3       	ldi	r26, 0x37	; 55
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e7 e3       	ldi	r30, 0x37	; 55
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	48 2f       	mov	r20, r24
    2202:	29 81       	ldd	r18, Y+1	; 0x01
    2204:	3a 81       	ldd	r19, Y+2	; 0x02
    2206:	c9 01       	movw	r24, r18
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	28 0f       	add	r18, r24
    220e:	39 1f       	adc	r19, r25
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	fc 01       	movw	r30, r24
    2216:	e2 0f       	add	r30, r18
    2218:	f3 1f       	adc	r31, r19
    221a:	81 81       	ldd	r24, Z+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 c0       	rjmp	.+4      	; 0x222a <Port_Init+0x1e6>
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	2a 95       	dec	r18
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <Port_Init+0x1e2>
    222e:	80 95       	com	r24
    2230:	84 23       	and	r24, r20
    2232:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    2234:	a8 e3       	ldi	r26, 0x38	; 56
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e8 e3       	ldi	r30, 0x38	; 56
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	48 2f       	mov	r20, r24
    2240:	29 81       	ldd	r18, Y+1	; 0x01
    2242:	3a 81       	ldd	r19, Y+2	; 0x02
    2244:	c9 01       	movw	r24, r18
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	28 0f       	add	r18, r24
    224c:	39 1f       	adc	r19, r25
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	fc 01       	movw	r30, r24
    2254:	e2 0f       	add	r30, r18
    2256:	f3 1f       	adc	r31, r19
    2258:	81 81       	ldd	r24, Z+1	; 0x01
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 2e       	mov	r0, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <Port_Init+0x226>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <Port_Init+0x222>
    226e:	84 2b       	or	r24, r20
    2270:	8c 93       	st	X, r24
    2272:	db c0       	rjmp	.+438    	; 0x242a <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    2274:	29 81       	ldd	r18, Y+1	; 0x01
    2276:	3a 81       	ldd	r19, Y+2	; 0x02
    2278:	c9 01       	movw	r24, r18
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	28 0f       	add	r18, r24
    2280:	39 1f       	adc	r19, r25
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	fc 01       	movw	r30, r24
    2288:	e2 0f       	add	r30, r18
    228a:	f3 1f       	adc	r31, r19
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	01 f5       	brne	.+64     	; 0x22d2 <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    2292:	a4 e3       	ldi	r26, 0x34	; 52
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e4 e3       	ldi	r30, 0x34	; 52
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	29 81       	ldd	r18, Y+1	; 0x01
    22a0:	3a 81       	ldd	r19, Y+2	; 0x02
    22a2:	c9 01       	movw	r24, r18
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	28 0f       	add	r18, r24
    22aa:	39 1f       	adc	r19, r25
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	81 81       	ldd	r24, Z+1	; 0x01
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 2e       	mov	r0, r18
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <Port_Init+0x284>
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	0a 94       	dec	r0
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <Port_Init+0x280>
    22cc:	84 2b       	or	r24, r20
    22ce:	8c 93       	st	X, r24
    22d0:	ac c0       	rjmp	.+344    	; 0x242a <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    22d2:	a4 e3       	ldi	r26, 0x34	; 52
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e4 e3       	ldi	r30, 0x34	; 52
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	29 81       	ldd	r18, Y+1	; 0x01
    22e0:	3a 81       	ldd	r19, Y+2	; 0x02
    22e2:	c9 01       	movw	r24, r18
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	28 0f       	add	r18, r24
    22ea:	39 1f       	adc	r19, r25
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	fc 01       	movw	r30, r24
    22f2:	e2 0f       	add	r30, r18
    22f4:	f3 1f       	adc	r31, r19
    22f6:	81 81       	ldd	r24, Z+1	; 0x01
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <Port_Init+0x2c2>
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	2a 95       	dec	r18
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <Port_Init+0x2be>
    230a:	80 95       	com	r24
    230c:	84 23       	and	r24, r20
    230e:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    2310:	a5 e3       	ldi	r26, 0x35	; 53
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e5 e3       	ldi	r30, 0x35	; 53
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	48 2f       	mov	r20, r24
    231c:	29 81       	ldd	r18, Y+1	; 0x01
    231e:	3a 81       	ldd	r19, Y+2	; 0x02
    2320:	c9 01       	movw	r24, r18
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	28 0f       	add	r18, r24
    2328:	39 1f       	adc	r19, r25
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	fc 01       	movw	r30, r24
    2330:	e2 0f       	add	r30, r18
    2332:	f3 1f       	adc	r31, r19
    2334:	81 81       	ldd	r24, Z+1	; 0x01
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 2e       	mov	r0, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <Port_Init+0x302>
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	0a 94       	dec	r0
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <Port_Init+0x2fe>
    234a:	84 2b       	or	r24, r20
    234c:	8c 93       	st	X, r24
    234e:	6d c0       	rjmp	.+218    	; 0x242a <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    2350:	29 81       	ldd	r18, Y+1	; 0x01
    2352:	3a 81       	ldd	r19, Y+2	; 0x02
    2354:	c9 01       	movw	r24, r18
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	28 0f       	add	r18, r24
    235c:	39 1f       	adc	r19, r25
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	fc 01       	movw	r30, r24
    2364:	e2 0f       	add	r30, r18
    2366:	f3 1f       	adc	r31, r19
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	01 f5       	brne	.+64     	; 0x23ae <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    236e:	a1 e3       	ldi	r26, 0x31	; 49
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e1 e3       	ldi	r30, 0x31	; 49
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	29 81       	ldd	r18, Y+1	; 0x01
    237c:	3a 81       	ldd	r19, Y+2	; 0x02
    237e:	c9 01       	movw	r24, r18
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	28 0f       	add	r18, r24
    2386:	39 1f       	adc	r19, r25
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	fc 01       	movw	r30, r24
    238e:	e2 0f       	add	r30, r18
    2390:	f3 1f       	adc	r31, r19
    2392:	81 81       	ldd	r24, Z+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	02 2e       	mov	r0, r18
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <Port_Init+0x360>
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	0a 94       	dec	r0
    23a6:	e2 f7       	brpl	.-8      	; 0x23a0 <Port_Init+0x35c>
    23a8:	84 2b       	or	r24, r20
    23aa:	8c 93       	st	X, r24
    23ac:	3e c0       	rjmp	.+124    	; 0x242a <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    23ae:	a1 e3       	ldi	r26, 0x31	; 49
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e1 e3       	ldi	r30, 0x31	; 49
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	48 2f       	mov	r20, r24
    23ba:	29 81       	ldd	r18, Y+1	; 0x01
    23bc:	3a 81       	ldd	r19, Y+2	; 0x02
    23be:	c9 01       	movw	r24, r18
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	28 0f       	add	r18, r24
    23c6:	39 1f       	adc	r19, r25
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	fc 01       	movw	r30, r24
    23ce:	e2 0f       	add	r30, r18
    23d0:	f3 1f       	adc	r31, r19
    23d2:	81 81       	ldd	r24, Z+1	; 0x01
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <Port_Init+0x39e>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	2a 95       	dec	r18
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <Port_Init+0x39a>
    23e6:	80 95       	com	r24
    23e8:	84 23       	and	r24, r20
    23ea:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    23ec:	a2 e3       	ldi	r26, 0x32	; 50
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e2 e3       	ldi	r30, 0x32	; 50
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	48 2f       	mov	r20, r24
    23f8:	29 81       	ldd	r18, Y+1	; 0x01
    23fa:	3a 81       	ldd	r19, Y+2	; 0x02
    23fc:	c9 01       	movw	r24, r18
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	28 0f       	add	r18, r24
    2404:	39 1f       	adc	r19, r25
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	fc 01       	movw	r30, r24
    240c:	e2 0f       	add	r30, r18
    240e:	f3 1f       	adc	r31, r19
    2410:	81 81       	ldd	r24, Z+1	; 0x01
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 2e       	mov	r0, r18
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <Port_Init+0x3de>
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	0a 94       	dec	r0
    2424:	e2 f7       	brpl	.-8      	; 0x241e <Port_Init+0x3da>
    2426:	84 2b       	or	r24, r20
    2428:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	80 32       	cpi	r24, 0x20	; 32
    243a:	91 05       	cpc	r25, r1
    243c:	0c f4       	brge	.+2      	; 0x2440 <Port_Init+0x3fc>
    243e:	10 ce       	rjmp	.-992    	; 0x2060 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    2440:	26 96       	adiw	r28, 0x06	; 6
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <ICU_voidInit>:
#include "../../../utils/STD_TYPES.h"

volatile static u16 Private_u16OnPeriod;
volatile static u16 Private_u16OffPeriod;

void ICU_voidInit(void) {
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
//	Lcd_PutString("inside init");
	//select mode = Normal mode
	CLR_BIT(TCCR1A, WGM10);
    245a:	af e4       	ldi	r26, 0x4F	; 79
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	ef e4       	ldi	r30, 0x4F	; 79
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	8e 7f       	andi	r24, 0xFE	; 254
    2466:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    2468:	af e4       	ldi	r26, 0x4F	; 79
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	ef e4       	ldi	r30, 0x4F	; 79
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	8d 7f       	andi	r24, 0xFD	; 253
    2474:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12);
    2476:	ae e4       	ldi	r26, 0x4E	; 78
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	ee e4       	ldi	r30, 0x4E	; 78
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	87 7f       	andi	r24, 0xF7	; 247
    2482:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    2484:	ae e4       	ldi	r26, 0x4E	; 78
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	ee e4       	ldi	r30, 0x4E	; 78
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	8f 7e       	andi	r24, 0xEF	; 239
    2490:	8c 93       	st	X, r24
#if ICU_STARTING_EDGE == ICU_RISING_EDGE
	//select ICU Edge RISING edge
		SET_BIT(TCCR1B, ICES1);
#else if ICU_STARTING_EDGE == ICU_FALLING_EDGE
	//select ICU Edge falling edge
		CLR_BIT(TCCR1B, ICES1);
    2492:	ae e4       	ldi	r26, 0x4E	; 78
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ee e4       	ldi	r30, 0x4E	; 78
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	8f 7b       	andi	r24, 0xBF	; 191
    249e:	8c 93       	st	X, r24

	#endif

	//enable interrupt
	SET_BIT(TIMSK, TICIE1);
    24a0:	a9 e5       	ldi	r26, 0x59	; 89
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e9 e5       	ldi	r30, 0x59	; 89
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	80 62       	ori	r24, 0x20	; 32
    24ac:	8c 93       	st	X, r24

	//Select Prescaler Value = 64  void ICU_voidStart(void);

	SET_BIT(TCCR1B, CS10);
    24ae:	ae e4       	ldi	r26, 0x4E	; 78
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ee e4       	ldi	r30, 0x4E	; 78
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	81 60       	ori	r24, 0x01	; 1
    24ba:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    24bc:	ae e4       	ldi	r26, 0x4E	; 78
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	ee e4       	ldi	r30, 0x4E	; 78
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	82 60       	ori	r24, 0x02	; 2
    24c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    24ca:	ae e4       	ldi	r26, 0x4E	; 78
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	ee e4       	ldi	r30, 0x4E	; 78
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	8b 7f       	andi	r24, 0xFB	; 251
    24d6:	8c 93       	st	X, r24
}
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <ICU_voidGetDutyCycle>:

void ICU_voidGetDutyCycle(u8* copy_pu8Duty) {
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <ICU_voidGetDutyCycle+0xe>
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
	//Lcd_PutString("inside duty ");

	if (copy_pu8Duty != NULL) {
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	d9 f1       	breq	.+118    	; 0x2572 <ICU_voidGetDutyCycle+0x94>
		//Lcd_PutString("inside duty if ");
		Lcd_PutString("ONPeriod ");
    24fc:	80 e6       	ldi	r24, 0x60	; 96
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 72 23 	call	0x46e4	; 0x46e4 <Lcd_PutString>

		Lcd_PutInt(Private_u16OnPeriod);
    2504:	80 91 07 02 	lds	r24, 0x0207
    2508:	90 91 08 02 	lds	r25, 0x0208
    250c:	0e 94 b1 20 	call	0x4162	; 0x4162 <Lcd_PutInt>
		Lcd_PutString("OffPeriod ");
    2510:	8a e6       	ldi	r24, 0x6A	; 106
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 72 23 	call	0x46e4	; 0x46e4 <Lcd_PutString>

		Lcd_PutInt(Private_u16OffPeriod);
    2518:	80 91 09 02 	lds	r24, 0x0209
    251c:	90 91 0a 02 	lds	r25, 0x020A
    2520:	0e 94 b1 20 	call	0x4162	; 0x4162 <Lcd_PutInt>

		*copy_pu8Duty = ((u32) Private_u16OnPeriod * 100) / (Private_u16OnPeriod + Private_u16OffPeriod);
    2524:	80 91 07 02 	lds	r24, 0x0207
    2528:	90 91 08 02 	lds	r25, 0x0208
    252c:	cc 01       	movw	r24, r24
    252e:	a0 e0       	ldi	r26, 0x00	; 0
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	24 e6       	ldi	r18, 0x64	; 100
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 1f 24 	call	0x483e	; 0x483e <__mulsi3>
    2542:	7b 01       	movw	r14, r22
    2544:	8c 01       	movw	r16, r24
    2546:	20 91 07 02 	lds	r18, 0x0207
    254a:	30 91 08 02 	lds	r19, 0x0208
    254e:	80 91 09 02 	lds	r24, 0x0209
    2552:	90 91 0a 02 	lds	r25, 0x020A
    2556:	82 0f       	add	r24, r18
    2558:	93 1f       	adc	r25, r19
    255a:	9c 01       	movw	r18, r24
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	c8 01       	movw	r24, r16
    2562:	b7 01       	movw	r22, r14
    2564:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodsi4>
    2568:	da 01       	movw	r26, r20
    256a:	c9 01       	movw	r24, r18
    256c:	e9 81       	ldd	r30, Y+1	; 0x01
    256e:	fa 81       	ldd	r31, Y+2	; 0x02
    2570:	80 83       	st	Z, r24
	}
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	08 95       	ret

00002584 <ICU_voidGetFrequency>:


void ICU_voidGetFrequency(u32* copy_pu32Frequency_hz) {
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	00 d0       	rcall	.+0      	; 0x258a <ICU_voidGetFrequency+0x6>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
//	Lcd_PutString("inside freq ");
	if (copy_pu32Frequency_hz != NULL) {
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	e9 f0       	breq	.+58     	; 0x25d4 <ICU_voidGetFrequency+0x50>
	//	Lcd_PutString("inside freq if ");
		*copy_pu32Frequency_hz = 1000000UL
    259a:	20 91 07 02 	lds	r18, 0x0207
    259e:	30 91 08 02 	lds	r19, 0x0208
    25a2:	80 91 09 02 	lds	r24, 0x0209
    25a6:	90 91 0a 02 	lds	r25, 0x020A
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	9c 01       	movw	r18, r24
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	80 e4       	ldi	r24, 0x40	; 64
    25b6:	92 e4       	ldi	r25, 0x42	; 66
    25b8:	af e0       	ldi	r26, 0x0F	; 15
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodsi4>
    25c4:	da 01       	movw	r26, r20
    25c6:	c9 01       	movw	r24, r18
    25c8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ca:	fa 81       	ldd	r31, Y+2	; 0x02
    25cc:	80 83       	st	Z, r24
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	a2 83       	std	Z+2, r26	; 0x02
    25d2:	b3 83       	std	Z+3, r27	; 0x03
				/ (Private_u16OnPeriod + Private_u16OffPeriod);
	}
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <__vector_6>:

// ISR for ICU
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    25de:	1f 92       	push	r1
    25e0:	0f 92       	push	r0
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	0f 92       	push	r0
    25e6:	11 24       	eor	r1, r1
    25e8:	2f 93       	push	r18
    25ea:	3f 93       	push	r19
    25ec:	4f 93       	push	r20
    25ee:	5f 93       	push	r21
    25f0:	8f 93       	push	r24
    25f2:	9f 93       	push	r25
    25f4:	af 93       	push	r26
    25f6:	bf 93       	push	r27
    25f8:	ef 93       	push	r30
    25fa:	ff 93       	push	r31
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8EdgeFlag = ICU_STARTING_EDGE;
	static u16 Local_u16OldValue =0;
	static u16 Local_u16CounterValue =0;

	Local_u16CounterValue = ICR1;
    2604:	e6 e4       	ldi	r30, 0x46	; 70
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	90 93 04 02 	sts	0x0204, r25
    2610:	80 93 03 02 	sts	0x0203, r24

	if(Local_u8EdgeFlag ==ICU_RISING_EDGE)
    2614:	80 91 e0 01 	lds	r24, 0x01E0
    2618:	82 30       	cpi	r24, 0x02	; 2
    261a:	f9 f4       	brne	.+62     	; 0x265a <__vector_6+0x7c>
	{
		Private_u16OffPeriod = (Local_u16CounterValue- Local_u16OldValue)*4;
    261c:	20 91 03 02 	lds	r18, 0x0203
    2620:	30 91 04 02 	lds	r19, 0x0204
    2624:	80 91 05 02 	lds	r24, 0x0205
    2628:	90 91 06 02 	lds	r25, 0x0206
    262c:	a9 01       	movw	r20, r18
    262e:	48 1b       	sub	r20, r24
    2630:	59 0b       	sbc	r21, r25
    2632:	ca 01       	movw	r24, r20
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	90 93 0a 02 	sts	0x020A, r25
    2640:	80 93 09 02 	sts	0x0209, r24

		Local_u8EdgeFlag =ICU_FALLING_EDGE;
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	80 93 e0 01 	sts	0x01E0, r24

		//selest icu edge
		CLR_BIT(TCCR1B,ICES1);
    264a:	ae e4       	ldi	r26, 0x4E	; 78
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	ee e4       	ldi	r30, 0x4E	; 78
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	8f 7b       	andi	r24, 0xBF	; 191
    2656:	8c 93       	st	X, r24
    2658:	22 c0       	rjmp	.+68     	; 0x269e <__vector_6+0xc0>

	}
	else if (Local_u8EdgeFlag ==ICU_FALLING_EDGE)
    265a:	80 91 e0 01 	lds	r24, 0x01E0
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	f1 f4       	brne	.+60     	; 0x269e <__vector_6+0xc0>
	{
		Private_u16OnPeriod = (Local_u16CounterValue- Local_u16OldValue)*4;
    2662:	20 91 03 02 	lds	r18, 0x0203
    2666:	30 91 04 02 	lds	r19, 0x0204
    266a:	80 91 05 02 	lds	r24, 0x0205
    266e:	90 91 06 02 	lds	r25, 0x0206
    2672:	a9 01       	movw	r20, r18
    2674:	48 1b       	sub	r20, r24
    2676:	59 0b       	sbc	r21, r25
    2678:	ca 01       	movw	r24, r20
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	90 93 08 02 	sts	0x0208, r25
    2686:	80 93 07 02 	sts	0x0207, r24

		Local_u8EdgeFlag =ICU_RISING_EDGE;
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	80 93 e0 01 	sts	0x01E0, r24

		//selest icu edge
		SET_BIT(TCCR1B,ICES1);
    2690:	ae e4       	ldi	r26, 0x4E	; 78
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ee e4       	ldi	r30, 0x4E	; 78
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	80 64       	ori	r24, 0x40	; 64
    269c:	8c 93       	st	X, r24
	}
	Local_u16OldValue = ICR1;
    269e:	e6 e4       	ldi	r30, 0x46	; 70
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	90 93 06 02 	sts	0x0206, r25
    26aa:	80 93 05 02 	sts	0x0205, r24
}
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	ff 91       	pop	r31
    26b4:	ef 91       	pop	r30
    26b6:	bf 91       	pop	r27
    26b8:	af 91       	pop	r26
    26ba:	9f 91       	pop	r25
    26bc:	8f 91       	pop	r24
    26be:	5f 91       	pop	r21
    26c0:	4f 91       	pop	r20
    26c2:	3f 91       	pop	r19
    26c4:	2f 91       	pop	r18
    26c6:	0f 90       	pop	r0
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	0f 90       	pop	r0
    26cc:	1f 90       	pop	r1
    26ce:	18 95       	reti

000026d0 <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    26d8:	af e5       	ldi	r26, 0x5F	; 95
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	ef e5       	ldi	r30, 0x5F	; 95
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	80 68       	ori	r24, 0x80	; 128
    26e4:	8c 93       	st	X, r24
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <GI_voidDisable>:

void GI_voidDisable(void)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    26f4:	af e5       	ldi	r26, 0x5F	; 95
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	ef e5       	ldi	r30, 0x5F	; 95
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	8f 77       	andi	r24, 0x7F	; 127
    2700:	8c 93       	st	X, r24
}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	28 97       	sbiw	r28, 0x08	; 8
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	38 87       	std	Y+8, r19	; 0x08
    2728:	2f 83       	std	Y+7, r18	; 0x07
    272a:	8f 81       	ldd	r24, Y+7	; 0x07
    272c:	98 85       	ldd	r25, Y+8	; 0x08
    272e:	81 30       	cpi	r24, 0x01	; 1
    2730:	91 05       	cpc	r25, r1
    2732:	09 f4       	brne	.+2      	; 0x2736 <EXTI_voidInit+0x2e>
    2734:	5a c0       	rjmp	.+180    	; 0x27ea <EXTI_voidInit+0xe2>
    2736:	2f 81       	ldd	r18, Y+7	; 0x07
    2738:	38 85       	ldd	r19, Y+8	; 0x08
    273a:	22 30       	cpi	r18, 0x02	; 2
    273c:	31 05       	cpc	r19, r1
    273e:	09 f4       	brne	.+2      	; 0x2742 <EXTI_voidInit+0x3a>
    2740:	a3 c0       	rjmp	.+326    	; 0x2888 <EXTI_voidInit+0x180>
    2742:	8f 81       	ldd	r24, Y+7	; 0x07
    2744:	98 85       	ldd	r25, Y+8	; 0x08
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	09 f0       	breq	.+2      	; 0x274c <EXTI_voidInit+0x44>
    274a:	b3 c0       	rjmp	.+358    	; 0x28b2 <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	3e 83       	std	Y+6, r19	; 0x06
    2754:	2d 83       	std	Y+5, r18	; 0x05
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	9e 81       	ldd	r25, Y+6	; 0x06
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	91 05       	cpc	r25, r1
    275e:	39 f1       	breq	.+78     	; 0x27ae <EXTI_voidInit+0xa6>
    2760:	2d 81       	ldd	r18, Y+5	; 0x05
    2762:	3e 81       	ldd	r19, Y+6	; 0x06
    2764:	22 30       	cpi	r18, 0x02	; 2
    2766:	31 05       	cpc	r19, r1
    2768:	99 f0       	breq	.+38     	; 0x2790 <EXTI_voidInit+0x88>
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	69 f1       	breq	.+90     	; 0x27cc <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    2772:	a5 e5       	ldi	r26, 0x55	; 85
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e5 e5       	ldi	r30, 0x55	; 85
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	81 60       	ori	r24, 0x01	; 1
    277e:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    2780:	a5 e5       	ldi	r26, 0x55	; 85
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e5 e5       	ldi	r30, 0x55	; 85
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	82 60       	ori	r24, 0x02	; 2
    278c:	8c 93       	st	X, r24
    278e:	91 c0       	rjmp	.+290    	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    2790:	a5 e5       	ldi	r26, 0x55	; 85
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e5 e5       	ldi	r30, 0x55	; 85
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	8e 7f       	andi	r24, 0xFE	; 254
    279c:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    279e:	a5 e5       	ldi	r26, 0x55	; 85
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e5 e5       	ldi	r30, 0x55	; 85
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	82 60       	ori	r24, 0x02	; 2
    27aa:	8c 93       	st	X, r24
    27ac:	82 c0       	rjmp	.+260    	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    27ae:	a5 e5       	ldi	r26, 0x55	; 85
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e5 e5       	ldi	r30, 0x55	; 85
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	81 60       	ori	r24, 0x01	; 1
    27ba:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    27bc:	a5 e5       	ldi	r26, 0x55	; 85
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e5 e5       	ldi	r30, 0x55	; 85
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8d 7f       	andi	r24, 0xFD	; 253
    27c8:	8c 93       	st	X, r24
    27ca:	73 c0       	rjmp	.+230    	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    27cc:	a5 e5       	ldi	r26, 0x55	; 85
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e5 e5       	ldi	r30, 0x55	; 85
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	8e 7f       	andi	r24, 0xFE	; 254
    27d8:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    27da:	a5 e5       	ldi	r26, 0x55	; 85
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e5 e5       	ldi	r30, 0x55	; 85
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8d 7f       	andi	r24, 0xFD	; 253
    27e6:	8c 93       	st	X, r24
    27e8:	64 c0       	rjmp	.+200    	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	3c 83       	std	Y+4, r19	; 0x04
    27f2:	2b 83       	std	Y+3, r18	; 0x03
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	91 05       	cpc	r25, r1
    27fc:	39 f1       	breq	.+78     	; 0x284c <EXTI_voidInit+0x144>
    27fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2800:	3c 81       	ldd	r19, Y+4	; 0x04
    2802:	22 30       	cpi	r18, 0x02	; 2
    2804:	31 05       	cpc	r19, r1
    2806:	99 f0       	breq	.+38     	; 0x282e <EXTI_voidInit+0x126>
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	69 f1       	breq	.+90     	; 0x286a <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    2810:	a5 e5       	ldi	r26, 0x55	; 85
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e5 e5       	ldi	r30, 0x55	; 85
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	84 60       	ori	r24, 0x04	; 4
    281c:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    281e:	a5 e5       	ldi	r26, 0x55	; 85
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	e5 e5       	ldi	r30, 0x55	; 85
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	88 60       	ori	r24, 0x08	; 8
    282a:	8c 93       	st	X, r24
    282c:	42 c0       	rjmp	.+132    	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    282e:	a5 e5       	ldi	r26, 0x55	; 85
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e5 e5       	ldi	r30, 0x55	; 85
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	8b 7f       	andi	r24, 0xFB	; 251
    283a:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    283c:	a5 e5       	ldi	r26, 0x55	; 85
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e5 e5       	ldi	r30, 0x55	; 85
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	88 60       	ori	r24, 0x08	; 8
    2848:	8c 93       	st	X, r24
    284a:	33 c0       	rjmp	.+102    	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    284c:	a5 e5       	ldi	r26, 0x55	; 85
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e5 e5       	ldi	r30, 0x55	; 85
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	84 60       	ori	r24, 0x04	; 4
    2858:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    285a:	a5 e5       	ldi	r26, 0x55	; 85
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e5 e5       	ldi	r30, 0x55	; 85
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	87 7f       	andi	r24, 0xF7	; 247
    2866:	8c 93       	st	X, r24
    2868:	24 c0       	rjmp	.+72     	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    286a:	a5 e5       	ldi	r26, 0x55	; 85
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e5 e5       	ldi	r30, 0x55	; 85
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	8b 7f       	andi	r24, 0xFB	; 251
    2876:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    2878:	a5 e5       	ldi	r26, 0x55	; 85
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e5 e5       	ldi	r30, 0x55	; 85
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	87 7f       	andi	r24, 0xF7	; 247
    2884:	8c 93       	st	X, r24
    2886:	15 c0       	rjmp	.+42     	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	88 2f       	mov	r24, r24
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	82 30       	cpi	r24, 0x02	; 2
    2890:	91 05       	cpc	r25, r1
    2892:	41 f0       	breq	.+16     	; 0x28a4 <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    2894:	a4 e5       	ldi	r26, 0x54	; 84
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e4 e5       	ldi	r30, 0x54	; 84
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	80 64       	ori	r24, 0x40	; 64
    28a0:	8c 93       	st	X, r24
    28a2:	07 c0       	rjmp	.+14     	; 0x28b2 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    28a4:	a4 e5       	ldi	r26, 0x54	; 84
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e4 e5       	ldi	r30, 0x54	; 84
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	8f 7b       	andi	r24, 0xBF	; 191
    28b0:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    28b2:	28 96       	adiw	r28, 0x08	; 8
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	00 d0       	rcall	.+0      	; 0x28ca <EXTI_voidEnable+0x6>
    28ca:	0f 92       	push	r0
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	3b 83       	std	Y+3, r19	; 0x03
    28da:	2a 83       	std	Y+2, r18	; 0x02
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	9b 81       	ldd	r25, Y+3	; 0x03
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	91 05       	cpc	r25, r1
    28e4:	89 f0       	breq	.+34     	; 0x2908 <EXTI_voidEnable+0x44>
    28e6:	2a 81       	ldd	r18, Y+2	; 0x02
    28e8:	3b 81       	ldd	r19, Y+3	; 0x03
    28ea:	22 30       	cpi	r18, 0x02	; 2
    28ec:	31 05       	cpc	r19, r1
    28ee:	a1 f0       	breq	.+40     	; 0x2918 <EXTI_voidEnable+0x54>
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	b9 f4       	brne	.+46     	; 0x2926 <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    28f8:	ab e5       	ldi	r26, 0x5B	; 91
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	eb e5       	ldi	r30, 0x5B	; 91
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	80 64       	ori	r24, 0x40	; 64
    2904:	8c 93       	st	X, r24
    2906:	0f c0       	rjmp	.+30     	; 0x2926 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    2908:	ab e5       	ldi	r26, 0x5B	; 91
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	eb e5       	ldi	r30, 0x5B	; 91
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	80 68       	ori	r24, 0x80	; 128
    2914:	8c 93       	st	X, r24
    2916:	07 c0       	rjmp	.+14     	; 0x2926 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    2918:	ab e5       	ldi	r26, 0x5B	; 91
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	eb e5       	ldi	r30, 0x5B	; 91
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	80 62       	ori	r24, 0x20	; 32
    2924:	8c 93       	st	X, r24
        break;
    }
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	00 d0       	rcall	.+0      	; 0x2938 <EXTI_voidDisable+0x6>
    2938:	0f 92       	push	r0
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	3b 83       	std	Y+3, r19	; 0x03
    2948:	2a 83       	std	Y+2, r18	; 0x02
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	9b 81       	ldd	r25, Y+3	; 0x03
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	91 05       	cpc	r25, r1
    2952:	89 f0       	breq	.+34     	; 0x2976 <EXTI_voidDisable+0x44>
    2954:	2a 81       	ldd	r18, Y+2	; 0x02
    2956:	3b 81       	ldd	r19, Y+3	; 0x03
    2958:	22 30       	cpi	r18, 0x02	; 2
    295a:	31 05       	cpc	r19, r1
    295c:	a1 f0       	breq	.+40     	; 0x2986 <EXTI_voidDisable+0x54>
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	9b 81       	ldd	r25, Y+3	; 0x03
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	b9 f4       	brne	.+46     	; 0x2994 <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    2966:	ab e5       	ldi	r26, 0x5B	; 91
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	eb e5       	ldi	r30, 0x5B	; 91
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	8f 7b       	andi	r24, 0xBF	; 191
    2972:	8c 93       	st	X, r24
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    2976:	ab e5       	ldi	r26, 0x5B	; 91
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	eb e5       	ldi	r30, 0x5B	; 91
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	8f 77       	andi	r24, 0x7F	; 127
    2982:	8c 93       	st	X, r24
    2984:	07 c0       	rjmp	.+14     	; 0x2994 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    2986:	ab e5       	ldi	r26, 0x5B	; 91
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	eb e5       	ldi	r30, 0x5B	; 91
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	8f 7d       	andi	r24, 0xDF	; 223
    2992:	8c 93       	st	X, r24
        break;
    }
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	00 d0       	rcall	.+0      	; 0x29a6 <EXTRI_voidSetCallBackINT+0x6>
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <EXTRI_voidSetCallBackINT+0x8>
    29a8:	0f 92       	push	r0
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	7b 83       	std	Y+3, r23	; 0x03
    29b2:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	9b 81       	ldd	r25, Y+3	; 0x03
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	39 f1       	breq	.+78     	; 0x2a0a <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	3d 83       	std	Y+5, r19	; 0x05
    29c4:	2c 83       	std	Y+4, r18	; 0x04
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ca:	81 30       	cpi	r24, 0x01	; 1
    29cc:	91 05       	cpc	r25, r1
    29ce:	81 f0       	breq	.+32     	; 0x29f0 <EXTRI_voidSetCallBackINT+0x50>
    29d0:	2c 81       	ldd	r18, Y+4	; 0x04
    29d2:	3d 81       	ldd	r19, Y+5	; 0x05
    29d4:	22 30       	cpi	r18, 0x02	; 2
    29d6:	31 05       	cpc	r19, r1
    29d8:	91 f0       	breq	.+36     	; 0x29fe <EXTRI_voidSetCallBackINT+0x5e>
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	9d 81       	ldd	r25, Y+5	; 0x05
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	a1 f4       	brne	.+40     	; 0x2a0a <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    29e2:	8a 81       	ldd	r24, Y+2	; 0x02
    29e4:	9b 81       	ldd	r25, Y+3	; 0x03
    29e6:	90 93 0c 02 	sts	0x020C, r25
    29ea:	80 93 0b 02 	sts	0x020B, r24
    29ee:	0d c0       	rjmp	.+26     	; 0x2a0a <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	90 93 0e 02 	sts	0x020E, r25
    29f8:	80 93 0d 02 	sts	0x020D, r24
    29fc:	06 c0       	rjmp	.+12     	; 0x2a0a <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	9b 81       	ldd	r25, Y+3	; 0x03
    2a02:	90 93 10 02 	sts	0x0210, r25
    2a06:	80 93 0f 02 	sts	0x020F, r24
            break;
        default:
            break;
        }
    }
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    2a1a:	1f 92       	push	r1
    2a1c:	0f 92       	push	r0
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	0f 92       	push	r0
    2a22:	11 24       	eor	r1, r1
    2a24:	2f 93       	push	r18
    2a26:	3f 93       	push	r19
    2a28:	4f 93       	push	r20
    2a2a:	5f 93       	push	r21
    2a2c:	6f 93       	push	r22
    2a2e:	7f 93       	push	r23
    2a30:	8f 93       	push	r24
    2a32:	9f 93       	push	r25
    2a34:	af 93       	push	r26
    2a36:	bf 93       	push	r27
    2a38:	ef 93       	push	r30
    2a3a:	ff 93       	push	r31
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    2a44:	80 91 0b 02 	lds	r24, 0x020B
    2a48:	90 91 0c 02 	lds	r25, 0x020C
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	29 f0       	breq	.+10     	; 0x2a5a <__vector_1+0x40>
        private_pCallBackINT0();
    2a50:	e0 91 0b 02 	lds	r30, 0x020B
    2a54:	f0 91 0c 02 	lds	r31, 0x020C
    2a58:	09 95       	icall
    }
}
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	ff 91       	pop	r31
    2a60:	ef 91       	pop	r30
    2a62:	bf 91       	pop	r27
    2a64:	af 91       	pop	r26
    2a66:	9f 91       	pop	r25
    2a68:	8f 91       	pop	r24
    2a6a:	7f 91       	pop	r23
    2a6c:	6f 91       	pop	r22
    2a6e:	5f 91       	pop	r21
    2a70:	4f 91       	pop	r20
    2a72:	3f 91       	pop	r19
    2a74:	2f 91       	pop	r18
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    2a80:	1f 92       	push	r1
    2a82:	0f 92       	push	r0
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	0f 92       	push	r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	2f 93       	push	r18
    2a8c:	3f 93       	push	r19
    2a8e:	4f 93       	push	r20
    2a90:	5f 93       	push	r21
    2a92:	6f 93       	push	r22
    2a94:	7f 93       	push	r23
    2a96:	8f 93       	push	r24
    2a98:	9f 93       	push	r25
    2a9a:	af 93       	push	r26
    2a9c:	bf 93       	push	r27
    2a9e:	ef 93       	push	r30
    2aa0:	ff 93       	push	r31
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    2aaa:	80 91 0d 02 	lds	r24, 0x020D
    2aae:	90 91 0e 02 	lds	r25, 0x020E
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	29 f0       	breq	.+10     	; 0x2ac0 <__vector_2+0x40>
        private_pCallBackINT1();
    2ab6:	e0 91 0d 02 	lds	r30, 0x020D
    2aba:	f0 91 0e 02 	lds	r31, 0x020E
    2abe:	09 95       	icall
    }
}
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	ff 91       	pop	r31
    2ac6:	ef 91       	pop	r30
    2ac8:	bf 91       	pop	r27
    2aca:	af 91       	pop	r26
    2acc:	9f 91       	pop	r25
    2ace:	8f 91       	pop	r24
    2ad0:	7f 91       	pop	r23
    2ad2:	6f 91       	pop	r22
    2ad4:	5f 91       	pop	r21
    2ad6:	4f 91       	pop	r20
    2ad8:	3f 91       	pop	r19
    2ada:	2f 91       	pop	r18
    2adc:	0f 90       	pop	r0
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	0f 90       	pop	r0
    2ae2:	1f 90       	pop	r1
    2ae4:	18 95       	reti

00002ae6 <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    2ae6:	1f 92       	push	r1
    2ae8:	0f 92       	push	r0
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	0f 92       	push	r0
    2aee:	11 24       	eor	r1, r1
    2af0:	2f 93       	push	r18
    2af2:	3f 93       	push	r19
    2af4:	4f 93       	push	r20
    2af6:	5f 93       	push	r21
    2af8:	6f 93       	push	r22
    2afa:	7f 93       	push	r23
    2afc:	8f 93       	push	r24
    2afe:	9f 93       	push	r25
    2b00:	af 93       	push	r26
    2b02:	bf 93       	push	r27
    2b04:	ef 93       	push	r30
    2b06:	ff 93       	push	r31
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    2b10:	80 91 0f 02 	lds	r24, 0x020F
    2b14:	90 91 10 02 	lds	r25, 0x0210
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	29 f0       	breq	.+10     	; 0x2b26 <__vector_3+0x40>
        private_pCallBackINT2();
    2b1c:	e0 91 0f 02 	lds	r30, 0x020F
    2b20:	f0 91 10 02 	lds	r31, 0x0210
    2b24:	09 95       	icall
    }
}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	ff 91       	pop	r31
    2b2c:	ef 91       	pop	r30
    2b2e:	bf 91       	pop	r27
    2b30:	af 91       	pop	r26
    2b32:	9f 91       	pop	r25
    2b34:	8f 91       	pop	r24
    2b36:	7f 91       	pop	r23
    2b38:	6f 91       	pop	r22
    2b3a:	5f 91       	pop	r21
    2b3c:	4f 91       	pop	r20
    2b3e:	3f 91       	pop	r19
    2b40:	2f 91       	pop	r18
    2b42:	0f 90       	pop	r0
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	0f 90       	pop	r0
    2b48:	1f 90       	pop	r1
    2b4a:	18 95       	reti

00002b4c <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <Dio_WriteChannel+0x6>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <Dio_WriteChannel+0x8>
    2b54:	0f 92       	push	r0
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	8a 83       	std	Y+2, r24	; 0x02
    2b5c:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	86 95       	lsr	r24
    2b62:	86 95       	lsr	r24
    2b64:	86 95       	lsr	r24
    2b66:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	3d 83       	std	Y+5, r19	; 0x05
    2b70:	2c 83       	std	Y+4, r18	; 0x04
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	81 30       	cpi	r24, 0x01	; 1
    2b78:	91 05       	cpc	r25, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <Dio_WriteChannel+0x32>
    2b7c:	43 c0       	rjmp	.+134    	; 0x2c04 <Dio_WriteChannel+0xb8>
    2b7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b80:	3d 81       	ldd	r19, Y+5	; 0x05
    2b82:	22 30       	cpi	r18, 0x02	; 2
    2b84:	31 05       	cpc	r19, r1
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <Dio_WriteChannel+0x46>
    2b88:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	71 f0       	breq	.+28     	; 0x2bac <Dio_WriteChannel+0x60>
    2b90:	ce c0       	rjmp	.+412    	; 0x2d2e <Dio_WriteChannel+0x1e2>
    2b92:	2c 81       	ldd	r18, Y+4	; 0x04
    2b94:	3d 81       	ldd	r19, Y+5	; 0x05
    2b96:	22 30       	cpi	r18, 0x02	; 2
    2b98:	31 05       	cpc	r19, r1
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <Dio_WriteChannel+0x52>
    2b9c:	65 c0       	rjmp	.+202    	; 0x2c68 <Dio_WriteChannel+0x11c>
    2b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba2:	83 30       	cpi	r24, 0x03	; 3
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <Dio_WriteChannel+0x5e>
    2ba8:	91 c0       	rjmp	.+290    	; 0x2ccc <Dio_WriteChannel+0x180>
    2baa:	c1 c0       	rjmp	.+386    	; 0x2d2e <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	81 30       	cpi	r24, 0x01	; 1
    2bb0:	a1 f4       	brne	.+40     	; 0x2bda <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    2bb2:	ab e3       	ldi	r26, 0x3B	; 59
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	eb e3       	ldi	r30, 0x3B	; 59
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	48 2f       	mov	r20, r24
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	02 2e       	mov	r0, r18
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <Dio_WriteChannel+0x84>
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	0a 94       	dec	r0
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <Dio_WriteChannel+0x80>
    2bd4:	84 2b       	or	r24, r20
    2bd6:	8c 93       	st	X, r24
    2bd8:	aa c0       	rjmp	.+340    	; 0x2d2e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    2bda:	ab e3       	ldi	r26, 0x3B	; 59
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	eb e3       	ldi	r30, 0x3B	; 59
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	48 2f       	mov	r20, r24
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	02 2e       	mov	r0, r18
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <Dio_WriteChannel+0xac>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	0a 94       	dec	r0
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <Dio_WriteChannel+0xa8>
    2bfc:	80 95       	com	r24
    2bfe:	84 23       	and	r24, r20
    2c00:	8c 93       	st	X, r24
    2c02:	95 c0       	rjmp	.+298    	; 0x2d2e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	81 30       	cpi	r24, 0x01	; 1
    2c08:	b9 f4       	brne	.+46     	; 0x2c38 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    2c0a:	a8 e3       	ldi	r26, 0x38	; 56
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e8 e3       	ldi	r30, 0x38	; 56
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	48 2f       	mov	r20, r24
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9c 01       	movw	r18, r24
    2c1e:	27 70       	andi	r18, 0x07	; 7
    2c20:	30 70       	andi	r19, 0x00	; 0
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	02 2e       	mov	r0, r18
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <Dio_WriteChannel+0xe2>
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	0a 94       	dec	r0
    2c30:	e2 f7       	brpl	.-8      	; 0x2c2a <Dio_WriteChannel+0xde>
    2c32:	84 2b       	or	r24, r20
    2c34:	8c 93       	st	X, r24
    2c36:	7b c0       	rjmp	.+246    	; 0x2d2e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    2c38:	a8 e3       	ldi	r26, 0x38	; 56
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e8 e3       	ldi	r30, 0x38	; 56
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	48 2f       	mov	r20, r24
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	88 2f       	mov	r24, r24
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	9c 01       	movw	r18, r24
    2c4c:	27 70       	andi	r18, 0x07	; 7
    2c4e:	30 70       	andi	r19, 0x00	; 0
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	02 2e       	mov	r0, r18
    2c56:	02 c0       	rjmp	.+4      	; 0x2c5c <Dio_WriteChannel+0x110>
    2c58:	88 0f       	add	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	0a 94       	dec	r0
    2c5e:	e2 f7       	brpl	.-8      	; 0x2c58 <Dio_WriteChannel+0x10c>
    2c60:	80 95       	com	r24
    2c62:	84 23       	and	r24, r20
    2c64:	8c 93       	st	X, r24
    2c66:	63 c0       	rjmp	.+198    	; 0x2d2e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	81 30       	cpi	r24, 0x01	; 1
    2c6c:	b9 f4       	brne	.+46     	; 0x2c9c <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    2c6e:	a5 e3       	ldi	r26, 0x35	; 53
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e5 e3       	ldi	r30, 0x35	; 53
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	48 2f       	mov	r20, r24
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9c 01       	movw	r18, r24
    2c82:	27 70       	andi	r18, 0x07	; 7
    2c84:	30 70       	andi	r19, 0x00	; 0
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	02 2e       	mov	r0, r18
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <Dio_WriteChannel+0x146>
    2c8e:	88 0f       	add	r24, r24
    2c90:	99 1f       	adc	r25, r25
    2c92:	0a 94       	dec	r0
    2c94:	e2 f7       	brpl	.-8      	; 0x2c8e <Dio_WriteChannel+0x142>
    2c96:	84 2b       	or	r24, r20
    2c98:	8c 93       	st	X, r24
    2c9a:	49 c0       	rjmp	.+146    	; 0x2d2e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    2c9c:	a5 e3       	ldi	r26, 0x35	; 53
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e5 e3       	ldi	r30, 0x35	; 53
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	48 2f       	mov	r20, r24
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9c 01       	movw	r18, r24
    2cb0:	27 70       	andi	r18, 0x07	; 7
    2cb2:	30 70       	andi	r19, 0x00	; 0
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	02 2e       	mov	r0, r18
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <Dio_WriteChannel+0x174>
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	0a 94       	dec	r0
    2cc2:	e2 f7       	brpl	.-8      	; 0x2cbc <Dio_WriteChannel+0x170>
    2cc4:	80 95       	com	r24
    2cc6:	84 23       	and	r24, r20
    2cc8:	8c 93       	st	X, r24
    2cca:	31 c0       	rjmp	.+98     	; 0x2d2e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	81 30       	cpi	r24, 0x01	; 1
    2cd0:	b9 f4       	brne	.+46     	; 0x2d00 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    2cd2:	a2 e3       	ldi	r26, 0x32	; 50
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e2 e3       	ldi	r30, 0x32	; 50
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	48 2f       	mov	r20, r24
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9c 01       	movw	r18, r24
    2ce6:	27 70       	andi	r18, 0x07	; 7
    2ce8:	30 70       	andi	r19, 0x00	; 0
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	02 2e       	mov	r0, r18
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <Dio_WriteChannel+0x1aa>
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	0a 94       	dec	r0
    2cf8:	e2 f7       	brpl	.-8      	; 0x2cf2 <Dio_WriteChannel+0x1a6>
    2cfa:	84 2b       	or	r24, r20
    2cfc:	8c 93       	st	X, r24
    2cfe:	17 c0       	rjmp	.+46     	; 0x2d2e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    2d00:	a2 e3       	ldi	r26, 0x32	; 50
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e2 e3       	ldi	r30, 0x32	; 50
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	48 2f       	mov	r20, r24
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	88 2f       	mov	r24, r24
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9c 01       	movw	r18, r24
    2d14:	27 70       	andi	r18, 0x07	; 7
    2d16:	30 70       	andi	r19, 0x00	; 0
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	02 2e       	mov	r0, r18
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <Dio_WriteChannel+0x1d8>
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	0a 94       	dec	r0
    2d26:	e2 f7       	brpl	.-8      	; 0x2d20 <Dio_WriteChannel+0x1d4>
    2d28:	80 95       	com	r24
    2d2a:	84 23       	and	r24, r20
    2d2c:	8c 93       	st	X, r24
		}
		break;
	}
}
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <Dio_ReadChannel+0x6>
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <Dio_ReadChannel+0x8>
    2d46:	0f 92       	push	r0
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	86 95       	lsr	r24
    2d52:	86 95       	lsr	r24
    2d54:	86 95       	lsr	r24
    2d56:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	3d 83       	std	Y+5, r19	; 0x05
    2d60:	2c 83       	std	Y+4, r18	; 0x04
    2d62:	4c 81       	ldd	r20, Y+4	; 0x04
    2d64:	5d 81       	ldd	r21, Y+5	; 0x05
    2d66:	41 30       	cpi	r20, 0x01	; 1
    2d68:	51 05       	cpc	r21, r1
    2d6a:	49 f1       	breq	.+82     	; 0x2dbe <Dio_ReadChannel+0x80>
    2d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d70:	82 30       	cpi	r24, 0x02	; 2
    2d72:	91 05       	cpc	r25, r1
    2d74:	34 f4       	brge	.+12     	; 0x2d82 <Dio_ReadChannel+0x44>
    2d76:	2c 81       	ldd	r18, Y+4	; 0x04
    2d78:	3d 81       	ldd	r19, Y+5	; 0x05
    2d7a:	21 15       	cp	r18, r1
    2d7c:	31 05       	cpc	r19, r1
    2d7e:	69 f0       	breq	.+26     	; 0x2d9a <Dio_ReadChannel+0x5c>
    2d80:	59 c0       	rjmp	.+178    	; 0x2e34 <Dio_ReadChannel+0xf6>
    2d82:	4c 81       	ldd	r20, Y+4	; 0x04
    2d84:	5d 81       	ldd	r21, Y+5	; 0x05
    2d86:	42 30       	cpi	r20, 0x02	; 2
    2d88:	51 05       	cpc	r21, r1
    2d8a:	69 f1       	breq	.+90     	; 0x2de6 <Dio_ReadChannel+0xa8>
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d90:	83 30       	cpi	r24, 0x03	; 3
    2d92:	91 05       	cpc	r25, r1
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <Dio_ReadChannel+0x5a>
    2d96:	3b c0       	rjmp	.+118    	; 0x2e0e <Dio_ReadChannel+0xd0>
    2d98:	4d c0       	rjmp	.+154    	; 0x2e34 <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2d9a:	e9 e3       	ldi	r30, 0x39	; 57
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a9 01       	movw	r20, r18
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <Dio_ReadChannel+0x74>
    2dae:	55 95       	asr	r21
    2db0:	47 95       	ror	r20
    2db2:	8a 95       	dec	r24
    2db4:	e2 f7       	brpl	.-8      	; 0x2dae <Dio_ReadChannel+0x70>
    2db6:	ca 01       	movw	r24, r20
    2db8:	81 70       	andi	r24, 0x01	; 1
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	3b c0       	rjmp	.+118    	; 0x2e34 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    2dbe:	e6 e3       	ldi	r30, 0x36	; 54
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	88 2f       	mov	r24, r24
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	87 70       	andi	r24, 0x07	; 7
    2dd0:	90 70       	andi	r25, 0x00	; 0
    2dd2:	a9 01       	movw	r20, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <Dio_ReadChannel+0x9c>
    2dd6:	55 95       	asr	r21
    2dd8:	47 95       	ror	r20
    2dda:	8a 95       	dec	r24
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <Dio_ReadChannel+0x98>
    2dde:	ca 01       	movw	r24, r20
    2de0:	81 70       	andi	r24, 0x01	; 1
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	27 c0       	rjmp	.+78     	; 0x2e34 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    2de6:	e3 e3       	ldi	r30, 0x33	; 51
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	88 2f       	mov	r24, r24
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	87 70       	andi	r24, 0x07	; 7
    2df8:	90 70       	andi	r25, 0x00	; 0
    2dfa:	a9 01       	movw	r20, r18
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <Dio_ReadChannel+0xc4>
    2dfe:	55 95       	asr	r21
    2e00:	47 95       	ror	r20
    2e02:	8a 95       	dec	r24
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <Dio_ReadChannel+0xc0>
    2e06:	ca 01       	movw	r24, r20
    2e08:	81 70       	andi	r24, 0x01	; 1
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	13 c0       	rjmp	.+38     	; 0x2e34 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    2e0e:	e0 e3       	ldi	r30, 0x30	; 48
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	88 2f       	mov	r24, r24
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	87 70       	andi	r24, 0x07	; 7
    2e20:	90 70       	andi	r25, 0x00	; 0
    2e22:	a9 01       	movw	r20, r18
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <Dio_ReadChannel+0xec>
    2e26:	55 95       	asr	r21
    2e28:	47 95       	ror	r20
    2e2a:	8a 95       	dec	r24
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <Dio_ReadChannel+0xe8>
    2e2e:	ca 01       	movw	r24, r20
    2e30:	81 70       	andi	r24, 0x01	; 1
    2e32:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <Dio_FlipChannel+0x6>
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <Dio_FlipChannel+0x8>
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	86 95       	lsr	r24
    2e58:	86 95       	lsr	r24
    2e5a:	86 95       	lsr	r24
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	3c 83       	std	Y+4, r19	; 0x04
    2e62:	2b 83       	std	Y+3, r18	; 0x03
    2e64:	4b 81       	ldd	r20, Y+3	; 0x03
    2e66:	5c 81       	ldd	r21, Y+4	; 0x04
    2e68:	41 30       	cpi	r20, 0x01	; 1
    2e6a:	51 05       	cpc	r21, r1
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <Dio_FlipChannel+0x2a>
    2e6e:	3c c0       	rjmp	.+120    	; 0x2ee8 <Dio_FlipChannel+0xa2>
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	9c 81       	ldd	r25, Y+4	; 0x04
    2e74:	82 30       	cpi	r24, 0x02	; 2
    2e76:	91 05       	cpc	r25, r1
    2e78:	34 f4       	brge	.+12     	; 0x2e86 <Dio_FlipChannel+0x40>
    2e7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e7e:	21 15       	cp	r18, r1
    2e80:	31 05       	cpc	r19, r1
    2e82:	71 f0       	breq	.+28     	; 0x2ea0 <Dio_FlipChannel+0x5a>
    2e84:	ab c0       	rjmp	.+342    	; 0x2fdc <Dio_FlipChannel+0x196>
    2e86:	4b 81       	ldd	r20, Y+3	; 0x03
    2e88:	5c 81       	ldd	r21, Y+4	; 0x04
    2e8a:	42 30       	cpi	r20, 0x02	; 2
    2e8c:	51 05       	cpc	r21, r1
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <Dio_FlipChannel+0x4c>
    2e90:	54 c0       	rjmp	.+168    	; 0x2f3a <Dio_FlipChannel+0xf4>
    2e92:	8b 81       	ldd	r24, Y+3	; 0x03
    2e94:	9c 81       	ldd	r25, Y+4	; 0x04
    2e96:	83 30       	cpi	r24, 0x03	; 3
    2e98:	91 05       	cpc	r25, r1
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <Dio_FlipChannel+0x58>
    2e9c:	77 c0       	rjmp	.+238    	; 0x2f8c <Dio_FlipChannel+0x146>
    2e9e:	9e c0       	rjmp	.+316    	; 0x2fdc <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    2ea0:	ab e3       	ldi	r26, 0x3B	; 59
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	eb e3       	ldi	r30, 0x3B	; 59
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	48 2f       	mov	r20, r24
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <Dio_FlipChannel+0x76>
    2eb8:	88 0f       	add	r24, r24
    2eba:	99 1f       	adc	r25, r25
    2ebc:	2a 95       	dec	r18
    2ebe:	e2 f7       	brpl	.-8      	; 0x2eb8 <Dio_FlipChannel+0x72>
    2ec0:	84 27       	eor	r24, r20
    2ec2:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    2ec4:	eb e3       	ldi	r30, 0x3B	; 59
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a9 01       	movw	r20, r18
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <Dio_FlipChannel+0x96>
    2ed8:	55 95       	asr	r21
    2eda:	47 95       	ror	r20
    2edc:	8a 95       	dec	r24
    2ede:	e2 f7       	brpl	.-8      	; 0x2ed8 <Dio_FlipChannel+0x92>
    2ee0:	ca 01       	movw	r24, r20
    2ee2:	81 70       	andi	r24, 0x01	; 1
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	7a c0       	rjmp	.+244    	; 0x2fdc <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    2ee8:	a8 e3       	ldi	r26, 0x38	; 56
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e8 e3       	ldi	r30, 0x38	; 56
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	48 2f       	mov	r20, r24
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	88 2f       	mov	r24, r24
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	9c 01       	movw	r18, r24
    2efc:	27 70       	andi	r18, 0x07	; 7
    2efe:	30 70       	andi	r19, 0x00	; 0
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <Dio_FlipChannel+0xc4>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	2a 95       	dec	r18
    2f0c:	e2 f7       	brpl	.-8      	; 0x2f06 <Dio_FlipChannel+0xc0>
    2f0e:	84 27       	eor	r24, r20
    2f10:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    2f12:	e8 e3       	ldi	r30, 0x38	; 56
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	87 70       	andi	r24, 0x07	; 7
    2f24:	90 70       	andi	r25, 0x00	; 0
    2f26:	a9 01       	movw	r20, r18
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <Dio_FlipChannel+0xe8>
    2f2a:	55 95       	asr	r21
    2f2c:	47 95       	ror	r20
    2f2e:	8a 95       	dec	r24
    2f30:	e2 f7       	brpl	.-8      	; 0x2f2a <Dio_FlipChannel+0xe4>
    2f32:	ca 01       	movw	r24, r20
    2f34:	81 70       	andi	r24, 0x01	; 1
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	51 c0       	rjmp	.+162    	; 0x2fdc <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    2f3a:	a5 e3       	ldi	r26, 0x35	; 53
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e5 e3       	ldi	r30, 0x35	; 53
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	48 2f       	mov	r20, r24
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9c 01       	movw	r18, r24
    2f4e:	27 70       	andi	r18, 0x07	; 7
    2f50:	30 70       	andi	r19, 0x00	; 0
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <Dio_FlipChannel+0x116>
    2f58:	88 0f       	add	r24, r24
    2f5a:	99 1f       	adc	r25, r25
    2f5c:	2a 95       	dec	r18
    2f5e:	e2 f7       	brpl	.-8      	; 0x2f58 <Dio_FlipChannel+0x112>
    2f60:	84 27       	eor	r24, r20
    2f62:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    2f64:	e5 e3       	ldi	r30, 0x35	; 53
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	87 70       	andi	r24, 0x07	; 7
    2f76:	90 70       	andi	r25, 0x00	; 0
    2f78:	a9 01       	movw	r20, r18
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <Dio_FlipChannel+0x13a>
    2f7c:	55 95       	asr	r21
    2f7e:	47 95       	ror	r20
    2f80:	8a 95       	dec	r24
    2f82:	e2 f7       	brpl	.-8      	; 0x2f7c <Dio_FlipChannel+0x136>
    2f84:	ca 01       	movw	r24, r20
    2f86:	81 70       	andi	r24, 0x01	; 1
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	28 c0       	rjmp	.+80     	; 0x2fdc <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    2f8c:	a2 e3       	ldi	r26, 0x32	; 50
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	e2 e3       	ldi	r30, 0x32	; 50
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	48 2f       	mov	r20, r24
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	88 2f       	mov	r24, r24
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9c 01       	movw	r18, r24
    2fa0:	27 70       	andi	r18, 0x07	; 7
    2fa2:	30 70       	andi	r19, 0x00	; 0
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <Dio_FlipChannel+0x168>
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	2a 95       	dec	r18
    2fb0:	e2 f7       	brpl	.-8      	; 0x2faa <Dio_FlipChannel+0x164>
    2fb2:	84 27       	eor	r24, r20
    2fb4:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    2fb6:	e2 e3       	ldi	r30, 0x32	; 50
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	87 70       	andi	r24, 0x07	; 7
    2fc8:	90 70       	andi	r25, 0x00	; 0
    2fca:	a9 01       	movw	r20, r18
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <Dio_FlipChannel+0x18c>
    2fce:	55 95       	asr	r21
    2fd0:	47 95       	ror	r20
    2fd2:	8a 95       	dec	r24
    2fd4:	e2 f7       	brpl	.-8      	; 0x2fce <Dio_FlipChannel+0x188>
    2fd6:	ca 01       	movw	r24, r20
    2fd8:	81 70       	andi	r24, 0x01	; 1
    2fda:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <Dio_WritePort+0x6>
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <Dio_WritePort+0x8>
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	3c 83       	std	Y+4, r19	; 0x04
    3004:	2b 83       	std	Y+3, r18	; 0x03
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	9c 81       	ldd	r25, Y+4	; 0x04
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	91 05       	cpc	r25, r1
    300e:	d1 f0       	breq	.+52     	; 0x3044 <Dio_WritePort+0x58>
    3010:	2b 81       	ldd	r18, Y+3	; 0x03
    3012:	3c 81       	ldd	r19, Y+4	; 0x04
    3014:	22 30       	cpi	r18, 0x02	; 2
    3016:	31 05       	cpc	r19, r1
    3018:	2c f4       	brge	.+10     	; 0x3024 <Dio_WritePort+0x38>
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	9c 81       	ldd	r25, Y+4	; 0x04
    301e:	00 97       	sbiw	r24, 0x00	; 0
    3020:	61 f0       	breq	.+24     	; 0x303a <Dio_WritePort+0x4e>
    3022:	1e c0       	rjmp	.+60     	; 0x3060 <Dio_WritePort+0x74>
    3024:	2b 81       	ldd	r18, Y+3	; 0x03
    3026:	3c 81       	ldd	r19, Y+4	; 0x04
    3028:	22 30       	cpi	r18, 0x02	; 2
    302a:	31 05       	cpc	r19, r1
    302c:	81 f0       	breq	.+32     	; 0x304e <Dio_WritePort+0x62>
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	83 30       	cpi	r24, 0x03	; 3
    3034:	91 05       	cpc	r25, r1
    3036:	81 f0       	breq	.+32     	; 0x3058 <Dio_WritePort+0x6c>
    3038:	13 c0       	rjmp	.+38     	; 0x3060 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    303a:	eb e3       	ldi	r30, 0x3B	; 59
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	8a 81       	ldd	r24, Y+2	; 0x02
    3040:	80 83       	st	Z, r24
    3042:	0e c0       	rjmp	.+28     	; 0x3060 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    3044:	e8 e3       	ldi	r30, 0x38	; 56
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	80 83       	st	Z, r24
    304c:	09 c0       	rjmp	.+18     	; 0x3060 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    304e:	e5 e3       	ldi	r30, 0x35	; 53
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	80 83       	st	Z, r24
    3056:	04 c0       	rjmp	.+8      	; 0x3060 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    3058:	e2 e3       	ldi	r30, 0x32	; 50
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	80 83       	st	Z, r24
		break;
	}
}
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <Lcd_SendCMD>:
 *      Author: AhmedAbogabl
 */

#include "LCD.h"

void Lcd_SendCMD(u8 cmd) {
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	c1 56       	subi	r28, 0x61	; 97
    307c:	d0 40       	sbci	r29, 0x00	; 0
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	fe 01       	movw	r30, r28
    308a:	ef 59       	subi	r30, 0x9F	; 159
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	80 83       	st	Z, r24
	// Set RS to command mode
	Dio_WriteChannel(LCD_RS, STD_LOW);
    3090:	83 e0       	ldi	r24, 0x03	; 3
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>

	// Send the high nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 4));
    3098:	fe 01       	movw	r30, r28
    309a:	ef 59       	subi	r30, 0x9F	; 159
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 81       	ld	r24, Z
    30a0:	82 95       	swap	r24
    30a2:	8f 70       	andi	r24, 0x0F	; 15
    30a4:	98 2f       	mov	r25, r24
    30a6:	91 70       	andi	r25, 0x01	; 1
    30a8:	88 e0       	ldi	r24, 0x08	; 8
    30aa:	69 2f       	mov	r22, r25
    30ac:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 5));
    30b0:	fe 01       	movw	r30, r28
    30b2:	ef 59       	subi	r30, 0x9F	; 159
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	82 95       	swap	r24
    30ba:	86 95       	lsr	r24
    30bc:	87 70       	andi	r24, 0x07	; 7
    30be:	98 2f       	mov	r25, r24
    30c0:	91 70       	andi	r25, 0x01	; 1
    30c2:	89 e0       	ldi	r24, 0x09	; 9
    30c4:	69 2f       	mov	r22, r25
    30c6:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 6));
    30ca:	fe 01       	movw	r30, r28
    30cc:	ef 59       	subi	r30, 0x9F	; 159
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	82 95       	swap	r24
    30d4:	86 95       	lsr	r24
    30d6:	86 95       	lsr	r24
    30d8:	83 70       	andi	r24, 0x03	; 3
    30da:	98 2f       	mov	r25, r24
    30dc:	91 70       	andi	r25, 0x01	; 1
    30de:	8a e0       	ldi	r24, 0x0A	; 10
    30e0:	69 2f       	mov	r22, r25
    30e2:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 7));
    30e6:	fe 01       	movw	r30, r28
    30e8:	ef 59       	subi	r30, 0x9F	; 159
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	98 2f       	mov	r25, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	99 27       	eor	r25, r25
    30f4:	99 1f       	adc	r25, r25
    30f6:	8c e0       	ldi	r24, 0x0C	; 12
    30f8:	69 2f       	mov	r22, r25
    30fa:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	61 e0       	ldi	r22, 0x01	; 1
    3102:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
    3106:	fe 01       	movw	r30, r28
    3108:	e3 5a       	subi	r30, 0xA3	; 163
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e8       	ldi	r26, 0x80	; 128
    3112:	bf e3       	ldi	r27, 0x3F	; 63
    3114:	80 83       	st	Z, r24
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	a2 83       	std	Z+2, r26	; 0x02
    311a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    311c:	8e 01       	movw	r16, r28
    311e:	07 5a       	subi	r16, 0xA7	; 167
    3120:	1f 4f       	sbci	r17, 0xFF	; 255
    3122:	fe 01       	movw	r30, r28
    3124:	e3 5a       	subi	r30, 0xA3	; 163
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	60 81       	ld	r22, Z
    312a:	71 81       	ldd	r23, Z+1	; 0x01
    312c:	82 81       	ldd	r24, Z+2	; 0x02
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	2b ea       	ldi	r18, 0xAB	; 171
    3132:	3a ea       	ldi	r19, 0xAA	; 170
    3134:	4a ea       	ldi	r20, 0xAA	; 170
    3136:	50 e4       	ldi	r21, 0x40	; 64
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	f8 01       	movw	r30, r16
    3142:	80 83       	st	Z, r24
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	a2 83       	std	Z+2, r26	; 0x02
    3148:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    314a:	fe 01       	movw	r30, r28
    314c:	e7 5a       	subi	r30, 0xA7	; 167
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e8       	ldi	r20, 0x80	; 128
    315e:	5f e3       	ldi	r21, 0x3F	; 63
    3160:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3164:	88 23       	and	r24, r24
    3166:	34 f4       	brge	.+12     	; 0x3174 <Lcd_SendCMD+0x106>
		__ticks = 1;
    3168:	fe 01       	movw	r30, r28
    316a:	e8 5a       	subi	r30, 0xA8	; 168
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	80 83       	st	Z, r24
    3172:	e0 c0       	rjmp	.+448    	; 0x3334 <Lcd_SendCMD+0x2c6>
	else if (__tmp > 255)
    3174:	fe 01       	movw	r30, r28
    3176:	e7 5a       	subi	r30, 0xA7	; 167
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	4f e7       	ldi	r20, 0x7F	; 127
    3188:	53 e4       	ldi	r21, 0x43	; 67
    318a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    318e:	18 16       	cp	r1, r24
    3190:	0c f0       	brlt	.+2      	; 0x3194 <Lcd_SendCMD+0x126>
    3192:	c0 c0       	rjmp	.+384    	; 0x3314 <Lcd_SendCMD+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    3194:	fe 01       	movw	r30, r28
    3196:	e3 5a       	subi	r30, 0xA3	; 163
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	60 81       	ld	r22, Z
    319c:	71 81       	ldd	r23, Z+1	; 0x01
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	93 81       	ldd	r25, Z+3	; 0x03
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	4a e7       	ldi	r20, 0x7A	; 122
    31a8:	54 e4       	ldi	r21, 0x44	; 68
    31aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	fe 01       	movw	r30, r28
    31b4:	ec 5a       	subi	r30, 0xAC	; 172
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	80 83       	st	Z, r24
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	a2 83       	std	Z+2, r26	; 0x02
    31be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c0:	8e 01       	movw	r16, r28
    31c2:	00 5b       	subi	r16, 0xB0	; 176
    31c4:	1f 4f       	sbci	r17, 0xFF	; 255
    31c6:	fe 01       	movw	r30, r28
    31c8:	ec 5a       	subi	r30, 0xAC	; 172
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	60 81       	ld	r22, Z
    31ce:	71 81       	ldd	r23, Z+1	; 0x01
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a e7       	ldi	r20, 0x7A	; 122
    31da:	55 e4       	ldi	r21, 0x45	; 69
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	f8 01       	movw	r30, r16
    31e6:	80 83       	st	Z, r24
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	a2 83       	std	Z+2, r26	; 0x02
    31ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31ee:	fe 01       	movw	r30, r28
    31f0:	e0 5b       	subi	r30, 0xB0	; 176
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	44 f4       	brge	.+16     	; 0x321c <Lcd_SendCMD+0x1ae>
		__ticks = 1;
    320c:	fe 01       	movw	r30, r28
    320e:	e2 5b       	subi	r30, 0xB2	; 178
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	91 83       	std	Z+1, r25	; 0x01
    3218:	80 83       	st	Z, r24
    321a:	64 c0       	rjmp	.+200    	; 0x32e4 <Lcd_SendCMD+0x276>
	else if (__tmp > 65535)
    321c:	fe 01       	movw	r30, r28
    321e:	e0 5b       	subi	r30, 0xB0	; 176
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	60 81       	ld	r22, Z
    3224:	71 81       	ldd	r23, Z+1	; 0x01
    3226:	82 81       	ldd	r24, Z+2	; 0x02
    3228:	93 81       	ldd	r25, Z+3	; 0x03
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	3f ef       	ldi	r19, 0xFF	; 255
    322e:	4f e7       	ldi	r20, 0x7F	; 127
    3230:	57 e4       	ldi	r21, 0x47	; 71
    3232:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3236:	18 16       	cp	r1, r24
    3238:	0c f0       	brlt	.+2      	; 0x323c <Lcd_SendCMD+0x1ce>
    323a:	43 c0       	rjmp	.+134    	; 0x32c2 <Lcd_SendCMD+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323c:	fe 01       	movw	r30, r28
    323e:	ec 5a       	subi	r30, 0xAC	; 172
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e2       	ldi	r20, 0x20	; 32
    3250:	51 e4       	ldi	r21, 0x41	; 65
    3252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	8e 01       	movw	r16, r28
    325c:	02 5b       	subi	r16, 0xB2	; 178
    325e:	1f 4f       	sbci	r17, 0xFF	; 255
    3260:	bc 01       	movw	r22, r24
    3262:	cd 01       	movw	r24, r26
    3264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	f8 01       	movw	r30, r16
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
    3272:	1f c0       	rjmp	.+62     	; 0x32b2 <Lcd_SendCMD+0x244>
    3274:	fe 01       	movw	r30, r28
    3276:	e4 5b       	subi	r30, 0xB4	; 180
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	80 e9       	ldi	r24, 0x90	; 144
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3282:	fe 01       	movw	r30, r28
    3284:	e4 5b       	subi	r30, 0xB4	; 180
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <Lcd_SendCMD+0x21e>
    3290:	fe 01       	movw	r30, r28
    3292:	e4 5b       	subi	r30, 0xB4	; 180
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	de 01       	movw	r26, r28
    329c:	a2 5b       	subi	r26, 0xB2	; 178
    329e:	bf 4f       	sbci	r27, 0xFF	; 255
    32a0:	fe 01       	movw	r30, r28
    32a2:	e2 5b       	subi	r30, 0xB2	; 178
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	11 96       	adiw	r26, 0x01	; 1
    32ae:	9c 93       	st	X, r25
    32b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b2:	fe 01       	movw	r30, r28
    32b4:	e2 5b       	subi	r30, 0xB2	; 178
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	d1 f6       	brne	.-76     	; 0x3274 <Lcd_SendCMD+0x206>
    32c0:	4b c0       	rjmp	.+150    	; 0x3358 <Lcd_SendCMD+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c2:	8e 01       	movw	r16, r28
    32c4:	02 5b       	subi	r16, 0xB2	; 178
    32c6:	1f 4f       	sbci	r17, 0xFF	; 255
    32c8:	fe 01       	movw	r30, r28
    32ca:	e0 5b       	subi	r30, 0xB0	; 176
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	60 81       	ld	r22, Z
    32d0:	71 81       	ldd	r23, Z+1	; 0x01
    32d2:	82 81       	ldd	r24, Z+2	; 0x02
    32d4:	93 81       	ldd	r25, Z+3	; 0x03
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	f8 01       	movw	r30, r16
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	de 01       	movw	r26, r28
    32e6:	a6 5b       	subi	r26, 0xB6	; 182
    32e8:	bf 4f       	sbci	r27, 0xFF	; 255
    32ea:	fe 01       	movw	r30, r28
    32ec:	e2 5b       	subi	r30, 0xB2	; 178
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	11 96       	adiw	r26, 0x01	; 1
    32f6:	9c 93       	st	X, r25
    32f8:	8e 93       	st	-X, r24
    32fa:	fe 01       	movw	r30, r28
    32fc:	e6 5b       	subi	r30, 0xB6	; 182
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <Lcd_SendCMD+0x296>
    3308:	fe 01       	movw	r30, r28
    330a:	e6 5b       	subi	r30, 0xB6	; 182
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	80 83       	st	Z, r24
    3312:	22 c0       	rjmp	.+68     	; 0x3358 <Lcd_SendCMD+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3314:	8e 01       	movw	r16, r28
    3316:	08 5a       	subi	r16, 0xA8	; 168
    3318:	1f 4f       	sbci	r17, 0xFF	; 255
    331a:	fe 01       	movw	r30, r28
    331c:	e7 5a       	subi	r30, 0xA7	; 167
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	60 81       	ld	r22, Z
    3322:	71 81       	ldd	r23, Z+1	; 0x01
    3324:	82 81       	ldd	r24, Z+2	; 0x02
    3326:	93 81       	ldd	r25, Z+3	; 0x03
    3328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	f8 01       	movw	r30, r16
    3332:	80 83       	st	Z, r24
    3334:	de 01       	movw	r26, r28
    3336:	a7 5b       	subi	r26, 0xB7	; 183
    3338:	bf 4f       	sbci	r27, 0xFF	; 255
    333a:	fe 01       	movw	r30, r28
    333c:	e8 5a       	subi	r30, 0xA8	; 168
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	80 81       	ld	r24, Z
    3342:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3344:	fe 01       	movw	r30, r28
    3346:	e7 5b       	subi	r30, 0xB7	; 183
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 81       	ld	r24, Z
    334c:	8a 95       	dec	r24
    334e:	f1 f7       	brne	.-4      	; 0x334c <Lcd_SendCMD+0x2de>
    3350:	fe 01       	movw	r30, r28
    3352:	e7 5b       	subi	r30, 0xB7	; 183
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3358:	82 e0       	ldi	r24, 0x02	; 2
    335a:	60 e0       	ldi	r22, 0x00	; 0
    335c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
    3360:	fe 01       	movw	r30, r28
    3362:	eb 5b       	subi	r30, 0xBB	; 187
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	a0 e8       	ldi	r26, 0x80	; 128
    336c:	bf e3       	ldi	r27, 0x3F	; 63
    336e:	80 83       	st	Z, r24
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	a2 83       	std	Z+2, r26	; 0x02
    3374:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3376:	8e 01       	movw	r16, r28
    3378:	0f 5b       	subi	r16, 0xBF	; 191
    337a:	1f 4f       	sbci	r17, 0xFF	; 255
    337c:	fe 01       	movw	r30, r28
    337e:	eb 5b       	subi	r30, 0xBB	; 187
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	2b ea       	ldi	r18, 0xAB	; 171
    338c:	3a ea       	ldi	r19, 0xAA	; 170
    338e:	4a ea       	ldi	r20, 0xAA	; 170
    3390:	50 e4       	ldi	r21, 0x40	; 64
    3392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	f8 01       	movw	r30, r16
    339c:	80 83       	st	Z, r24
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	a2 83       	std	Z+2, r26	; 0x02
    33a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a4:	fe 01       	movw	r30, r28
    33a6:	ef 5b       	subi	r30, 0xBF	; 191
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	60 81       	ld	r22, Z
    33ac:	71 81       	ldd	r23, Z+1	; 0x01
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33be:	88 23       	and	r24, r24
    33c0:	34 f4       	brge	.+12     	; 0x33ce <Lcd_SendCMD+0x360>
		__ticks = 1;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	fe 01       	movw	r30, r28
    33c6:	e0 5c       	subi	r30, 0xC0	; 192
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	80 83       	st	Z, r24
    33cc:	9d c0       	rjmp	.+314    	; 0x3508 <Lcd_SendCMD+0x49a>
	else if (__tmp > 255)
    33ce:	fe 01       	movw	r30, r28
    33d0:	ef 5b       	subi	r30, 0xBF	; 191
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4f e7       	ldi	r20, 0x7F	; 127
    33e2:	53 e4       	ldi	r21, 0x43	; 67
    33e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33e8:	18 16       	cp	r1, r24
    33ea:	0c f0       	brlt	.+2      	; 0x33ee <Lcd_SendCMD+0x380>
    33ec:	7e c0       	rjmp	.+252    	; 0x34ea <Lcd_SendCMD+0x47c>
	{
		_delay_ms(__us / 1000.0);
    33ee:	fe 01       	movw	r30, r28
    33f0:	eb 5b       	subi	r30, 0xBB	; 187
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	60 81       	ld	r22, Z
    33f6:	71 81       	ldd	r23, Z+1	; 0x01
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	93 81       	ldd	r25, Z+3	; 0x03
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	4a e7       	ldi	r20, 0x7A	; 122
    3402:	54 e4       	ldi	r21, 0x44	; 68
    3404:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	8c af       	std	Y+60, r24	; 0x3c
    340e:	9d af       	std	Y+61, r25	; 0x3d
    3410:	ae af       	std	Y+62, r26	; 0x3e
    3412:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3414:	6c ad       	ldd	r22, Y+60	; 0x3c
    3416:	7d ad       	ldd	r23, Y+61	; 0x3d
    3418:	8e ad       	ldd	r24, Y+62	; 0x3e
    341a:	9f ad       	ldd	r25, Y+63	; 0x3f
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4a e7       	ldi	r20, 0x7A	; 122
    3422:	55 e4       	ldi	r21, 0x45	; 69
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	88 af       	std	Y+56, r24	; 0x38
    342e:	99 af       	std	Y+57, r25	; 0x39
    3430:	aa af       	std	Y+58, r26	; 0x3a
    3432:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3434:	68 ad       	ldd	r22, Y+56	; 0x38
    3436:	79 ad       	ldd	r23, Y+57	; 0x39
    3438:	8a ad       	ldd	r24, Y+58	; 0x3a
    343a:	9b ad       	ldd	r25, Y+59	; 0x3b
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e8       	ldi	r20, 0x80	; 128
    3442:	5f e3       	ldi	r21, 0x3F	; 63
    3444:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3448:	88 23       	and	r24, r24
    344a:	2c f4       	brge	.+10     	; 0x3456 <Lcd_SendCMD+0x3e8>
		__ticks = 1;
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	9f ab       	std	Y+55, r25	; 0x37
    3452:	8e ab       	std	Y+54, r24	; 0x36
    3454:	3f c0       	rjmp	.+126    	; 0x34d4 <Lcd_SendCMD+0x466>
	else if (__tmp > 65535)
    3456:	68 ad       	ldd	r22, Y+56	; 0x38
    3458:	79 ad       	ldd	r23, Y+57	; 0x39
    345a:	8a ad       	ldd	r24, Y+58	; 0x3a
    345c:	9b ad       	ldd	r25, Y+59	; 0x3b
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	3f ef       	ldi	r19, 0xFF	; 255
    3462:	4f e7       	ldi	r20, 0x7F	; 127
    3464:	57 e4       	ldi	r21, 0x47	; 71
    3466:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    346a:	18 16       	cp	r1, r24
    346c:	4c f5       	brge	.+82     	; 0x34c0 <Lcd_SendCMD+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3470:	7d ad       	ldd	r23, Y+61	; 0x3d
    3472:	8e ad       	ldd	r24, Y+62	; 0x3e
    3474:	9f ad       	ldd	r25, Y+63	; 0x3f
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e2       	ldi	r20, 0x20	; 32
    347c:	51 e4       	ldi	r21, 0x41	; 65
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	bc 01       	movw	r22, r24
    3488:	cd 01       	movw	r24, r26
    348a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	9f ab       	std	Y+55, r25	; 0x37
    3494:	8e ab       	std	Y+54, r24	; 0x36
    3496:	0f c0       	rjmp	.+30     	; 0x34b6 <Lcd_SendCMD+0x448>
    3498:	80 e9       	ldi	r24, 0x90	; 144
    349a:	91 e0       	ldi	r25, 0x01	; 1
    349c:	9d ab       	std	Y+53, r25	; 0x35
    349e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34a0:	8c a9       	ldd	r24, Y+52	; 0x34
    34a2:	9d a9       	ldd	r25, Y+53	; 0x35
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	f1 f7       	brne	.-4      	; 0x34a4 <Lcd_SendCMD+0x436>
    34a8:	9d ab       	std	Y+53, r25	; 0x35
    34aa:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ac:	8e a9       	ldd	r24, Y+54	; 0x36
    34ae:	9f a9       	ldd	r25, Y+55	; 0x37
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	9f ab       	std	Y+55, r25	; 0x37
    34b4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b6:	8e a9       	ldd	r24, Y+54	; 0x36
    34b8:	9f a9       	ldd	r25, Y+55	; 0x37
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	69 f7       	brne	.-38     	; 0x3498 <Lcd_SendCMD+0x42a>
    34be:	2d c0       	rjmp	.+90     	; 0x351a <Lcd_SendCMD+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c0:	68 ad       	ldd	r22, Y+56	; 0x38
    34c2:	79 ad       	ldd	r23, Y+57	; 0x39
    34c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    34c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    34c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	9f ab       	std	Y+55, r25	; 0x37
    34d2:	8e ab       	std	Y+54, r24	; 0x36
    34d4:	8e a9       	ldd	r24, Y+54	; 0x36
    34d6:	9f a9       	ldd	r25, Y+55	; 0x37
    34d8:	9b ab       	std	Y+51, r25	; 0x33
    34da:	8a ab       	std	Y+50, r24	; 0x32
    34dc:	8a a9       	ldd	r24, Y+50	; 0x32
    34de:	9b a9       	ldd	r25, Y+51	; 0x33
    34e0:	01 97       	sbiw	r24, 0x01	; 1
    34e2:	f1 f7       	brne	.-4      	; 0x34e0 <Lcd_SendCMD+0x472>
    34e4:	9b ab       	std	Y+51, r25	; 0x33
    34e6:	8a ab       	std	Y+50, r24	; 0x32
    34e8:	18 c0       	rjmp	.+48     	; 0x351a <Lcd_SendCMD+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34ea:	fe 01       	movw	r30, r28
    34ec:	ef 5b       	subi	r30, 0xBF	; 191
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	60 81       	ld	r22, Z
    34f2:	71 81       	ldd	r23, Z+1	; 0x01
    34f4:	82 81       	ldd	r24, Z+2	; 0x02
    34f6:	93 81       	ldd	r25, Z+3	; 0x03
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	fe 01       	movw	r30, r28
    3502:	e0 5c       	subi	r30, 0xC0	; 192
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	80 83       	st	Z, r24
    3508:	fe 01       	movw	r30, r28
    350a:	e0 5c       	subi	r30, 0xC0	; 192
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	80 81       	ld	r24, Z
    3510:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3512:	89 a9       	ldd	r24, Y+49	; 0x31
    3514:	8a 95       	dec	r24
    3516:	f1 f7       	brne	.-4      	; 0x3514 <Lcd_SendCMD+0x4a6>
    3518:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 0));
    351a:	fe 01       	movw	r30, r28
    351c:	ef 59       	subi	r30, 0x9F	; 159
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	80 81       	ld	r24, Z
    3522:	98 2f       	mov	r25, r24
    3524:	91 70       	andi	r25, 0x01	; 1
    3526:	88 e0       	ldi	r24, 0x08	; 8
    3528:	69 2f       	mov	r22, r25
    352a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 1));
    352e:	fe 01       	movw	r30, r28
    3530:	ef 59       	subi	r30, 0x9F	; 159
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	80 81       	ld	r24, Z
    3536:	86 95       	lsr	r24
    3538:	98 2f       	mov	r25, r24
    353a:	91 70       	andi	r25, 0x01	; 1
    353c:	89 e0       	ldi	r24, 0x09	; 9
    353e:	69 2f       	mov	r22, r25
    3540:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 2));
    3544:	fe 01       	movw	r30, r28
    3546:	ef 59       	subi	r30, 0x9F	; 159
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	80 81       	ld	r24, Z
    354c:	86 95       	lsr	r24
    354e:	86 95       	lsr	r24
    3550:	98 2f       	mov	r25, r24
    3552:	91 70       	andi	r25, 0x01	; 1
    3554:	8a e0       	ldi	r24, 0x0A	; 10
    3556:	69 2f       	mov	r22, r25
    3558:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 3));
    355c:	fe 01       	movw	r30, r28
    355e:	ef 59       	subi	r30, 0x9F	; 159
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 81       	ld	r24, Z
    3564:	86 95       	lsr	r24
    3566:	86 95       	lsr	r24
    3568:	86 95       	lsr	r24
    356a:	98 2f       	mov	r25, r24
    356c:	91 70       	andi	r25, 0x01	; 1
    356e:	8c e0       	ldi	r24, 0x0C	; 12
    3570:	69 2f       	mov	r22, r25
    3572:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3576:	82 e0       	ldi	r24, 0x02	; 2
    3578:	61 e0       	ldi	r22, 0x01	; 1
    357a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	a0 e8       	ldi	r26, 0x80	; 128
    3584:	bf e3       	ldi	r27, 0x3F	; 63
    3586:	8d a7       	std	Y+45, r24	; 0x2d
    3588:	9e a7       	std	Y+46, r25	; 0x2e
    358a:	af a7       	std	Y+47, r26	; 0x2f
    358c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    358e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3590:	7e a5       	ldd	r23, Y+46	; 0x2e
    3592:	8f a5       	ldd	r24, Y+47	; 0x2f
    3594:	98 a9       	ldd	r25, Y+48	; 0x30
    3596:	2b ea       	ldi	r18, 0xAB	; 171
    3598:	3a ea       	ldi	r19, 0xAA	; 170
    359a:	4a ea       	ldi	r20, 0xAA	; 170
    359c:	50 e4       	ldi	r21, 0x40	; 64
    359e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	89 a7       	std	Y+41, r24	; 0x29
    35a8:	9a a7       	std	Y+42, r25	; 0x2a
    35aa:	ab a7       	std	Y+43, r26	; 0x2b
    35ac:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    35ae:	69 a5       	ldd	r22, Y+41	; 0x29
    35b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    35b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    35b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e8       	ldi	r20, 0x80	; 128
    35bc:	5f e3       	ldi	r21, 0x3F	; 63
    35be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    35c2:	88 23       	and	r24, r24
    35c4:	1c f4       	brge	.+6      	; 0x35cc <Lcd_SendCMD+0x55e>
		__ticks = 1;
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	88 a7       	std	Y+40, r24	; 0x28
    35ca:	91 c0       	rjmp	.+290    	; 0x36ee <Lcd_SendCMD+0x680>
	else if (__tmp > 255)
    35cc:	69 a5       	ldd	r22, Y+41	; 0x29
    35ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    35d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    35d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	4f e7       	ldi	r20, 0x7F	; 127
    35da:	53 e4       	ldi	r21, 0x43	; 67
    35dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35e0:	18 16       	cp	r1, r24
    35e2:	0c f0       	brlt	.+2      	; 0x35e6 <Lcd_SendCMD+0x578>
    35e4:	7b c0       	rjmp	.+246    	; 0x36dc <Lcd_SendCMD+0x66e>
	{
		_delay_ms(__us / 1000.0);
    35e6:	6d a5       	ldd	r22, Y+45	; 0x2d
    35e8:	7e a5       	ldd	r23, Y+46	; 0x2e
    35ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ec:	98 a9       	ldd	r25, Y+48	; 0x30
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	4a e7       	ldi	r20, 0x7A	; 122
    35f4:	54 e4       	ldi	r21, 0x44	; 68
    35f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	8c a3       	std	Y+36, r24	; 0x24
    3600:	9d a3       	std	Y+37, r25	; 0x25
    3602:	ae a3       	std	Y+38, r26	; 0x26
    3604:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3606:	6c a1       	ldd	r22, Y+36	; 0x24
    3608:	7d a1       	ldd	r23, Y+37	; 0x25
    360a:	8e a1       	ldd	r24, Y+38	; 0x26
    360c:	9f a1       	ldd	r25, Y+39	; 0x27
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	4a e7       	ldi	r20, 0x7A	; 122
    3614:	55 e4       	ldi	r21, 0x45	; 69
    3616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	88 a3       	std	Y+32, r24	; 0x20
    3620:	99 a3       	std	Y+33, r25	; 0x21
    3622:	aa a3       	std	Y+34, r26	; 0x22
    3624:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3626:	68 a1       	ldd	r22, Y+32	; 0x20
    3628:	79 a1       	ldd	r23, Y+33	; 0x21
    362a:	8a a1       	ldd	r24, Y+34	; 0x22
    362c:	9b a1       	ldd	r25, Y+35	; 0x23
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e8       	ldi	r20, 0x80	; 128
    3634:	5f e3       	ldi	r21, 0x3F	; 63
    3636:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    363a:	88 23       	and	r24, r24
    363c:	2c f4       	brge	.+10     	; 0x3648 <Lcd_SendCMD+0x5da>
		__ticks = 1;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	9f 8f       	std	Y+31, r25	; 0x1f
    3644:	8e 8f       	std	Y+30, r24	; 0x1e
    3646:	3f c0       	rjmp	.+126    	; 0x36c6 <Lcd_SendCMD+0x658>
	else if (__tmp > 65535)
    3648:	68 a1       	ldd	r22, Y+32	; 0x20
    364a:	79 a1       	ldd	r23, Y+33	; 0x21
    364c:	8a a1       	ldd	r24, Y+34	; 0x22
    364e:	9b a1       	ldd	r25, Y+35	; 0x23
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	3f ef       	ldi	r19, 0xFF	; 255
    3654:	4f e7       	ldi	r20, 0x7F	; 127
    3656:	57 e4       	ldi	r21, 0x47	; 71
    3658:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    365c:	18 16       	cp	r1, r24
    365e:	4c f5       	brge	.+82     	; 0x36b2 <Lcd_SendCMD+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3660:	6c a1       	ldd	r22, Y+36	; 0x24
    3662:	7d a1       	ldd	r23, Y+37	; 0x25
    3664:	8e a1       	ldd	r24, Y+38	; 0x26
    3666:	9f a1       	ldd	r25, Y+39	; 0x27
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e2       	ldi	r20, 0x20	; 32
    366e:	51 e4       	ldi	r21, 0x41	; 65
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	bc 01       	movw	r22, r24
    367a:	cd 01       	movw	r24, r26
    367c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	9f 8f       	std	Y+31, r25	; 0x1f
    3686:	8e 8f       	std	Y+30, r24	; 0x1e
    3688:	0f c0       	rjmp	.+30     	; 0x36a8 <Lcd_SendCMD+0x63a>
    368a:	80 e9       	ldi	r24, 0x90	; 144
    368c:	91 e0       	ldi	r25, 0x01	; 1
    368e:	9d 8f       	std	Y+29, r25	; 0x1d
    3690:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3692:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3694:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <Lcd_SendCMD+0x628>
    369a:	9d 8f       	std	Y+29, r25	; 0x1d
    369c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	9f 8f       	std	Y+31, r25	; 0x1f
    36a6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	69 f7       	brne	.-38     	; 0x368a <Lcd_SendCMD+0x61c>
    36b0:	24 c0       	rjmp	.+72     	; 0x36fa <Lcd_SendCMD+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b2:	68 a1       	ldd	r22, Y+32	; 0x20
    36b4:	79 a1       	ldd	r23, Y+33	; 0x21
    36b6:	8a a1       	ldd	r24, Y+34	; 0x22
    36b8:	9b a1       	ldd	r25, Y+35	; 0x23
    36ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	9f 8f       	std	Y+31, r25	; 0x1f
    36c4:	8e 8f       	std	Y+30, r24	; 0x1e
    36c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    36ca:	9b 8f       	std	Y+27, r25	; 0x1b
    36cc:	8a 8f       	std	Y+26, r24	; 0x1a
    36ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    36d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	f1 f7       	brne	.-4      	; 0x36d2 <Lcd_SendCMD+0x664>
    36d6:	9b 8f       	std	Y+27, r25	; 0x1b
    36d8:	8a 8f       	std	Y+26, r24	; 0x1a
    36da:	0f c0       	rjmp	.+30     	; 0x36fa <Lcd_SendCMD+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36dc:	69 a5       	ldd	r22, Y+41	; 0x29
    36de:	7a a5       	ldd	r23, Y+42	; 0x2a
    36e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    36e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    36e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	88 a7       	std	Y+40, r24	; 0x28
    36ee:	88 a5       	ldd	r24, Y+40	; 0x28
    36f0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36f2:	89 8d       	ldd	r24, Y+25	; 0x19
    36f4:	8a 95       	dec	r24
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <Lcd_SendCMD+0x686>
    36f8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    36fa:	82 e0       	ldi	r24, 0x02	; 2
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a0 e8       	ldi	r26, 0x80	; 128
    3708:	bf e3       	ldi	r27, 0x3F	; 63
    370a:	8d 8b       	std	Y+21, r24	; 0x15
    370c:	9e 8b       	std	Y+22, r25	; 0x16
    370e:	af 8b       	std	Y+23, r26	; 0x17
    3710:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3712:	6d 89       	ldd	r22, Y+21	; 0x15
    3714:	7e 89       	ldd	r23, Y+22	; 0x16
    3716:	8f 89       	ldd	r24, Y+23	; 0x17
    3718:	98 8d       	ldd	r25, Y+24	; 0x18
    371a:	2b ea       	ldi	r18, 0xAB	; 171
    371c:	3a ea       	ldi	r19, 0xAA	; 170
    371e:	4a ea       	ldi	r20, 0xAA	; 170
    3720:	50 e4       	ldi	r21, 0x40	; 64
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	89 8b       	std	Y+17, r24	; 0x11
    372c:	9a 8b       	std	Y+18, r25	; 0x12
    372e:	ab 8b       	std	Y+19, r26	; 0x13
    3730:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3732:	69 89       	ldd	r22, Y+17	; 0x11
    3734:	7a 89       	ldd	r23, Y+18	; 0x12
    3736:	8b 89       	ldd	r24, Y+19	; 0x13
    3738:	9c 89       	ldd	r25, Y+20	; 0x14
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e8       	ldi	r20, 0x80	; 128
    3740:	5f e3       	ldi	r21, 0x3F	; 63
    3742:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3746:	88 23       	and	r24, r24
    3748:	1c f4       	brge	.+6      	; 0x3750 <Lcd_SendCMD+0x6e2>
		__ticks = 1;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	88 8b       	std	Y+16, r24	; 0x10
    374e:	91 c0       	rjmp	.+290    	; 0x3872 <Lcd_SendCMD+0x804>
	else if (__tmp > 255)
    3750:	69 89       	ldd	r22, Y+17	; 0x11
    3752:	7a 89       	ldd	r23, Y+18	; 0x12
    3754:	8b 89       	ldd	r24, Y+19	; 0x13
    3756:	9c 89       	ldd	r25, Y+20	; 0x14
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	4f e7       	ldi	r20, 0x7F	; 127
    375e:	53 e4       	ldi	r21, 0x43	; 67
    3760:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3764:	18 16       	cp	r1, r24
    3766:	0c f0       	brlt	.+2      	; 0x376a <Lcd_SendCMD+0x6fc>
    3768:	7b c0       	rjmp	.+246    	; 0x3860 <Lcd_SendCMD+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    376a:	6d 89       	ldd	r22, Y+21	; 0x15
    376c:	7e 89       	ldd	r23, Y+22	; 0x16
    376e:	8f 89       	ldd	r24, Y+23	; 0x17
    3770:	98 8d       	ldd	r25, Y+24	; 0x18
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4a e7       	ldi	r20, 0x7A	; 122
    3778:	54 e4       	ldi	r21, 0x44	; 68
    377a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	8c 87       	std	Y+12, r24	; 0x0c
    3784:	9d 87       	std	Y+13, r25	; 0x0d
    3786:	ae 87       	std	Y+14, r26	; 0x0e
    3788:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378a:	6c 85       	ldd	r22, Y+12	; 0x0c
    378c:	7d 85       	ldd	r23, Y+13	; 0x0d
    378e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3790:	9f 85       	ldd	r25, Y+15	; 0x0f
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	4a e7       	ldi	r20, 0x7A	; 122
    3798:	55 e4       	ldi	r21, 0x45	; 69
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	88 87       	std	Y+8, r24	; 0x08
    37a4:	99 87       	std	Y+9, r25	; 0x09
    37a6:	aa 87       	std	Y+10, r26	; 0x0a
    37a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    37aa:	68 85       	ldd	r22, Y+8	; 0x08
    37ac:	79 85       	ldd	r23, Y+9	; 0x09
    37ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    37b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	40 e8       	ldi	r20, 0x80	; 128
    37b8:	5f e3       	ldi	r21, 0x3F	; 63
    37ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37be:	88 23       	and	r24, r24
    37c0:	2c f4       	brge	.+10     	; 0x37cc <Lcd_SendCMD+0x75e>
		__ticks = 1;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	9f 83       	std	Y+7, r25	; 0x07
    37c8:	8e 83       	std	Y+6, r24	; 0x06
    37ca:	3f c0       	rjmp	.+126    	; 0x384a <Lcd_SendCMD+0x7dc>
	else if (__tmp > 65535)
    37cc:	68 85       	ldd	r22, Y+8	; 0x08
    37ce:	79 85       	ldd	r23, Y+9	; 0x09
    37d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    37d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	3f ef       	ldi	r19, 0xFF	; 255
    37d8:	4f e7       	ldi	r20, 0x7F	; 127
    37da:	57 e4       	ldi	r21, 0x47	; 71
    37dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37e0:	18 16       	cp	r1, r24
    37e2:	4c f5       	brge	.+82     	; 0x3836 <Lcd_SendCMD+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    37e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    37e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    37ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e2       	ldi	r20, 0x20	; 32
    37f2:	51 e4       	ldi	r21, 0x41	; 65
    37f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	bc 01       	movw	r22, r24
    37fe:	cd 01       	movw	r24, r26
    3800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	9f 83       	std	Y+7, r25	; 0x07
    380a:	8e 83       	std	Y+6, r24	; 0x06
    380c:	0f c0       	rjmp	.+30     	; 0x382c <Lcd_SendCMD+0x7be>
    380e:	80 e9       	ldi	r24, 0x90	; 144
    3810:	91 e0       	ldi	r25, 0x01	; 1
    3812:	9d 83       	std	Y+5, r25	; 0x05
    3814:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3816:	8c 81       	ldd	r24, Y+4	; 0x04
    3818:	9d 81       	ldd	r25, Y+5	; 0x05
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	f1 f7       	brne	.-4      	; 0x381a <Lcd_SendCMD+0x7ac>
    381e:	9d 83       	std	Y+5, r25	; 0x05
    3820:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3822:	8e 81       	ldd	r24, Y+6	; 0x06
    3824:	9f 81       	ldd	r25, Y+7	; 0x07
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	9f 83       	std	Y+7, r25	; 0x07
    382a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382c:	8e 81       	ldd	r24, Y+6	; 0x06
    382e:	9f 81       	ldd	r25, Y+7	; 0x07
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	69 f7       	brne	.-38     	; 0x380e <Lcd_SendCMD+0x7a0>
    3834:	24 c0       	rjmp	.+72     	; 0x387e <Lcd_SendCMD+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3836:	68 85       	ldd	r22, Y+8	; 0x08
    3838:	79 85       	ldd	r23, Y+9	; 0x09
    383a:	8a 85       	ldd	r24, Y+10	; 0x0a
    383c:	9b 85       	ldd	r25, Y+11	; 0x0b
    383e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	9f 83       	std	Y+7, r25	; 0x07
    3848:	8e 83       	std	Y+6, r24	; 0x06
    384a:	8e 81       	ldd	r24, Y+6	; 0x06
    384c:	9f 81       	ldd	r25, Y+7	; 0x07
    384e:	9b 83       	std	Y+3, r25	; 0x03
    3850:	8a 83       	std	Y+2, r24	; 0x02
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	f1 f7       	brne	.-4      	; 0x3856 <Lcd_SendCMD+0x7e8>
    385a:	9b 83       	std	Y+3, r25	; 0x03
    385c:	8a 83       	std	Y+2, r24	; 0x02
    385e:	0f c0       	rjmp	.+30     	; 0x387e <Lcd_SendCMD+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3860:	69 89       	ldd	r22, Y+17	; 0x11
    3862:	7a 89       	ldd	r23, Y+18	; 0x12
    3864:	8b 89       	ldd	r24, Y+19	; 0x13
    3866:	9c 89       	ldd	r25, Y+20	; 0x14
    3868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	88 8b       	std	Y+16, r24	; 0x10
    3872:	88 89       	ldd	r24, Y+16	; 0x10
    3874:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	8a 95       	dec	r24
    387a:	f1 f7       	brne	.-4      	; 0x3878 <Lcd_SendCMD+0x80a>
    387c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);  // Wait for the command to execute
}
    387e:	cf 59       	subi	r28, 0x9F	; 159
    3880:	df 4f       	sbci	r29, 0xFF	; 255
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	08 95       	ret

00003896 <Lcd_SendData>:

void Lcd_SendData(u8 data) {
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
    38a2:	c1 56       	subi	r28, 0x61	; 97
    38a4:	d0 40       	sbci	r29, 0x00	; 0
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	f8 94       	cli
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	cd bf       	out	0x3d, r28	; 61
    38b0:	fe 01       	movw	r30, r28
    38b2:	ef 59       	subi	r30, 0x9F	; 159
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 83       	st	Z, r24

	// Set RS to data mode
//	SET_BIT(PORTA, LCD_RS);
	Dio_WriteChannel(LCD_RS, STD_HIGH);
    38b8:	83 e0       	ldi	r24, 0x03	; 3
    38ba:	61 e0       	ldi	r22, 0x01	; 1
    38bc:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	// Send the high nibble

	Dio_WriteChannel(PB_0, GET_BIT(data, 4));
    38c0:	fe 01       	movw	r30, r28
    38c2:	ef 59       	subi	r30, 0x9F	; 159
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 81       	ld	r24, Z
    38c8:	82 95       	swap	r24
    38ca:	8f 70       	andi	r24, 0x0F	; 15
    38cc:	98 2f       	mov	r25, r24
    38ce:	91 70       	andi	r25, 0x01	; 1
    38d0:	88 e0       	ldi	r24, 0x08	; 8
    38d2:	69 2f       	mov	r22, r25
    38d4:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 5));
    38d8:	fe 01       	movw	r30, r28
    38da:	ef 59       	subi	r30, 0x9F	; 159
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	80 81       	ld	r24, Z
    38e0:	82 95       	swap	r24
    38e2:	86 95       	lsr	r24
    38e4:	87 70       	andi	r24, 0x07	; 7
    38e6:	98 2f       	mov	r25, r24
    38e8:	91 70       	andi	r25, 0x01	; 1
    38ea:	89 e0       	ldi	r24, 0x09	; 9
    38ec:	69 2f       	mov	r22, r25
    38ee:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 6));
    38f2:	fe 01       	movw	r30, r28
    38f4:	ef 59       	subi	r30, 0x9F	; 159
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	80 81       	ld	r24, Z
    38fa:	82 95       	swap	r24
    38fc:	86 95       	lsr	r24
    38fe:	86 95       	lsr	r24
    3900:	83 70       	andi	r24, 0x03	; 3
    3902:	98 2f       	mov	r25, r24
    3904:	91 70       	andi	r25, 0x01	; 1
    3906:	8a e0       	ldi	r24, 0x0A	; 10
    3908:	69 2f       	mov	r22, r25
    390a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 7));
    390e:	fe 01       	movw	r30, r28
    3910:	ef 59       	subi	r30, 0x9F	; 159
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 81       	ld	r24, Z
    3916:	98 2f       	mov	r25, r24
    3918:	99 1f       	adc	r25, r25
    391a:	99 27       	eor	r25, r25
    391c:	99 1f       	adc	r25, r25
    391e:	8c e0       	ldi	r24, 0x0C	; 12
    3920:	69 2f       	mov	r22, r25
    3922:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3926:	82 e0       	ldi	r24, 0x02	; 2
    3928:	61 e0       	ldi	r22, 0x01	; 1
    392a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
    392e:	fe 01       	movw	r30, r28
    3930:	e3 5a       	subi	r30, 0xA3	; 163
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	a0 e8       	ldi	r26, 0x80	; 128
    393a:	bf e3       	ldi	r27, 0x3F	; 63
    393c:	80 83       	st	Z, r24
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	a2 83       	std	Z+2, r26	; 0x02
    3942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3944:	8e 01       	movw	r16, r28
    3946:	07 5a       	subi	r16, 0xA7	; 167
    3948:	1f 4f       	sbci	r17, 0xFF	; 255
    394a:	fe 01       	movw	r30, r28
    394c:	e3 5a       	subi	r30, 0xA3	; 163
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	60 81       	ld	r22, Z
    3952:	71 81       	ldd	r23, Z+1	; 0x01
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	2b ea       	ldi	r18, 0xAB	; 171
    395a:	3a ea       	ldi	r19, 0xAA	; 170
    395c:	4a ea       	ldi	r20, 0xAA	; 170
    395e:	50 e4       	ldi	r21, 0x40	; 64
    3960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	f8 01       	movw	r30, r16
    396a:	80 83       	st	Z, r24
    396c:	91 83       	std	Z+1, r25	; 0x01
    396e:	a2 83       	std	Z+2, r26	; 0x02
    3970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3972:	fe 01       	movw	r30, r28
    3974:	e7 5a       	subi	r30, 0xA7	; 167
    3976:	ff 4f       	sbci	r31, 0xFF	; 255
    3978:	60 81       	ld	r22, Z
    397a:	71 81       	ldd	r23, Z+1	; 0x01
    397c:	82 81       	ldd	r24, Z+2	; 0x02
    397e:	93 81       	ldd	r25, Z+3	; 0x03
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e8       	ldi	r20, 0x80	; 128
    3986:	5f e3       	ldi	r21, 0x3F	; 63
    3988:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    398c:	88 23       	and	r24, r24
    398e:	34 f4       	brge	.+12     	; 0x399c <Lcd_SendData+0x106>
		__ticks = 1;
    3990:	fe 01       	movw	r30, r28
    3992:	e8 5a       	subi	r30, 0xA8	; 168
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	80 83       	st	Z, r24
    399a:	e0 c0       	rjmp	.+448    	; 0x3b5c <Lcd_SendData+0x2c6>
	else if (__tmp > 255)
    399c:	fe 01       	movw	r30, r28
    399e:	e7 5a       	subi	r30, 0xA7	; 167
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	60 81       	ld	r22, Z
    39a4:	71 81       	ldd	r23, Z+1	; 0x01
    39a6:	82 81       	ldd	r24, Z+2	; 0x02
    39a8:	93 81       	ldd	r25, Z+3	; 0x03
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	4f e7       	ldi	r20, 0x7F	; 127
    39b0:	53 e4       	ldi	r21, 0x43	; 67
    39b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39b6:	18 16       	cp	r1, r24
    39b8:	0c f0       	brlt	.+2      	; 0x39bc <Lcd_SendData+0x126>
    39ba:	c0 c0       	rjmp	.+384    	; 0x3b3c <Lcd_SendData+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    39bc:	fe 01       	movw	r30, r28
    39be:	e3 5a       	subi	r30, 0xA3	; 163
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	4a e7       	ldi	r20, 0x7A	; 122
    39d0:	54 e4       	ldi	r21, 0x44	; 68
    39d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	fe 01       	movw	r30, r28
    39dc:	ec 5a       	subi	r30, 0xAC	; 172
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	80 83       	st	Z, r24
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	a2 83       	std	Z+2, r26	; 0x02
    39e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e8:	8e 01       	movw	r16, r28
    39ea:	00 5b       	subi	r16, 0xB0	; 176
    39ec:	1f 4f       	sbci	r17, 0xFF	; 255
    39ee:	fe 01       	movw	r30, r28
    39f0:	ec 5a       	subi	r30, 0xAC	; 172
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	60 81       	ld	r22, Z
    39f6:	71 81       	ldd	r23, Z+1	; 0x01
    39f8:	82 81       	ldd	r24, Z+2	; 0x02
    39fa:	93 81       	ldd	r25, Z+3	; 0x03
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	4a e7       	ldi	r20, 0x7A	; 122
    3a02:	55 e4       	ldi	r21, 0x45	; 69
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	f8 01       	movw	r30, r16
    3a0e:	80 83       	st	Z, r24
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	a2 83       	std	Z+2, r26	; 0x02
    3a14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a16:	fe 01       	movw	r30, r28
    3a18:	e0 5b       	subi	r30, 0xB0	; 176
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	60 81       	ld	r22, Z
    3a1e:	71 81       	ldd	r23, Z+1	; 0x01
    3a20:	82 81       	ldd	r24, Z+2	; 0x02
    3a22:	93 81       	ldd	r25, Z+3	; 0x03
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e8       	ldi	r20, 0x80	; 128
    3a2a:	5f e3       	ldi	r21, 0x3F	; 63
    3a2c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a30:	88 23       	and	r24, r24
    3a32:	44 f4       	brge	.+16     	; 0x3a44 <Lcd_SendData+0x1ae>
		__ticks = 1;
    3a34:	fe 01       	movw	r30, r28
    3a36:	e2 5b       	subi	r30, 0xB2	; 178
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	80 83       	st	Z, r24
    3a42:	64 c0       	rjmp	.+200    	; 0x3b0c <Lcd_SendData+0x276>
	else if (__tmp > 65535)
    3a44:	fe 01       	movw	r30, r28
    3a46:	e0 5b       	subi	r30, 0xB0	; 176
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	60 81       	ld	r22, Z
    3a4c:	71 81       	ldd	r23, Z+1	; 0x01
    3a4e:	82 81       	ldd	r24, Z+2	; 0x02
    3a50:	93 81       	ldd	r25, Z+3	; 0x03
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	3f ef       	ldi	r19, 0xFF	; 255
    3a56:	4f e7       	ldi	r20, 0x7F	; 127
    3a58:	57 e4       	ldi	r21, 0x47	; 71
    3a5a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a5e:	18 16       	cp	r1, r24
    3a60:	0c f0       	brlt	.+2      	; 0x3a64 <Lcd_SendData+0x1ce>
    3a62:	43 c0       	rjmp	.+134    	; 0x3aea <Lcd_SendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a64:	fe 01       	movw	r30, r28
    3a66:	ec 5a       	subi	r30, 0xAC	; 172
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	60 81       	ld	r22, Z
    3a6c:	71 81       	ldd	r23, Z+1	; 0x01
    3a6e:	82 81       	ldd	r24, Z+2	; 0x02
    3a70:	93 81       	ldd	r25, Z+3	; 0x03
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e2       	ldi	r20, 0x20	; 32
    3a78:	51 e4       	ldi	r21, 0x41	; 65
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	8e 01       	movw	r16, r28
    3a84:	02 5b       	subi	r16, 0xB2	; 178
    3a86:	1f 4f       	sbci	r17, 0xFF	; 255
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	f8 01       	movw	r30, r16
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	1f c0       	rjmp	.+62     	; 0x3ada <Lcd_SendData+0x244>
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	e4 5b       	subi	r30, 0xB4	; 180
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	80 e9       	ldi	r24, 0x90	; 144
    3aa4:	91 e0       	ldi	r25, 0x01	; 1
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e4 5b       	subi	r30, 0xB4	; 180
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 81       	ld	r24, Z
    3ab2:	91 81       	ldd	r25, Z+1	; 0x01
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <Lcd_SendData+0x21e>
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e4 5b       	subi	r30, 0xB4	; 180
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	91 83       	std	Z+1, r25	; 0x01
    3ac0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	de 01       	movw	r26, r28
    3ac4:	a2 5b       	subi	r26, 0xB2	; 178
    3ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e2 5b       	subi	r30, 0xB2	; 178
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 81       	ld	r24, Z
    3ad0:	91 81       	ldd	r25, Z+1	; 0x01
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	11 96       	adiw	r26, 0x01	; 1
    3ad6:	9c 93       	st	X, r25
    3ad8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ada:	fe 01       	movw	r30, r28
    3adc:	e2 5b       	subi	r30, 0xB2	; 178
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	80 81       	ld	r24, Z
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	00 97       	sbiw	r24, 0x00	; 0
    3ae6:	d1 f6       	brne	.-76     	; 0x3a9c <Lcd_SendData+0x206>
    3ae8:	4b c0       	rjmp	.+150    	; 0x3b80 <Lcd_SendData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aea:	8e 01       	movw	r16, r28
    3aec:	02 5b       	subi	r16, 0xB2	; 178
    3aee:	1f 4f       	sbci	r17, 0xFF	; 255
    3af0:	fe 01       	movw	r30, r28
    3af2:	e0 5b       	subi	r30, 0xB0	; 176
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	60 81       	ld	r22, Z
    3af8:	71 81       	ldd	r23, Z+1	; 0x01
    3afa:	82 81       	ldd	r24, Z+2	; 0x02
    3afc:	93 81       	ldd	r25, Z+3	; 0x03
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	f8 01       	movw	r30, r16
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	80 83       	st	Z, r24
    3b0c:	de 01       	movw	r26, r28
    3b0e:	a6 5b       	subi	r26, 0xB6	; 182
    3b10:	bf 4f       	sbci	r27, 0xFF	; 255
    3b12:	fe 01       	movw	r30, r28
    3b14:	e2 5b       	subi	r30, 0xB2	; 178
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	80 81       	ld	r24, Z
    3b1a:	91 81       	ldd	r25, Z+1	; 0x01
    3b1c:	11 96       	adiw	r26, 0x01	; 1
    3b1e:	9c 93       	st	X, r25
    3b20:	8e 93       	st	-X, r24
    3b22:	fe 01       	movw	r30, r28
    3b24:	e6 5b       	subi	r30, 0xB6	; 182
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	80 81       	ld	r24, Z
    3b2a:	91 81       	ldd	r25, Z+1	; 0x01
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	f1 f7       	brne	.-4      	; 0x3b2c <Lcd_SendData+0x296>
    3b30:	fe 01       	movw	r30, r28
    3b32:	e6 5b       	subi	r30, 0xB6	; 182
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	91 83       	std	Z+1, r25	; 0x01
    3b38:	80 83       	st	Z, r24
    3b3a:	22 c0       	rjmp	.+68     	; 0x3b80 <Lcd_SendData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b3c:	8e 01       	movw	r16, r28
    3b3e:	08 5a       	subi	r16, 0xA8	; 168
    3b40:	1f 4f       	sbci	r17, 0xFF	; 255
    3b42:	fe 01       	movw	r30, r28
    3b44:	e7 5a       	subi	r30, 0xA7	; 167
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	f8 01       	movw	r30, r16
    3b5a:	80 83       	st	Z, r24
    3b5c:	de 01       	movw	r26, r28
    3b5e:	a7 5b       	subi	r26, 0xB7	; 183
    3b60:	bf 4f       	sbci	r27, 0xFF	; 255
    3b62:	fe 01       	movw	r30, r28
    3b64:	e8 5a       	subi	r30, 0xA8	; 168
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	80 81       	ld	r24, Z
    3b6a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e7 5b       	subi	r30, 0xB7	; 183
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	80 81       	ld	r24, Z
    3b74:	8a 95       	dec	r24
    3b76:	f1 f7       	brne	.-4      	; 0x3b74 <Lcd_SendData+0x2de>
    3b78:	fe 01       	movw	r30, r28
    3b7a:	e7 5b       	subi	r30, 0xB7	; 183
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3b80:	82 e0       	ldi	r24, 0x02	; 2
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
    3b88:	fe 01       	movw	r30, r28
    3b8a:	eb 5b       	subi	r30, 0xBB	; 187
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	a0 e8       	ldi	r26, 0x80	; 128
    3b94:	bf e3       	ldi	r27, 0x3F	; 63
    3b96:	80 83       	st	Z, r24
    3b98:	91 83       	std	Z+1, r25	; 0x01
    3b9a:	a2 83       	std	Z+2, r26	; 0x02
    3b9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b9e:	8e 01       	movw	r16, r28
    3ba0:	0f 5b       	subi	r16, 0xBF	; 191
    3ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	eb 5b       	subi	r30, 0xBB	; 187
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	60 81       	ld	r22, Z
    3bac:	71 81       	ldd	r23, Z+1	; 0x01
    3bae:	82 81       	ldd	r24, Z+2	; 0x02
    3bb0:	93 81       	ldd	r25, Z+3	; 0x03
    3bb2:	2b ea       	ldi	r18, 0xAB	; 171
    3bb4:	3a ea       	ldi	r19, 0xAA	; 170
    3bb6:	4a ea       	ldi	r20, 0xAA	; 170
    3bb8:	50 e4       	ldi	r21, 0x40	; 64
    3bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	f8 01       	movw	r30, r16
    3bc4:	80 83       	st	Z, r24
    3bc6:	91 83       	std	Z+1, r25	; 0x01
    3bc8:	a2 83       	std	Z+2, r26	; 0x02
    3bca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bcc:	fe 01       	movw	r30, r28
    3bce:	ef 5b       	subi	r30, 0xBF	; 191
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	60 81       	ld	r22, Z
    3bd4:	71 81       	ldd	r23, Z+1	; 0x01
    3bd6:	82 81       	ldd	r24, Z+2	; 0x02
    3bd8:	93 81       	ldd	r25, Z+3	; 0x03
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e8       	ldi	r20, 0x80	; 128
    3be0:	5f e3       	ldi	r21, 0x3F	; 63
    3be2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3be6:	88 23       	and	r24, r24
    3be8:	34 f4       	brge	.+12     	; 0x3bf6 <Lcd_SendData+0x360>
		__ticks = 1;
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	fe 01       	movw	r30, r28
    3bee:	e0 5c       	subi	r30, 0xC0	; 192
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	80 83       	st	Z, r24
    3bf4:	9d c0       	rjmp	.+314    	; 0x3d30 <Lcd_SendData+0x49a>
	else if (__tmp > 255)
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	ef 5b       	subi	r30, 0xBF	; 191
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	60 81       	ld	r22, Z
    3bfe:	71 81       	ldd	r23, Z+1	; 0x01
    3c00:	82 81       	ldd	r24, Z+2	; 0x02
    3c02:	93 81       	ldd	r25, Z+3	; 0x03
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	4f e7       	ldi	r20, 0x7F	; 127
    3c0a:	53 e4       	ldi	r21, 0x43	; 67
    3c0c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c10:	18 16       	cp	r1, r24
    3c12:	0c f0       	brlt	.+2      	; 0x3c16 <Lcd_SendData+0x380>
    3c14:	7e c0       	rjmp	.+252    	; 0x3d12 <Lcd_SendData+0x47c>
	{
		_delay_ms(__us / 1000.0);
    3c16:	fe 01       	movw	r30, r28
    3c18:	eb 5b       	subi	r30, 0xBB	; 187
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	60 81       	ld	r22, Z
    3c1e:	71 81       	ldd	r23, Z+1	; 0x01
    3c20:	82 81       	ldd	r24, Z+2	; 0x02
    3c22:	93 81       	ldd	r25, Z+3	; 0x03
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	4a e7       	ldi	r20, 0x7A	; 122
    3c2a:	54 e4       	ldi	r21, 0x44	; 68
    3c2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	8c af       	std	Y+60, r24	; 0x3c
    3c36:	9d af       	std	Y+61, r25	; 0x3d
    3c38:	ae af       	std	Y+62, r26	; 0x3e
    3c3a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3c3e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3c40:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c42:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a e7       	ldi	r20, 0x7A	; 122
    3c4a:	55 e4       	ldi	r21, 0x45	; 69
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	88 af       	std	Y+56, r24	; 0x38
    3c56:	99 af       	std	Y+57, r25	; 0x39
    3c58:	aa af       	std	Y+58, r26	; 0x3a
    3c5a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3c5c:	68 ad       	ldd	r22, Y+56	; 0x38
    3c5e:	79 ad       	ldd	r23, Y+57	; 0x39
    3c60:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c62:	9b ad       	ldd	r25, Y+59	; 0x3b
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e8       	ldi	r20, 0x80	; 128
    3c6a:	5f e3       	ldi	r21, 0x3F	; 63
    3c6c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c70:	88 23       	and	r24, r24
    3c72:	2c f4       	brge	.+10     	; 0x3c7e <Lcd_SendData+0x3e8>
		__ticks = 1;
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9f ab       	std	Y+55, r25	; 0x37
    3c7a:	8e ab       	std	Y+54, r24	; 0x36
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <Lcd_SendData+0x466>
	else if (__tmp > 65535)
    3c7e:	68 ad       	ldd	r22, Y+56	; 0x38
    3c80:	79 ad       	ldd	r23, Y+57	; 0x39
    3c82:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c84:	9b ad       	ldd	r25, Y+59	; 0x3b
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	3f ef       	ldi	r19, 0xFF	; 255
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	57 e4       	ldi	r21, 0x47	; 71
    3c8e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c92:	18 16       	cp	r1, r24
    3c94:	4c f5       	brge	.+82     	; 0x3ce8 <Lcd_SendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c96:	6c ad       	ldd	r22, Y+60	; 0x3c
    3c98:	7d ad       	ldd	r23, Y+61	; 0x3d
    3c9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	bc 01       	movw	r22, r24
    3cb0:	cd 01       	movw	r24, r26
    3cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	9f ab       	std	Y+55, r25	; 0x37
    3cbc:	8e ab       	std	Y+54, r24	; 0x36
    3cbe:	0f c0       	rjmp	.+30     	; 0x3cde <Lcd_SendData+0x448>
    3cc0:	80 e9       	ldi	r24, 0x90	; 144
    3cc2:	91 e0       	ldi	r25, 0x01	; 1
    3cc4:	9d ab       	std	Y+53, r25	; 0x35
    3cc6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cc8:	8c a9       	ldd	r24, Y+52	; 0x34
    3cca:	9d a9       	ldd	r25, Y+53	; 0x35
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <Lcd_SendData+0x436>
    3cd0:	9d ab       	std	Y+53, r25	; 0x35
    3cd2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd4:	8e a9       	ldd	r24, Y+54	; 0x36
    3cd6:	9f a9       	ldd	r25, Y+55	; 0x37
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	9f ab       	std	Y+55, r25	; 0x37
    3cdc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cde:	8e a9       	ldd	r24, Y+54	; 0x36
    3ce0:	9f a9       	ldd	r25, Y+55	; 0x37
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	69 f7       	brne	.-38     	; 0x3cc0 <Lcd_SendData+0x42a>
    3ce6:	2d c0       	rjmp	.+90     	; 0x3d42 <Lcd_SendData+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce8:	68 ad       	ldd	r22, Y+56	; 0x38
    3cea:	79 ad       	ldd	r23, Y+57	; 0x39
    3cec:	8a ad       	ldd	r24, Y+58	; 0x3a
    3cee:	9b ad       	ldd	r25, Y+59	; 0x3b
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9f ab       	std	Y+55, r25	; 0x37
    3cfa:	8e ab       	std	Y+54, r24	; 0x36
    3cfc:	8e a9       	ldd	r24, Y+54	; 0x36
    3cfe:	9f a9       	ldd	r25, Y+55	; 0x37
    3d00:	9b ab       	std	Y+51, r25	; 0x33
    3d02:	8a ab       	std	Y+50, r24	; 0x32
    3d04:	8a a9       	ldd	r24, Y+50	; 0x32
    3d06:	9b a9       	ldd	r25, Y+51	; 0x33
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <Lcd_SendData+0x472>
    3d0c:	9b ab       	std	Y+51, r25	; 0x33
    3d0e:	8a ab       	std	Y+50, r24	; 0x32
    3d10:	18 c0       	rjmp	.+48     	; 0x3d42 <Lcd_SendData+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d12:	fe 01       	movw	r30, r28
    3d14:	ef 5b       	subi	r30, 0xBF	; 191
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	fe 01       	movw	r30, r28
    3d2a:	e0 5c       	subi	r30, 0xC0	; 192
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	80 83       	st	Z, r24
    3d30:	fe 01       	movw	r30, r28
    3d32:	e0 5c       	subi	r30, 0xC0	; 192
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	80 81       	ld	r24, Z
    3d38:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d3a:	89 a9       	ldd	r24, Y+49	; 0x31
    3d3c:	8a 95       	dec	r24
    3d3e:	f1 f7       	brne	.-4      	; 0x3d3c <Lcd_SendData+0x4a6>
    3d40:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(data, 0));
    3d42:	fe 01       	movw	r30, r28
    3d44:	ef 59       	subi	r30, 0x9F	; 159
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 81       	ld	r24, Z
    3d4a:	98 2f       	mov	r25, r24
    3d4c:	91 70       	andi	r25, 0x01	; 1
    3d4e:	88 e0       	ldi	r24, 0x08	; 8
    3d50:	69 2f       	mov	r22, r25
    3d52:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 1));
    3d56:	fe 01       	movw	r30, r28
    3d58:	ef 59       	subi	r30, 0x9F	; 159
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	80 81       	ld	r24, Z
    3d5e:	86 95       	lsr	r24
    3d60:	98 2f       	mov	r25, r24
    3d62:	91 70       	andi	r25, 0x01	; 1
    3d64:	89 e0       	ldi	r24, 0x09	; 9
    3d66:	69 2f       	mov	r22, r25
    3d68:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 2));
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	ef 59       	subi	r30, 0x9F	; 159
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	80 81       	ld	r24, Z
    3d74:	86 95       	lsr	r24
    3d76:	86 95       	lsr	r24
    3d78:	98 2f       	mov	r25, r24
    3d7a:	91 70       	andi	r25, 0x01	; 1
    3d7c:	8a e0       	ldi	r24, 0x0A	; 10
    3d7e:	69 2f       	mov	r22, r25
    3d80:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 3));
    3d84:	fe 01       	movw	r30, r28
    3d86:	ef 59       	subi	r30, 0x9F	; 159
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	80 81       	ld	r24, Z
    3d8c:	86 95       	lsr	r24
    3d8e:	86 95       	lsr	r24
    3d90:	86 95       	lsr	r24
    3d92:	98 2f       	mov	r25, r24
    3d94:	91 70       	andi	r25, 0x01	; 1
    3d96:	8c e0       	ldi	r24, 0x0C	; 12
    3d98:	69 2f       	mov	r22, r25
    3d9a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3d9e:	82 e0       	ldi	r24, 0x02	; 2
    3da0:	61 e0       	ldi	r22, 0x01	; 1
    3da2:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	a0 e8       	ldi	r26, 0x80	; 128
    3dac:	bf e3       	ldi	r27, 0x3F	; 63
    3dae:	8d a7       	std	Y+45, r24	; 0x2d
    3db0:	9e a7       	std	Y+46, r25	; 0x2e
    3db2:	af a7       	std	Y+47, r26	; 0x2f
    3db4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3db6:	6d a5       	ldd	r22, Y+45	; 0x2d
    3db8:	7e a5       	ldd	r23, Y+46	; 0x2e
    3dba:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dbc:	98 a9       	ldd	r25, Y+48	; 0x30
    3dbe:	2b ea       	ldi	r18, 0xAB	; 171
    3dc0:	3a ea       	ldi	r19, 0xAA	; 170
    3dc2:	4a ea       	ldi	r20, 0xAA	; 170
    3dc4:	50 e4       	ldi	r21, 0x40	; 64
    3dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	89 a7       	std	Y+41, r24	; 0x29
    3dd0:	9a a7       	std	Y+42, r25	; 0x2a
    3dd2:	ab a7       	std	Y+43, r26	; 0x2b
    3dd4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3dd6:	69 a5       	ldd	r22, Y+41	; 0x29
    3dd8:	7a a5       	ldd	r23, Y+42	; 0x2a
    3dda:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ddc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	40 e8       	ldi	r20, 0x80	; 128
    3de4:	5f e3       	ldi	r21, 0x3F	; 63
    3de6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3dea:	88 23       	and	r24, r24
    3dec:	1c f4       	brge	.+6      	; 0x3df4 <Lcd_SendData+0x55e>
		__ticks = 1;
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	88 a7       	std	Y+40, r24	; 0x28
    3df2:	91 c0       	rjmp	.+290    	; 0x3f16 <Lcd_SendData+0x680>
	else if (__tmp > 255)
    3df4:	69 a5       	ldd	r22, Y+41	; 0x29
    3df6:	7a a5       	ldd	r23, Y+42	; 0x2a
    3df8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	4f e7       	ldi	r20, 0x7F	; 127
    3e02:	53 e4       	ldi	r21, 0x43	; 67
    3e04:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e08:	18 16       	cp	r1, r24
    3e0a:	0c f0       	brlt	.+2      	; 0x3e0e <Lcd_SendData+0x578>
    3e0c:	7b c0       	rjmp	.+246    	; 0x3f04 <Lcd_SendData+0x66e>
	{
		_delay_ms(__us / 1000.0);
    3e0e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e10:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e14:	98 a9       	ldd	r25, Y+48	; 0x30
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	4a e7       	ldi	r20, 0x7A	; 122
    3e1c:	54 e4       	ldi	r21, 0x44	; 68
    3e1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	8c a3       	std	Y+36, r24	; 0x24
    3e28:	9d a3       	std	Y+37, r25	; 0x25
    3e2a:	ae a3       	std	Y+38, r26	; 0x26
    3e2c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2e:	6c a1       	ldd	r22, Y+36	; 0x24
    3e30:	7d a1       	ldd	r23, Y+37	; 0x25
    3e32:	8e a1       	ldd	r24, Y+38	; 0x26
    3e34:	9f a1       	ldd	r25, Y+39	; 0x27
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	4a e7       	ldi	r20, 0x7A	; 122
    3e3c:	55 e4       	ldi	r21, 0x45	; 69
    3e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	88 a3       	std	Y+32, r24	; 0x20
    3e48:	99 a3       	std	Y+33, r25	; 0x21
    3e4a:	aa a3       	std	Y+34, r26	; 0x22
    3e4c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3e4e:	68 a1       	ldd	r22, Y+32	; 0x20
    3e50:	79 a1       	ldd	r23, Y+33	; 0x21
    3e52:	8a a1       	ldd	r24, Y+34	; 0x22
    3e54:	9b a1       	ldd	r25, Y+35	; 0x23
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e8       	ldi	r20, 0x80	; 128
    3e5c:	5f e3       	ldi	r21, 0x3F	; 63
    3e5e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e62:	88 23       	and	r24, r24
    3e64:	2c f4       	brge	.+10     	; 0x3e70 <Lcd_SendData+0x5da>
		__ticks = 1;
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	9f 8f       	std	Y+31, r25	; 0x1f
    3e6c:	8e 8f       	std	Y+30, r24	; 0x1e
    3e6e:	3f c0       	rjmp	.+126    	; 0x3eee <Lcd_SendData+0x658>
	else if (__tmp > 65535)
    3e70:	68 a1       	ldd	r22, Y+32	; 0x20
    3e72:	79 a1       	ldd	r23, Y+33	; 0x21
    3e74:	8a a1       	ldd	r24, Y+34	; 0x22
    3e76:	9b a1       	ldd	r25, Y+35	; 0x23
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	3f ef       	ldi	r19, 0xFF	; 255
    3e7c:	4f e7       	ldi	r20, 0x7F	; 127
    3e7e:	57 e4       	ldi	r21, 0x47	; 71
    3e80:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e84:	18 16       	cp	r1, r24
    3e86:	4c f5       	brge	.+82     	; 0x3eda <Lcd_SendData+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e88:	6c a1       	ldd	r22, Y+36	; 0x24
    3e8a:	7d a1       	ldd	r23, Y+37	; 0x25
    3e8c:	8e a1       	ldd	r24, Y+38	; 0x26
    3e8e:	9f a1       	ldd	r25, Y+39	; 0x27
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	40 e2       	ldi	r20, 0x20	; 32
    3e96:	51 e4       	ldi	r21, 0x41	; 65
    3e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	bc 01       	movw	r22, r24
    3ea2:	cd 01       	movw	r24, r26
    3ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	9f 8f       	std	Y+31, r25	; 0x1f
    3eae:	8e 8f       	std	Y+30, r24	; 0x1e
    3eb0:	0f c0       	rjmp	.+30     	; 0x3ed0 <Lcd_SendData+0x63a>
    3eb2:	80 e9       	ldi	r24, 0x90	; 144
    3eb4:	91 e0       	ldi	r25, 0x01	; 1
    3eb6:	9d 8f       	std	Y+29, r25	; 0x1d
    3eb8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3eba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ebc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	f1 f7       	brne	.-4      	; 0x3ebe <Lcd_SendData+0x628>
    3ec2:	9d 8f       	std	Y+29, r25	; 0x1d
    3ec4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ec8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	9f 8f       	std	Y+31, r25	; 0x1f
    3ece:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ed2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	69 f7       	brne	.-38     	; 0x3eb2 <Lcd_SendData+0x61c>
    3ed8:	24 c0       	rjmp	.+72     	; 0x3f22 <Lcd_SendData+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eda:	68 a1       	ldd	r22, Y+32	; 0x20
    3edc:	79 a1       	ldd	r23, Y+33	; 0x21
    3ede:	8a a1       	ldd	r24, Y+34	; 0x22
    3ee0:	9b a1       	ldd	r25, Y+35	; 0x23
    3ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	9f 8f       	std	Y+31, r25	; 0x1f
    3eec:	8e 8f       	std	Y+30, r24	; 0x1e
    3eee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ef0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ef2:	9b 8f       	std	Y+27, r25	; 0x1b
    3ef4:	8a 8f       	std	Y+26, r24	; 0x1a
    3ef6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ef8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	f1 f7       	brne	.-4      	; 0x3efa <Lcd_SendData+0x664>
    3efe:	9b 8f       	std	Y+27, r25	; 0x1b
    3f00:	8a 8f       	std	Y+26, r24	; 0x1a
    3f02:	0f c0       	rjmp	.+30     	; 0x3f22 <Lcd_SendData+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f04:	69 a5       	ldd	r22, Y+41	; 0x29
    3f06:	7a a5       	ldd	r23, Y+42	; 0x2a
    3f08:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	88 a7       	std	Y+40, r24	; 0x28
    3f16:	88 a5       	ldd	r24, Y+40	; 0x28
    3f18:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f1a:	89 8d       	ldd	r24, Y+25	; 0x19
    3f1c:	8a 95       	dec	r24
    3f1e:	f1 f7       	brne	.-4      	; 0x3f1c <Lcd_SendData+0x686>
    3f20:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3f22:	82 e0       	ldi	r24, 0x02	; 2
    3f24:	60 e0       	ldi	r22, 0x00	; 0
    3f26:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Dio_WriteChannel>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	a0 e2       	ldi	r26, 0x20	; 32
    3f30:	b1 e4       	ldi	r27, 0x41	; 65
    3f32:	8d 8b       	std	Y+21, r24	; 0x15
    3f34:	9e 8b       	std	Y+22, r25	; 0x16
    3f36:	af 8b       	std	Y+23, r26	; 0x17
    3f38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f40:	98 8d       	ldd	r25, Y+24	; 0x18
    3f42:	2b ea       	ldi	r18, 0xAB	; 171
    3f44:	3a ea       	ldi	r19, 0xAA	; 170
    3f46:	4a ea       	ldi	r20, 0xAA	; 170
    3f48:	50 e4       	ldi	r21, 0x40	; 64
    3f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	89 8b       	std	Y+17, r24	; 0x11
    3f54:	9a 8b       	std	Y+18, r25	; 0x12
    3f56:	ab 8b       	std	Y+19, r26	; 0x13
    3f58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3f5a:	69 89       	ldd	r22, Y+17	; 0x11
    3f5c:	7a 89       	ldd	r23, Y+18	; 0x12
    3f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f60:	9c 89       	ldd	r25, Y+20	; 0x14
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	40 e8       	ldi	r20, 0x80	; 128
    3f68:	5f e3       	ldi	r21, 0x3F	; 63
    3f6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f6e:	88 23       	and	r24, r24
    3f70:	1c f4       	brge	.+6      	; 0x3f78 <Lcd_SendData+0x6e2>
		__ticks = 1;
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	88 8b       	std	Y+16, r24	; 0x10
    3f76:	91 c0       	rjmp	.+290    	; 0x409a <Lcd_SendData+0x804>
	else if (__tmp > 255)
    3f78:	69 89       	ldd	r22, Y+17	; 0x11
    3f7a:	7a 89       	ldd	r23, Y+18	; 0x12
    3f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	4f e7       	ldi	r20, 0x7F	; 127
    3f86:	53 e4       	ldi	r21, 0x43	; 67
    3f88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f8c:	18 16       	cp	r1, r24
    3f8e:	0c f0       	brlt	.+2      	; 0x3f92 <Lcd_SendData+0x6fc>
    3f90:	7b c0       	rjmp	.+246    	; 0x4088 <Lcd_SendData+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    3f92:	6d 89       	ldd	r22, Y+21	; 0x15
    3f94:	7e 89       	ldd	r23, Y+22	; 0x16
    3f96:	8f 89       	ldd	r24, Y+23	; 0x17
    3f98:	98 8d       	ldd	r25, Y+24	; 0x18
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	4a e7       	ldi	r20, 0x7A	; 122
    3fa0:	54 e4       	ldi	r21, 0x44	; 68
    3fa2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	8c 87       	std	Y+12, r24	; 0x0c
    3fac:	9d 87       	std	Y+13, r25	; 0x0d
    3fae:	ae 87       	std	Y+14, r26	; 0x0e
    3fb0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    3fb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    3fb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	4a e7       	ldi	r20, 0x7A	; 122
    3fc0:	55 e4       	ldi	r21, 0x45	; 69
    3fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	88 87       	std	Y+8, r24	; 0x08
    3fcc:	99 87       	std	Y+9, r25	; 0x09
    3fce:	aa 87       	std	Y+10, r26	; 0x0a
    3fd0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3fd2:	68 85       	ldd	r22, Y+8	; 0x08
    3fd4:	79 85       	ldd	r23, Y+9	; 0x09
    3fd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	40 e8       	ldi	r20, 0x80	; 128
    3fe0:	5f e3       	ldi	r21, 0x3F	; 63
    3fe2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3fe6:	88 23       	and	r24, r24
    3fe8:	2c f4       	brge	.+10     	; 0x3ff4 <Lcd_SendData+0x75e>
		__ticks = 1;
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	9f 83       	std	Y+7, r25	; 0x07
    3ff0:	8e 83       	std	Y+6, r24	; 0x06
    3ff2:	3f c0       	rjmp	.+126    	; 0x4072 <Lcd_SendData+0x7dc>
	else if (__tmp > 65535)
    3ff4:	68 85       	ldd	r22, Y+8	; 0x08
    3ff6:	79 85       	ldd	r23, Y+9	; 0x09
    3ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ffa:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	3f ef       	ldi	r19, 0xFF	; 255
    4000:	4f e7       	ldi	r20, 0x7F	; 127
    4002:	57 e4       	ldi	r21, 0x47	; 71
    4004:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4008:	18 16       	cp	r1, r24
    400a:	4c f5       	brge	.+82     	; 0x405e <Lcd_SendData+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    400c:	6c 85       	ldd	r22, Y+12	; 0x0c
    400e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4010:	8e 85       	ldd	r24, Y+14	; 0x0e
    4012:	9f 85       	ldd	r25, Y+15	; 0x0f
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e2       	ldi	r20, 0x20	; 32
    401a:	51 e4       	ldi	r21, 0x41	; 65
    401c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	bc 01       	movw	r22, r24
    4026:	cd 01       	movw	r24, r26
    4028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402c:	dc 01       	movw	r26, r24
    402e:	cb 01       	movw	r24, r22
    4030:	9f 83       	std	Y+7, r25	; 0x07
    4032:	8e 83       	std	Y+6, r24	; 0x06
    4034:	0f c0       	rjmp	.+30     	; 0x4054 <Lcd_SendData+0x7be>
    4036:	80 e9       	ldi	r24, 0x90	; 144
    4038:	91 e0       	ldi	r25, 0x01	; 1
    403a:	9d 83       	std	Y+5, r25	; 0x05
    403c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    403e:	8c 81       	ldd	r24, Y+4	; 0x04
    4040:	9d 81       	ldd	r25, Y+5	; 0x05
    4042:	01 97       	sbiw	r24, 0x01	; 1
    4044:	f1 f7       	brne	.-4      	; 0x4042 <Lcd_SendData+0x7ac>
    4046:	9d 83       	std	Y+5, r25	; 0x05
    4048:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    404a:	8e 81       	ldd	r24, Y+6	; 0x06
    404c:	9f 81       	ldd	r25, Y+7	; 0x07
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	9f 83       	std	Y+7, r25	; 0x07
    4052:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4054:	8e 81       	ldd	r24, Y+6	; 0x06
    4056:	9f 81       	ldd	r25, Y+7	; 0x07
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	69 f7       	brne	.-38     	; 0x4036 <Lcd_SendData+0x7a0>
    405c:	24 c0       	rjmp	.+72     	; 0x40a6 <Lcd_SendData+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405e:	68 85       	ldd	r22, Y+8	; 0x08
    4060:	79 85       	ldd	r23, Y+9	; 0x09
    4062:	8a 85       	ldd	r24, Y+10	; 0x0a
    4064:	9b 85       	ldd	r25, Y+11	; 0x0b
    4066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	9f 83       	std	Y+7, r25	; 0x07
    4070:	8e 83       	std	Y+6, r24	; 0x06
    4072:	8e 81       	ldd	r24, Y+6	; 0x06
    4074:	9f 81       	ldd	r25, Y+7	; 0x07
    4076:	9b 83       	std	Y+3, r25	; 0x03
    4078:	8a 83       	std	Y+2, r24	; 0x02
    407a:	8a 81       	ldd	r24, Y+2	; 0x02
    407c:	9b 81       	ldd	r25, Y+3	; 0x03
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	f1 f7       	brne	.-4      	; 0x407e <Lcd_SendData+0x7e8>
    4082:	9b 83       	std	Y+3, r25	; 0x03
    4084:	8a 83       	std	Y+2, r24	; 0x02
    4086:	0f c0       	rjmp	.+30     	; 0x40a6 <Lcd_SendData+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4088:	69 89       	ldd	r22, Y+17	; 0x11
    408a:	7a 89       	ldd	r23, Y+18	; 0x12
    408c:	8b 89       	ldd	r24, Y+19	; 0x13
    408e:	9c 89       	ldd	r25, Y+20	; 0x14
    4090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	88 8b       	std	Y+16, r24	; 0x10
    409a:	88 89       	ldd	r24, Y+16	; 0x10
    409c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	8a 95       	dec	r24
    40a2:	f1 f7       	brne	.-4      	; 0x40a0 <Lcd_SendData+0x80a>
    40a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);  // Wait for the data to be displayed
}
    40a6:	cf 59       	subi	r28, 0x9F	; 159
    40a8:	df 4f       	sbci	r29, 0xFF	; 255
    40aa:	0f b6       	in	r0, 0x3f	; 63
    40ac:	f8 94       	cli
    40ae:	de bf       	out	0x3e, r29	; 62
    40b0:	0f be       	out	0x3f, r0	; 63
    40b2:	cd bf       	out	0x3d, r28	; 61
    40b4:	cf 91       	pop	r28
    40b6:	df 91       	pop	r29
    40b8:	1f 91       	pop	r17
    40ba:	0f 91       	pop	r16
    40bc:	08 95       	ret

000040be <Lcd_GoTo>:

void Lcd_GoTo(u8 row,u8 col){
    40be:	df 93       	push	r29
    40c0:	cf 93       	push	r28
    40c2:	00 d0       	rcall	.+0      	; 0x40c4 <Lcd_GoTo+0x6>
    40c4:	00 d0       	rcall	.+0      	; 0x40c6 <Lcd_GoTo+0x8>
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	89 83       	std	Y+1, r24	; 0x01
    40cc:	6a 83       	std	Y+2, r22	; 0x02
	col--;
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	81 50       	subi	r24, 0x01	; 1
    40d2:	8a 83       	std	Y+2, r24	; 0x02
	switch (row){
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	28 2f       	mov	r18, r24
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	3c 83       	std	Y+4, r19	; 0x04
    40dc:	2b 83       	std	Y+3, r18	; 0x03
    40de:	8b 81       	ldd	r24, Y+3	; 0x03
    40e0:	9c 81       	ldd	r25, Y+4	; 0x04
    40e2:	82 30       	cpi	r24, 0x02	; 2
    40e4:	91 05       	cpc	r25, r1
    40e6:	d9 f0       	breq	.+54     	; 0x411e <Lcd_GoTo+0x60>
    40e8:	2b 81       	ldd	r18, Y+3	; 0x03
    40ea:	3c 81       	ldd	r19, Y+4	; 0x04
    40ec:	23 30       	cpi	r18, 0x03	; 3
    40ee:	31 05       	cpc	r19, r1
    40f0:	34 f4       	brge	.+12     	; 0x40fe <Lcd_GoTo+0x40>
    40f2:	8b 81       	ldd	r24, Y+3	; 0x03
    40f4:	9c 81       	ldd	r25, Y+4	; 0x04
    40f6:	81 30       	cpi	r24, 0x01	; 1
    40f8:	91 05       	cpc	r25, r1
    40fa:	61 f0       	breq	.+24     	; 0x4114 <Lcd_GoTo+0x56>
    40fc:	1e c0       	rjmp	.+60     	; 0x413a <Lcd_GoTo+0x7c>
    40fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4100:	3c 81       	ldd	r19, Y+4	; 0x04
    4102:	23 30       	cpi	r18, 0x03	; 3
    4104:	31 05       	cpc	r19, r1
    4106:	81 f0       	breq	.+32     	; 0x4128 <Lcd_GoTo+0x6a>
    4108:	8b 81       	ldd	r24, Y+3	; 0x03
    410a:	9c 81       	ldd	r25, Y+4	; 0x04
    410c:	84 30       	cpi	r24, 0x04	; 4
    410e:	91 05       	cpc	r25, r1
    4110:	81 f0       	breq	.+32     	; 0x4132 <Lcd_GoTo+0x74>
    4112:	13 c0       	rjmp	.+38     	; 0x413a <Lcd_GoTo+0x7c>
	        case ROW1:
	        	Lcd_SendCMD(0x80+col);
    4114:	8a 81       	ldd	r24, Y+2	; 0x02
    4116:	80 58       	subi	r24, 0x80	; 128
    4118:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
    411c:	0e c0       	rjmp	.+28     	; 0x413a <Lcd_GoTo+0x7c>
	        break;
	        case ROW2:
	        	Lcd_SendCMD(0xC0+col);
    411e:	8a 81       	ldd	r24, Y+2	; 0x02
    4120:	80 54       	subi	r24, 0x40	; 64
    4122:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
    4126:	09 c0       	rjmp	.+18     	; 0x413a <Lcd_GoTo+0x7c>
	        break;
	        case ROW3:
	        	Lcd_SendCMD(0x94+col);
    4128:	8a 81       	ldd	r24, Y+2	; 0x02
    412a:	8c 56       	subi	r24, 0x6C	; 108
    412c:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
    4130:	04 c0       	rjmp	.+8      	; 0x413a <Lcd_GoTo+0x7c>
	        break;
	        case ROW4:
	        	Lcd_SendCMD(0xD4+col);
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	8c 52       	subi	r24, 0x2C	; 44
    4136:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
	        break;
	        default:break;

	    }
}
    413a:	0f 90       	pop	r0
    413c:	0f 90       	pop	r0
    413e:	0f 90       	pop	r0
    4140:	0f 90       	pop	r0
    4142:	cf 91       	pop	r28
    4144:	df 91       	pop	r29
    4146:	08 95       	ret

00004148 <Lcd_PutChar>:

void Lcd_PutChar (u8 character)
{
    4148:	df 93       	push	r29
    414a:	cf 93       	push	r28
    414c:	0f 92       	push	r0
    414e:	cd b7       	in	r28, 0x3d	; 61
    4150:	de b7       	in	r29, 0x3e	; 62
    4152:	89 83       	std	Y+1, r24	; 0x01
	Lcd_SendData(character);
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	0e 94 4b 1c 	call	0x3896	; 0x3896 <Lcd_SendData>
}
    415a:	0f 90       	pop	r0
    415c:	cf 91       	pop	r28
    415e:	df 91       	pop	r29
    4160:	08 95       	ret

00004162 <Lcd_PutInt>:

void Lcd_PutInt(u32 Number)
{
    4162:	df 93       	push	r29
    4164:	cf 93       	push	r28
    4166:	00 d0       	rcall	.+0      	; 0x4168 <Lcd_PutInt+0x6>
    4168:	00 d0       	rcall	.+0      	; 0x416a <Lcd_PutInt+0x8>
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	69 83       	std	Y+1, r22	; 0x01
    4170:	7a 83       	std	Y+2, r23	; 0x02
    4172:	8b 83       	std	Y+3, r24	; 0x03
    4174:	9c 83       	std	Y+4, r25	; 0x04

	if(Number == 0 )
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	9a 81       	ldd	r25, Y+2	; 0x02
    417a:	ab 81       	ldd	r26, Y+3	; 0x03
    417c:	bc 81       	ldd	r27, Y+4	; 0x04
    417e:	00 97       	sbiw	r24, 0x00	; 0
    4180:	a1 05       	cpc	r26, r1
    4182:	b1 05       	cpc	r27, r1
    4184:	19 f1       	breq	.+70     	; 0x41cc <Lcd_PutInt+0x6a>
		return ;
	else
		Lcd_PutInt(Number/10);
    4186:	89 81       	ldd	r24, Y+1	; 0x01
    4188:	9a 81       	ldd	r25, Y+2	; 0x02
    418a:	ab 81       	ldd	r26, Y+3	; 0x03
    418c:	bc 81       	ldd	r27, Y+4	; 0x04
    418e:	2a e0       	ldi	r18, 0x0A	; 10
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e0       	ldi	r20, 0x00	; 0
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	bc 01       	movw	r22, r24
    4198:	cd 01       	movw	r24, r26
    419a:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodsi4>
    419e:	da 01       	movw	r26, r20
    41a0:	c9 01       	movw	r24, r18
    41a2:	bc 01       	movw	r22, r24
    41a4:	cd 01       	movw	r24, r26
    41a6:	0e 94 b1 20 	call	0x4162	; 0x4162 <Lcd_PutInt>
	///if(Number<255)
	 Lcd_SendData((Number%10)+0x30);
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	9a 81       	ldd	r25, Y+2	; 0x02
    41ae:	ab 81       	ldd	r26, Y+3	; 0x03
    41b0:	bc 81       	ldd	r27, Y+4	; 0x04
    41b2:	2a e0       	ldi	r18, 0x0A	; 10
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e0       	ldi	r20, 0x00	; 0
    41b8:	50 e0       	ldi	r21, 0x00	; 0
    41ba:	bc 01       	movw	r22, r24
    41bc:	cd 01       	movw	r24, r26
    41be:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodsi4>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	80 5d       	subi	r24, 0xD0	; 208
    41c8:	0e 94 4b 1c 	call	0x3896	; 0x3896 <Lcd_SendData>
}
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	cf 91       	pop	r28
    41d6:	df 91       	pop	r29
    41d8:	08 95       	ret

000041da <Lcd_Init>:

void Lcd_Init(void) {
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	cd b7       	in	r28, 0x3d	; 61
    41e4:	de b7       	in	r29, 0x3e	; 62
    41e6:	c6 54       	subi	r28, 0x46	; 70
    41e8:	d0 40       	sbci	r29, 0x00	; 0
    41ea:	0f b6       	in	r0, 0x3f	; 63
    41ec:	f8 94       	cli
    41ee:	de bf       	out	0x3e, r29	; 62
    41f0:	0f be       	out	0x3f, r0	; 63
    41f2:	cd bf       	out	0x3d, r28	; 61
    41f4:	fe 01       	movw	r30, r28
    41f6:	ed 5b       	subi	r30, 0xBD	; 189
    41f8:	ff 4f       	sbci	r31, 0xFF	; 255
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	a8 e4       	ldi	r26, 0x48	; 72
    4200:	b2 e4       	ldi	r27, 0x42	; 66
    4202:	80 83       	st	Z, r24
    4204:	91 83       	std	Z+1, r25	; 0x01
    4206:	a2 83       	std	Z+2, r26	; 0x02
    4208:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    420a:	8e 01       	movw	r16, r28
    420c:	01 5c       	subi	r16, 0xC1	; 193
    420e:	1f 4f       	sbci	r17, 0xFF	; 255
    4210:	fe 01       	movw	r30, r28
    4212:	ed 5b       	subi	r30, 0xBD	; 189
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	60 81       	ld	r22, Z
    4218:	71 81       	ldd	r23, Z+1	; 0x01
    421a:	82 81       	ldd	r24, Z+2	; 0x02
    421c:	93 81       	ldd	r25, Z+3	; 0x03
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	4a e7       	ldi	r20, 0x7A	; 122
    4224:	55 e4       	ldi	r21, 0x45	; 69
    4226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422a:	dc 01       	movw	r26, r24
    422c:	cb 01       	movw	r24, r22
    422e:	f8 01       	movw	r30, r16
    4230:	80 83       	st	Z, r24
    4232:	91 83       	std	Z+1, r25	; 0x01
    4234:	a2 83       	std	Z+2, r26	; 0x02
    4236:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4238:	fe 01       	movw	r30, r28
    423a:	ff 96       	adiw	r30, 0x3f	; 63
    423c:	60 81       	ld	r22, Z
    423e:	71 81       	ldd	r23, Z+1	; 0x01
    4240:	82 81       	ldd	r24, Z+2	; 0x02
    4242:	93 81       	ldd	r25, Z+3	; 0x03
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	40 e8       	ldi	r20, 0x80	; 128
    424a:	5f e3       	ldi	r21, 0x3F	; 63
    424c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4250:	88 23       	and	r24, r24
    4252:	2c f4       	brge	.+10     	; 0x425e <Lcd_Init+0x84>
		__ticks = 1;
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	9e af       	std	Y+62, r25	; 0x3e
    425a:	8d af       	std	Y+61, r24	; 0x3d
    425c:	46 c0       	rjmp	.+140    	; 0x42ea <Lcd_Init+0x110>
	else if (__tmp > 65535)
    425e:	fe 01       	movw	r30, r28
    4260:	ff 96       	adiw	r30, 0x3f	; 63
    4262:	60 81       	ld	r22, Z
    4264:	71 81       	ldd	r23, Z+1	; 0x01
    4266:	82 81       	ldd	r24, Z+2	; 0x02
    4268:	93 81       	ldd	r25, Z+3	; 0x03
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	3f ef       	ldi	r19, 0xFF	; 255
    426e:	4f e7       	ldi	r20, 0x7F	; 127
    4270:	57 e4       	ldi	r21, 0x47	; 71
    4272:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4276:	18 16       	cp	r1, r24
    4278:	64 f5       	brge	.+88     	; 0x42d2 <Lcd_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    427a:	fe 01       	movw	r30, r28
    427c:	ed 5b       	subi	r30, 0xBD	; 189
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	60 81       	ld	r22, Z
    4282:	71 81       	ldd	r23, Z+1	; 0x01
    4284:	82 81       	ldd	r24, Z+2	; 0x02
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	40 e2       	ldi	r20, 0x20	; 32
    428e:	51 e4       	ldi	r21, 0x41	; 65
    4290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	bc 01       	movw	r22, r24
    429a:	cd 01       	movw	r24, r26
    429c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	9e af       	std	Y+62, r25	; 0x3e
    42a6:	8d af       	std	Y+61, r24	; 0x3d
    42a8:	0f c0       	rjmp	.+30     	; 0x42c8 <Lcd_Init+0xee>
    42aa:	80 e9       	ldi	r24, 0x90	; 144
    42ac:	91 e0       	ldi	r25, 0x01	; 1
    42ae:	9c af       	std	Y+60, r25	; 0x3c
    42b0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    42b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	f1 f7       	brne	.-4      	; 0x42b6 <Lcd_Init+0xdc>
    42ba:	9c af       	std	Y+60, r25	; 0x3c
    42bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42be:	8d ad       	ldd	r24, Y+61	; 0x3d
    42c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	9e af       	std	Y+62, r25	; 0x3e
    42c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    42ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    42cc:	00 97       	sbiw	r24, 0x00	; 0
    42ce:	69 f7       	brne	.-38     	; 0x42aa <Lcd_Init+0xd0>
    42d0:	16 c0       	rjmp	.+44     	; 0x42fe <Lcd_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42d2:	fe 01       	movw	r30, r28
    42d4:	ff 96       	adiw	r30, 0x3f	; 63
    42d6:	60 81       	ld	r22, Z
    42d8:	71 81       	ldd	r23, Z+1	; 0x01
    42da:	82 81       	ldd	r24, Z+2	; 0x02
    42dc:	93 81       	ldd	r25, Z+3	; 0x03
    42de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	9e af       	std	Y+62, r25	; 0x3e
    42e8:	8d af       	std	Y+61, r24	; 0x3d
    42ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    42ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    42ee:	9a af       	std	Y+58, r25	; 0x3a
    42f0:	89 af       	std	Y+57, r24	; 0x39
    42f2:	89 ad       	ldd	r24, Y+57	; 0x39
    42f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <Lcd_Init+0x11c>
    42fa:	9a af       	std	Y+58, r25	; 0x3a
    42fc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	Lcd_SendCMD(HOME);
    42fe:	82 e0       	ldi	r24, 0x02	; 2
    4300:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
	Lcd_SendCMD(FOUR_BIT);
    4304:	88 e2       	ldi	r24, 0x28	; 40
    4306:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	a0 e8       	ldi	r26, 0x80	; 128
    4310:	bf e3       	ldi	r27, 0x3F	; 63
    4312:	8d ab       	std	Y+53, r24	; 0x35
    4314:	9e ab       	std	Y+54, r25	; 0x36
    4316:	af ab       	std	Y+55, r26	; 0x37
    4318:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431a:	6d a9       	ldd	r22, Y+53	; 0x35
    431c:	7e a9       	ldd	r23, Y+54	; 0x36
    431e:	8f a9       	ldd	r24, Y+55	; 0x37
    4320:	98 ad       	ldd	r25, Y+56	; 0x38
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	4a e7       	ldi	r20, 0x7A	; 122
    4328:	55 e4       	ldi	r21, 0x45	; 69
    432a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	89 ab       	std	Y+49, r24	; 0x31
    4334:	9a ab       	std	Y+50, r25	; 0x32
    4336:	ab ab       	std	Y+51, r26	; 0x33
    4338:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    433a:	69 a9       	ldd	r22, Y+49	; 0x31
    433c:	7a a9       	ldd	r23, Y+50	; 0x32
    433e:	8b a9       	ldd	r24, Y+51	; 0x33
    4340:	9c a9       	ldd	r25, Y+52	; 0x34
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e8       	ldi	r20, 0x80	; 128
    4348:	5f e3       	ldi	r21, 0x3F	; 63
    434a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    434e:	88 23       	and	r24, r24
    4350:	2c f4       	brge	.+10     	; 0x435c <Lcd_Init+0x182>
		__ticks = 1;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	98 ab       	std	Y+48, r25	; 0x30
    4358:	8f a7       	std	Y+47, r24	; 0x2f
    435a:	3f c0       	rjmp	.+126    	; 0x43da <Lcd_Init+0x200>
	else if (__tmp > 65535)
    435c:	69 a9       	ldd	r22, Y+49	; 0x31
    435e:	7a a9       	ldd	r23, Y+50	; 0x32
    4360:	8b a9       	ldd	r24, Y+51	; 0x33
    4362:	9c a9       	ldd	r25, Y+52	; 0x34
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	4c f5       	brge	.+82     	; 0x43c6 <Lcd_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4374:	6d a9       	ldd	r22, Y+53	; 0x35
    4376:	7e a9       	ldd	r23, Y+54	; 0x36
    4378:	8f a9       	ldd	r24, Y+55	; 0x37
    437a:	98 ad       	ldd	r25, Y+56	; 0x38
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e2       	ldi	r20, 0x20	; 32
    4382:	51 e4       	ldi	r21, 0x41	; 65
    4384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	bc 01       	movw	r22, r24
    438e:	cd 01       	movw	r24, r26
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	98 ab       	std	Y+48, r25	; 0x30
    439a:	8f a7       	std	Y+47, r24	; 0x2f
    439c:	0f c0       	rjmp	.+30     	; 0x43bc <Lcd_Init+0x1e2>
    439e:	80 e9       	ldi	r24, 0x90	; 144
    43a0:	91 e0       	ldi	r25, 0x01	; 1
    43a2:	9e a7       	std	Y+46, r25	; 0x2e
    43a4:	8d a7       	std	Y+45, r24	; 0x2d
    43a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    43a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	f1 f7       	brne	.-4      	; 0x43aa <Lcd_Init+0x1d0>
    43ae:	9e a7       	std	Y+46, r25	; 0x2e
    43b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43b4:	98 a9       	ldd	r25, Y+48	; 0x30
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	98 ab       	std	Y+48, r25	; 0x30
    43ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    43be:	98 a9       	ldd	r25, Y+48	; 0x30
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	69 f7       	brne	.-38     	; 0x439e <Lcd_Init+0x1c4>
    43c4:	14 c0       	rjmp	.+40     	; 0x43ee <Lcd_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c6:	69 a9       	ldd	r22, Y+49	; 0x31
    43c8:	7a a9       	ldd	r23, Y+50	; 0x32
    43ca:	8b a9       	ldd	r24, Y+51	; 0x33
    43cc:	9c a9       	ldd	r25, Y+52	; 0x34
    43ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	98 ab       	std	Y+48, r25	; 0x30
    43d8:	8f a7       	std	Y+47, r24	; 0x2f
    43da:	8f a5       	ldd	r24, Y+47	; 0x2f
    43dc:	98 a9       	ldd	r25, Y+48	; 0x30
    43de:	9c a7       	std	Y+44, r25	; 0x2c
    43e0:	8b a7       	std	Y+43, r24	; 0x2b
    43e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    43e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <Lcd_Init+0x20c>
    43ea:	9c a7       	std	Y+44, r25	; 0x2c
    43ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Lcd_SendCMD(CURSER_ON);
    43ee:	8f e0       	ldi	r24, 0x0F	; 15
    43f0:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	a0 e8       	ldi	r26, 0x80	; 128
    43fa:	bf e3       	ldi	r27, 0x3F	; 63
    43fc:	8f a3       	std	Y+39, r24	; 0x27
    43fe:	98 a7       	std	Y+40, r25	; 0x28
    4400:	a9 a7       	std	Y+41, r26	; 0x29
    4402:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4404:	6f a1       	ldd	r22, Y+39	; 0x27
    4406:	78 a5       	ldd	r23, Y+40	; 0x28
    4408:	89 a5       	ldd	r24, Y+41	; 0x29
    440a:	9a a5       	ldd	r25, Y+42	; 0x2a
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	4a e7       	ldi	r20, 0x7A	; 122
    4412:	55 e4       	ldi	r21, 0x45	; 69
    4414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	8b a3       	std	Y+35, r24	; 0x23
    441e:	9c a3       	std	Y+36, r25	; 0x24
    4420:	ad a3       	std	Y+37, r26	; 0x25
    4422:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4424:	6b a1       	ldd	r22, Y+35	; 0x23
    4426:	7c a1       	ldd	r23, Y+36	; 0x24
    4428:	8d a1       	ldd	r24, Y+37	; 0x25
    442a:	9e a1       	ldd	r25, Y+38	; 0x26
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	40 e8       	ldi	r20, 0x80	; 128
    4432:	5f e3       	ldi	r21, 0x3F	; 63
    4434:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4438:	88 23       	and	r24, r24
    443a:	2c f4       	brge	.+10     	; 0x4446 <Lcd_Init+0x26c>
		__ticks = 1;
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	9a a3       	std	Y+34, r25	; 0x22
    4442:	89 a3       	std	Y+33, r24	; 0x21
    4444:	3f c0       	rjmp	.+126    	; 0x44c4 <Lcd_Init+0x2ea>
	else if (__tmp > 65535)
    4446:	6b a1       	ldd	r22, Y+35	; 0x23
    4448:	7c a1       	ldd	r23, Y+36	; 0x24
    444a:	8d a1       	ldd	r24, Y+37	; 0x25
    444c:	9e a1       	ldd	r25, Y+38	; 0x26
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	3f ef       	ldi	r19, 0xFF	; 255
    4452:	4f e7       	ldi	r20, 0x7F	; 127
    4454:	57 e4       	ldi	r21, 0x47	; 71
    4456:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    445a:	18 16       	cp	r1, r24
    445c:	4c f5       	brge	.+82     	; 0x44b0 <Lcd_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    445e:	6f a1       	ldd	r22, Y+39	; 0x27
    4460:	78 a5       	ldd	r23, Y+40	; 0x28
    4462:	89 a5       	ldd	r24, Y+41	; 0x29
    4464:	9a a5       	ldd	r25, Y+42	; 0x2a
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	40 e2       	ldi	r20, 0x20	; 32
    446c:	51 e4       	ldi	r21, 0x41	; 65
    446e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	bc 01       	movw	r22, r24
    4478:	cd 01       	movw	r24, r26
    447a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	9a a3       	std	Y+34, r25	; 0x22
    4484:	89 a3       	std	Y+33, r24	; 0x21
    4486:	0f c0       	rjmp	.+30     	; 0x44a6 <Lcd_Init+0x2cc>
    4488:	80 e9       	ldi	r24, 0x90	; 144
    448a:	91 e0       	ldi	r25, 0x01	; 1
    448c:	98 a3       	std	Y+32, r25	; 0x20
    448e:	8f 8f       	std	Y+31, r24	; 0x1f
    4490:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4492:	98 a1       	ldd	r25, Y+32	; 0x20
    4494:	01 97       	sbiw	r24, 0x01	; 1
    4496:	f1 f7       	brne	.-4      	; 0x4494 <Lcd_Init+0x2ba>
    4498:	98 a3       	std	Y+32, r25	; 0x20
    449a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    449c:	89 a1       	ldd	r24, Y+33	; 0x21
    449e:	9a a1       	ldd	r25, Y+34	; 0x22
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	9a a3       	std	Y+34, r25	; 0x22
    44a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a6:	89 a1       	ldd	r24, Y+33	; 0x21
    44a8:	9a a1       	ldd	r25, Y+34	; 0x22
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	69 f7       	brne	.-38     	; 0x4488 <Lcd_Init+0x2ae>
    44ae:	14 c0       	rjmp	.+40     	; 0x44d8 <Lcd_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b0:	6b a1       	ldd	r22, Y+35	; 0x23
    44b2:	7c a1       	ldd	r23, Y+36	; 0x24
    44b4:	8d a1       	ldd	r24, Y+37	; 0x25
    44b6:	9e a1       	ldd	r25, Y+38	; 0x26
    44b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	9a a3       	std	Y+34, r25	; 0x22
    44c2:	89 a3       	std	Y+33, r24	; 0x21
    44c4:	89 a1       	ldd	r24, Y+33	; 0x21
    44c6:	9a a1       	ldd	r25, Y+34	; 0x22
    44c8:	9e 8f       	std	Y+30, r25	; 0x1e
    44ca:	8d 8f       	std	Y+29, r24	; 0x1d
    44cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44d0:	01 97       	sbiw	r24, 0x01	; 1
    44d2:	f1 f7       	brne	.-4      	; 0x44d0 <Lcd_Init+0x2f6>
    44d4:	9e 8f       	std	Y+30, r25	; 0x1e
    44d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_SendCMD(CLEAR);
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	a0 e8       	ldi	r26, 0x80	; 128
    44e4:	bf e3       	ldi	r27, 0x3F	; 63
    44e6:	89 8f       	std	Y+25, r24	; 0x19
    44e8:	9a 8f       	std	Y+26, r25	; 0x1a
    44ea:	ab 8f       	std	Y+27, r26	; 0x1b
    44ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ee:	69 8d       	ldd	r22, Y+25	; 0x19
    44f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	4a e7       	ldi	r20, 0x7A	; 122
    44fc:	55 e4       	ldi	r21, 0x45	; 69
    44fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	8d 8b       	std	Y+21, r24	; 0x15
    4508:	9e 8b       	std	Y+22, r25	; 0x16
    450a:	af 8b       	std	Y+23, r26	; 0x17
    450c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    450e:	6d 89       	ldd	r22, Y+21	; 0x15
    4510:	7e 89       	ldd	r23, Y+22	; 0x16
    4512:	8f 89       	ldd	r24, Y+23	; 0x17
    4514:	98 8d       	ldd	r25, Y+24	; 0x18
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	40 e8       	ldi	r20, 0x80	; 128
    451c:	5f e3       	ldi	r21, 0x3F	; 63
    451e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4522:	88 23       	and	r24, r24
    4524:	2c f4       	brge	.+10     	; 0x4530 <Lcd_Init+0x356>
		__ticks = 1;
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	9c 8b       	std	Y+20, r25	; 0x14
    452c:	8b 8b       	std	Y+19, r24	; 0x13
    452e:	3f c0       	rjmp	.+126    	; 0x45ae <Lcd_Init+0x3d4>
	else if (__tmp > 65535)
    4530:	6d 89       	ldd	r22, Y+21	; 0x15
    4532:	7e 89       	ldd	r23, Y+22	; 0x16
    4534:	8f 89       	ldd	r24, Y+23	; 0x17
    4536:	98 8d       	ldd	r25, Y+24	; 0x18
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	3f ef       	ldi	r19, 0xFF	; 255
    453c:	4f e7       	ldi	r20, 0x7F	; 127
    453e:	57 e4       	ldi	r21, 0x47	; 71
    4540:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4544:	18 16       	cp	r1, r24
    4546:	4c f5       	brge	.+82     	; 0x459a <Lcd_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4548:	69 8d       	ldd	r22, Y+25	; 0x19
    454a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    454c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    454e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	40 e2       	ldi	r20, 0x20	; 32
    4556:	51 e4       	ldi	r21, 0x41	; 65
    4558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	bc 01       	movw	r22, r24
    4562:	cd 01       	movw	r24, r26
    4564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4568:	dc 01       	movw	r26, r24
    456a:	cb 01       	movw	r24, r22
    456c:	9c 8b       	std	Y+20, r25	; 0x14
    456e:	8b 8b       	std	Y+19, r24	; 0x13
    4570:	0f c0       	rjmp	.+30     	; 0x4590 <Lcd_Init+0x3b6>
    4572:	80 e9       	ldi	r24, 0x90	; 144
    4574:	91 e0       	ldi	r25, 0x01	; 1
    4576:	9a 8b       	std	Y+18, r25	; 0x12
    4578:	89 8b       	std	Y+17, r24	; 0x11
    457a:	89 89       	ldd	r24, Y+17	; 0x11
    457c:	9a 89       	ldd	r25, Y+18	; 0x12
    457e:	01 97       	sbiw	r24, 0x01	; 1
    4580:	f1 f7       	brne	.-4      	; 0x457e <Lcd_Init+0x3a4>
    4582:	9a 8b       	std	Y+18, r25	; 0x12
    4584:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4586:	8b 89       	ldd	r24, Y+19	; 0x13
    4588:	9c 89       	ldd	r25, Y+20	; 0x14
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	9c 8b       	std	Y+20, r25	; 0x14
    458e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4590:	8b 89       	ldd	r24, Y+19	; 0x13
    4592:	9c 89       	ldd	r25, Y+20	; 0x14
    4594:	00 97       	sbiw	r24, 0x00	; 0
    4596:	69 f7       	brne	.-38     	; 0x4572 <Lcd_Init+0x398>
    4598:	14 c0       	rjmp	.+40     	; 0x45c2 <Lcd_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    459a:	6d 89       	ldd	r22, Y+21	; 0x15
    459c:	7e 89       	ldd	r23, Y+22	; 0x16
    459e:	8f 89       	ldd	r24, Y+23	; 0x17
    45a0:	98 8d       	ldd	r25, Y+24	; 0x18
    45a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	9c 8b       	std	Y+20, r25	; 0x14
    45ac:	8b 8b       	std	Y+19, r24	; 0x13
    45ae:	8b 89       	ldd	r24, Y+19	; 0x13
    45b0:	9c 89       	ldd	r25, Y+20	; 0x14
    45b2:	98 8b       	std	Y+16, r25	; 0x10
    45b4:	8f 87       	std	Y+15, r24	; 0x0f
    45b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45b8:	98 89       	ldd	r25, Y+16	; 0x10
    45ba:	01 97       	sbiw	r24, 0x01	; 1
    45bc:	f1 f7       	brne	.-4      	; 0x45ba <Lcd_Init+0x3e0>
    45be:	98 8b       	std	Y+16, r25	; 0x10
    45c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_SendCMD(MODE);
    45c2:	86 e0       	ldi	r24, 0x06	; 6
    45c4:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	a0 e8       	ldi	r26, 0x80	; 128
    45ce:	bf e3       	ldi	r27, 0x3F	; 63
    45d0:	8b 87       	std	Y+11, r24	; 0x0b
    45d2:	9c 87       	std	Y+12, r25	; 0x0c
    45d4:	ad 87       	std	Y+13, r26	; 0x0d
    45d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45da:	7c 85       	ldd	r23, Y+12	; 0x0c
    45dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    45de:	9e 85       	ldd	r25, Y+14	; 0x0e
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	4a e7       	ldi	r20, 0x7A	; 122
    45e6:	55 e4       	ldi	r21, 0x45	; 69
    45e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	8f 83       	std	Y+7, r24	; 0x07
    45f2:	98 87       	std	Y+8, r25	; 0x08
    45f4:	a9 87       	std	Y+9, r26	; 0x09
    45f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45f8:	6f 81       	ldd	r22, Y+7	; 0x07
    45fa:	78 85       	ldd	r23, Y+8	; 0x08
    45fc:	89 85       	ldd	r24, Y+9	; 0x09
    45fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	40 e8       	ldi	r20, 0x80	; 128
    4606:	5f e3       	ldi	r21, 0x3F	; 63
    4608:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    460c:	88 23       	and	r24, r24
    460e:	2c f4       	brge	.+10     	; 0x461a <Lcd_Init+0x440>
		__ticks = 1;
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	9e 83       	std	Y+6, r25	; 0x06
    4616:	8d 83       	std	Y+5, r24	; 0x05
    4618:	3f c0       	rjmp	.+126    	; 0x4698 <Lcd_Init+0x4be>
	else if (__tmp > 65535)
    461a:	6f 81       	ldd	r22, Y+7	; 0x07
    461c:	78 85       	ldd	r23, Y+8	; 0x08
    461e:	89 85       	ldd	r24, Y+9	; 0x09
    4620:	9a 85       	ldd	r25, Y+10	; 0x0a
    4622:	20 e0       	ldi	r18, 0x00	; 0
    4624:	3f ef       	ldi	r19, 0xFF	; 255
    4626:	4f e7       	ldi	r20, 0x7F	; 127
    4628:	57 e4       	ldi	r21, 0x47	; 71
    462a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    462e:	18 16       	cp	r1, r24
    4630:	4c f5       	brge	.+82     	; 0x4684 <Lcd_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4632:	6b 85       	ldd	r22, Y+11	; 0x0b
    4634:	7c 85       	ldd	r23, Y+12	; 0x0c
    4636:	8d 85       	ldd	r24, Y+13	; 0x0d
    4638:	9e 85       	ldd	r25, Y+14	; 0x0e
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	40 e2       	ldi	r20, 0x20	; 32
    4640:	51 e4       	ldi	r21, 0x41	; 65
    4642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	bc 01       	movw	r22, r24
    464c:	cd 01       	movw	r24, r26
    464e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4652:	dc 01       	movw	r26, r24
    4654:	cb 01       	movw	r24, r22
    4656:	9e 83       	std	Y+6, r25	; 0x06
    4658:	8d 83       	std	Y+5, r24	; 0x05
    465a:	0f c0       	rjmp	.+30     	; 0x467a <Lcd_Init+0x4a0>
    465c:	80 e9       	ldi	r24, 0x90	; 144
    465e:	91 e0       	ldi	r25, 0x01	; 1
    4660:	9c 83       	std	Y+4, r25	; 0x04
    4662:	8b 83       	std	Y+3, r24	; 0x03
    4664:	8b 81       	ldd	r24, Y+3	; 0x03
    4666:	9c 81       	ldd	r25, Y+4	; 0x04
    4668:	01 97       	sbiw	r24, 0x01	; 1
    466a:	f1 f7       	brne	.-4      	; 0x4668 <Lcd_Init+0x48e>
    466c:	9c 83       	std	Y+4, r25	; 0x04
    466e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4670:	8d 81       	ldd	r24, Y+5	; 0x05
    4672:	9e 81       	ldd	r25, Y+6	; 0x06
    4674:	01 97       	sbiw	r24, 0x01	; 1
    4676:	9e 83       	std	Y+6, r25	; 0x06
    4678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    467a:	8d 81       	ldd	r24, Y+5	; 0x05
    467c:	9e 81       	ldd	r25, Y+6	; 0x06
    467e:	00 97       	sbiw	r24, 0x00	; 0
    4680:	69 f7       	brne	.-38     	; 0x465c <Lcd_Init+0x482>
    4682:	14 c0       	rjmp	.+40     	; 0x46ac <Lcd_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4684:	6f 81       	ldd	r22, Y+7	; 0x07
    4686:	78 85       	ldd	r23, Y+8	; 0x08
    4688:	89 85       	ldd	r24, Y+9	; 0x09
    468a:	9a 85       	ldd	r25, Y+10	; 0x0a
    468c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4690:	dc 01       	movw	r26, r24
    4692:	cb 01       	movw	r24, r22
    4694:	9e 83       	std	Y+6, r25	; 0x06
    4696:	8d 83       	std	Y+5, r24	; 0x05
    4698:	8d 81       	ldd	r24, Y+5	; 0x05
    469a:	9e 81       	ldd	r25, Y+6	; 0x06
    469c:	9a 83       	std	Y+2, r25	; 0x02
    469e:	89 83       	std	Y+1, r24	; 0x01
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	9a 81       	ldd	r25, Y+2	; 0x02
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	f1 f7       	brne	.-4      	; 0x46a4 <Lcd_Init+0x4ca>
    46a8:	9a 83       	std	Y+2, r25	; 0x02
    46aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Lcd_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    46ac:	8c e0       	ldi	r24, 0x0C	; 12
    46ae:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
	Lcd_SendCMD(SET_DDRAM_ADDR);
    46b2:	80 e8       	ldi	r24, 0x80	; 128
    46b4:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
}
    46b8:	ca 5b       	subi	r28, 0xBA	; 186
    46ba:	df 4f       	sbci	r29, 0xFF	; 255
    46bc:	0f b6       	in	r0, 0x3f	; 63
    46be:	f8 94       	cli
    46c0:	de bf       	out	0x3e, r29	; 62
    46c2:	0f be       	out	0x3f, r0	; 63
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	cf 91       	pop	r28
    46c8:	df 91       	pop	r29
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	08 95       	ret

000046d0 <Lcd_Clear>:
void Lcd_Clear(void){
    46d0:	df 93       	push	r29
    46d2:	cf 93       	push	r28
    46d4:	cd b7       	in	r28, 0x3d	; 61
    46d6:	de b7       	in	r29, 0x3e	; 62
Lcd_SendCMD(CLEAR);
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	0e 94 37 18 	call	0x306e	; 0x306e <Lcd_SendCMD>
}
    46de:	cf 91       	pop	r28
    46e0:	df 91       	pop	r29
    46e2:	08 95       	ret

000046e4 <Lcd_PutString>:


void Lcd_PutString (u8* str)
{
    46e4:	df 93       	push	r29
    46e6:	cf 93       	push	r28
    46e8:	00 d0       	rcall	.+0      	; 0x46ea <Lcd_PutString+0x6>
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
    46ee:	9a 83       	std	Y+2, r25	; 0x02
    46f0:	89 83       	std	Y+1, r24	; 0x01
    46f2:	0a c0       	rjmp	.+20     	; 0x4708 <Lcd_PutString+0x24>
	 while (*str !='\0'){
		Lcd_PutChar(*str);
    46f4:	e9 81       	ldd	r30, Y+1	; 0x01
    46f6:	fa 81       	ldd	r31, Y+2	; 0x02
    46f8:	80 81       	ld	r24, Z
    46fa:	0e 94 a4 20 	call	0x4148	; 0x4148 <Lcd_PutChar>
		str++;
    46fe:	89 81       	ldd	r24, Y+1	; 0x01
    4700:	9a 81       	ldd	r25, Y+2	; 0x02
    4702:	01 96       	adiw	r24, 0x01	; 1
    4704:	9a 83       	std	Y+2, r25	; 0x02
    4706:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_PutString (u8* str)
{
	 while (*str !='\0'){
    4708:	e9 81       	ldd	r30, Y+1	; 0x01
    470a:	fa 81       	ldd	r31, Y+2	; 0x02
    470c:	80 81       	ld	r24, Z
    470e:	88 23       	and	r24, r24
    4710:	89 f7       	brne	.-30     	; 0x46f4 <Lcd_PutString+0x10>
		Lcd_PutChar(*str);
		str++;
		}
}
    4712:	0f 90       	pop	r0
    4714:	0f 90       	pop	r0
    4716:	cf 91       	pop	r28
    4718:	df 91       	pop	r29
    471a:	08 95       	ret

0000471c <lcd4_disply_char_at_X_Y>:

void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    471c:	df 93       	push	r29
    471e:	cf 93       	push	r28
    4720:	00 d0       	rcall	.+0      	; 0x4722 <lcd4_disply_char_at_X_Y+0x6>
    4722:	0f 92       	push	r0
    4724:	cd b7       	in	r28, 0x3d	; 61
    4726:	de b7       	in	r29, 0x3e	; 62
    4728:	89 83       	std	Y+1, r24	; 0x01
    472a:	6a 83       	std	Y+2, r22	; 0x02
    472c:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoTo(row, col);
    472e:	8a 81       	ldd	r24, Y+2	; 0x02
    4730:	6b 81       	ldd	r22, Y+3	; 0x03
    4732:	0e 94 5f 20 	call	0x40be	; 0x40be <Lcd_GoTo>
	Lcd_SendData(data);
    4736:	89 81       	ldd	r24, Y+1	; 0x01
    4738:	0e 94 4b 1c 	call	0x3896	; 0x3896 <Lcd_SendData>
}
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	0f 90       	pop	r0
    4742:	cf 91       	pop	r28
    4744:	df 91       	pop	r29
    4746:	08 95       	ret

00004748 <Lcd_PutString_x_Y>:


void Lcd_PutString_x_Y(u8* data, u8 row, u8 col)
{
    4748:	df 93       	push	r29
    474a:	cf 93       	push	r28
    474c:	00 d0       	rcall	.+0      	; 0x474e <Lcd_PutString_x_Y+0x6>
    474e:	00 d0       	rcall	.+0      	; 0x4750 <Lcd_PutString_x_Y+0x8>
    4750:	cd b7       	in	r28, 0x3d	; 61
    4752:	de b7       	in	r29, 0x3e	; 62
    4754:	9a 83       	std	Y+2, r25	; 0x02
    4756:	89 83       	std	Y+1, r24	; 0x01
    4758:	6b 83       	std	Y+3, r22	; 0x03
    475a:	4c 83       	std	Y+4, r20	; 0x04
	Lcd_GoTo(row, col);
    475c:	8b 81       	ldd	r24, Y+3	; 0x03
    475e:	6c 81       	ldd	r22, Y+4	; 0x04
    4760:	0e 94 5f 20 	call	0x40be	; 0x40be <Lcd_GoTo>
	Lcd_PutString(data);
    4764:	89 81       	ldd	r24, Y+1	; 0x01
    4766:	9a 81       	ldd	r25, Y+2	; 0x02
    4768:	0e 94 72 23 	call	0x46e4	; 0x46e4 <Lcd_PutString>
}
    476c:	0f 90       	pop	r0
    476e:	0f 90       	pop	r0
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	cf 91       	pop	r28
    4776:	df 91       	pop	r29
    4778:	08 95       	ret

0000477a <LED4>:
#include "avr/delay.h"
#include "OS/OS_interface.h"


void LED4(void)
{
    477a:	df 93       	push	r29
    477c:	cf 93       	push	r28
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_4);
    4782:	84 e0       	ldi	r24, 0x04	; 4
    4784:	0e 94 23 17 	call	0x2e46	; 0x2e46 <Dio_FlipChannel>
}
    4788:	cf 91       	pop	r28
    478a:	df 91       	pop	r29
    478c:	08 95       	ret

0000478e <LED5>:

void LED5(void)
{
    478e:	df 93       	push	r29
    4790:	cf 93       	push	r28
    4792:	cd b7       	in	r28, 0x3d	; 61
    4794:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_5);
    4796:	85 e0       	ldi	r24, 0x05	; 5
    4798:	0e 94 23 17 	call	0x2e46	; 0x2e46 <Dio_FlipChannel>
}
    479c:	cf 91       	pop	r28
    479e:	df 91       	pop	r29
    47a0:	08 95       	ret

000047a2 <LED6>:


void LED6(void)
{
    47a2:	df 93       	push	r29
    47a4:	cf 93       	push	r28
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_6);
    47aa:	86 e0       	ldi	r24, 0x06	; 6
    47ac:	0e 94 23 17 	call	0x2e46	; 0x2e46 <Dio_FlipChannel>
}
    47b0:	cf 91       	pop	r28
    47b2:	df 91       	pop	r29
    47b4:	08 95       	ret

000047b6 <LED7>:

void LED7(void)
{
    47b6:	df 93       	push	r29
    47b8:	cf 93       	push	r28
    47ba:	cd b7       	in	r28, 0x3d	; 61
    47bc:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_7);
    47be:	87 e0       	ldi	r24, 0x07	; 7
    47c0:	0e 94 23 17 	call	0x2e46	; 0x2e46 <Dio_FlipChannel>
}
    47c4:	cf 91       	pop	r28
    47c6:	df 91       	pop	r29
    47c8:	08 95       	ret

000047ca <HW_Init>:

void HW_Init(void)
{
    47ca:	df 93       	push	r29
    47cc:	cf 93       	push	r28
    47ce:	cd b7       	in	r28, 0x3d	; 61
    47d0:	de b7       	in	r29, 0x3e	; 62
Port_Init(pin_cfg);
    47d2:	8d e7       	ldi	r24, 0x7D	; 125
    47d4:	91 e0       	ldi	r25, 0x01	; 1
    47d6:	0e 94 22 10 	call	0x2044	; 0x2044 <Port_Init>
GI_voidEnable();
    47da:	0e 94 68 13 	call	0x26d0	; 0x26d0 <GI_voidEnable>
}
    47de:	cf 91       	pop	r28
    47e0:	df 91       	pop	r29
    47e2:	08 95       	ret

000047e4 <main>:

int main() {
    47e4:	df 93       	push	r29
    47e6:	cf 93       	push	r28
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
HW_Init();
    47ec:	0e 94 e5 23 	call	0x47ca	; 0x47ca <HW_Init>
	OS_voidCreateTask(0,100,0,LED4);
    47f0:	2d eb       	ldi	r18, 0xBD	; 189
    47f2:	33 e2       	ldi	r19, 0x23	; 35
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	64 e6       	ldi	r22, 0x64	; 100
    47f8:	70 e0       	ldi	r23, 0x00	; 0
    47fa:	40 e0       	ldi	r20, 0x00	; 0
    47fc:	50 e0       	ldi	r21, 0x00	; 0
    47fe:	0e 94 a7 08 	call	0x114e	; 0x114e <OS_voidCreateTask>
	OS_voidCreateTask(0,200,100,LED5);
    4802:	27 ec       	ldi	r18, 0xC7	; 199
    4804:	33 e2       	ldi	r19, 0x23	; 35
    4806:	80 e0       	ldi	r24, 0x00	; 0
    4808:	68 ec       	ldi	r22, 0xC8	; 200
    480a:	70 e0       	ldi	r23, 0x00	; 0
    480c:	44 e6       	ldi	r20, 0x64	; 100
    480e:	50 e0       	ldi	r21, 0x00	; 0
    4810:	0e 94 a7 08 	call	0x114e	; 0x114e <OS_voidCreateTask>
	OS_voidCreateTask(1,300,150,LED6);
    4814:	21 ed       	ldi	r18, 0xD1	; 209
    4816:	33 e2       	ldi	r19, 0x23	; 35
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	6c e2       	ldi	r22, 0x2C	; 44
    481c:	71 e0       	ldi	r23, 0x01	; 1
    481e:	46 e9       	ldi	r20, 0x96	; 150
    4820:	50 e0       	ldi	r21, 0x00	; 0
    4822:	0e 94 a7 08 	call	0x114e	; 0x114e <OS_voidCreateTask>
	OS_voidCreateTask(1,200,150,LED7);
    4826:	2b ed       	ldi	r18, 0xDB	; 219
    4828:	33 e2       	ldi	r19, 0x23	; 35
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	68 ec       	ldi	r22, 0xC8	; 200
    482e:	70 e0       	ldi	r23, 0x00	; 0
    4830:	46 e9       	ldi	r20, 0x96	; 150
    4832:	50 e0       	ldi	r21, 0x00	; 0
    4834:	0e 94 a7 08 	call	0x114e	; 0x114e <OS_voidCreateTask>

	OS_voidStartScheduler();
    4838:	0e 94 ab 0a 	call	0x1556	; 0x1556 <OS_voidStartScheduler>
    483c:	ff cf       	rjmp	.-2      	; 0x483c <main+0x58>

0000483e <__mulsi3>:
    483e:	62 9f       	mul	r22, r18
    4840:	d0 01       	movw	r26, r0
    4842:	73 9f       	mul	r23, r19
    4844:	f0 01       	movw	r30, r0
    4846:	82 9f       	mul	r24, r18
    4848:	e0 0d       	add	r30, r0
    484a:	f1 1d       	adc	r31, r1
    484c:	64 9f       	mul	r22, r20
    484e:	e0 0d       	add	r30, r0
    4850:	f1 1d       	adc	r31, r1
    4852:	92 9f       	mul	r25, r18
    4854:	f0 0d       	add	r31, r0
    4856:	83 9f       	mul	r24, r19
    4858:	f0 0d       	add	r31, r0
    485a:	74 9f       	mul	r23, r20
    485c:	f0 0d       	add	r31, r0
    485e:	65 9f       	mul	r22, r21
    4860:	f0 0d       	add	r31, r0
    4862:	99 27       	eor	r25, r25
    4864:	72 9f       	mul	r23, r18
    4866:	b0 0d       	add	r27, r0
    4868:	e1 1d       	adc	r30, r1
    486a:	f9 1f       	adc	r31, r25
    486c:	63 9f       	mul	r22, r19
    486e:	b0 0d       	add	r27, r0
    4870:	e1 1d       	adc	r30, r1
    4872:	f9 1f       	adc	r31, r25
    4874:	bd 01       	movw	r22, r26
    4876:	cf 01       	movw	r24, r30
    4878:	11 24       	eor	r1, r1
    487a:	08 95       	ret

0000487c <__udivmodhi4>:
    487c:	aa 1b       	sub	r26, r26
    487e:	bb 1b       	sub	r27, r27
    4880:	51 e1       	ldi	r21, 0x11	; 17
    4882:	07 c0       	rjmp	.+14     	; 0x4892 <__udivmodhi4_ep>

00004884 <__udivmodhi4_loop>:
    4884:	aa 1f       	adc	r26, r26
    4886:	bb 1f       	adc	r27, r27
    4888:	a6 17       	cp	r26, r22
    488a:	b7 07       	cpc	r27, r23
    488c:	10 f0       	brcs	.+4      	; 0x4892 <__udivmodhi4_ep>
    488e:	a6 1b       	sub	r26, r22
    4890:	b7 0b       	sbc	r27, r23

00004892 <__udivmodhi4_ep>:
    4892:	88 1f       	adc	r24, r24
    4894:	99 1f       	adc	r25, r25
    4896:	5a 95       	dec	r21
    4898:	a9 f7       	brne	.-22     	; 0x4884 <__udivmodhi4_loop>
    489a:	80 95       	com	r24
    489c:	90 95       	com	r25
    489e:	bc 01       	movw	r22, r24
    48a0:	cd 01       	movw	r24, r26
    48a2:	08 95       	ret

000048a4 <__udivmodsi4>:
    48a4:	a1 e2       	ldi	r26, 0x21	; 33
    48a6:	1a 2e       	mov	r1, r26
    48a8:	aa 1b       	sub	r26, r26
    48aa:	bb 1b       	sub	r27, r27
    48ac:	fd 01       	movw	r30, r26
    48ae:	0d c0       	rjmp	.+26     	; 0x48ca <__udivmodsi4_ep>

000048b0 <__udivmodsi4_loop>:
    48b0:	aa 1f       	adc	r26, r26
    48b2:	bb 1f       	adc	r27, r27
    48b4:	ee 1f       	adc	r30, r30
    48b6:	ff 1f       	adc	r31, r31
    48b8:	a2 17       	cp	r26, r18
    48ba:	b3 07       	cpc	r27, r19
    48bc:	e4 07       	cpc	r30, r20
    48be:	f5 07       	cpc	r31, r21
    48c0:	20 f0       	brcs	.+8      	; 0x48ca <__udivmodsi4_ep>
    48c2:	a2 1b       	sub	r26, r18
    48c4:	b3 0b       	sbc	r27, r19
    48c6:	e4 0b       	sbc	r30, r20
    48c8:	f5 0b       	sbc	r31, r21

000048ca <__udivmodsi4_ep>:
    48ca:	66 1f       	adc	r22, r22
    48cc:	77 1f       	adc	r23, r23
    48ce:	88 1f       	adc	r24, r24
    48d0:	99 1f       	adc	r25, r25
    48d2:	1a 94       	dec	r1
    48d4:	69 f7       	brne	.-38     	; 0x48b0 <__udivmodsi4_loop>
    48d6:	60 95       	com	r22
    48d8:	70 95       	com	r23
    48da:	80 95       	com	r24
    48dc:	90 95       	com	r25
    48de:	9b 01       	movw	r18, r22
    48e0:	ac 01       	movw	r20, r24
    48e2:	bd 01       	movw	r22, r26
    48e4:	cf 01       	movw	r24, r30
    48e6:	08 95       	ret

000048e8 <__prologue_saves__>:
    48e8:	2f 92       	push	r2
    48ea:	3f 92       	push	r3
    48ec:	4f 92       	push	r4
    48ee:	5f 92       	push	r5
    48f0:	6f 92       	push	r6
    48f2:	7f 92       	push	r7
    48f4:	8f 92       	push	r8
    48f6:	9f 92       	push	r9
    48f8:	af 92       	push	r10
    48fa:	bf 92       	push	r11
    48fc:	cf 92       	push	r12
    48fe:	df 92       	push	r13
    4900:	ef 92       	push	r14
    4902:	ff 92       	push	r15
    4904:	0f 93       	push	r16
    4906:	1f 93       	push	r17
    4908:	cf 93       	push	r28
    490a:	df 93       	push	r29
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
    4910:	ca 1b       	sub	r28, r26
    4912:	db 0b       	sbc	r29, r27
    4914:	0f b6       	in	r0, 0x3f	; 63
    4916:	f8 94       	cli
    4918:	de bf       	out	0x3e, r29	; 62
    491a:	0f be       	out	0x3f, r0	; 63
    491c:	cd bf       	out	0x3d, r28	; 61
    491e:	09 94       	ijmp

00004920 <__epilogue_restores__>:
    4920:	2a 88       	ldd	r2, Y+18	; 0x12
    4922:	39 88       	ldd	r3, Y+17	; 0x11
    4924:	48 88       	ldd	r4, Y+16	; 0x10
    4926:	5f 84       	ldd	r5, Y+15	; 0x0f
    4928:	6e 84       	ldd	r6, Y+14	; 0x0e
    492a:	7d 84       	ldd	r7, Y+13	; 0x0d
    492c:	8c 84       	ldd	r8, Y+12	; 0x0c
    492e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4930:	aa 84       	ldd	r10, Y+10	; 0x0a
    4932:	b9 84       	ldd	r11, Y+9	; 0x09
    4934:	c8 84       	ldd	r12, Y+8	; 0x08
    4936:	df 80       	ldd	r13, Y+7	; 0x07
    4938:	ee 80       	ldd	r14, Y+6	; 0x06
    493a:	fd 80       	ldd	r15, Y+5	; 0x05
    493c:	0c 81       	ldd	r16, Y+4	; 0x04
    493e:	1b 81       	ldd	r17, Y+3	; 0x03
    4940:	aa 81       	ldd	r26, Y+2	; 0x02
    4942:	b9 81       	ldd	r27, Y+1	; 0x01
    4944:	ce 0f       	add	r28, r30
    4946:	d1 1d       	adc	r29, r1
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	f8 94       	cli
    494c:	de bf       	out	0x3e, r29	; 62
    494e:	0f be       	out	0x3f, r0	; 63
    4950:	cd bf       	out	0x3d, r28	; 61
    4952:	ed 01       	movw	r28, r26
    4954:	08 95       	ret

00004956 <_exit>:
    4956:	f8 94       	cli

00004958 <__stop_program>:
    4958:	ff cf       	rjmp	.-2      	; 0x4958 <__stop_program>
